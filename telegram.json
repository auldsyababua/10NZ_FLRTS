[
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/mtproto",
      "title": "MTProto Mobile Protocol",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "MTProto Mobile Protocol"
        },
        {
          "property": "og:image",
          "content": "58401119934796773c"
        },
        {
          "property": "og:description",
          "content": "Please feel free to check out our FAQ for the Technically Inclined.\nClient developers are required to comply with the Security\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:06:32 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5620",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# MTProto Mobile Protocol\n\n> Please feel free to check out our [FAQ for the Technically Inclined](http://core.telegram.org/techfaq).  \n> Client developers are required to comply with the [Security Guidelines](https://core.telegram.org/mtproto/security_guidelines).\n\n### [](#related-articles)Related articles\n\n* * *\n\nThis page deals with the basic layer of MTProto encryption used for Cloud chats (server-client encryption). See also:\n\n*   [Secret Chats, end-to-end-encryption](https://core.telegram.org/api/end-to-end)\n*   [End-to-end encrypted Voice Calls](https://core.telegram.org/api/end-to-end/video-calls)\n\n### [](#general-description)General Description\n\nThe protocol is designed for access to a server API from applications running on mobile devices. It must be emphasized that a web browser is not such an application.\n\nThe protocol is subdivided into three virtually independent components:\n\n*   High-level component (API query language): defines the method whereby API queries and responses are converted to binary _messages_.\n*   Cryptographic (authorization) layer: defines the method by which messages are encrypted prior to being transmitted through the transport protocol.\n*   Transport component: defines the method for the client and the server to transmit messages over some other existing network protocol (such as HTTP, HTTPS, WS (plain WebSockets), WSS (WebSockets over HTTPS), TCP, UDP).\n\n[![MTProto 2.0, server-client encryption, cloud chats](https://core.telegram.org/file/811140746/2/CzMyJPVnPo8.81605/c2310d6ede1a5e220f)](https://core.telegram.org/file/811140746/2/CzMyJPVnPo8.81605/c2310d6ede1a5e220f)\n\n> As of version 4.6, major Telegram clients are using **MTProto 2.0**, described in this article.  \n> MTProto v1.0 ([described here](https://core.telegram.org/mtproto_v1) for reference) is deprecated and is currently being phased out.\n\n### [](#brief-component-summary)Brief Component Summary\n\n#### [](#high-level-component-rpc-query-language-api)High-Level Component (RPC Query Language/API)\n\nFrom the standpoint of the high-level component, the client and the server exchange _messages_ inside a _session_. The session is attached to the client device (the application, to be more exact) rather than a specific WebSocket/http/https/tcp connection. In addition, each session is attached to a _user key ID_ by which authorization is actually accomplished.\n\nSeveral connections to a server may be open; messages may be sent in either direction through any of the connections (a response to a query is not necessarily returned through the same connection that carried the original query, although most often, that is the case; however, in no case can a message be returned through a connection belonging to a different session). When the UDP protocol is used, a response might be returned by a different IP address than the one to which the query had been sent.\n\nThere are several types of messages:\n\n*   RPC calls (client to server): calls to API methods\n*   RPC responses (server to client): results of RPC calls\n*   Message received acknowledgment (or rather, notification of status of a set of messages)\n*   Message status query\n*   _Multipart message_ or _container_ (a container that holds several messages; needed to send several RPC calls at once over an HTTP connection, for example; also, a container may support gzip).\n\nFrom the standpoint of lower level protocols, a message is a binary data stream aligned along a 4 or 16-byte boundary. The first several fields in the message are fixed and are used by the cryptographic/authorization system.\n\nEach message, either individual or inside a container, consists of a _message identifier_ (64 bits, see below), a _message sequence number within a session_ (32 bits), the _length_ (of the message body in bytes; 32 bits), and a _body_ (any size which is a multiple of 4 bytes). In addition, when a container or a single message is sent, an _internal header_ is added at the top (see below), then the entire message is encrypted, and an _external header_ is placed at the top of the message (a 64-bit _key identifier_ and a 128-bit _message key_).\n\nA _message body_ normally consists of a 32-bit _message type_ followed by type-dependent _parameters_. In particular, each RPC function has a corresponding message type. For more detail, see [Binary Data Serialization](https://core.telegram.org/mtproto/serialize), [Mobile Protocol: Service Messages](https://core.telegram.org/mtproto/service_messages).\n\nAll numbers are written as little endian. However, very large numbers (2048-bit or `pq`, `p`, `q` params) used in RSA and DH are written in the big endian format because that is how the OpenSSL library does it.\n\n#### [](#authorization-and-encryption)Authorization and Encryption\n\nPrior to a message (or a multipart message) being transmitted over a network using a transport protocol, it is encrypted in a certain way, and an _external header_ is added at the top of the message which is: a 64-bit _key identifier_ (that uniquely identifies an _authorization key_ for the server as well as the _user_) and a 128-bit _message key_. A user key together with the message key defines an actual 256-bit key which is what encrypts the message using AES-256 encryption. Note that the initial part of the message to be encrypted contains variable data (session, message ID, sequence number, server salt) that obviously influences the message key (and thus the AES key and iv). The message key is defined as the 128 middle bits of the SHA256 of the message body (including session, message ID, etc.), including the padding bytes, prepended by 32 bytes taken from the authorization key. Multipart messages are encrypted as a single message.\n\n> For a technical specification, see [Mobile Protocol: Detailed Description](https://core.telegram.org/mtproto/description)\n\nThe first thing a client application must do is [create an authorization key](https://core.telegram.org/mtproto/auth_key) which is normally generated when it is first run and almost never changes.\n\nTo prevent attackers potentially intercepting encrypted messages from decrypting them _post factum_ by somehow appropriating the authorization key (for example, by stealing a device \u2013 even though in that case one could also gain access to all the information cached on the device without decrypting anything), MTProto supports [Perfect Forward Secrecy](https://core.telegram.org/api/pfs) in both [cloud chats](https://core.telegram.org/api/pfs) and [secret chats](https://core.telegram.org/api/end-to-end/pfs).\n\n#### [](#time-synchronization)Time Synchronization\n\nIf client time diverges widely from server time, a server may start ignoring client messages, or vice versa, because of an invalid message identifier (which is closely related to creation time). Under these circumstances, the server will send the client a special message containing the correct time and a certain 128-bit salt (either explicitly provided by the client in a special RPC synchronization request or equal to the key of the latest message received from the client during the current session). This message could be the first one in a container that includes other messages (if the time discrepancy is significant but does not as yet result in the client's messages being ignored).\n\nHaving received such a message or a container holding it, the client first performs a time synchronization (in effect, simply storing the difference between the server's time and its own to be able to compute the \u201ccorrect\u201d time in the future) and then verifies the message identifiers for correctness.\n\nWhere a correction has been neglected, the client will have to generate a new session to assure the monotonicity of message identifiers.\n\n### [](#mtproto-transport)MTProto transport\n\nBefore being sent using the selected transport protocol, the payload has to be wrapped in a secondary protocol header, defined by the appropriate MTProto transport protocol.\n\n*   [Abridged](https://core.telegram.org/mtproto/mtproto-transports#abridged)\n*   [Intermediate](https://core.telegram.org/mtproto/mtproto-transports#intermediate)\n*   [Padded intermediate](https://core.telegram.org/mtproto/mtproto-transports#padded-intermediate)\n*   [Full](https://core.telegram.org/mtproto/mtproto-transports#full)\n\nThe server recognizes these different protocols (and distinguishes them from HTTP, too) by the header.  \nAdditionally, the following transport features can be used:\n\n*   [Quick ack](https://core.telegram.org/mtproto/mtproto-transports#quick-ack)\n*   [Transport errors](https://core.telegram.org/mtproto/mtproto-transports#transport-errors)\n*   [Transport obfuscation](https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation)\n\nExample implementations for these protocols can be seen in [tdlib](https://github.com/tdlib/td/blob/master/td/mtproto/TcpTransport.cpp) and [MadelineProto](https://github.com/danog/MadelineProto/tree/v8/src/Stream/MTProtoTransport).\n\n### [](#transport)Transport\n\nEnables the delivery of encrypted containers together with the external header (hereinafter, _Payload_) from client to server and back.  \nMultiple transport protocols are defined:\n\n*   [TCP](https://core.telegram.org/mtproto/transports#tcp)\n*   [WebSocket](https://core.telegram.org/mtproto/transports#websocket)\n*   [WebSocket over HTTPS](https://core.telegram.org/mtproto/transports#websocket-over-https)\n*   [HTTP](https://core.telegram.org/mtproto/transports#http)\n*   [HTTPS](https://core.telegram.org/mtproto/transports#https)\n*   UDP\n\n(We shall examine only the first five types.)\n\n### [](#recap)Recap\n\nTo recap, using the [ISO/OSI stack as comparison](https://en.wikipedia.org/wiki/OSI_model#Layer_architecture):\n\n*   Layer 7 (Application): [High-level RPC API](#high-level-component-rpc-query-language-api)\n*   Layer 6 (Presentation): [Type Language](https://core.telegram.org/mtproto/TL)\n*   Layer 5 (Session): [MTProto session](https://core.telegram.org/mtproto/description#session)\n*   Layer 4 (Transport):\n    *   4.3: [MTProto transport protocol](#mtproto-transport)\n    *   4.2: [MTProto obfuscation (optional)](https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation)\n    *   4.1: [Transport protocol](#transport)\n*   Layer 3 (Network): IP\n*   Layer 2 (Data link): MAC/LLC\n*   Layer 1 (Physical): IEEE 802.3, IEEE 802.11, etc\u2026",
    "url": "https://core.telegram.org/mtproto"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api",
      "title": "Telegram APIs",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Telegram APIs"
        },
        {
          "property": "og:image",
          "content": "df8a0f9162ddfc1daf"
        },
        {
          "property": "og:description",
          "content": "We offer three kinds of APIs for developers. The Bot API allows you to easily create programs that use Telegram messages\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:06:34 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "9661",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Telegram APIs\n\nWe offer three kinds of APIs for developers. The [**Bot API**](#bot-api) allows you to easily create programs that use Telegram messages for an interface. The [**Telegram API and TDLib**](#tdlib-build-your-own-telegram) allow you to build your own customized Telegram clients. You are welcome to use both APIs free of charge. Lastly, the [**Gateway API**](#gateway-api) allows any business, app or website to send verification codes through Telegram instead of traditional SMS.\n\nYou can also add [**Telegram Widgets**](https://core.telegram.org/widgets) to your website.\n\nDesigners are welcome to create [**Animated Stickers and Emoji**](https://core.telegram.org/stickers#animated-stickers-and-emoji) or [**Custom Themes**](https://core.telegram.org/themes) for Telegram.\n\n* * *\n\n### [](#bot-api)Bot API\n\n[![](https://core.telegram.org/file/811140934/1/tbDSLHSaijc/fdcc7b6d5fb3354adf \"The Botfather. Click for hi-res picture\")](https://core.telegram.org/file/811140327/1/zlN4goPTupk/9ff2f2f01c4bd1b013)\n\nThis API allows you to connect bots to our system. [**Telegram Bots**](https://core.telegram.org/bots) are special accounts that do not require an additional phone number to set up. These accounts serve as an interface for code running somewhere on your server.\n\nTo use this, you don't need to know anything about how our MTProto encryption protocol works \u2014 our intermediary server will handle all encryption and communication with the Telegram API for you. You communicate with this server via a simple HTTPS-interface that offers a simplified version of the Telegram API.\n\n> [**Learn more about the Bot API here \u00bb**](https://core.telegram.org/bots)\n\nBot developers can also make use of our [**Payments API**](https://core.telegram.org/bots/payments) to accept **payments** from Telegram users around the world.\n\n* * *\n\n### [](#tdlib-build-your-own-telegram)TDLib \u2013 build your own Telegram\n\nEven if you're looking for maximum customization, you don't have to create your app from scratch. Try our [**Telegram Database Library**](https://core.telegram.org/tdlib) (or simply TDLib), a tool for third-party developers that makes it easy to build fast, secure and feature-rich Telegram apps.\n\nTDLib takes care of all **network implementation** details, **encryption** and **local data storage**, so that you can dedicate more time to design, responsive interfaces and beautiful animations.\n\nTDLib supports all Telegram features and makes developing Telegram apps a breeze on any platform. It can be used on Android, iOS, Windows, macOS, Linux and virtually any other system. The library is open source and compatible with virtually **any programming language**.\n\n> [**Learn more about TDLib here \u00bb**](https://core.telegram.org/tdlib)\n\n* * *\n\n## [](#gateway-api)Gateway API\n\nThe Telegram Gateway API allows any business, app or website to send authorization codes through Telegram instead of traditional SMS \u2013 offering a powerful and convenient way to **lower costs** while increasing the **security** and **delivery speed** of your codes to Telegram\u2019s 1 billion monthly active users. Users will **instantly receive** messages with codes in a special chat inside Telegram.\n\n> [**Telegram's Gateway API is completely free to test. Learn more here \u00bb**](https://core.telegram.org/gateway)\n\n* * *\n\n### [](#telegram-api)Telegram API\n\nThis API allows you to build your own customized Telegram clients. It is 100% open for all developers who wish to create Telegram applications on our platform. Feel free to study the open [source code](https://telegram.org/apps#source-code) of existing Telegram applications for examples of how things work here. Don't forget to [register](https://core.telegram.org/api/obtaining_api_id) your application in our system.\n\n*   [Getting Started](#getting-started)\n*   [Security](#security)\n*   [Optimization](#optimization)\n*   [API methods](#api-methods)\n\n### [](#getting-started)Getting started\n\n#### [](#creating-an-application)[Creating an application](https://core.telegram.org/api/obtaining_api_id)\n\nHow to get your application identifier and create a new Telegram app.\n\n#### [](#user-authorization)[User authorization](https://core.telegram.org/api/auth)\n\nHow to register a user's phone to start using the API.\n\n#### [](#two-factor-authentication)[Two-factor authentication](https://core.telegram.org/api/srp)\n\nHow to login to a user's account if they have enabled 2FA, how to change password.\n\n#### [](#qr-code-login)[QR code login](https://core.telegram.org/api/qr-login)\n\n[QR code](https://en.wikipedia.org/wiki/QR_code) login flow\n\n#### [](#error-handling)[Error handling](https://core.telegram.org/api/errors)\n\nHow to handle API return errors correctly.\n\n#### [](#handling-different-data-centers)[Handling different data centers](https://core.telegram.org/api/datacenter)\n\nHow to connect to the closest DC access point for faster interaction with the API, and things to watch out for when developing a client.\n\n#### [](#handling-updates)[Handling updates](https://core.telegram.org/api/updates)\n\nHow to subscribe to updates and handle them properly.\n\n#### [](#handling-push-notifications)[Handling PUSH-notifications](https://core.telegram.org/api/push-updates)\n\nHow to subscribe and handle them properly.\n\n#### [](#channels-supergroups-gigagroups-and-basic-groups)[Channels, supergroups, gigagroups and basic groups](https://core.telegram.org/api/channel)\n\nHow to handle channels, supergroups, gigagroups, basic groups, and what's the difference between them.\n\n#### [](#forums)[Forums](https://core.telegram.org/api/forum)\n\nTelegram allows creating forums with multiple distinct topics.\n\n#### [](#channel-statistics)[Channel statistics](https://core.telegram.org/api/stats)\n\nTelegram offers detailed channel statistics for channels and supergroups.\n\n#### [](#calling-methods)[Calling methods](https://core.telegram.org/api/invoking)\n\nAdditional options for calling methods.\n\n#### [](#uploading-and-downloading-files)[Uploading and Downloading Files](https://core.telegram.org/api/files)\n\nHow to transfer large data batches correctly.\n\n#### [](#pagination)[Pagination](https://core.telegram.org/api/offsets)\n\nHow to fetch results from large lists of objects.\n\n#### [](#client-configuration)[Client configuration](https://core.telegram.org/api/config)\n\nThe MTProto API has multiple client configuration parameters that can be fetched with the appropriate methods.\n\n### [](#security)Security\n\n#### [](#secret-chats-end-to-end-encryption)[Secret chats, end-to-end encryption](https://core.telegram.org/api/end-to-end)\n\nEnd-to-end-encrypted messaging.\n\n#### [](#security-guidelines)[Security guidelines](https://core.telegram.org/mtproto/security_guidelines)\n\nImportant checks required in your client application.\n\n#### [](#perfect-forward-secrecy)[Perfect Forward Secrecy](https://core.telegram.org/api/pfs)\n\nBinding temporary authorization key to permanent ones.\n\n#### [](#end-to-end-encryption-in-voice-and-video-calls)[End-to-End Encryption in Voice and Video Calls](https://core.telegram.org/api/end-to-end/video-calls)\n\nEnd-to-end-encrypted calls.\n\n### [](#optimization)Optimization\n\n#### [](#client-optimization)[Client optimization](https://core.telegram.org/api/optimisation)\n\nWays to boost API interactions.\n\n### [](#api-methods)API methods\n\n#### [](#available-method-list)[Available method list](https://core.telegram.org/methods)\n\nA list of available high-level methods.\n\n#### [](#api-tl-schema-as-json)[API TL-schema](https://core.telegram.org/schema), [as JSON](https://core.telegram.org/schema/json)\n\nText and JSON-presentation of types and methods used in API.\n\n#### [](#available-layer-list)[Available layer list](https://core.telegram.org/api/layers)\n\nA list of available schema versions.\n\n### [](#other-articles)Other articles\n\n#### [](#working-with-bots-using-the-mtproto-api)[Working with bots, using the MTProto API](https://core.telegram.org/api/bots)\n\nHow to work with bots using the MTProto API.\n\n#### [](#commands)[Commands](https://core.telegram.org/api/bots/commands)\n\n[Bots](https://core.telegram.org/bots) offer a set of commands that can be used by users in private, or in a chat.\n\n#### [](#buttons)[Buttons](https://core.telegram.org/api/bots/buttons)\n\nUsers can interact with your bot via **buttons** or even **inline buttons**, straight from inline **messages** in **any** chat.\n\n#### [](#menu-button)[Menu button](https://core.telegram.org/api/bots/menu)\n\nBots can choose the behavior of the menu button shown next to the text input field.\n\n#### [](#inline-queries)[Inline queries](https://core.telegram.org/api/bots/inline)\n\nUsers can interact with your bot via **inline queries**, straight from the **text input field** in **any** chat.\n\n#### [](#games)[Games](https://core.telegram.org/api/bots/games)\n\nBots can offer users HTML5 games to play solo or to compete against each other in groups and one-on-one chats; how to work with games in the MTProto API.\n\n#### [](#mini-apps)[Mini apps](https://core.telegram.org/api/bots/webapps)\n\nBots can offer users interactive [HTML5 mini apps](https://core.telegram.org/bots/webapps) to completely replace **any website**.\n\n#### [](#affiliate-programs)[Affiliate programs](https://core.telegram.org/api/bots/referrals)\n\nDevelopers can open affiliate programs for their [mini app](https://core.telegram.org/api/bots/webapps) \u2013 allowing **content creators**, other **mini app developers** and **any Telegram user** to promote it and earn commissions on purchases made by people they referred.\n\n#### [](#attachment-menu)[Attachment menu](https://core.telegram.org/api/bots/attach)\n\nBots can install attachment menu entries, offering conveniently accessible, versatile mini apps.\n\n#### [](#stories)[Stories](https://core.telegram.org/api/stories)\n\nTelegram users and channels can easily post and view [stories](https://telegram.org/blog/stories) through the API.\n\n#### [](#similar-channels)[Similar channels](https://core.telegram.org/api/recommend)\n\nThe API offers a method to obtain a list of similarly themed public channels, selected based on similarities in their **subscriber bases**.\n\n#### [](#accent-colors)[Accent colors](https://core.telegram.org/api/colors)\n\nTelegram users and channels can change the accent color and background pattern of their profile page and their messages!\n\n#### [](#privacy-settings)[Privacy settings](https://core.telegram.org/api/privacy)\n\nTelegram allows users to specify granular privacy settings, choosing which users can or can't interact with them in certain ways.\n\n#### [](#search-amp-filters)[Search & filters](https://core.telegram.org/api/search)\n\nTelegram allows applying detailed message filters while looking for messages in chats.  \nThis allows the server to filter messages based on a text query, and even on their type, and this feature is often used by graphical clients to implement features like the chat gallery, chat profile pictures and more.\n\n#### [](#polls)[Polls](https://core.telegram.org/api/poll)\n\nTelegram allows sending polls and quizzes, that can be voted on by thousands, if not millions of users in chats and channels.\n\n#### [](#reactions)[Reactions](https://core.telegram.org/api/reactions)\n\nTelegram allows users to react on any message using specific emojis, triggering cute lottie animations.\n\n#### [](#animated-message-effects)[Animated message effects](https://core.telegram.org/api/effects)\n\nTelegram allows adding spectacular animated effects to messages you send.\n\n#### [](#emoji-categories)[Emoji categories](https://core.telegram.org/api/emoji-categories)\n\nSticker, custom emoji and GIF selection UIs should offer a list of categories to quickly filter results by a (list of) emojis, or by some other criteria.\n\n#### [](#emoji-status)[Emoji status](https://core.telegram.org/api/emoji-status)\n\nTelegram allows users to set an emoticon or a [custom emoji](https://core.telegram.org/api/custom-emoji) as status, to show next to their name in chats and profiles.\n\n#### [](#invite-links-and-join-requests)[Invite links and join requests](https://core.telegram.org/api/invites)\n\nChannels, basic groups and supergroups may have a public username or a private invite link: private invite links may be further enhanced with per-user join requests.\n\n#### [](#admin-banned-and-default-rights-for-channels-supergroups-and-gro)[Admin, banned and default rights for channels, supergroups and groups](https://core.telegram.org/api/rights)\n\nHow to handle admin permissions, granular bans and global permissions in channels, groups and supergroups.\n\n#### [](#discussion-groups)[Discussion groups](https://core.telegram.org/api/discussion)\n\n[Groups](https://core.telegram.org/api/channel) can be associated to a [channel](https://core.telegram.org/api/channel) as a [discussion group](https://telegram.org/blog/privacy-discussions-web-bots), to allow users to discuss about posts.\n\n#### [](#channel-comments-and-message-threads)[Channel comments and message threads](https://core.telegram.org/api/threads)\n\nTelegram allows commenting on a [channel post](https://core.telegram.org/api/channel) or on a generic [group message](https://core.telegram.org/api/channel), thanks to message threads.\n\n#### [](#admin-log)[Admin log](https://core.telegram.org/api/recent-actions)\n\nBoth supergroups and channels offer a so-called [admin log](https://telegram.org/blog/admin-revolution), a log of recent relevant supergroup and channel actions, like the modification of group/channel settings or information on behalf of an admin, user kicks and bans, and more.\n\n#### [](#pinned-messages)[Pinned messages](https://core.telegram.org/api/pin)\n\nTelegram allows pinning multiple messages on top of a specific chat.\n\n#### [](#mentions)[Mentions](https://core.telegram.org/api/mentions)\n\nTelegram allows mentioning other users in case of urgent duckling matters, and quickly navigating to those mentions in order to read them as swiftly as possible.\n\n#### [](#scheduled-messages)[Scheduled messages](https://core.telegram.org/api/scheduled-messages)\n\nTelegram allows scheduling messages.\n\n#### [](#live-geolocations)[Live geolocations](https://core.telegram.org/api/live-location)\n\nTelegram allows sending the live geolocation of a user in a chat, optionally setting a proximity alert.\n\n### [](#peer-database)[Peer database](https://core.telegram.org/api/peers)\n\nHow to work with peer information in the API.\n\n#### [](#min-constructors)[Min constructors](https://core.telegram.org/api/min)\n\nSometimes, [user](https://core.telegram.org/constructor/user) and [channel](https://core.telegram.org/constructor/channel) constructors met in group chat updates may not contain full info about the user: how to handle such constructors.\n\n#### [](#account-deletion)[Account deletion](https://core.telegram.org/api/account-deletion)\n\nHow to delete a Telegram account.\n\n#### [](#imported-messages)[Imported messages](https://core.telegram.org/api/import)\n\nTelegram allows importing messages and media from foreign chat apps.\n\n#### [](#telegram-passport)[Telegram Passport](https://core.telegram.org/api/passport)\n\nHow to work with [Telegram Passport](https://core.telegram.org/api/passport) directly using the MTProto API.\n\n#### [](#telegram-payments)[Telegram Payments](https://core.telegram.org/api/payments)\n\nHow to work with Telegram Payments directly using the MTProto API.\n\n#### [](#styled-text-with-message-entities)[Styled text with message entities](https://core.telegram.org/api/entities)\n\nHow to create styled text with message entities\n\n#### [](#working-with-gifs)[Working with GIFs](https://core.telegram.org/api/gifs)\n\nTelegram clients support displaying GIFs.\n\n#### [](#working-with-stickers)[Working with stickers](https://core.telegram.org/api/stickers)\n\nTelegram clients support displaying animated, static and video stickers.\n\n#### [](#working-with-custom-emojis)[Working with custom emojis](https://core.telegram.org/api/custom-emoji)\n\nTelegram allows including custom animated, static and video emojis directly inside of messages.\n\n#### [](#working-with-animated-emojis)[Working with animated emojis](https://core.telegram.org/api/animated-emojis)\n\nGraphical telegram clients should transform emojis into their respective animated version.\n\n#### [](#working-with-animated-dice)[Working with animated dice](https://core.telegram.org/api/dice)\n\nTelegram supports sending [animated dice](https://telegram.org/blog/folders#and-one-more-thing) emojis.\n\n#### [](#message-drafts)[Message drafts](https://core.telegram.org/api/drafts)\n\nHow to handle message drafts\n\n#### [](#folders)[Folders](https://core.telegram.org/api/folders)\n\nWorking with folders\n\n#### [](#top-peer-rating)[Top peer rating](https://core.telegram.org/api/top-rating)\n\nIf [enabled](https://core.telegram.org/method/contacts.toggleTopPeers), the rating of [top peers](https://core.telegram.org/constructor/topPeer) indicates the relevance of a frequently used peer in a certain [category](https://core.telegram.org/type/TopPeerCategory) (frequently messaged users, frequently used bots, inline bots, frequently visited channels and so on).\n\n#### [](#handling-file-references)[Handling file references](https://core.telegram.org/api/file_reference)\n\nHow to handle file references.\n\n#### [](#seamless-telegram-login)[Seamless Telegram Login](https://core.telegram.org/api/url-authorization)\n\nHandle Seamless Telegram Login URL authorization requests.\n\n#### [](#wallpapers)[Wallpapers](https://core.telegram.org/api/wallpapers)\n\nHow to work with chat backgrounds.\n\n#### [](#notification-sounds)[Notification sounds](https://core.telegram.org/api/ringtones)\n\nHow to work with chat notification sounds.\n\n#### [](#message-transcription)[Message transcription](https://core.telegram.org/api/transcribe)\n\nHow to transcribe voice messages.\n\n#### [](#message-translation)[Message translation](https://core.telegram.org/api/translation)\n\nTelegram allows translating chat messages, and [Telegram Premium](https://core.telegram.org/api/premium) users may even enable real-time chat translation.\n\n#### [](#native-antispam-system)[Native antispam system](https://core.telegram.org/api/antispam)\n\nAdmins of supergroups with a certain number of members can choose to unleash the full proactive power of Telegram's own antispam algorithms \u2013 turning on the new Aggressive mode for the automated spam filters.\n\n#### [](#collectibles)[Collectibles](https://core.telegram.org/api/fragment)\n\nTelegram users can make it easy for others to contact them or find their public groups and channels via [usernames](https://telegram.org/faq#usernames-and-t-me): clients can also assign multiple [Fragment\u00a0\u00bb](https://fragment.com/) **collectible usernames** to accounts, supergroups and channels they own; [Fragment\u00a0\u00bb](https://fragment.com/) also allows purchasing phone number collectibles that can be used to register Telegram accounts.\n\n#### [](#telegram-premium)[Telegram Premium](https://core.telegram.org/api/premium)\n\nTelegram Premium is an optional subscription service that unlocks additional exclusive client-side and API-side features, while helping support the development of the app. It is a part of Telegram\u2019s **sustainable monetization** \u2013 driven by our users, rather than advertisers or shareholders. This way, Telegram can remain independent and prioritize its users first.\n\n#### [](#telegram-business)[Telegram Business](https://core.telegram.org/api/business)\n\nUsers can turn their Telegram account into a **business account**, gaining access to business features such as opening hours, location, quick replies, automated messages, custom start page, chatbot support, and more.\n\nFor the moment, all Telegram Business features are available for free to [Telegram Premium](https://core.telegram.org/api/premium) subscribers.\n\n#### [](#telegram-stars)[Telegram Stars](https://core.telegram.org/api/stars)\n\nTelegram Stars are virtual items that allow users to purchase digital goods and services from bots and mini apps inside the Telegram ecosystem, send gifts to content creators on the Telegram platform, and more.\n\n#### [](#subscriptions)[Subscriptions](https://core.telegram.org/api/subscriptions)\n\nBots and channels may create subscriptions, periodically charging users a certain amount of [Telegram Stars](https://core.telegram.org/api/stars) in exchange for content and services.\n\n#### [](#gifts)[Gifts](https://core.telegram.org/api/gifts)\n\nUsers can send **Gifts** to their friends. The recipients of gifts can display them on their profile pages or turn them into [Telegram Stars \u00bb](https://core.telegram.org/api/stars). Telegram Stars can be used for many things, including supporting creators and buying services in mini apps.\n\n#### [](#paid-media)[Paid media](https://core.telegram.org/api/paid-media)\n\nContent creators can accept [Stars](https://core.telegram.org/api/stars) by publishing **paid photos or videos** on their channels. Subscribers will be allowed to view such posts only after paying the author to unlock them.\n\n#### [](#channel-and-supergroup-boosts)[Channel and supergroup boosts](https://core.telegram.org/api/boost)\n\n[Telegram Premium](https://core.telegram.org/api/premium) users can grant their favorite channels additional features like the ability to post [stories](https://core.telegram.org/api/stories) by giving them **boosts**.\n\n#### [](#giveaways-amp-gifts)[Giveaways & gifts](https://core.telegram.org/api/giveaways)\n\nTelegram [channel](https://core.telegram.org/api/channel) administrators may launch giveaways to randomly distribute [Telegram Premium](https://core.telegram.org/api/premium) subscriptions and other gifts among their followers, in exchange for [boosts](https://core.telegram.org/api/boost).\n\n#### [](#action-bar)[Action bar](https://core.telegram.org/api/action-bar)\n\nSometimes, when interacting with Telegram users via private or secret chats, an action bar must be shown on top of the chat, offering convenient action buttons or notices regarding the user.\n\n#### [](#saved-messages)[Saved messages](https://core.telegram.org/api/saved-messages)\n\nThe Saved Messages chat allows users to bookmark messages and media: it's a personal cloud storage for any messages or media you may want to send or forward there.\n\n#### [](#profile)[Profile](https://core.telegram.org/api/profile)\n\nTelegram offers many customization options for your profile!\n\n#### [](#themes)[Themes](https://core.telegram.org/api/themes)\n\nTelegram apps support generating, sharing and synchronizing app themes.\n\n### [](#sponsored-messages)[Sponsored messages](https://core.telegram.org/api/sponsored-messages)\n\nIf your app allows accessing content from Telegram [channels](https://telegram.org/tour/channels), you must include support for [official sponsored messages](https://core.telegram.org/api/sponsored-messages) in Telegram channels.\n\n### [](#channel-and-bot-ad-revenue)[Channel and bot ad revenue](https://core.telegram.org/api/revenue)\n\nTelegram has one of the **most generous reward systems** in the history of social media. Telegram channel and bot owners can now receive **50%** of the revenue from ads displayed in their channels and bots.\n\nThis page describes the methods used to withdraw channel and bot ad revenue, as well as view detailed revenue stats.\n\n### [](#fact-checks)[Fact-checks](https://core.telegram.org/api/factcheck)\n\nTelegram clients support displaying fact-checks added to messages by independent fact-checkers.\n\n### [](#contacts)[Contacts](https://core.telegram.org/api/contacts)\n\nWorking with contacts in the API.\n\n### [](#blocklist)[Blocklist](https://core.telegram.org/api/block)\n\nWorking with the blocklist.\n\n### [](#nearby-users-ampchats)[Nearby users&chats](https://core.telegram.org/api/nearby)\n\nHow to work with geolocation-based features like geochats and the nearby users feature.\n\n#### [](#web-events)[Web events](https://core.telegram.org/api/web-events)\n\nWhen interacting with HTML5 games and the websites of payment gateways, Telegram apps should expose the following JS APIs.\n\n#### [](#deep-links)[Deep links](https://core.telegram.org/api/links)\n\nTelegram clients must handle special `tg://` and `t.me` deep links encountered in messages, link entities and in other apps by registering OS handlers.\n\n#### [](#takeout)[Takeout](https://core.telegram.org/api/takeout)\n\nTelegram's API allows users to export all of their information through the takeout API.",
    "url": "https://core.telegram.org/api"
  },
  {
    "metadata": {
      "canonicalUrl": "https://telegram.org/apps",
      "title": "Telegram Applications",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Telegram Applications"
        },
        {
          "property": "og:site_name",
          "content": "Telegram"
        },
        {
          "property": "og:description",
          "content": "Telegram apps are open source and support reproducible builds. Anyone can independently verify that Telegram apps you download\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:06:41 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3833",
        "set-cookie": "stel_ssid=4128b8d6efca68d9a5_13470958720843822009; expires=Fri, 16 May 2025 13:13:21 GMT; path=/; samesite=None; secure; HttpOnly",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=31536000; includeSubDomains; preload",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Telegram Applications\n\nTelegram apps are **open source** and support [reproducible builds](https://core.telegram.org/reproducible-builds). Anyone can independently verify that Telegram apps you download from App Store or Google Play were built using the [exact same code](#source-code) that we publish.\n\n#### [](#mobile-apps)Mobile apps\n\n*   [Telegram for Android](https://telegram.org/android)\n*   [Telegram for iPhone and iPad](https://telegram.org/dl/ios)\n\n#### [](#desktop-apps)Desktop apps\n\n*   [Telegram for Windows/Mac/Linux](https://desktop.telegram.org/)\n*   [Telegram for macOS](https://macos.telegram.org/)\n\n#### [](#web-apps)Web apps\n\n*   [Telegram WebK](https://telegram.org/dl/webk)\n*   [Telegram WebA](https://telegram.org/dl/weba)\n\n#### [](#telegram-database-library-tdlib)Telegram Database Library (TDLib)\n\n*   [TDLib](https://core.telegram.org/tdlib) \u2013 a cross-platform client designed to facilitate creating custom apps on the Telegram platform.\n*   [Telegram X for Android](https://play.google.com/store/apps/details?id=org.thunderdog.challegram&hl=en) \u2013 a slick experimental Telegram client based on TDLib.\n\n#### [](#unofficial-apps)Unofficial apps\n\n*   [Unigram, a client optimized for Windows](https://github.com/UnigramDev/Unigram) (based on [TDLib](https://core.telegram.org/tdlib))\n*   [Telegram CLI for Linux](https://telegram.org/dl/cli)\n*   [MadelineProto](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#source-code)Source code\n\nThis code allows security researchers to **fully evaluate** our [end-to-end encryption implementation](https://core.telegram.org/api/end-to-end). It is also possible to **independently verify** that Telegram apps available on Google Play and App Store are built using the [same code](https://core.telegram.org/reproducible-builds) that we publish on GitHub.\n\n##### [](#telegram-database-library)[Telegram Database Library](https://github.com/tdlib/td)\n\nCross-platform library for building custom Telegram apps, see [TDLib](https://core.telegram.org/tdlib) for details.  \nLicensed under [Boost 1.0](https://www.boost.org/LICENSE_1_0.txt).  \n[GitHub \u00bb](https://github.com/tdlib/td)\n\n##### [](#telegram-for-android)[Telegram for Android](https://github.com/DrKLO/Telegram)\n\nOfficial Android App, see [Google Play Market page](https://telegram.org/dl/android) for full description.  \nLicensed under [GNU GPL v. 2 or later](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/DrKLO/Telegram)  \n[Download APK File \u00bb](https://telegram.org/dl/android/apk)\n\n##### [](#telegram-for-ios)[Telegram for iOS](https://github.com/TelegramMessenger/Telegram-iOS)\n\nLicensed under [GNU GPL v. 2 or later](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/TelegramMessenger/Telegram-iOS)\n\n##### [](#telegram-for-macos)[Telegram for macOS](https://github.com/overtake/TelegramSwift)\n\nNative macOS client.  \nLicensed under [GNU GPL v. 2](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/overtake/TelegramSwift)\n\n##### [](#telegram-for-web-browsers)Telegram for Web browsers\n\n*   [**Telegram Web, Version K**](https://github.com/morethanwords/tweb). Mac, Windows, Linux, Mobile.  \n    Licensed under [GNU GPL v. 3](https://github.com/morethanwords/tweb/blob/master/LICENSE).  \n    [GitHub \u00bb](https://github.com/morethanwords/tweb)\n    \n*   [**Telegram Web, Version A**](https://github.com/Ajaxy/telegram-tt). Mac, Windows, Linux, Mobile.  \n    Licensed under [GNU GPL v. 3](https://github.com/Ajaxy/telegram-tt/blob/master/LICENSE).  \n    [GitHub \u00bb](https://github.com/Ajaxy/telegram-tt)\n    \n*   [Legacy JavaScript client](https://github.com/zhukov/webogram). Mac, Windows, Linux.  \n    Licensed under [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n    [GitHub \u00bb](https://github.com/zhukov/webogram)\n    \n\n##### [](#telegram-react)[Telegram React](https://github.com/evgeny-nadymov/telegram-react)\n\nJavaScript client for browsers. Mac, Windows, Linux.  \nLicensed under [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-react)\n\n##### [](#telegram-desktop)[Telegram Desktop](https://github.com/telegramdesktop/tdesktop)\n\nQt-based desktop client. Mac, Windows, Linux.  \nLicensed under [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/telegramdesktop/tdesktop)\n\n##### [](#telegram-for-wp)[Telegram for WP](https://github.com/evgeny-nadymov/telegram-wp)\n\nLicensed under [GNU GPL v. 2 or later](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-wp)\n\n##### [](#telegram-x-for-android)[Telegram X for Android](https://github.com/TGX-Android/Telegram-X)\n\nAlternative Telegram client for Android based on TDLib.  \nLicensed under [GPL v.3.0](https://github.com/TGX-Android/Telegram-X/blob/main/LICENSE)  \n[GitHub \u00bb](https://github.com/TGX-Android/Telegram-X)\n\n#### [](#unofficial-apps)Unofficial apps\n\n##### [](#telegram-cli-unofficial)[Telegram CLI](https://github.com/vysheng/tg) (Unofficial)\n\nLinux Command-line interface for Telegram.  \nLicensed under [GNU GPL v. 2](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/vysheng/tg)\n\n##### [](#unigram-unofficial)[Unigram](https://github.com/UnigramDev/Unigram) (Unofficial)\n\nA Telegram client optimized for Windows.  \nLicensed under [GNU GPL v. 3 or later](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/UnigramDev/Unigram)\n\n##### [](#madelineproto-unofficial)[MadelineProto](https://github.com/danog/MadelineProto) (Unofficial)\n\nA PHP MTProto Telegram client.  \nLicensed under [GNU AGPL v. 3](https://www.gnu.org/licenses/agpl-3.0.en.html).  \n[GitHub \u00bb](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#bug-bounty-program)Bug Bounty Program\n\nTelegram welcomes developers and the security research community to audit its services, [code](https://telegram.org/apps#source-code) and [protocol](https://core.telegram.org/mtproto) seeking vulnerabilities or security-related issues. [Learn more about our Bug Bounty Program here](https://core.telegram.org/bug-bounty).",
    "url": "https://telegram.org/apps"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/mtproto/security_guidelines",
      "title": "Security Guidelines for Client Developers",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Security Guidelines for Client Developers"
        },
        {
          "property": "og:image",
          "content": "2d1fe58b932e5bef0d"
        },
        {
          "property": "og:description",
          "content": "Important checks required in your client application."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:06:46 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5848",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Security Guidelines for Client Developers\n\n**See also:**\n\nWhile [MTProto](https://core.telegram.org/mtproto) is designed to be a reasonably fast and secure protocol, its advantages can be easily negated by careless implementation. We collected some security guidelines for client software developers on this page. All Telegram clients are required to comply.\n\n> Note that as of version 4.6, major Telegram clients are using **MTProto 2.0**. MTProto v.1.0 is deprecated and is currently being phased out.\n\n### [](#diffie-hellman-key-exchange)Diffie-Hellman key exchange\n\nWe use DH key exchange in two cases:\n\n*   [Creating an authorization key](https://core.telegram.org/mtproto/auth_key)\n*   [Establishing Secret Chats with end-to-end encryption](https://core.telegram.org/api/end-to-end)\n\nIn both cases, there are some verifications to be done whenever DH is used:\n\n#### [](#validation-of-dh-parameters)Validation of DH parameters\n\nClient is expected to check whether **p = dh\\_prime** is a safe 2048-bit prime (meaning that both **p** and **(p-1)/2** are prime, and that 2^2047 < p < 2^2048), and that **g** generates a cyclic subgroup of prime order **(p-1)/2**, i.e. is a quadratic residue **mod p**. Since **g** is always equal to 2, 3, 4, 5, 6 or 7, this is easily done using quadratic reciprocity law, yielding a simple condition on **p mod 4g** -- namely, **p mod 8 = 7** for **g = 2**; **p mod 3 = 2** for **g = 3**; no extra condition for **g = 4**; **p mod 5 = 1 or 4** for **g = 5**; **p mod 24 = 19 or 23** for **g = 6**; and **p mod 7 = 3, 5 or 6** for **g = 7**. After **g** and **p** have been checked by the client, it makes sense to cache the result, so as not to repeat lengthy computations in future.\n\nIf the verification takes too long (which is the case for older mobile devices), one might initially run only 15 Miller--Rabin iterations (use parameter 30 in Java) for verifying primeness of **p** and **(p - 1)/2** with error probability not exceeding one billionth, and do more iterations in the background later.\n\nAnother way to optimize this is to embed into the client application code a small table with some known \"good\" couples **(g,p)** (or just known safe primes **p**, since the condition on **g** is easily verified during execution), checked during code generation phase, so as to avoid doing such verification during runtime altogether. The server rarely changes these values, thus one usually needs to put the current value of server's **dh\\_prime** into such a table. For example, the current value of **dh\\_prime** equals (in big-endian byte order)\n\n```\nn```\n\n#### [](#g-a-and-g-b-validation)g\\_a and g\\_b validation\n\nApart from the conditions on the Diffie-Hellman prime **dh\\_prime** and generator **g**, both sides are to check that **g**, **g\\_a** and **g\\_b** are greater than **1** and less than **dh\\_prime - 1**. We recommend checking that **g\\_a** and **g\\_b** are between **2^{2048-64}** and **dh\\_prime - 2^{2048-64}** as well.\n\n#### [](#checking-sha1-hash-values-during-key-generation)Checking SHA1 hash values during key generation\n\nOnce the client receives a `server_DH_params_ok` answer in step 5) of the Authorization Key generation protocol and decrypts it obtaining `answer_with_hash`, it MUST check that\n\n```\nanswer_with_hash := SHA1(answer) + answer + (0-15 random bytes)\n```\n\nIn other words, the first 20 bytes of `answer_with_hash` must be equal to SHA1 of the remainder of the decrypted message without the padding random bytes.\n\n#### [](#checking-nonce-server-nonce-and-new-nonce-fields)Checking nonce, server\\_nonce and new\\_nonce fields\n\nWhen the client receives and/or decrypts server messages during creation of Authorization Key, and these messages contain some nonce fields already known to the client from messages previously obtained during the same run of the protocol, the client is to check that these fields indeed contain the values previosly known.\n\n#### [](#using-secure-pseudorandom-number-generator-to-create-dh-secret-parameters-a-and-b)Using secure pseudorandom number generator to create DH secret parameters `a` and `b`\n\nClient must use a cryptographically secure PRNG to generate secret exponents `a` or `b` for DH key exchange. For secret chats, the client might request some entropy (random bytes) from the server while invoking [messages.getDhConfig](https://core.telegram.org/method/messages.getDhConfig) and feed these random bytes into its PRNG (for example, by `PRNG_seed` if OpenSSL library is used), but never using these \"random\" bytes by themselves or replacing by them the local PRNG seed. One should mix bytes received from server into local PRNG seed.\n\n### [](#mtproto-encrypted-messages)MTProto Encrypted Messages\n\nSome important checks are to be done while sending and especially receiving [encrypted MTProto messages](https://core.telegram.org/mtproto/description).\n\n#### [](#checking-sha256-hash-value-of-msg-key)Checking SHA256 hash value of msg\\_key\n\n`msg_key` is used not only to compute the AES key and IV to decrypt the received message. After decryption, the client **MUST** check that `msg_key` is indeed equal to SHA256 of the plaintext obtained as the result of decryption (including the final 12...1024 padding bytes), prepended with 32 bytes taken from the `auth_key`, as explained in [MTProto 2.0 Description](https://core.telegram.org/mtproto/description#defining-aes-key-and-initialization-vector).\n\nIf an error is encountered before this check could be performed, the client **must** perform the `msg_key` check anyway before returning any result. Note that the response to any error encountered before the `msg_key` check **must** be the same as the response to a failed `msg_key` check.\n\n#### [](#checking-message-length)Checking message length\n\nThe client **must** check that the length of the message or container obtained from the decrypted message (computed from its `length` field) does not exceed the total size of the plaintext, and that the difference (i.e. the length of the random padding) lies in the range from 12 to 1024 bytes.\n\nThe length should be always divisible by 4 and non-negative. On no account the client is to access data past the end of the decryption buffer containing the plaintext message.\n\n#### [](#checking-session-id)Checking session\\_id\n\nThe client is to check that the `session_id` field in the decrypted message indeed equals to that of an active session created by the client.\n\n#### [](#checking-msg-id)Checking msg\\_id\n\nThe client must check that `msg_id` has even parity for messages from client to server, and odd parity for messages from server to client.\n\nIn addition, the identifiers (msg\\_id) of the last N messages received from the other side must be stored, and if a message comes in with an msg\\_id lower than all or equal to any of the stored values, that message is to be ignored. Otherwise, the new message msg\\_id is added to the set, and, if the number of stored msg\\_id values is greater than N, the oldest (i. e. the lowest) is discarded.\n\nIn addition, msg\\_id values that belong over 30 seconds in the future or over 300 seconds in the past are to be ignored (recall that `msg_id` approximately equals unixtime \\* 2^32). This is especially important for the server. The client would also find this useful (to protect from a replay attack), but only if it is certain of its time (for example, if its time has been synchronized with that of the server).\n\nCertain client-to-server service messages containing data sent by the client to the server (for example, `msg_id` of a recent client query) may, nonetheless, be processed on the client even if the time appears to be \u201cincorrect\u201d. This is especially true of messages to change server\\_salt and notifications about invalid time on the client. See [Mobile Protocol: Service Messages](https://core.telegram.org/mtproto/service_messages).\n\n## [](#behavior-in-case-of-mismatch)Behavior in case of mismatch\n\nIf one of the checks listed above fails, the client is to completely discard the message obtained from server. We also recommend closing and reestablishing the TCP connection to the server, then retrying the operation or the whole key generation protocol.\n\nNo information from incorrect messages can be used. Even if the application throws an exception and dies, this is much better than continuing with invalid data.\n\nNotice that invalid messages will infrequently appear during normal work even if no malicious tampering is being done. This is due to network transmission errors. We recommend ignoring the invalid message and closing the TCP connection, then creating a new TCP connection to the server and retrying the original query.\n\n> The previous version of security recommendations relevant for MTProto 1.0 clients is available [here](https://core.telegram.org/mtproto/security_guidelines_v1).",
    "url": "https://core.telegram.org/mtproto/security_guidelines"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/mtproto/auth_key",
      "title": "\ufeffCreating an Authorization Key",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "\ufeffCreating an Authorization Key"
        },
        {
          "property": "og:description",
          "content": "The query format is described using Binary Data Serialization and the TL Language. All large numbers are transmitted as\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:06:48 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "8062",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Creating an Authorization Key\n\nThe query format is described using [Binary Data Serialization](https://core.telegram.org/mtproto/serialize) and the [TL Language](https://core.telegram.org/mtproto/TL). All large numbers are transmitted as strings containing the required sequence of bytes in big endian order. Hash functions, such as SHA1, return strings (of 20 bytes) which can also be interpreted as big endian numbers. Small numbers (`int`, `long`, `int128`, `int256`) are normally little endian; however, if they are part of SHA1, the bytes are not rearranged. This way, if `long` `x` is the 64 lower-order bits of SHA1 of string `s`, then the _final_ 8 bytes of 20-byte string `SHA1(s)` are taken and interpreted as a 64-bit integer.\n\nPrior to sending off unencrypted messages (required in this instance to generate an authorization key), the client must undergo (p,q) authorization as follows.\n\n#### [](#dh-exchange-initiation)DH exchange initiation\n\n##### [](#1-client-sends-query-to-server)1) Client sends query to server\n\n```\nreq_pq_multi#be7e8ef1 nonce:int128 = ResPQ;\n```\n\nThe value of _nonce_ is selected randomly by the client (random number) and identifies the client within this communication. Following this step, it is known to all.\n\n##### [](#2-server-sends-response-of-the-form)2) Server sends response of the form\n\n```\nresPQ#05162463 nonce:int128 server_nonce:int128 pq:string server_public_key_fingerprints:Vector long = ResPQ;\n```\n\nHere, string pq is a representation of a natural number (in binary big endian format). This number is the product of two different odd prime numbers. Normally, pq is less than or equal to 2^63-1. The value of _server\\_nonce_ is selected randomly by the server; following this step, it is known to all.\n\n`server_public_key_fingerprints` is a list of public RSA key fingerprints (64 lower-order bits of SHA1 (server\\_public\\_key); the public key is represented as a bare type `rsa_public_key n:string e:string = RSAPublicKey`, where, as usual, n and e are numbers in big endian format serialized as strings of bytes, following which SHA1 is computed) received by the server.\n\nAll subsequent messages contain the pair (nonce, server\\_nonce) both in the plain-text, and the encrypted portions which makes it possible to identify a \u201ctemporary session\u201d \u2014 one run of the key generation protocol described on this page that uses the same (nonce, server\\_nonce) pair. An intruder could not create a parallel session with the server with the same parameters and reuse parts of server- or client-encrypted messages for its own purposes in such a parallel session, because a different server\\_nonce would be selected by the server for any new \u201ctemporary session\u201d.\n\n#### [](#proof-of-work)Proof of work\n\n##### [](#3-client-decomposes-pq-into-prime-factors-such-that-p--q)3) Client decomposes pq into prime factors such that p < q.\n\nThis starts a round of Diffie-Hellman key exchanges.\n\n#### [](#presenting-proof-of-work-server-authentication)Presenting proof of work; Server authentication\n\n##### [](#4-encrypted-data-payload-generation)4) `encrypted_data` payload generation\n\nFirst of all, generate an `encrypted_data` payload as follows:\n\n*   new\\_nonce := another (good) random number generated by the client; after this query, it is known to both client and server;\n    \n*   data := a serialization of\n    \n    ```\n    p_q_inner_data_dc#a9f55f95 pq:string p:string q:string nonce:int128 server_nonce:int128 new_nonce:int256 dc:int = P_Q_inner_data;\n    ```\n    \n    or of\n    \n    ```\n    p_q_inner_data_temp_dc#56fddf88 pq:string p:string q:string nonce:int128 server_nonce:int128 new_nonce:int256 dc:int expires_in:int = P_Q_inner_data;\n    ```\n    \n    where `dc` is the ID of the DC we're talking to; `10000` has to be added to the DC ID when connecting to the test servers; it has to be made negative if the DC we're connecting to is a media (not CDN) DC.\n    \n*   encrypted\\_data := RSA\\_PAD (data, server\\_public\\_key), where RSA\\_PAD is a version of RSA with a variant of OAEP+ padding explained below in 4.1).\n    \n\nSomeone might intercept the query and replace it with their own, independently decomposing pq into factors instead of the client. The only field that it makes sense to modify is new\\_nonce which would be the one an intruder would have to re-generate (because an intruder cannot decrypt the encrypted data sent by the client). Since all subsequent messages are encrypted using new\\_nonce or contain new\\_nonce\\_hash, they will not be processed by the client (an intruder would not be able to make it look as though they had been generated by the server because they would not contain new\\_nonce). Therefore, this intercept will only result in the intruder's completing the authorization key generation protocol in place of the client and creating a new key (that has nothing to do with the client); however, the same effect could be achieved simply by creating a new key in one's own name.\n\nAn alternative form of inner data (`p_q_inner_data_temp_dc`) is used to create temporary keys, that are only stored in the server RAM and are discarded after at most `expires_in` seconds. The server is free to discard its copy earlier. In all other respects the temporary key generation protocol is the same. After a temporary key is created, the client usually binds it to its principal authorisation key by means of the [auth.bindTempAuthKey](https://core.telegram.org/method/auth.bindTempAuthKey) method, and uses it for all client-server communication until it expires; then a new temporary key is generated. Thus Perfect Forward Secrecy (PFS) in client-server communication is achieved. [Read more about PFS \u00bb](https://core.telegram.org/api/pfs)\n\n##### [](#41-rsa-paddata-server-public-key-mentioned-above-is-implemented-as-follows)4.1) `RSA_PAD(data, server_public_key)` mentioned above is implemented as follows:\n\n*   data\\_with\\_padding := data + random\\_padding\\_bytes; -- where random\\_padding\\_bytes are chosen so that the resulting length of data\\_with\\_padding is precisely 192 bytes, and data is the TL-serialized data to be encrypted as before. One has to check that data is not longer than 144 bytes.\n*   data\\_pad\\_reversed := BYTE\\_REVERSE(data\\_with\\_padding); -- is obtained from data\\_with\\_padding by reversing the byte order.\n*   a random 32-byte temp\\_key is generated.\n*   data\\_with\\_hash := data\\_pad\\_reversed + SHA256(temp\\_key + data\\_with\\_padding); -- after this assignment, data\\_with\\_hash is exactly 224 bytes long.\n*   aes\\_encrypted := AES256\\_IGE(data\\_with\\_hash, temp\\_key, 0); -- AES256-IGE encryption with zero IV.\n*   temp\\_key\\_xor := temp\\_key XOR SHA256(aes\\_encrypted); -- adjusted key, 32 bytes\n*   key\\_aes\\_encrypted := temp\\_key\\_xor + aes\\_encrypted; -- exactly 256 bytes (2048 bits) long\n*   The value of key\\_aes\\_encrypted is compared with the RSA-modulus of server\\_pubkey as a big-endian 2048-bit (256-byte) unsigned integer. If key\\_aes\\_encrypted turns out to be greater than or equal to the RSA modulus, the previous steps starting from the generation of new random temp\\_key are repeated. Otherwise the final step is performed:\n*   encrypted\\_data := RSA(key\\_aes\\_encrypted, server\\_pubkey); -- 256-byte big-endian integer is elevated to the requisite power from the RSA public key modulo the RSA modulus, and the result is stored as a big-endian integer consisting of exactly 256 bytes (with leading zero bytes if required).\n\n##### [](#5-send-req-dh-params-query-with-generated-encrypted-data)5) Send req\\_DH\\_params query with generated `encrypted_data`\n\n```\nreq_DH_params#d712e4be nonce:int128 server_nonce:int128 p:string q:string public_key_fingerprint:long encrypted_data:string = Server_DH_Params\n```\n\n##### [](#6-server-responds-with)6) Server responds with:\n\n```\nserver_DH_params_ok#d0e8075c nonce:int128 server_nonce:int128 encrypted_answer:string = Server_DH_Params;\n```\n\n> If the query is incorrect, the server returns a `-404` error and the handshake must be restarted (any subsequent request also returns `-404`, even if it is correct).  \n> A `-444` error may also be returned if a test DC ID is passed in `p_q_inner_data_(_temp)dc` when handshaking with a production DC, and vice versa.\n\nHere, encrypted\\_answer is obtained as follows:\n\n*   new\\_nonce\\_hash := 128 lower-order bits of SHA1 (new\\_nonce);\n*   answer := serialization\n    \n    ```\n    server_DH_inner_data#b5890dba nonce:int128 server_nonce:int128 g:int dh_prime:string g_a:string server_time:int = Server_DH_inner_data;\n    ```\n    \n*   answer\\_with\\_hash := SHA1(answer) + answer + (0-15 random bytes); such that the length be divisible by 16;\n*   tmp\\_aes\\_key := SHA1(new\\_nonce + server\\_nonce) + substr (SHA1(server\\_nonce + new\\_nonce), 0, 12);\n*   tmp\\_aes\\_iv := substr (SHA1(server\\_nonce + new\\_nonce), 12, 8) + SHA1(new\\_nonce + new\\_nonce) + substr (new\\_nonce, 0, 4);\n*   encrypted\\_answer := AES256\\_ige\\_encrypt (answer\\_with\\_hash, tmp\\_aes\\_key, tmp\\_aes\\_iv); here, tmp\\_aes\\_key is a 256-bit key, and tmp\\_aes\\_iv is a 256-bit initialization vector. The same as in all the other instances that use AES encryption, the encrypted data is padded with random bytes to a length divisible by 16 immediately prior to encryption.\n\nFollowing this step, new\\_nonce is still known to client and server only. The client is certain that it is the server that responded and that the response was generated specifically in response to client query req\\_DH\\_params, since the response data are encrypted using new\\_nonce.\n\nClient is expected to check whether **p = dh\\_prime** is a safe 2048-bit prime (meaning that both **p** and **(p-1)/2** are prime, and that 2^2047 < p < 2^2048), and that **g** generates a cyclic subgroup of prime order **(p-1)/2**, i.e. is a quadratic residue **mod p**. Since **g** is always equal to 2, 3, 4, 5, 6 or 7, this is easily done using quadratic reciprocity law, yielding a simple condition on **p mod 4g** -- namely, **p mod 8 = 7** for **g = 2**; **p mod 3 = 2** for **g = 3**; no extra condition for **g = 4**; **p mod 5 = 1 or 4** for **g = 5**; **p mod 24 = 19 or 23** for **g = 6**; and **p mod 7 = 3, 5 or 6** for **g = 7**. After **g** and **p** have been checked by the client, it makes sense to cache the result, so as not to repeat lengthy computations in future.\n\nIf the verification takes too long time (which is the case for older mobile devices), one might initially run only 15 Miller--Rabin iterations for verifying primeness of **p** and **(p - 1)/2** with error probability not exceeding one billionth, and do more iterations later in the background.\n\nAnother optimization is to embed into the client application code a small table with some known \"good\" couples **(g,p)** (or just known safe primes **p**, since the condition on **g** is easily verified during execution), checked during code generation phase, so as to avoid doing such verification during runtime altogether. Server changes these values rarely, thus one usually has to put the current value of server's **dh\\_prime** into such a table. For example, current value of **dh\\_prime** equals (in big-endian byte order)\n\n```\nn```\n\n##### [](#7-client-computes-random-2048-bit-number-b-using-a-sufficient-amount-of-entropy-and-sends-the-server-a-message)7) Client computes random 2048-bit number _b_ (using a sufficient amount of entropy) and sends the server a message\n\n```\nset_client_DH_params#f5045f1f nonce:int128 server_nonce:int128 encrypted_data:string = Set_client_DH_params_answer;\n```\n\nHere, encrypted\\_data is obtained thus:\n\n*   g\\_b := pow(g, b) mod dh\\_prime;\n*   data := serialization\n    \n    ```\n    client_DH_inner_data#6643b654 nonce:int128 server_nonce:int128 retry_id:long g_b:string = Client_DH_Inner_Data\n    ```\n    \n*   data\\_with\\_hash := SHA1(data) + data + (0-15 random bytes); such that length be divisible by 16;\n*   encrypted\\_data := AES256\\_ige\\_encrypt (data\\_with\\_hash, tmp\\_aes\\_key, tmp\\_aes\\_iv);\n\nThe retry\\_id field is equal to zero at the time of the first attempt; otherwise, it is equal to auth\\_key\\_aux\\_hash from the previous failed attempt (see [Item 9](#9-server-responds-in-one-of-three-ways)).\n\n##### [](#8-thereafter-auth-key-equals-powg-ab-mod-dh-prime-on-the-server-it-is-computed-as-powg-b-a-mod-dh-prime-and-on-the-client-as-g-ab-mod-dh-prime)8) Thereafter, auth\\_key equals `pow(g, {ab}) mod dh_prime`; on the server, it is computed as `pow(g_b, a) mod dh_prime`, and on the client as `(g_a)^b mod dh_prime`.\n\nAuth\\_key\\_hash is computed := 64 lower-order bits of SHA1 (auth\\_key). The server checks whether there already is another key with the same auth\\_key\\_hash and responds in one of the following ways.\n\n#### [](#dh-key-exchange-complete)DH key exchange complete\n\n##### [](#9-server-responds-in-one-of-three-ways)9) Server responds in one of three ways:\n\n```\ndh_gen_ok#3bcbf734 nonce:int128 server_nonce:int128 new_nonce_hash1:int128 = Set_client_DH_params_answer;\ndh_gen_retry#46dc1fb9 nonce:int128 server_nonce:int128 new_nonce_hash2:int128 = Set_client_DH_params_answer;\ndh_gen_fail#a69dae02 nonce:int128 server_nonce:int128 new_nonce_hash3:int128 = Set_client_DH_params_answer;\n```\n\n*   new\\_nonce\\_hash1, new\\_nonce\\_hash2, and new\\_nonce\\_hash3 are obtained as the 128 lower-order bits of SHA1 of the byte string derived from the new\\_nonce string by adding a single byte with the value of 1, 2, or 3, and followed by another 8 bytes with auth\\_key\\_aux\\_hash. Different values are required to prevent an intruder from changing server response dh\\_gen\\_ok into dh\\_gen\\_retry.\n*   auth\\_key\\_aux\\_hash is the 64 _higher-order_ bits of SHA1(auth\\_key). It must not be confused with auth\\_key\\_hash.\n\nIn the other case, the client goes to [Item 7)](https://core.telegram.org/mtproto/auth_key#7-client-computes-random-2048-bit-number-b-using-a-sufficient-amount-of-entropy-and-sends-the-server-a-message) generating a new _b_. In the first case, the client and the server have negotiated auth\\_key, following which they forget all other temporary data, and the client creates another encrypted session using auth\\_key. At the same time, server\\_salt is initially set to `substr(new_nonce, 0, 8) XOR substr(server_nonce, 0, 8)`. If required, the client stores the difference between server\\_time received in 5) and its local time, to be able always to have a good approximation of server time which is required to generate correct message identifiers.\n\n**IMPORTANT**: Apart from the conditions on the Diffie-Hellman prime **dh\\_prime** and generator **g**, both sides are to check that **g**, **g\\_a** and **g\\_b** are greater than **1** and less than **dh\\_prime - 1**. We recommend checking that **g\\_a** and **g\\_b** are between **2^{2048-64}** and **dh\\_prime - 2^{2048-64}** as well.\n\n#### [](#error-handling-lost-queries-and-responses)Error Handling (Lost Queries and Responses)\n\nIf the client fails to receive any response to its query from the server within a certain time interval, it may simply re-send the query. If the server has already sent a response to this query (_exactly_ the same request and not just similar: all the parameters during the repeat request must take on the same values) but it did not get to the client, the server will simply re-send the same response. The server remembers the response for up to 10 minutes after having received the query in 1). If the server has already forgotten the response or the requisite temporary data, the client will have to start from the beginning.\n\nThe server may consider that if the client has already sent in the next query using the data from the previous server response to the specific client, the response is known to have been received by the client and may be forgotten by the server.\n\n#### [](#usage-example)Usage Example\n\nAn example of a complete list of queries required to generate an authorization key is shown on [a separate page](https://core.telegram.org/mtproto/samples-auth_key).",
    "url": "https://core.telegram.org/mtproto/auth_key"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/mtproto/description",
      "title": "\ufeffMobile Protocol: Detailed Description",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "\ufeffMobile Protocol: Detailed Description"
        },
        {
          "property": "og:image",
          "content": "https://core.telegram.org/file/811140746/2/CzMyJPVnPo8.81605/c2310d6ede1a5e220f"
        },
        {
          "property": "og:description",
          "content": "As of version 4.6, major Telegram clients are using MTProto 2.0.\nMTProto v.1.0 is deprecated and is currently being phased\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:06:48 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "8252",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Mobile Protocol: Detailed Description\n\n> As of version 4.6, major Telegram clients are using **MTProto 2.0**. MTProto v.1.0 is deprecated and is currently being phased out.\n\nThis article describes the basic layer of the MTProto protocol version 2.0 (Cloud chats, server-client encryption). The principal differences from version 1.0 ([described here](https://core.telegram.org/mtproto/description_v1) for reference) are as follows:\n\n*   SHA-256 is used instead of SHA-1;\n*   Padding bytes are involved in the computation of **msg\\_key**;\n*   **msg\\_key** depends not only on the message to be encrypted, but on a portion of **auth\\_key** as well;\n*   12..1024 padding bytes are used instead of 0..15 padding bytes in v.1.0.\n\nSee also: [MTProto 2.0: Secret Chats, end-to-end encryption](https://core.telegram.org/api/end-to-end)\n\n### [](#protocol-description)Protocol description\n\nBefore a message (or a multipart message) is transmitted over a network using a transport protocol, it is encrypted in a certain way, and an external header is added at the top of the message that consists of a 64-bit key identifier **auth\\_key\\_id** (that uniquely identifies an authorization key for the server as well as the user) and a 128-bit message key **msg\\_key**.\n\nThe authorization key **auth\\_key** combined with the message key **msg\\_key** define an actual 256-bit key **aes\\_key** and a 256-bit initialization vector **aes\\_iv**, which are used to encrypt the message using AES-256 encryption in infinite garble extension (IGE) mode. Note that the initial part of the message to be encrypted contains variable data (session, message ID, sequence number, server salt) that obviously influences the message key (and thus the AES key and iv). In **MTProto 2.0**, the message key is defined as the 128 middle bits of the SHA-256 of the message body (including session, message ID, padding, etc.) prepended by 32 bytes taken from the authorization key. In the older **MTProto 1.0**, the message key was computed as the lower 128 bits of SHA-1 of the message body, excluding the padding bytes.\n\nMultipart messages are encrypted as a single message.\n\n[![MTProto server-client encryption, cloud chats](https://core.telegram.org/file/811140746/2/CzMyJPVnPo8.81605/c2310d6ede1a5e220f)](https://core.telegram.org/file/811140746/2/CzMyJPVnPo8.81605/c2310d6ede1a5e220f)\n\n> Got questions about this setup? \u2014 Check out the [Advanced FAQ](http://core.telegram.org/techfaq)!\n\n###### **Note 1**\n\nEach plaintext message to be encrypted in MTProto always contains the following data to be checked upon decryption in order to make the system robust against known problems with the components:\n\n*   server salt (64-Bit)\n*   session id\n*   message sequence number\n*   message length\n*   time\n\n###### **Note 2**\n\nTelegram's **End-to-end** encrypted Secret Chats are using an additional layer of encryption on top of the described above. See [Secret Chats, End-to-End encryption](https://core.telegram.org/api/end-to-end) for details.\n\n> MTProto supports [Perfect Forward Secrecy](https://core.telegram.org/api/pfs) in both [cloud chats](https://core.telegram.org/api/pfs) and [secret chats](https://core.telegram.org/api/end-to-end/pfs).\n\n### [](#terminology)Terminology\n\n#### [](#authorization-key-auth-key)Authorization Key (auth\\_key)\n\nA 2048-bit key shared by the client device and the server, created upon user registration directly on the client device by exchanging Diffie-Hellman keys, and never transmitted over a network. Each authorization key is user-specific. There is nothing that prevents a user from having several keys (that correspond to \u201cpermanent sessions\u201d on different devices), and some of these may be locked forever in the event the device is lost. See also [Creating an Authorization Key](https://core.telegram.org/mtproto/auth_key).\n\n#### [](#server-key)Server Key\n\nA 2048-bit RSA key used by the server digitally to sign its own messages while registration is underway and the authorization key is being generated. The application has a built-in public server key which can be used to verify a signature but cannot be used to sign messages. A private server key is stored on the server and changed very infrequently.\n\n#### [](#key-identifier-auth-key-id)Key Identifier (auth\\_key\\_id)\n\nThe 64 lower-order bits of the SHA1 hash of the authorization key are used to indicate which particular key was used to encrypt a message. Keys must be uniquely defined by the 64 lower-order bits of their SHA1, and in the event of a collision, an authorization key is regenerated. A zero key identifier means that encryption is not used which is permissible for a limited set of message types used during registration to generate an authorization key in a Diffie-Hellman exchange. **For MTProto 2.0, SHA1 is still used here, because auth\\_key\\_id should identify the authorization key used independently of the protocol version.**\n\n#### [](#session)Session\n\nA (random) 64-bit number generated by the client to distinguish between individual sessions (for example, between different instances of the application, created with the same authorization key). The session in conjunction with the key identifier corresponds to an application instance. The server can maintain session state. _Under no circumstances can a message meant for one session be sent into a different session_. The server may unilaterally forget any client sessions; clients should be able to handle this.\n\n#### [](#server-salt)Server Salt\n\nA (random) 64-bit number changed every 30 minutes (separately for each session) at the request of the server. All subsequent messages must contain the new salt (although, messages with the old salt are still accepted for a further 1800 seconds). Required to protect against replay attacks and certain tricks associated with adjusting the client clock to a moment in the distant future.\n\n#### [](#message-identifier-msg-id)Message Identifier (msg\\_id)\n\nA (time-dependent) 64-bit number used uniquely to identify a message within a session. Client message identifiers are divisible by 4, server message identifiers modulo 4 yield 1 if the message is a response to a client message, and 3 otherwise. Client message identifiers must increase monotonically (within a single session), the same as server message identifiers, and must approximately equal unixtime\\*2^32. This way, a message identifier points to the approximate moment in time the message was created. A message is rejected over 300 seconds after it is created or 30 seconds before it is created (this is needed to protect from replay attacks). In this situation, it must be re-sent with a different identifier (or placed in a container with a higher identifier). The identifier of a message container must be strictly greater than those of its nested messages.\n\n**Important**: to counter replay-attacks the lower 32 bits of **msg\\_id** passed by the client must not be empty and must present a fractional part of the time point when the message was created.\n\n#### [](#message-sequence-number-msg-seqno)Message Sequence Number (msg\\_seqno)\n\nA 32-bit number equal to twice the number of [content-related\u00a0\u00bb](#content-related-message) messages created by the sender prior to this message and subsequently incremented by one if the current message is a content-related message.\n\nThe seqno of a content-related message is thus `msg.seqNo = (current_seqno*2)+1` (and after generating it, the local `current_seqno` counter must be incremented by 1), the seqno of a non-content related message is `msg.seqNo = (current_seqno*2)` (`current_seqno` must **not** be incremented by 1 after generation).\n\nThus, the content-relatedness of an incoming MTProto message can simply be determined by checking the value of the least-significant bit of the seqno of the message (`message.isContentRelated = (message.seqNo & 1) == 1`).\n\nA container is always generated after its entire contents; therefore, its sequence number is greater than or equal to the sequence numbers of the messages contained in it.\n\n##### [](#content-related-message)Content-related Message\n\nWhen receiving an MTProto message that is marked as content-related by setting the least-significant bit of the [seqno](#message-sequence-number-msg-seqno), the receiving party **must** acknowledge it in some way.\n\nWhen the receiving party is the client, this must be done through `msgs_ack` constructors.\n\nWhen the receiving party is the server, this is usually done through `msgs_ack` constructors, but may also be done using the reply of a method, or an error, or some other way, as specified by the documentation of each method or constructor.\n\nWhen a TCP transport is used, the content-relatedness of constructors affects the server's behavior: the server will resend not-yet acknowledged content-related messages to a new connection if the current connection is closed and then re-opened.\n\nA client **must always** mark all API-level RPC queries as content-related, or else a [bad\\_msg\\_notification](https://core.telegram.org/mtproto/service_messages_about_messages#notice-of-ignored-error-message) with `error_code=35` will be emitted.\n\nA client **must never** mark `msgs_ack`, `msg_container`, `msg_copy`, `gzip_packed` constructors (i.e. [containers](https://core.telegram.org/mtproto/service_messages#containers) and acknowledgements) as content-related, or else a [bad\\_msg\\_notification](https://core.telegram.org/mtproto/service_messages_about_messages#notice-of-ignored-error-message) with `error_code=34` will be emitted.\n\nA client _may_ mark any other constructor except the four specified above as content-related, to improve reliability in case of network issues by requesting acknowledgements from the server.\n\n#### [](#message-key-msg-key)Message Key (msg\\_key)\n\nIn **MTProto 2.0**, the middle 128 bits of the SHA-256 hash of the message to be encrypted (including the internal header and the _padding bytes_ for MTProto 2.0), prepended by a 32-byte fragment of the authorization key.\n\nIn **MTProto 1.0**, message key was defined differently, as the lower 128 bits of the SHA-1 hash of the message to be encrypted, with padding bytes excluded from the computation of the hash. Authorization key was not involved in this computation.\n\n#### [](#internal-cryptographic-header)Internal (cryptographic) Header\n\nA header (16 bytes) added before a message or a container before it is all encrypted together. Consists of the server salt (64 bits) and the session (64 bits).\n\n#### [](#external-cryptographic-header)External (cryptographic) Header\n\nA header (24 bytes) added before an encrypted message or a container. Consists of the key identifier **auth\\_key\\_id** (64 bits) and the message key **msg\\_key** (128 bits).\n\n#### [](#payload)Payload\n\nExternal header + encrypted message or container.\n\n### [](#defining-aes-key-and-initialization-vector)Defining AES Key and Initialization Vector\n\nThe 2048-bit authorization key (auth\\_key) and the 128-bit message key (msg\\_key) are used to compute a 256-bit AES key (aes\\_key) and a 256-bit initialization vector (aes\\_iv) which are subsequently used to encrypt the part of the message to be encrypted (i. e. everything with the exception of the external header that is added later) with AES-256 in infinite garble extension (IGE) mode.\n\nFor MTProto 2.0, the algorithm for computing aes\\_key and aes\\_iv from auth\\_key and msg\\_key is as follows.\n\n*   msg\\_key\\_large = SHA256 (substr (auth\\_key, 88+x, 32) + plaintext + random\\_padding);\n*   msg\\_key = substr (msg\\_key\\_large, 8, 16);\n*   sha256\\_a = SHA256 (msg\\_key + substr (auth\\_key, x, 36));\n*   sha256\\_b = SHA256 (substr (auth\\_key, 40+x, 36) + msg\\_key);\n*   aes\\_key = substr (sha256\\_a, 0, 8) + substr (sha256\\_b, 8, 16) + substr (sha256\\_a, 24, 8);\n*   aes\\_iv = substr (sha256\\_b, 0, 8) + substr (sha256\\_a, 8, 16) + substr (sha256\\_b, 24, 8);\n\nwhere x = 0 for messages from client to server and x = 8 for those from server to client.\n\n_For the obsolete MTProto 1.0, msg\\_key, aes\\_key, and aes\\_iv were computed differently (see [this document](https://core.telegram.org/mtproto/description_v1#defining-aes-key-and-initialization-vector) for reference)._\n\nThe lower-order 1024 bits of auth\\_key are not involved in the computation. They may (together with the remaining bits or separately) be used on the client device to encrypt the local copy of the data received from the server. The 512 lower-order bits of auth\\_key are not stored on the server; therefore, if the client device uses them to encrypt local data and the user loses the key or the password, data decryption of local data is impossible (even if data from the server could be obtained).\n\nIn MTProto 1.0, when AES was used to encrypt a block of data of a length not divisible by 16 bytes, the data was padded with 0 to 15 random padding bytes **random\\_padding** to a length divisible by 16 bytes prior to encryption. **In MTProto 2.0, this padding is taken into account when computing `msg_key`. Note that MTProto 2.0 requires from 12 to 1024 bytes of padding, still subject to the condition that the resulting message length be divisible by 16 bytes.**\n\n### [](#using-mtproto-20-instead-of-mtproto-10)Using MTProto 2.0 instead of MTProto 1.0\n\nA client may either use only MTProto 2.0 or only MTProto 1.0 in the same TCP connection. The server detects the protocol used by the first message received from the client, and then uses the same encryption for its messages, and expects the client to use the same encryption henceforth. We recommend using MTProto 2.0; MTProto 1.0 is deprecated and supported for backward compatibility only.\n\n### [](#important-checks)Important Checks\n\nWhen an encrypted message is received, it _must_ be checked that **msg\\_key** is _in fact_ equal to the 128 middle bits of the SHA-256 of the decrypted data with a 32-byte fragment of **auth\\_key** prepended to it, and that msg\\_id has even parity for messages from client to server, and odd parity for messages from server to client.\n\nIn addition, the identifiers (msg\\_id) of the last N messages received from the other side must be stored, and if a message comes in with msg\\_id lower than all or equal to any of the stored values, the message is to be ignored. Otherwise, the new message msg\\_id is added to the set, and, if the number of stored msg\\_id values is greater than N, the oldest (i. e. the lowest) is forgotten.\n\nOn top of this, msg\\_id values that belong over 30 seconds in the future or over 300 seconds in the past are to be ignored. This is especially important for the server. The client would also find this useful (to protect from a replay attack), but only if it is certain of its time (for example, if its time has been synchronized with that of the server).\n\nCertain client-to-server service messages containing data sent by the client to the server (for example, msg\\_id of a recent client query) may, nonetheless, be processed on the client even if the time appears to be \u201cincorrect\u201d. This is especially true of messages to change server\\_salt and notifications of invalid client time. See [Mobile Protocol: Service Messages](https://core.telegram.org/mtproto/service_messages).\n\n### [](#storing-an-authorization-key-on-a-client-device)Storing an Authorization Key on a Client Device\n\nIt may be suggested to users concerned with security that they password protect the authorization key in approximately the same way as in ssh. This can be accomplished by prepending the value of a cryptographic hash function, such as SHA-256, of the key to the front of the key, following which the entire string is encrypted using AES in CBC mode and a key equal to the user's (text) password. When the user inputs the password, the stored protected password is decrypted and verified by checking the SHA-256 value. From the user's standpoint, this is practically the same as using an application or a website password.\n\n### [](#unencrypted-messages)Unencrypted Messages\n\nSpecial plain-text messages may be used to create an authorization key as well as to perform a time synchronization. They begin with auth\\_key\\_id = 0 (64 bits) which means that there is no auth\\_key. This is followed directly by the message body in serialized format without internal or external headers. A message identifier (64 bits) and body length in bytes (32 bytes) are added before the message body.\n\nOnly a very limited number of messages of special types can be transmitted as plain text.\n\n### [](#schematic-presentation-of-messages)Schematic Presentation of Messages\n\n#### [](#encrypted-message)Encrypted Message\n\n|     |     |     |\n| --- | --- | --- |\n| [**auth\\_key\\_id**](#key-identifier-auth-key-id)  <br>int64 | [**msg\\_key**](#message-key-msg-key)  <br>int128 | [**encrypted\\_data**](#encrypted-message-encrypted-data)  <br>bytes |\n\n#### [](#encrypted-message-encrypted-data)Encrypted Message: _encrypted\\_data_\n\nContains the cypher text for the following data:\n\n|     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- |\n| [**salt**](#server-salt)  <br>int64 | [**session\\_id**](#session)  <br>int64 | [**message\\_id**](#message-identifier-msg-id)  <br>int64 | [**seq\\_no**](#message-sequence-number-msg-seqno)  <br>int32 | **message\\_data\\_length**  <br>int32 | **message\\_data**  <br>bytes | **padding**12..1024  <br>bytes |\n\n#### [](#unencrypted-message)Unencrypted Message\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n| [**auth\\_key\\_id**](#key-identifier-auth-key-id) = `0`  <br>int64 | [**message\\_id**](#message-identifier-msg-id)  <br>int64 | **message\\_data\\_length**  <br>int32 | **message\\_data**  <br>bytes |\n\n**MTProto 2.0 uses 12..1024 padding bytes, instead of the 0..15 used in MTProto 1.0**\n\n### [](#creating-an-authorization-key)Creating an Authorization Key\n\nAn authorization key is normally created once for every user during the application installation process immediately prior to registration. Registration itself, in actuality, occurs after the authorization key is created. However, a user may be prompted to complete the registration form while the authorization key is being generated in the background. Intervals between user key strokes may be used as a source of entropy in the generation of high-quality random numbers required for the creation of an authorization key.\n\nSee [Creating an Authorization Key](https://core.telegram.org/mtproto/auth_key).\n\nDuring the creation of the authorization key, the client obtains its server salt (to be used with the new key for all communication in the near future). The client then creates an encrypted session using the newly generated key, and subsequent communication occurs within that session (including the transmission of the user's registration information and phone number validation) unless the client creates a new session. The client is free to create new or additional sessions at any time by choosing a new random session\\_id.",
    "url": "https://core.telegram.org/mtproto/description"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/mtproto/service_messages",
      "title": "\ufeffService Messages",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "\ufeffService Messages"
        },
        {
          "property": "og:description",
          "content": "Response to an RPC query\nA response to an RPC query is normally wrapped as follows:\nrpc_result#f35c6d01 req_msg_id:long\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:06:54 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "6288",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Service Messages\n\n#### [](#response-to-an-rpc-query)Response to an RPC query\n\nA response to an RPC query is normally wrapped as follows:\n\n```\nrpc_result#f35c6d01 req_msg_id:long result:Object = RpcResult;\n```\n\nHere req\\_msg\\_id is the identifier of the message sent by the other party and containing an RPC query. This way, the recipient knows that the result is a response to the specific RPC query in question. At the same time, this response serves as acknowledgment of the other party's receipt of the req\\_msg\\_id message.\n\nNote that the response to an RPC query must also be acknowledged. Most frequently, this coincides with the transmission of the next message (which may have a container attached to it carrying a service message with the acknowledgment).\n\n#### [](#rpc-error)RPC Error\n\nThe result field returned in response to any RPC query may also contain an error message in the following format:\n\n```\nrpc_error#2144ca19 error_code:int error_message:string = RpcError;\n```\n\n#### [](#cancellation-of-an-rpc-query)Cancellation of an RPC Query\n\nIn certain situations, the client does not want to receive a response to an already transmitted RPC query, for example because the response turns out to be long and the client has decided to do without it because of insufficient link capacity. Simply interrupting the TCP connection will not have any effect because the server would re-send the missing response at the first opportunity. Therefore, the client needs a way to cancel receipt of the RPC response message, actually acknowledging its receipt prior to it being in fact received, which will settle the server down and prevent it from re-sending the response. However, the client does not know the RPC response's msg\\_id prior to receiving the response; the only thing it knows is the req\\_msg\\_id. i. e. the msg\\_id of the relevant RPC query. Therefore, a special query is used:\n\n```\nrpc_drop_answer#58e4a740 req_msg_id:long = RpcDropAnswer;\n```\n\nThe response to this query returns as one of the following messages wrapped in rpc\\_result and requiring an acknowledgment:\n\n```\nrpc_answer_unknown#5e2ad36e = RpcDropAnswer;\nrpc_answer_dropped_running#cd78e586 = RpcDropAnswer;\nrpc_answer_dropped#a43ad8b7 msg_id:long seq_no:int bytes:int = RpcDropAnswer;\n```\n\nThe first version of the response is used if the server remembers nothing of the incoming req\\_msg\\_id (if it has already been responded to, for example). The second version is used if the response was canceled while the RPC query was being processed (where the RPC query itself was still fully processed); in this case, the same rpc\\_answer\\_dropped\\_running is also returned in response to the original query, and both of these responses require an acknowledgment from the client. The final version means that the RPC response was removed from the server's outgoing queue, and its msg\\_id, seq\\_no, and length in bytes are transmitted to the client.\n\nNote that rpc\\_answer\\_dropped\\_running and rpc\\_answer\\_dropped serve as acknowledgments of the server's receipt of the original query (the same one, the response to which we wish to forget). In addition, same as for any RPC queries, any response to rpc\\_drop\\_answer is an acknowledgment for rpc\\_drop\\_answer itself.\n\nAs an alternative to using rpc\\_drop\\_answer, a new session may be created after the connection is reset and the old session is removed through destroy\\_session.\n\n#### [](#messages-associated-with-querying-changing-and-receiving-the-status-of-other-messages)Messages associated with querying, changing, and receiving the status of other messages\n\nSee [Mobile Protocol: Service Messages about Messages](https://core.telegram.org/mtproto/service_messages_about_messages)\n\n#### [](#request-for-several-future-salts)Request for several future salts\n\nThe client may at any time request from the server several (between 1 and 64) future server salts together with their validity periods. Having stored them in persistent memory, the client may use them to send messages in the future even if it changes sessions (a server salt is attached to the authorization key rather than being session-specific).\n\n```\nget_future_salts#b921bd04 num:int = FutureSalts;\nfuture_salt#0949d9dc valid_since:int valid_until:int salt:long = FutureSalt;\nfuture_salts#ae500895 req_msg_id:long now:int salts:vector<future_salt> = FutureSalts;\n```\n\nThe client must check to see that the response's req\\_msg\\_id in fact coincides with msg\\_id of the query for get\\_future\\_salts. The server returns a maximum of num future server salts (may return fewer). The response serves as the acknowledgment of the query and does not require an acknowledgment itself.\n\n#### [](#ping-messages-ping-pong)Ping Messages (PING/PONG)\n\n```\nping#7abe77ec ping_id:long = Pong;\n```\n\nA response is usually returned to the same connection:\n\n```\npong#347773c5 msg_id:long ping_id:long = Pong;\n```\n\nThese messages do not require acknowledgments. A pong is transmitted only in response to a ping while a ping can be initiated by either side.\n\n#### [](#deferred-connection-closure--ping)Deferred Connection Closure + PING\n\n```\nping_delay_disconnect#f3427b8c ping_id:long disconnect_delay:int = Pong;\n```\n\nWorks like ping. In addition, after this is received, the server starts a timer which will close the current connection disconnect\\_delay seconds later unless it receives a new message of the same type which automatically resets all previous timers. If the client sends these pings once every 60 seconds, for example, it may set disconnect\\_delay equal to 75 seconds.\n\n#### [](#request-to-destroy-session)Request to Destroy Session\n\nUsed by the client to notify the server that it may forget the data from a different session belonging to the same user (i. e. with the same auth\\_key\\_id). The result of this being applied to the current session is undefined.\n\n```\ndestroy_session_ok#e22045fc session_id:long = DestroySessionRes;\ndestroy_session_none#62d350c9 session_id:long = DestroySessionRes;\n\n---functions---\n\ndestroy_session#e7512126 session_id:long = DestroySessionRes;\n```\n\n#### [](#new-session-creation-notification)New Session Creation Notification\n\nThe server notifies the client that a new session (from the server's standpoint) had to be created to handle a client message. If, after this, the server receives a message with an even smaller msg\\_id within the same session, a similar notification will be generated for this msg\\_id as well. No such notifications are generated for high msg\\_id values.\n\n```\nnew_session_created#9ec20908 first_msg_id:long unique_id:long server_salt:long = NewSession\n```\n\nThe unique\\_id parameter is generated by the server every time a session is (re-)created.\n\nThis notification must be acknowledged by the client. It is necessary, for instance, for the client to understand that there is, in fact, a \u201cgap\u201d in the stream of long poll notifications received from the server (the user may have failed to receive notifications during some period of time).\n\nNotice that the server may unilaterally destroy (close) any existing client sessions with all pending messages and notifications, without sending any notifications. This happens, for example, if the session is inactive for a long time, and the server runs out of memory. If the client at some point decides to send new messages to the server using the old session, already forgotten by the server, such a \"new session created\" notification will be generated. The client is expected to handle such situations gracefully.\n\n### [](#containers)Containers\n\n_Containers_ are messages containing several other messages. Used for the ability to transmit several RPC queries and/or service messages at the same time, using HTTP or even TCP or UDP protocol. A container may only be accepted or rejected by the other party as a whole.\n\n#### [](#simple-container)Simple Container\n\nA simple container carries several messages as follows:\n\n```\nmsg_container#73f1f8dc messages:vector message = MessageContainer;\n```\n\nHere message refers to any message together with its length and msg\\_id:\n\n```\nmessage msg_id:long seqno:int bytes:int body:Object = Message;\n```\n\n`bytes` is the number of bytes in the body serialization. All messages in a container must have msg\\_id lower than that of the container itself. A container does not require an acknowledgment and may not carry other simple containers. When messages are re-sent, they may be combined into a container in a different manner or sent individually.\n\nMTProto container can have at have at most `1024` messages. Clients should group acknowledgments, state requests and message resend requests into three separate [`msgs_ack`\u00a0\u00bb](https://core.telegram.org/mtproto/service_messages_about_messages#acknowledgment-of-receipt), [`msgs_state_req`\u00a0\u00bb](https://core.telegram.org/mtproto/service_messages_about_messages#request-for-message-status-information), [`msg_resend_req`\u00a0\u00bb](https://core.telegram.org/mtproto/service_messages_about_messages#explicit-request-to-re-send-messages) service messages with at most 8192 IDs each.\n\nEmpty containers are also allowed. They are used by the server, for example, to respond to an HTTP request when the timeout specified in http\\_wait expires, and there are no messages to transmit.\n\n[Example implementation](https://github.com/tdlib/td/blob/master/td/mtproto/SessionConnection.cpp).\n\n#### [](#message-copies)Message Copies\n\nIn some situations, an old message with a msg\\_id that is no longer valid needs to be re-sent. Then, it is wrapped in a copy container:\n\n```\nmsg_copy#e06046b2 orig_message:Message = MessageCopy;\n```\n\nOnce received, the message is processed as if the wrapper were not there. However, if it is known for certain that the message orig\\_message.msg\\_id was received, then the new message is not processed (while at the same time, it and orig\\_message.msg\\_id are acknowledged). The value of orig\\_message.msg\\_id must be lower than the container's msg\\_id.\n\nThis is not used at this time, because an old message can be wrapped in a simple container with the same result.\n\n#### [](#packed-object)Packed Object\n\nUsed to replace any other object (or rather, a serialization thereof) with its archived (gzipped) representation:\n\n```\ngzip_packed#3072cfa1 packed_data:string = Object;\n```\n\nAt the present time, it is supported in the body of an RPC response (i.e., as result in rpc\\_result) and generated by the server for a limited number of high-level queries. In addition, it may be used to transmit non-service messages (i. e. RPC queries) from client to server.\n\n### [](#http-wait-long-poll)HTTP Wait/Long Poll\n\nThe following special service query not requiring an acknowledgement (which must be transmitted only through an HTTP connection) is used to enable the server to send messages in the future to the client using HTTP protocol:\n\n```\nhttp_wait#9299359f max_delay:int wait_after:int max_wait:int = HttpWait;\n```\n\nWhen such a message (or a container carrying such a message) is received, the server either waits `max_delay` milliseconds, whereupon it forwards all the messages that it is holding on to the client if there is at least one message queued in session (if needed, by placing them into a container to which acknowledgments may also be added); or else waits no more than `max_wait` milliseconds until such a message is available. If a message never appears, an empty container is transmitted.\n\nThe `max_delay` parameter denotes the maximum number of milliseconds that has elapsed between the first message for this session and the transmission of an HTTP response. The `wait_after` parameter works as follows: after the receipt of the latest message for a particular session, the server waits another `wait_after` milliseconds in case there are more messages. If there are no additional messages, the result is transmitted (a container with all the messages). If more messages appear, the `wait_after` timer is reset.\n\nAt the same time, the `max_delay` parameter has higher priority than `wait_after`, and `max_wait` has higher priority than `max_delay`.\n\nThis message does not require a response or an acknowledgement. If the container transmitted over HTTP carries several such messages, the behavior is undefined (in fact, the latest parameter will be used).\n\nIf no `http_wait` is present in container, default values `max_delay=0` (milliseconds), `wait_after=0` (milliseconds), and `max_wait=25000` (milliseconds) are used.\n\nIf the client's ping of the server takes a long time, it may make sense to set `max_delay` to a value that is comparable in magnitude to ping time.\n\n## [](#destruction-of-a-permanent-auth-key)Destruction of a permanent auth key\n\n```\ndestroy_auth_key_ok#f660e1d4 = DestroyAuthKeyRes;\ndestroy_auth_key_none#0a9f2259 = DestroyAuthKeyRes;\ndestroy_auth_key_fail#ea109b13 = DestroyAuthKeyRes;\n\n---functions---\n\ndestroy_auth_key#d1435160 = DestroyAuthKeyRes;\n```\n\n`destroy_auth_key` should be called whenever a permanent auth key isn't needed anymore, such as after the user was logged out.",
    "url": "https://core.telegram.org/mtproto/service_messages"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/mtproto/samples-auth_key",
      "title": "Auth key generation example",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Auth key generation example"
        },
        {
          "property": "og:image",
          "content": "71a15765997de28d38"
        },
        {
          "property": "og:description",
          "content": "A full auth key generation example"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:06:54 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "14241",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Auth key generation example\n\nIn the examples below, the [transport](https://core.telegram.org/mtproto#transport) headers are omitted:\n\n> For example, for the [abridged version of the transport \u00bb](https://core.telegram.org/mtproto/mtproto-transports#abridged), the client sends `0xef` as the first byte (**important:** only prior to the very first data packet), then the packet length is encoded with a single byte (`0x01-0x7e` = data length divided by 4; or `0x7f` followed by 3 bytes (little endian) divided by 4) followed by the data itself. In this case, server responses have the same structure (although the server does not send `0xef`as the first byte).\n\nDetailed documentation on creating authorization keys is available [here \u00bb](https://core.telegram.org/mtproto/auth_key).\n\n#### [](#dh-exchange-initiation)DH exchange initiation\n\n##### [](#1-client-sends-query-to-server)1) Client sends query to server\n\nSent payload (excluding transport headers/trailers):\n\n```\n0000 | 00 00 00 00 00 00 00 00 60 97 05 00 EB E5 77 67\n0010 | 14 00 00 00 F1 8E 7E BE 79 F0 AF B5 02 52 E5 FC\n0020 | 96 92 4B FC EC DA 4F 05\n```\n\nPayload (de)serialization:\n\n```\nreq_pq_multi#be7e8ef1 nonce:int128 = ResPQ;\n```\n\n| Parameter | Offset, Length in bytes | Value | Description |\n| --- | --- | --- | --- |\n| auth\\_key\\_id | 0, 8 | `0000000000000000` | 0 since the message is in plain text |\n| message\\_id | 8, 8 | `60970500EBE57767` | Message ID generated as specified [here \u00bb](https://core.telegram.org/mtproto/description#message-identifier-msg-id) (unixtime() << 32) + (N\\*4) |\n| message\\_length | 16, 4 | `14000000` (20 in decimal) | Message body length |\n| %(req\\_pq\\_multi) | 20, 4 | `f18e7ebe` | _req\\_pq\\_multi_ constructor number from TL schema |\n| nonce | 24, 16 | `79F0AFB50252E5FC96924BFCECDA4F05` | Random number |\n\n##### [](#2-server-sends-response-of-the-form)2) Server sends response of the form\n\nReceived payload (excluding transport headers/trailers):\n\n```\n0000 | 00 00 00 00 00 00 00 00 01 28 FB D2 EB E5 77 67\n0010 | 50 00 00 00 63 24 16 05 79 F0 AF B5 02 52 E5 FC\n0020 | 96 92 4B FC EC DA 4F 05 80 17 75 A3 EF BF D2 70\n0030 | 1A A2 8A D7 27 BE 46 46 08 13 0B 74 75 66 9F EB\n0040 | 8B 00 00 00 15 C4 B5 1C 03 00 00 00 85 FD 64 DE\n0050 | 85 1D 9D D0 A5 B7 F7 09 35 5F C3 0B 21 6B E8 6C\n0060 | 02 2B B4 C3\n```\n\nPayload (de)serialization:\n\n```\nresPQ#05162463 nonce:int128 server_nonce:int128 pq:string server_public_key_fingerprints:Vector<strlong> = ResPQ;\n```\n\n| Parameter | Offset, Length in bytes | Value | Description |\n| --- | --- | --- | --- |\n| auth\\_key\\_id | 0, 8 | `0000000000000000` | 0 since the message is in plain text |\n| message\\_id | 8, 8 | `0128FBD2EBE57767` | Message ID generated as specified [here \u00bb](https://core.telegram.org/mtproto/description#message-identifier-msg-id) (unixtime() << 32) + (N\\*4) |\n| message\\_length | 16, 4 | `50000000` (80 in decimal) | Message body length |\n| %(resPQ) | 20, 4 | `63241605` | _resPQ_ constructor number from TL schema |\n| nonce | 24, 16 | `79F0AFB50252E5FC96924BFCECDA4F05` | Value generated by client in Step 1 |\n| server\\_nonce | 40, 16 | `801775A3EFBFD2701AA28AD727BE4646` | Server-generated random number |\n| pq  | 56, 12 | `08130B7475669FEB8B000000`  <br>TL byte deserialization  <br>\\=> bigendian conversion to decimal  <br>\\=> 1372318559046200203 | Single-byte prefix denoting length, an 8-byte string, and three bytes of padding |\n| %(Vector strlong) | 68, 4 | `15c4b51c` | _Vector t_ constructor number from TL schema |\n| count | 72, 4 | `03000000` | Number of elements in server\\_public\\_key\\_fingerprints |\n| server\\_public\\_key\\_fingerprints\\[0\\] | 76, 8 | `85FD64DE851D9DD0` | 64 lower-order bits of `SHA1(server_public_key)` |\n| server\\_public\\_key\\_fingerprints\\[1\\] | 84, 8 | `A5B7F709355FC30B` | 64 lower-order bits of `SHA1(server_public_key)` |\n| server\\_public\\_key\\_fingerprints\\[2\\] | 92, 8 | `216BE86C022BB4C3` | 64 lower-order bits of `SHA1(server_public_key)` |\n\nIn our case, the client only has the following public keys, with the following fingerprints:\n\n*   `85FD64DE851D9DD0`\n\nLet's choose the only matching key, the one with fingerprint equal to `85FD64DE851D9DD0`.\n\n#### [](#proof-of-work)Proof of work\n\n##### [](#3-client-decomposes-pq-into-prime-factors-such-that-p-lt-q)3) Client decomposes pq into prime factors such that p < q.\n\n```\npq = 1372318559046200203\n```\n\nDecompose into 2 prime cofactors `p < q`: `1372318559046200203 = 1141464581 * 1202243663`\n\n```\np = 1141464581\nq = 1202243663\n```\n\n#### [](#presenting-proof-of-work-server-authentication)Presenting proof of work; Server authentication\n\n##### [](#4-encrypted-data-payload-generation)4) `encrypted_data` payload generation\n\nFirst of all, generate an `encrypted_data` payload as follows:\n\nGenerated payload (excluding transport headers/trailers):\n\n```\n0000 | 95 5F F5 A9 08 13 0B 74 75 66 9F EB 8B 00 00 00\n0010 | 04 44 09 5E 05 00 00 00 04 47 A8 C8 4F 00 00 00\n0020 | 79 F0 AF B5 02 52 E5 FC 96 92 4B FC EC DA 4F 05\n0030 | 80 17 75 A3 EF BF D2 70 1A A2 8A D7 27 BE 46 46\n0040 | 26 4F 83 5B 0B 7B DF F9 C6 ED 6C F8 19 FD 6D F5\n0050 | DC D1 7E 90 D6 7A DD 2C 2C 1E 37 75 C7 A6 A0 AC\n0060 | 02 00 00 00\n```\n\nPayload (de)serialization:\n\n```\np_q_inner_data_dc#a9f55f95 pq:string p:string q:string nonce:int128 server_nonce:int128 new_nonce:int256 dc:int = P_Q_inner_data;\n```\n\n| Parameter | Offset, Length in bytes | Value | Description |\n| --- | --- | --- | --- |\n| %(p\\_q\\_inner\\_data\\_dc) | 0, 4 | `955ff5a9` | _p\\_q\\_inner\\_data\\_dc_ constructor number from TL schema |\n| pq  | 4, 12 | `08130B7475669FEB8B000000`  <br>TL byte deserialization  <br>\\=> bigendian conversion to decimal  <br>\\=> 1372318559046200203 | Single-byte prefix denoting length, 8-byte string, and three bytes of padding |\n| p   | 16, 8 | `0444095E05000000`  <br>TL byte deserialization  <br>\\=> bigendian conversion to decimal  <br>\\=> 1141464581 | First prime cofactor: single-byte prefix denoting length, 4-byte string, and three bytes of padding |\n| q   | 24, 8 | `0447A8C84F000000`  <br>TL byte deserialization  <br>\\=> bigendian conversion to decimal  <br>\\=> 1202243663 | Second prime cofactor: single-byte prefix denoting length, 4-byte string, and three bytes of padding |\n| nonce | 32, 16 | `79F0AFB50252E5FC96924BFCECDA4F05` | Value generated by client in Step 1 |\n| server\\_nonce | 48, 16 | `801775A3EFBFD2701AA28AD727BE4646` | Value received from server in Step 2 |\n| new\\_nonce | 64, 32 | `264F835B0B7BDFF9C6ED6CF819FD6DF5` `DCD17E90D67ADD2C2C1E3775C7A6A0AC` | Client-generated random number |\n| dc  | 96, 4 | `02000000` (2 in decimal) | DC ID: `10000` (decimal) has to be added to the DC ID to connect to the test servers; it has to be made negative if the DC we're connecting to is a media (not CDN) DC. |\n\nThe serialization of _P\\_Q\\_inner\\_data_ produces **data**, which is used to generate **encrypted\\_data** as specified in [step 4.1](https://core.telegram.org/mtproto/auth_key).  \nThese are the inputs to the algorithm specified in [step 4.1](https://core.telegram.org/mtproto/auth_key):\n\n```\ndata = 955FF5A908130B7475669FEB8B0000000444095E050000000447A8C84F00000079F0AFB50252E5FC96924BFCECDA4F05801775A3EFBFD2701AA28AD727BE4646264F835B0B7BDFF9C6ED6CF819FD6DF5DCD17E90D67ADD2C2C1E3775C7A6A0AC02000000\nrandom_padding_bytes = C1C3E221C1EAECF4788AC3FEA0DECFEFD0E81AE6C6A1AB2AB8729D0634E08A3A12A9D53E06134F87B74BBD9EC90793B091C7FBF4CDBCBE4536397902388D4F68EBAA138CCD068244DB026332B7FC17E5DFAC09E7A71FA5353E3EEBDC\n```\n\nAnd this is the output:\n\n```\nencrypted_data = 35D750FBDF8B804F609512959103977D8F3B90189B7B2DE9C14F53FF8B5910AB2371A1B8D855B5787B94BC67068CAE657367C68170C0DE7E3DBEA38980F15A4BE1C0A6F3B2C0FF279D68496585D2F58924EE2CCCB55746FABAAE2DC0CCBB9E168B79ABC0BC7E68BEE0130708E680938F7A2BFA633285DA63784C8EBEF6156755504F68006E66CDF346B13B8512ABE830706DD9265329EFDE99DFB0F72AA11119140C941537353423295C519F04A25CACEE3293E8CF2C799515175E96DD36F913BB4B1A19D92EAE3BC8883A333523AC18D4A5165A32FD67990497F1208EF643CA0093D01DCF2E537DCBCC22581630291B7217600B8725E657383D156905B2BF16\n```\n\nThe length of the final string is 256 bytes.\n\n##### [](#5-send-req-dh-params-query-with-generated-encrypted-data)5) Send req\\_DH\\_params query with generated `encrypted_data`\n\nSent payload (excluding transport headers/trailers):\n\n```\n0000 | 00 00 00 00 00 00 00 00 68 E5 08 00 EB E5 77 67\n0010 | 40 01 00 00 BE E4 12 D7 79 F0 AF B5 02 52 E5 FC\n0020 | 96 92 4B FC EC DA 4F 05 80 17 75 A3 EF BF D2 70\n0030 | 1A A2 8A D7 27 BE 46 46 04 44 09 5E 05 00 00 00\n0040 | 04 47 A8 C8 4F 00 00 00 85 FD 64 DE 85 1D 9D D0\n0050 | FE 00 01 00 35 D7 50 FB DF 8B 80 4F 60 95 12 95\n0060 | 91 03 97 7D 8F 3B 90 18 9B 7B 2D E9 C1 4F 53 FF\n0070 | 8B 59 10 AB 23 71 A1 B8 D8 55 B5 78 7B 94 BC 67\n0080 | 06 8C AE 65 73 67 C6 81 70 C0 DE 7E 3D BE A3 89\n0090 | 80 F1 5A 4B E1 C0 A6 F3 B2 C0 FF 27 9D 68 49 65\n00A0 | 85 D2 F5 89 24 EE 2C CC B5 57 46 FA BA AE 2D C0\n00B0 | CC BB 9E 16 8B 79 AB C0 BC 7E 68 BE E0 13 07 08\n00C0 | E6 80 93 8F 7A 2B FA 63 32 85 DA 63 78 4C 8E BE\n00D0 | F6 15 67 55 50 4F 68 00 6E 66 CD F3 46 B1 3B 85\n00E0 | 12 AB E8 30 70 6D D9 26 53 29 EF DE 99 DF B0 F7\n00F0 | 2A A1 11 19 14 0C 94 15 37 35 34 23 29 5C 51 9F\n0100 | 04 A2 5C AC EE 32 93 E8 CF 2C 79 95 15 17 5E 96\n0110 | DD 36 F9 13 BB 4B 1A 19 D9 2E AE 3B C8 88 3A 33\n0120 | 35 23 AC 18 D4 A5 16 5A 32 FD 67 99 04 97 F1 20\n0130 | 8E F6 43 CA 00 93 D0 1D CF 2E 53 7D CB CC 22 58\n0140 | 16 30 29 1B 72 17 60 0B 87 25 E6 57 38 3D 15 69\n0150 | 05 B2 BF 16\n```\n\nPayload (de)serialization:\n\n```\nreq_DH_params#d712e4be nonce:int128 server_nonce:int128 p:string q:string public_key_fingerprint:long encrypted_data:string = Server_DH_Params;\n```\n\n| Parameter | Offset, Length in bytes | Value | Description |\n| --- | --- | --- | --- |\n| auth\\_key\\_id | 0, 8 | `0000000000000000` | 0 since the message is in plain text |\n| message\\_id | 8, 8 | `68E50800EBE57767` | Message ID generated as specified [here \u00bb](https://core.telegram.org/mtproto/description#message-identifier-msg-id) (unixtime() << 32) + (N\\*4) |\n| message\\_length | 16, 4 | `40010000` (320 in decimal) | Message body length |\n| %(req\\_DH\\_params) | 20, 4 | `bee412d7` | _req\\_DH\\_params_ constructor number from TL schema |\n| nonce | 24, 16 | `79F0AFB50252E5FC96924BFCECDA4F05` | Value generated by client in Step 1 |\n| server\\_nonce | 40, 16 | `801775A3EFBFD2701AA28AD727BE4646` | Value received from server in Step 2 |\n| p   | 56, 8 | `0444095E05000000`  <br>TL byte deserialization  <br>\\=> bigendian conversion to decimal  <br>\\=> 1141464581 | First prime cofactor: single-byte prefix denoting length, 4-byte string, and three bytes of padding |\n| q   | 64, 8 | `0447A8C84F000000`  <br>TL byte deserialization  <br>\\=> bigendian conversion to decimal  <br>\\=> 1202243663 | Second prime cofactor: single-byte prefix denoting length, 4-byte string, and three bytes of padding |\n| public\\_key\\_fingerprint | 72, 8 | `85FD64DE851D9DD0` | `fingerprint` of public key used |\n| encrypted\\_data | 80, 260 | `FE00010035D750FBDF8B804F60951295` `9103977D8F3B90189B7B2DE9C14F53FF` `8B5910AB2371A1B8D855B5787B94BC67` `068CAE657367C68170C0DE7E3DBEA389` `80F15A4BE1C0A6F3B2C0FF279D684965` `85D2F58924EE2CCCB55746FABAAE2DC0` `CCBB9E168B79ABC0BC7E68BEE0130708` `E680938F7A2BFA633285DA63784C8EBE` `F6156755504F68006E66CDF346B13B85` `12ABE830706DD9265329EFDE99DFB0F7` `2AA11119140C941537353423295C519F` `04A25CACEE3293E8CF2C799515175E96` `DD36F913BB4B1A19D92EAE3BC8883A33` `3523AC18D4A5165A32FD67990497F120` `8EF643CA0093D01DCF2E537DCBCC2258` `1630291B7217600B8725E657383D1569`  <br>`05B2BF16` | Value generated above |\n\n##### [](#6-server-responds-with)6) Server responds with:\n\nReceived payload (excluding transport headers/trailers):\n\n```\n0000 | 00 00 00 00 00 00 00 00 01 AC 68 E8 EB E5 77 67\n0010 | 78 02 00 00 5C 07 E8 D0 79 F0 AF B5 02 52 E5 FC\n0020 | 96 92 4B FC EC DA 4F 05 80 17 75 A3 EF BF D2 70\n0030 | 1A A2 8A D7 27 BE 46 46 FE 50 02 00 9A 46 DC E9\n0040 | D5 4D E4 2C 5E 4F 0D 19 D7 76 C8 C1 F3 18 EB 1A\n0050 | F8 83 65 00 B5 DA 1B 1A 80 D5 80 38 A5 54 FE AF\n0060 | 62 7E 6D C4 E4 92 49 43 60 2D 8E 19 48 8A 6E 38\n0070 | A0 B8 13 46 25 7E 4D B5 BE 6E 9E 00 FE 99 1F D6\n0080 | C5 6D 61 8D 3D 0A 24 93 20 26 77 AC 7C F2 45 84\n0090 | 6C 14 94 F6 0D 08 E6 1B 7F EA 8B B7 2D D8 BA 53\n00A0 | F6 CB F7 8F 2B 38 77 57 FE 2E 7F 34 5A 36 8A BB\n00B0 | EC 69 4E FD E0 66 DC 3D 23 75 CF 01 0D 1E 1B F4\n00C0 | 35 17 24 B2 69 E6 8B 54 14 09 E0 76 49 FE EE 1D\n00D0 | F6 DC 5B 3C 18 16 68 79 CC 67 87 67 82 D4 3E C9\n00E0 | B7 9A F8 AC F6 78 68 F4 AB 7D E4 08 26 03 B6 70\n00F0 | EC 62 2B 5D FB BB 9E 90 8F E0 24 45 93 A4 D2 24\n0100 | 74 31 60 20 CE 0E 76 A5 C6 AD 02 1D 39 89 45 1E\n0110 | 0B 3E 8E E4 8C 35 59 92 DB 90 30 0B 37 6B 29 6E\n0120 | 18 BB 47 03 00 C7 DF 14 BF AE 05 A4 52 58 3E AD\n0130 | 93 16 79 41 20 8B BB 5A C8 09 9F 04 94 AA 27 D6\n0140 | C1 A5 B6 78 AD 12 B1 9F B7 D4 23 BB 4A 29 C0 EB\n0150 | 03 16 9E C5 38 21 1D 82 FE B5 0F 20 96 52 D0 0D\n0160 | 33 99 98 6B 3B 0C A0 9C EB 5E 2F CC B4 90 17 FE\n0170 | E5 F5 49 30 D9 DE 37 11 72 B3 FF 10 80 D7 33 E5\n0180 | DD 62 0B 42 DB B7 6A 3E 9C 25 B1 B8 9A B8 AA 35\n0190 | C0 99 32 2C A3 90 E2 69 D8 81 8E A8 72 20 08 DE\n01A0 | 53 77 05 B4 07 1D A7 DE F5 02 FC D5 A3 0D 20 26\n01B0 | EA 8A 87 A0 F4 91 58 03 A8 27 1B 66 56 90 E9 6A\n01C0 | AB DF C0 B4 79 53 8A E6 1B A7 01 ED FF 14 F7 21\n01D0 | 23 70 95 8E D4 1E C8 E4 1E 42 7C 40 7F BB 03 60\n01E0 | 56 5C 1A 6B DF 28 5B C5 12 0B 11 63 1B 75 80 3D\n01F0 | FB F8 AA EB DC 47 41 8A 1F 06 17 47 00 5A BA 93\n0200 | 14 EE 5E 26 1C 3E 50 4E AE 0A DA AC 83 2B 41 4B\n0210 | F6 F7 00 29 82 CE 5B 5A E2 51 37 61 EE 29 FA 1C\n0220 | BA 09 0B 9A 39 AA CE 29 48 A8 0E 14 4D B2 C6 22\n0230 | 58 9D 79 FB 42 E3 DA E4 91 10 4E 8A 65 3D ED 76\n0240 | 29 CD E0 8B 6C 41 E9 0E 55 B0 EB CD 4F 1F C5 0F\n0250 | AD DF 4A 7A 9F 6D 71 1F 09 59 DF EF 04 A7 44 A6\n0260 | AD FD 89 0B 2A B4 05 B9 AD 5F 8E 3F 38 92 81 08\n0270 | F4 CD 0B A5 01 A4 92 FC 46 3B C7 BE 8C 50 6B 5F\n0280 | 7D 24 CC 81 9A 95 92 91 66 B6 E8 14\n```\n\nPayload (de)serialization:\n\n```\nserver_DH_params_ok#d0e8075c nonce:int128 server_nonce:int128 encrypted_answer:string = Server_DH_Params;\n```\n\n| Parameter | Offset, Length in bytes | Value | Description |\n| --- | --- | --- | --- |\n| auth\\_key\\_id | 0, 8 | `0000000000000000` | 0 since the message is in plain text |\n| message\\_id | 8, 8 | `01AC68E8EBE57767` | Message ID generated as specified [here \u00bb](https://core.telegram.org/mtproto/description#message-identifier-msg-id) (unixtime() << 32) + (N\\*4) |\n| message\\_length | 16, 4 | `78020000` (632 in decimal) | Message body length |\n| %(server\\_DH\\_params\\_ok) | 20, 4 | `5c07e8d0` | _server\\_DH\\_params\\_ok_ constructor number from TL schema |\n| nonce | 24, 16 | `79F0AFB50252E5FC96924BFCECDA4F05` | Value generated by client in Step 1 |\n| server\\_nonce | 40, 16 | `801775A3EFBFD2701AA28AD727BE4646` | Value received from server in Step 2 |\n| encrypted\\_answer | 56, 596 | `FE5002009A46DCE9D54DE42C5E4F0D19` `D776C8C1F318EB1AF8836500B5DA1B1A` `80D58038A554FEAF627E6DC4E4924943` `602D8E19488A6E38A0B81346257E4DB5` `BE6E9E00FE991FD6C56D618D3D0A2493` `202677AC7CF245846C1494F60D08E61B` `7FEA8BB72DD8BA53F6CBF78F2B387757` `FE2E7F345A368ABBEC694EFDE066DC3D` `2375CF010D1E1BF4351724B269E68B54` `1409E07649FEEE1DF6DC5B3C18166879` `CC67876782D43EC9B79AF8ACF67868F4` `AB7DE4082603B670EC622B5DFBBB9E90` `8FE0244593A4D22474316020CE0E76A5` `C6AD021D3989451E0B3E8EE48C355992` `DB90300B376B296E18BB470300C7DF14` `BFAE05A452583EAD93167941208BBB5A` `C8099F0494AA27D6C1A5B678AD12B19F` `B7D423BB4A29C0EB03169EC538211D82` `FEB50F209652D00D3399986B3B0CA09C` `EB5E2FCCB49017FEE5F54930D9DE3711` `72B3FF1080D733E5DD620B42DBB76A3E` `9C25B1B89AB8AA35C099322CA390E269` `D8818EA8722008DE537705B4071DA7DE` `F502FCD5A30D2026EA8A87A0F4915803` `A8271B665690E96AABDFC0B479538AE6` `1BA701EDFF14F7212370958ED41EC8E4` `1E427C407FBB0360565C1A6BDF285BC5` `120B11631B75803DFBF8AAEBDC47418A` `1F061747005ABA9314EE5E261C3E504E` `AE0ADAAC832B414BF6F7002982CE5B5A` `E2513761EE29FA1CBA090B9A39AACE29` `48A80E144DB2C622589D79FB42E3DAE4` `91104E8A653DED7629CDE08B6C41E90E` `55B0EBCD4F1FC50FADDF4A7A9F6D711F` `0959DFEF04A744A6ADFD890B2AB405B9` `AD5F8E3F38928108F4CD0BA501A492FC` `463BC7BE8C506B5F7D24CC819A959291`  <br>`66B6E814` | See below |\n\nDecrypt `encrypted_answer` using the reverse of the process specified in [step 6](https://core.telegram.org/mtproto/auth_key#6-server-responds-with):\n\n```\nencrypted_answer = 9A46DCE9D54DE42C5E4F0D19D776C8C1F318EB1AF8836500B5DA1B1A80D58038A554FEAF627E6DC4E4924943602D8E19488A6E38A0B81346257E4DB5BE6E9E00FE991FD6C56D618D3D0A2493202677AC7CF245846C1494F60D08E61B7FEA8BB72DD8BA53F6CBF78F2B387757FE2E7F345A368ABBEC694EFDE066DC3D2375CF010D1E1BF4351724B269E68B541409E07649FEEE1DF6DC5B3C18166879CC67876782D43EC9B79AF8ACF67868F4AB7DE4082603B670EC622B5DFBBB9E908FE0244593A4D22474316020CE0E76A5C6AD021D3989451E0B3E8EE48C355992DB90300B376B296E18BB470300C7DF14BFAE05A452583EAD93167941208BBB5AC8099F0494AA27D6C1A5B678AD12B19FB7D423BB4A29C0EB03169EC538211D82FEB50F209652D00D3399986B3B0CA09CEB5E2FCCB49017FEE5F54930D9DE371172B3FF1080D733E5DD620B42DBB76A3E9C25B1B89AB8AA35C099322CA390E269D8818EA8722008DE537705B4071DA7DEF502FCD5A30D2026EA8A87A0F4915803A8271B665690E96AABDFC0B479538AE61BA701EDFF14F7212370958ED41EC8E41E427C407FBB0360565C1A6BDF285BC5120B11631B75803DFBF8AAEBDC47418A1F061747005ABA9314EE5E261C3E504EAE0ADAAC832B414BF6F7002982CE5B5AE2513761EE29FA1CBA090B9A39AACE2948A80E144DB2C622589D79FB42E3DAE491104E8A653DED7629CDE08B6C41E90E55B0EBCD4F1FC50FADDF4A7A9F6D711F0959DFEF04A744A6ADFD890B2AB405B9AD5F8E3F38928108F4CD0BA501A492FC463BC7BE8C506B5F7D24CC819A95929166B6E814\ntmp_aes_key = E68CA5ABA101FFCA0ADDA66303A57AFFAA2712FB16A7B8DAFC72C25E8A73A368\ntmp_aes_iv = 0A355D4431B9DDD91A51EFF3F7D340D64F0390C53F91DC53C331D43C264F835B\n```\n\nYielding:\n\n```\nanswer_with_hash = 4262AD6A332AC2A3050B5142711CE3B7BFD76FABBA0D89B579F0AFB50252E5FC96924BFCECDA4F05801775A3EFBFD2701AA28AD727BE464603000000FE000100C71CAEB9C6B1C9048E6C522F70F13F73980D40238E3E21C14934D037563D930F48198A0AA7C14058229493D22530F4DBFA336F6E0AC925139543AED44CCE7C3720FD51F69458705AC68CD4FE6B6B13ABDC9746512969328454F18FAF8C595F642477FE96BB2A941D5BCD1D4AC8CC49880708FA9B378E3C4F3A9060BEE67CF9A4A4A695811051907E162753B56B0F6B410DBA74D8A84B2A14B3144E0EF1284754FD17ED950D5965B4B9DD46582DB1178D169C6BC465B0D6FF9CA3928FEF5B9AE4E418FC15E83EBEA0F87FA9FF5EED70050DED2849F47BF959D956850CE929851F0D8115F635B105EE2E4E15D04B2454BF6F4FADF034B10403119CD8E3B92FCC5BFE000100236F6D779877A357465CEC030AC5FDA6D6B377372BFA75574289988FD87D966A29B47E0C00BC788900304EA5E03F3856058C309A6CB508553913788D41A61B1D82B0A2F932C68F18FC21851E66D8649AD9E2092F08C96AD67810724369BF0511E74E1F71F1A825EDDFA1D5DC30E359693C0366FF9FB6828699ACFD1F037116F95ADD42F6C64B580B3287AA32FBA518E4B8C9C7B52413B501247DB05ADDD891794394DB529E66890603BCD75CF70E6151398EE85F6D8178EA72C6A61937BCE32BFDAEA86B57A27EBC379933F54C7D44F3E407ED26685D88F0F10A344CDF62F4E20974B374BA1D41DF223A867DD19713CF0FF71F24465D79258B1742916EE35EE3EBE57767E9A54498509543E9\nanswer = BA0D89B579F0AFB50252E5FC96924BFCECDA4F05801775A3EFBFD2701AA28AD727BE464603000000FE000100C71CAEB9C6B1C9048E6C522F70F13F73980D40238E3E21C14934D037563D930F48198A0AA7C14058229493D22530F4DBFA336F6E0AC925139543AED44CCE7C3720FD51F69458705AC68CD4FE6B6B13ABDC9746512969328454F18FAF8C595F642477FE96BB2A941D5BCD1D4AC8CC49880708FA9B378E3C4F3A9060BEE67CF9A4A4A695811051907E162753B56B0F6B410DBA74D8A84B2A14B3144E0EF1284754FD17ED950D5965B4B9DD46582DB1178D169C6BC465B0D6FF9CA3928FEF5B9AE4E418FC15E83EBEA0F87FA9FF5EED70050DED2849F47BF959D956850CE929851F0D8115F635B105EE2E4E15D04B2454BF6F4FADF034B10403119CD8E3B92FCC5BFE000100236F6D779877A357465CEC030AC5FDA6D6B377372BFA75574289988FD87D966A29B47E0C00BC788900304EA5E03F3856058C309A6CB508553913788D41A61B1D82B0A2F932C68F18FC21851E66D8649AD9E2092F08C96AD67810724369BF0511E74E1F71F1A825EDDFA1D5DC30E359693C0366FF9FB6828699ACFD1F037116F95ADD42F6C64B580B3287AA32FBA518E4B8C9C7B52413B501247DB05ADDD891794394DB529E66890603BCD75CF70E6151398EE85F6D8178EA72C6A61937BCE32BFDAEA86B57A27EBC379933F54C7D44F3E407ED26685D88F0F10A344CDF62F4E20974B374BA1D41DF223A867DD19713CF0FF71F24465D79258B1742916EE35EE3EBE57767E9A54498509543E9\n```\n\nGenerated payload (excluding transport headers/trailers):\n\n```\n0000 | BA 0D 89 B5 79 F0 AF B5 02 52 E5 FC 96 92 4B FC\n0010 | EC DA 4F 05 80 17 75 A3 EF BF D2 70 1A A2 8A D7\n0020 | 27 BE 46 46 03 00 00 00 FE 00 01 00 C7 1C AE B9\n0030 | C6 B1 C9 04 8E 6C 52 2F 70 F1 3F 73 98 0D 40 23\n0040 | 8E 3E 21 C1 49 34 D0 37 56 3D 93 0F 48 19 8A 0A\n0050 | A7 C1 40 58 22 94 93 D2 25 30 F4 DB FA 33 6F 6E\n0060 | 0A C9 25 13 95 43 AE D4 4C CE 7C 37 20 FD 51 F6\n0070 | 94 58 70 5A C6 8C D4 FE 6B 6B 13 AB DC 97 46 51\n0080 | 29 69 32 84 54 F1 8F AF 8C 59 5F 64 24 77 FE 96\n0090 | BB 2A 94 1D 5B CD 1D 4A C8 CC 49 88 07 08 FA 9B\n00A0 | 37 8E 3C 4F 3A 90 60 BE E6 7C F9 A4 A4 A6 95 81\n00B0 | 10 51 90 7E 16 27 53 B5 6B 0F 6B 41 0D BA 74 D8\n00C0 | A8 4B 2A 14 B3 14 4E 0E F1 28 47 54 FD 17 ED 95\n00D0 | 0D 59 65 B4 B9 DD 46 58 2D B1 17 8D 16 9C 6B C4\n00E0 | 65 B0 D6 FF 9C A3 92 8F EF 5B 9A E4 E4 18 FC 15\n00F0 | E8 3E BE A0 F8 7F A9 FF 5E ED 70 05 0D ED 28 49\n0100 | F4 7B F9 59 D9 56 85 0C E9 29 85 1F 0D 81 15 F6\n0110 | 35 B1 05 EE 2E 4E 15 D0 4B 24 54 BF 6F 4F AD F0\n0120 | 34 B1 04 03 11 9C D8 E3 B9 2F CC 5B FE 00 01 00\n0130 | 23 6F 6D 77 98 77 A3 57 46 5C EC 03 0A C5 FD A6\n0140 | D6 B3 77 37 2B FA 75 57 42 89 98 8F D8 7D 96 6A\n0150 | 29 B4 7E 0C 00 BC 78 89 00 30 4E A5 E0 3F 38 56\n0160 | 05 8C 30 9A 6C B5 08 55 39 13 78 8D 41 A6 1B 1D\n0170 | 82 B0 A2 F9 32 C6 8F 18 FC 21 85 1E 66 D8 64 9A\n0180 | D9 E2 09 2F 08 C9 6A D6 78 10 72 43 69 BF 05 11\n0190 | E7 4E 1F 71 F1 A8 25 ED DF A1 D5 DC 30 E3 59 69\n01A0 | 3C 03 66 FF 9F B6 82 86 99 AC FD 1F 03 71 16 F9\n01B0 | 5A DD 42 F6 C6 4B 58 0B 32 87 AA 32 FB A5 18 E4\n01C0 | B8 C9 C7 B5 24 13 B5 01 24 7D B0 5A DD D8 91 79\n01D0 | 43 94 DB 52 9E 66 89 06 03 BC D7 5C F7 0E 61 51\n01E0 | 39 8E E8 5F 6D 81 78 EA 72 C6 A6 19 37 BC E3 2B\n01F0 | FD AE A8 6B 57 A2 7E BC 37 99 33 F5 4C 7D 44 F3\n0200 | E4 07 ED 26 68 5D 88 F0 F1 0A 34 4C DF 62 F4 E2\n0210 | 09 74 B3 74 BA 1D 41 DF 22 3A 86 7D D1 97 13 CF\n0220 | 0F F7 1F 24 46 5D 79 25 8B 17 42 91 6E E3 5E E3\n0230 | EB E5 77 67\n```\n\nPayload (de)serialization:\n\n```\nserver_DH_inner_data#b5890dba nonce:int128 server_nonce:int128 g:int dh_prime:string g_a:string server_time:int = Server_DH_inner_data;\n```\n\n| Parameter | Offset, Length in bytes | Value | Description |\n| --- | --- | --- | --- |\n| %(server\\_DH\\_inner\\_data) | 0, 4 | `ba0d89b5` | _server\\_DH\\_inner\\_data_ constructor number from TL schema |\n| nonce | 4, 16 | `79F0AFB50252E5FC96924BFCECDA4F05` | Value generated by client in Step 1 |\n| server\\_nonce | 20, 16 | `801775A3EFBFD2701AA28AD727BE4646` | Value received from server in Step 2 |\n| g   | 36, 4 | `03000000` (3 in decimal) | Value received from server in Step 2 |\n| dh\\_prime | 40, 260 | `FE000100C71CAEB9C6B1C9048E6C522F` `70F13F73980D40238E3E21C14934D037` `563D930F48198A0AA7C14058229493D2` `2530F4DBFA336F6E0AC925139543AED4` `4CCE7C3720FD51F69458705AC68CD4FE` `6B6B13ABDC9746512969328454F18FAF` `8C595F642477FE96BB2A941D5BCD1D4A` `C8CC49880708FA9B378E3C4F3A9060BE` `E67CF9A4A4A695811051907E162753B5` `6B0F6B410DBA74D8A84B2A14B3144E0E` `F1284754FD17ED950D5965B4B9DD4658` `2DB1178D169C6BC465B0D6FF9CA3928F` `EF5B9AE4E418FC15E83EBEA0F87FA9FF` `5EED70050DED2849F47BF959D956850C` `E929851F0D8115F635B105EE2E4E15D0` `4B2454BF6F4FADF034B10403119CD8E3`  <br>`B92FCC5B` | 2048-bit prime, in big-endian byte order, to be checked as specified in the auth key docs |\n| g\\_a | 300, 260 | `FE000100236F6D779877A357465CEC03` `0AC5FDA6D6B377372BFA75574289988F` `D87D966A29B47E0C00BC788900304EA5` `E03F3856058C309A6CB508553913788D` `41A61B1D82B0A2F932C68F18FC21851E` `66D8649AD9E2092F08C96AD678107243` `69BF0511E74E1F71F1A825EDDFA1D5DC` `30E359693C0366FF9FB6828699ACFD1F` `037116F95ADD42F6C64B580B3287AA32` `FBA518E4B8C9C7B52413B501247DB05A` `DDD891794394DB529E66890603BCD75C` `F70E6151398EE85F6D8178EA72C6A619` `37BCE32BFDAEA86B57A27EBC379933F5` `4C7D44F3E407ED26685D88F0F10A344C` `DF62F4E20974B374BA1D41DF223A867D` `D19713CF0FF71F24465D79258B174291`  <br>`6EE35EE3` | `g_a` diffie-hellman parameter |\n| server\\_time | 560, 4 | `EBE57767` (1735910891 in decimal) | Server time |\n\n##### [](#7-client-computes-random-2048-bit-number-b-using-a-sufficient-amount-of-entropy-and-sends-the-server-a-message)7) Client computes random 2048-bit number _b_ (using a sufficient amount of entropy) and sends the server a message\n\nFirst, generate a secure random 2048-bit number b:\n\n```\nb = F2987DDA0ABCE0B7CE23A7B850BE126641CBAABC1F4C250C839E1844E2E2CBE57BC0A30B45F6C21D8635F5E927DB0D7498A2F03C6A42D3FB2F3787D5B4D63C2F17A6EB197C0412237E528B68D3D70ADCDEEBD7CD6BACEC59D4FB8F17125ED00B95B34A2D5D8A2133937B5DFEF6DB09F0A3A1BC207A87D9FE4761C59880CA551432E4AFFCF3982B11EABC526977215F4AC2CE20FA7C808A971DA8C8A08FF26DEBB326EE580B551BEAF0C4B677FCE00E5C6AAEDA3A5A42F38C9C6E226EEDED0502A6BEFC991CC1E0B504E187206D172E72E05D958009FB8C27616EBDD28247262A33AF25E911C9DC22D9A88C6E31A623E6C1E1011CDBD184F6DFFC4F77F5370F16\n```\n\nThen compute `g_b = pow(g, b) mod dh_prime`\n\n```\ng_b = 5EEDFBF6A2199CD1B06182C5C4E0DC26B69ECDE1AD6430D192CD8A69E7434B66A42900AF29B3F41C619AD383FB3721705CF52C34C0507433F743592EE5D4FC50F64E0F8686870E36179AF8C8F4587BD572E98AF4A8247DE2F524BCD48642B38F36104046D7502CDC14BF39A88422B4B1111D886A326C473D1145E69E37C676E1E8FDA07E470482F853886700AE1E7FFDE69FF6D40547C515110B74C6680C844B61504FE0A2D3E08BB7BAE70016C97D7E6B7FA4CEBFE6B5BE30C884849ADE39CC50FD9B4FB16F671EFE8533D0BF7FF8BF13957F1E0D55E713199CEACC72419AF60CDB1D561084565E9F090141B9F8732B2E806C1B01B25BAFFC4EE1BD5525CB8A\n```\n\n###### 7.1) generation of encrypted\\_data\n\nGenerated payload (excluding transport headers/trailers):\n\n```\n0000 | 54 B6 43 66 79 F0 AF B5 02 52 E5 FC 96 92 4B FC\n0010 | EC DA 4F 05 80 17 75 A3 EF BF D2 70 1A A2 8A D7\n0020 | 27 BE 46 46 00 00 00 00 00 00 00 00 FE 00 01 00\n0030 | 5E ED FB F6 A2 19 9C D1 B0 61 82 C5 C4 E0 DC 26\n0040 | B6 9E CD E1 AD 64 30 D1 92 CD 8A 69 E7 43 4B 66\n0050 | A4 29 00 AF 29 B3 F4 1C 61 9A D3 83 FB 37 21 70\n0060 | 5C F5 2C 34 C0 50 74 33 F7 43 59 2E E5 D4 FC 50\n0070 | F6 4E 0F 86 86 87 0E 36 17 9A F8 C8 F4 58 7B D5\n0080 | 72 E9 8A F4 A8 24 7D E2 F5 24 BC D4 86 42 B3 8F\n0090 | 36 10 40 46 D7 50 2C DC 14 BF 39 A8 84 22 B4 B1\n00A0 | 11 1D 88 6A 32 6C 47 3D 11 45 E6 9E 37 C6 76 E1\n00B0 | E8 FD A0 7E 47 04 82 F8 53 88 67 00 AE 1E 7F FD\n00C0 | E6 9F F6 D4 05 47 C5 15 11 0B 74 C6 68 0C 84 4B\n00D0 | 61 50 4F E0 A2 D3 E0 8B B7 BA E7 00 16 C9 7D 7E\n00E0 | 6B 7F A4 CE BF E6 B5 BE 30 C8 84 84 9A DE 39 CC\n00F0 | 50 FD 9B 4F B1 6F 67 1E FE 85 33 D0 BF 7F F8 BF\n0100 | 13 95 7F 1E 0D 55 E7 13 19 9C EA CC 72 41 9A F6\n0110 | 0C DB 1D 56 10 84 56 5E 9F 09 01 41 B9 F8 73 2B\n0120 | 2E 80 6C 1B 01 B2 5B AF FC 4E E1 BD 55 25 CB 8A\n```\n\nPayload (de)serialization:\n\n```\nclient_DH_inner_data#6643b654 nonce:int128 server_nonce:int128 retry_id:long g_b:string = Client_DH_Inner_Data;\n```\n\n| Parameter | Offset, Length in bytes | Value | Description |\n| --- | --- | --- | --- |\n| %(client\\_DH\\_inner\\_data) | 0, 4 | `54b64366` | _client\\_DH\\_inner\\_data_ constructor number from TL schema |\n| nonce | 4, 16 | `79F0AFB50252E5FC96924BFCECDA4F05` | Value generated by client in Step 1 |\n| server\\_nonce | 20, 16 | `801775A3EFBFD2701AA28AD727BE4646` | Value received from server in Step 2 |\n| g\\_b | 36, 260 | `FE0001005EEDFBF6A2199CD1B06182C5` `C4E0DC26B69ECDE1AD6430D192CD8A69` `E7434B66A42900AF29B3F41C619AD383` `FB3721705CF52C34C0507433F743592E` `E5D4FC50F64E0F8686870E36179AF8C8` `F4587BD572E98AF4A8247DE2F524BCD4` `8642B38F36104046D7502CDC14BF39A8` `8422B4B1111D886A326C473D1145E69E` `37C676E1E8FDA07E470482F853886700` `AE1E7FFDE69FF6D40547C515110B74C6` `680C844B61504FE0A2D3E08BB7BAE700` `16C97D7E6B7FA4CEBFE6B5BE30C88484` `9ADE39CC50FD9B4FB16F671EFE8533D0` `BF7FF8BF13957F1E0D55E713199CEACC` `72419AF60CDB1D561084565E9F090141` `B9F8732B2E806C1B01B25BAFFC4EE1BD`  <br>`5525CB8A` | Single-byte prefix denoting length, a 256-byte (2048-bit) string, and zero bytes of padding |\n| retry\\_id | 296, 8 | `0000000000000000` | Equal to zero at the time of the first attempt; otherwise, it is equal to `auth_key_aux_hash` from the previous failed attempt (see Item 7). |\n\nThe serialization of _Client\\_DH\\_Inner\\_Data_ produces a string **data**. This is used to generate **encrypted\\_data** as specified in [step 6](#7-client-computes-random-2048-bit-number-b-using-a-sufficient-amount-of-entropy-and-sends-the-server-a-message), using the following inputs:\n\n```\ndatanpadding = 8347525EB8B63DE9CE3A1FCC\ntmp_aes_key = E68CA5ABA101FFCA0ADDA66303A57AFFAA2712FB16A7B8DAFC72C25E8A73A368\ntmp_aes_iv = 0A355D4431B9DDD91A51EFF3F7D340D64F0390C53F91DC53C331D43C264F835B\n```\n\nProcess:\n\n```\ndata_with_hash := SHA1(data) + data + padding (0-15 random bytes such that total length is divisible by 16)\nencrypted_data := AES256_ige_encrypt (data_with_hash, tmp_aes_key, tmp_aes_iv);\n```\n\nOutput:\n\n```\nencrypted_data = FA29896EE19D3CCB08FB07CF1C922CFFBF5D38D98BA56D926D63064C77741F423BCE22B5A2C100E34BB5D7CE3027E85E65006205B6926C0E42EF29E7CC24EEC4523650F692A530FB95D57EF3604C490155FB8530C94E9E2EBDF272BDB3DD98FFCA65FF51E5DBCA4CF799D6660F6D0BA1A8B1CE6FE9D26F401B1B79E057EE273CAE14D8D8D60030C862E13B2E49FE97008AEA0EC8ADE90AE3DDDC641AE7C0844A37EFC4DA3B27308B9C40B1FD2028C12B37EA719D593DC7EDC892B8630B82E05168FCC0D76E7CA23106FEF13B09D3BAE83D612CDF2E3A5ADDE4E807EEED660C9921AD364CFF6614350F313A48AB3483F08AB81A226F7763A575F44A04BD53C58A49ABD2EE4A885F2610A8387803E418C371AF9378A0941F2DB0AA9CE019048B6C9ED0C7FCB33985624E2392233CAA5E66A3891AB18544685E96EF5C2B55E69EA2C62B33E6058DA2944F087B803F251A7C\n```\n\nThe length of the final string is 336 bytes.\n\n###### 7.2) set\\_client\\_DH\\_params query\n\nSent payload (excluding transport headers/trailers):\n\n```\n0000 | 00 00 00 00 00 00 00 00 6C E5 08 00 EB E5 77 67\n0010 | 78 01 00 00 1F 5F 04 F5 79 F0 AF B5 02 52 E5 FC\n0020 | 96 92 4B FC EC DA 4F 05 80 17 75 A3 EF BF D2 70\n0030 | 1A A2 8A D7 27 BE 46 46 FE 50 01 00 FA 29 89 6E\n0040 | E1 9D 3C CB 08 FB 07 CF 1C 92 2C FF BF 5D 38 D9\n0050 | 8B A5 6D 92 6D 63 06 4C 77 74 1F 42 3B CE 22 B5\n0060 | A2 C1 00 E3 4B B5 D7 CE 30 27 E8 5E 65 00 62 05\n0070 | B6 92 6C 0E 42 EF 29 E7 CC 24 EE C4 52 36 50 F6\n0080 | 92 A5 30 FB 95 D5 7E F3 60 4C 49 01 55 FB 85 30\n0090 | C9 4E 9E 2E BD F2 72 BD B3 DD 98 FF CA 65 FF 51\n00A0 | E5 DB CA 4C F7 99 D6 66 0F 6D 0B A1 A8 B1 CE 6F\n00B0 | E9 D2 6F 40 1B 1B 79 E0 57 EE 27 3C AE 14 D8 D8\n00C0 | D6 00 30 C8 62 E1 3B 2E 49 FE 97 00 8A EA 0E C8\n00D0 | AD E9 0A E3 DD DC 64 1A E7 C0 84 4A 37 EF C4 DA\n00E0 | 3B 27 30 8B 9C 40 B1 FD 20 28 C1 2B 37 EA 71 9D\n00F0 | 59 3D C7 ED C8 92 B8 63 0B 82 E0 51 68 FC C0 D7\n0100 | 6E 7C A2 31 06 FE F1 3B 09 D3 BA E8 3D 61 2C DF\n0110 | 2E 3A 5A DD E4 E8 07 EE ED 66 0C 99 21 AD 36 4C\n0120 | FF 66 14 35 0F 31 3A 48 AB 34 83 F0 8A B8 1A 22\n0130 | 6F 77 63 A5 75 F4 4A 04 BD 53 C5 8A 49 AB D2 EE\n0140 | 4A 88 5F 26 10 A8 38 78 03 E4 18 C3 71 AF 93 78\n0150 | A0 94 1F 2D B0 AA 9C E0 19 04 8B 6C 9E D0 C7 FC\n0160 | B3 39 85 62 4E 23 92 23 3C AA 5E 66 A3 89 1A B1\n0170 | 85 44 68 5E 96 EF 5C 2B 55 E6 9E A2 C6 2B 33 E6\n0180 | 05 8D A2 94 4F 08 7B 80 3F 25 1A 7C\n```\n\nPayload (de)serialization:\n\n```\nset_client_DH_params#f5045f1f nonce:int128 server_nonce:int128 encrypted_data:string = Set_client_DH_params_answer;\n```\n\n| Parameter | Offset, Length in bytes | Value | Description |\n| --- | --- | --- | --- |\n| auth\\_key\\_id | 0, 8 | `0000000000000000` | 0 since the message is in plain text |\n| message\\_id | 8, 8 | `6CE50800EBE57767` | Message ID generated as specified [here \u00bb](https://core.telegram.org/mtproto/description#message-identifier-msg-id) (unixtime() << 32) + (N\\*4) |\n| message\\_length | 16, 4 | `78010000` (376 in decimal) | Message body length |\n| %(set\\_client\\_DH\\_params) | 20, 4 | `1f5f04f5` | _set\\_client\\_DH\\_params_ constructor number from TL schema |\n| nonce | 24, 16 | `79F0AFB50252E5FC96924BFCECDA4F05` | Value generated by client in Step 1 |\n| server\\_nonce | 40, 16 | `801775A3EFBFD2701AA28AD727BE4646` | Value received from server in Step 2 |\n| encrypted\\_data | 56, 340 | `FE500100FA29896EE19D3CCB08FB07CF` `1C922CFFBF5D38D98BA56D926D63064C` `77741F423BCE22B5A2C100E34BB5D7CE` `3027E85E65006205B6926C0E42EF29E7` `CC24EEC4523650F692A530FB95D57EF3` `604C490155FB8530C94E9E2EBDF272BD` `B3DD98FFCA65FF51E5DBCA4CF799D666` `0F6D0BA1A8B1CE6FE9D26F401B1B79E0` `57EE273CAE14D8D8D60030C862E13B2E` `49FE97008AEA0EC8ADE90AE3DDDC641A` `E7C0844A37EFC4DA3B27308B9C40B1FD` `2028C12B37EA719D593DC7EDC892B863` `0B82E05168FCC0D76E7CA23106FEF13B` `09D3BAE83D612CDF2E3A5ADDE4E807EE` `ED660C9921AD364CFF6614350F313A48` `AB3483F08AB81A226F7763A575F44A04` `BD53C58A49ABD2EE4A885F2610A83878` `03E418C371AF9378A0941F2DB0AA9CE0` `19048B6C9ED0C7FCB33985624E239223` `3CAA5E66A3891AB18544685E96EF5C2B` `55E69EA2C62B33E6058DA2944F087B80`  <br>`3F251A7C` | Encrypted client\\_DH\\_inner\\_data generated previously, serialized as a TL byte string |\n\n##### [](#8-auth-key-generation)8) Auth key generation\n\nThe client computes the auth\\_key using formula `g_a^b mod dh_prime`:\n\n```\nauth_key = 83CBD31C0303361FF1C29437A77CBA749C84F28A118646038C7EDD29EF718A1F6A493047D476A6E678D97A4A5CC7990CEA552D68E109869E5BFC86570049CD8F2EB4BA10B6C4123FB8A977774B4C5185B5C96AF7BD7A71DB78E6E6148CED2048869A21B8ED7FBA7F6F2E7722BFA28447AB84A245CB0E6D01261191B753191E744DCFDA522D50167832EE4D5EE90AAA6F31821248F0F06BF5692EF604CFC4316CEDE078F71E17BCEBBE388589E6707AF5BA26E8DD063BB116C4B4E7BEF3B462C3350D0376D42F95D353E46BE4C378D2A60141A2339641F8B712EB3ECFB42B7F26F69E9BB15373E0AC4BE266E1681859DDAAB8CD7D877BB847D2A8BD068A784943\n```\n\n##### [](#9-final-server-reply)9) Final server reply\n\nThe server verifies and confirms that auth\\_key\\_hash is unique: since it's unique, it replies with the following:\n\nReceived payload (excluding transport headers/trailers):\n\n```\n0000 | 00 00 00 00 00 00 00 00 01 CC 0A 7B ED E5 77 67\n0010 | 34 00 00 00 34 F7 CB 3B 79 F0 AF B5 02 52 E5 FC\n0020 | 96 92 4B FC EC DA 4F 05 80 17 75 A3 EF BF D2 70\n0030 | 1A A2 8A D7 27 BE 46 46 51 07 0B 3D B6 72 B7 60\n0040 | 2E 4E E2 FE 76 1B 36 A2\n```\n\nPayload (de)serialization:\n\n```\ndh_gen_ok#3bcbf734 nonce:int128 server_nonce:int128 new_nonce_hash1:int128 = Set_client_DH_params_answer;\n```\n\n| Parameter | Offset, Length in bytes | Value | Description |\n| --- | --- | --- | --- |\n| auth\\_key\\_id | 0, 8 | `0000000000000000` | 0 since the message is in plain text |\n| message\\_id | 8, 8 | `01CC0A7BEDE57767` | Message ID generated as specified [here \u00bb](https://core.telegram.org/mtproto/description#message-identifier-msg-id) (unixtime() << 32) + (N\\*4) |\n| message\\_length | 16, 4 | `34000000` (52 in decimal) | Message body length |\n| %(dh\\_gen\\_ok) | 20, 4 | `34f7cb3b` | _dh\\_gen\\_ok_ constructor number from TL schema |\n| nonce | 24, 16 | `79F0AFB50252E5FC96924BFCECDA4F05` | Value generated by client in Step 1 |\n| server\\_nonce | 40, 16 | `801775A3EFBFD2701AA28AD727BE4646` | Value received from server in Step 2 |\n| new\\_nonce\\_hash1 | 56, 16 | `51070B3DB672B7602E4EE2FE761B36A2` | The 128 lower-order bits of SHA1 of the byte string derived from the `new_nonce` string by adding a single byte with the value of 1, 2, or 3, and followed by another 8 bytes with `auth_key_aux_hash`. Different values are required to prevent an intruder from changing server response dh\\_gen\\_ok into dh\\_gen\\_retry. |",
    "url": "https://core.telegram.org/mtproto/samples-auth_key"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/mtproto/service_messages_about_messages",
      "title": "\ufeffService Messages about Messages",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "\ufeffService Messages about Messages"
        },
        {
          "property": "og:description",
          "content": "Acknowledgment of Receipt\nReceipt of virtually all messages (with the exception of some purely service ones as well as the\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:06:55 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4557",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Service Messages about Messages\n\n#### [](#acknowledgment-of-receipt)Acknowledgment of Receipt\n\nReceipt of virtually all messages (with the exception of some purely service ones as well as the plain-text messages used in the protocol for creating an authorization key) must be acknowledged.  \nThis requires the use of the following service message (not requiring an acknowledgment):\n\n```\nmsgs_ack#62d6b459 msg_ids:Vector<long> = MsgsAck;\n```\n\nA server usually acknowledges the receipt of a message from a client (normally, an RPC query) using an RPC response. If a response is a long time coming, a server may first send a receipt acknowledgment, and somewhat later, the RPC response itself.\n\nA client normally acknowledges the receipt of a message from a server (usually, an RPC response) by adding an acknowledgment to the next RPC query if it is not transmitted too late (if it is generated, say, 60-120 seconds following the receipt of a message from the server). However, if for a long period of time there is no reason to send messages to the server or if there is a large number of unacknowledged messages from the server (say, over 16), the client transmits a stand-alone acknowledgment.\n\nMax 8192 IDs are allowed per constructor.\n\n#### [](#notice-of-ignored-error-message)Notice of Ignored Error Message\n\nIn certain cases, a server may notify a client that its incoming message was ignored for whatever reason. Note that such a notification cannot be generated unless a message is correctly decoded by the server.\n\n```\nbad_msg_notification#a7eff811 bad_msg_id:long bad_msg_seqno:int error_code:int = BadMsgNotification;\nbad_server_salt#edab447b bad_msg_id:long bad_msg_seqno:int error_code:int new_server_salt:long = BadMsgNotification;\n```\n\nHere, error\\_code can also take on the following values:\n\n*   16: msg\\_id too low (most likely, client time is wrong; it would be worthwhile to synchronize it using msg\\_id notifications and re-send the original message with the \u201ccorrect\u201d msg\\_id or wrap it in a container with a new msg\\_id if the original message had waited too long on the client to be transmitted)\n*   17: msg\\_id too high (similar to the previous case, the client time has to be synchronized, and the message re-sent with the correct msg\\_id)\n*   18: incorrect two lower order msg\\_id bits (the server expects client message msg\\_id to be divisible by 4)\n*   19: container msg\\_id is the same as msg\\_id of a previously received message (this must never happen)\n*   20: message too old, and it cannot be verified whether the server has received a message with this msg\\_id or not\n*   32: msg\\_seqno too low (the server has already received a message with a lower msg\\_id but with either a higher or an equal and odd seqno)\n*   33: msg\\_seqno too high (similarly, there is a message with a higher msg\\_id but with either a lower or an equal and odd seqno)\n*   34: an even msg\\_seqno expected (irrelevant message), but odd received\n*   35: odd msg\\_seqno expected (relevant message), but even received\n*   48: incorrect server salt (in this case, the bad\\_server\\_salt response is received with the correct salt, and the message is to be re-sent with it)\n*   64: invalid container.\n\nThe intention is that error\\_code values are grouped (error\\_code >> 4): for example, the codes 0x40 - 0x4f correspond to errors in container decomposition.\n\nNotifications of an ignored message do not require acknowledgment (i.e., are irrelevant).\n\n**Important:** if server\\_salt has changed on the server or if client time is incorrect, any query will result in a notification in the above format. The client must check that it has, in fact, recently sent a message with the specified msg\\_id, and if that is the case, update its time correction value (the difference between the client's and the server's clocks) and the server salt based on msg\\_id and the server\\_salt notification, so as to use these to (re)send future messages. In the meantime, the original message (the one that caused the error message to be returned) must also be re-sent with a better msg\\_id and/or server\\_salt.\n\nIn addition, the client can update the server\\_salt value used to send messages to the server, based on the values of RPC responses or containers carrying an RPC response, provided that this RPC response is actually a match for the query sent recently. (If there is doubt, it is best not to update since there is risk of a replay attack).\n\n#### [](#request-for-message-status-information)Request for Message Status Information\n\nIf either party has not received information on the status of its outgoing messages for a while, it may explicitly request it from the other party:\n\n```\nmsgs_state_req#da69fb52 msg_ids:Vector long = MsgsStateReq;\n```\n\nMax 8192 IDs are allowed per constructor.\n\nThe response to the query contains the following information:\n\n#### [](#informational-message-regarding-status-of-messages)Informational Message regarding Status of Messages\n\n```\nmsgs_state_info#04deb57d req_msg_id:long info:string = MsgsStateInfo;\n```\n\nHere, `info` is a string that contains exactly one byte of message status for each message from the incoming msg\\_ids list:\n\n*   1 = nothing is known about the message (msg\\_id too low, the other party may have forgotten it)\n*   2 = message not received (msg\\_id falls within the range of stored identifiers; however, the other party has certainly not received a message like that)\n*   3 = message not received (msg\\_id too high; however, the other party has certainly not received it yet)\n*   4 = message received (note that this response is also at the same time a receipt acknowledgment)\n*   +8 = message already acknowledged\n*   +16 = message not requiring acknowledgment\n*   +32 = RPC query contained in message being processed or processing already complete\n*   +64 = content-related response to message already generated\n*   +128 = other party knows for a fact that message is already received\n\nThis response does not require an acknowledgment. It is an acknowledgment of the relevant msgs\\_state\\_req, in and of itself.\n\nNote that if it turns out suddenly that the other party is missing a message that appears to have been sent to it, the message must not be re-sent on its own with the same msg\\_id. Instead, it can be either wrapped in a container, or the status of the message can be checked using msgs\\_state\\_req and if the message wasn't received, then it must be re-sent with a new msg\\_id.\n\n#### [](#voluntary-communication-of-status-of-messages)Voluntary Communication of Status of Messages\n\nEither party may voluntarily inform the other party of the status of the messages transmitted by the other party.\n\n```\nmsgs_all_info#8cc0d131 msg_ids:Vector long info:string = MsgsAllInfo\n```\n\nAll message codes known to this party are enumerated, with the exception of those for which the +128 and the +16 flags are set. However, if the +32 flag is set but not +64, then the message status will still be communicated.\n\nThis message does not require an acknowledgment.\n\n#### [](#extended-voluntary-communication-of-status-of-one-message)Extended Voluntary Communication of Status of One Message\n\nNormally used by the server to respond to the receipt of a duplicate msg\\_id, especially if a response to the message has already been generated and the response is large. If the response is small, the server may re-send the answer itself instead. This message can also be used as a notification instead of resending a large message.\n\n```\nmsg_detailed_info#276d3ec6 msg_id:long answer_msg_id:long bytes:int status:int = MsgDetailedInfo;\nmsg_new_detailed_info#809db6df answer_msg_id:long bytes:int status:int = MsgDetailedInfo;\n```\n\nThe second version is used to notify of messages that were created on the server not in response to an RPC query (such as notifications of new messages) and were transmitted to the client some time ago, but not acknowledged.\n\nCurrently, `status` is always zero. This may change in future.\n\nThis message does not require an acknowledgment.\n\n#### [](#explicit-request-to-re-send-messages)Explicit Request to Re-Send Messages\n\n```\nmsg_resend_req#7d861a08 msg_ids:Vector long = MsgResendReq;\n```\n\nThe remote party immediately responds by re-sending the requested messages, normally using the same connection that was used to transmit the query. If at least one message with requested msg\\_id does not exist or has already been forgotten, or has been sent by the requesting party (known from parity), MsgsStateInfo is returned for all messages requested as if the MsgResendReq query had been a MsgsStateReq query as well.  \nMax 8192 IDs are allowed per constructor.",
    "url": "https://core.telegram.org/mtproto/service_messages_about_messages"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/mtproto/serialize",
      "title": "\ufeffBinary Data Serialization",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "\ufeffBinary Data Serialization"
        },
        {
          "property": "og:description",
          "content": "MTProto operation requires that elementary and composite data types as well as queries to which such data types are passed\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:06:58 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "6948",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Binary Data Serialization\n\nMTProto operation requires that elementary and composite data types as well as queries to which such data types are passed as arguments or by which they are returned, be transmitted in binary format (i. e. _serialized_) . The [TL language](https://core.telegram.org/mtproto/TL) is used to describe the data types to be serialized.\n\n### [](#general-definitions)General Definitions\n\nFor our purposes, we can identify a _type_ with the set of its _(serialized) values_ understood as strings (finite sequences) of 32-bit numbers (transmitted in little endian order).\n\nTherefore:\n\n*   _Alphabet_ (A), in this case, is a set of 32-bit numbers (normally, signed, i. e. between -2^31 and 2^31 - 1).\n*   _Value_, in this case, is the same as a _string in Alphabet A_, i. e. a finite (possibly, empty) sequence of 32-bit numbers. The set of all such sequences is designated as _A\\*_.\n*   _Type_, for our purposes, is the same as the set of legal values of a type, i. e. some set T which is a subset of A\\* and is a prefix code (i. e. no element of T may be a prefix for any other element). Therefore, any sequence from A\\* can contain no more than one prefix that is a member of T.\n*   _Value of Type T_ is any sequence (value) which is a member of T as a subset of A\\*.\n*   _Compatible Types_ are the types T and T' not intersecting as subsets of A\\*, such that the union of T and T' is a prefix code.\n*   _Coordinated System of Types_ is a finite or infinite set of types T\\_1, ..., T\\_n, ..., such that any two types from this set are compatible.\n*   _Data Type_ is the same as _type_ in the sense of the definition above.\n*   _Functional Type_ is a type describing a function; it is not a type in the sense of the definition above. Initially, we ignore the existence of functional types and describe only the data types; however, in reality, functional types will later be implemented in some extension of this system using the so-called _temporary combinators_.\n\n#### [](#combinators-constructors-composite-data-types)Combinators, Constructors, Composite Data Types\n\n*   _Combinator_ is a function that takes arguments of certain types and returns a value of some other type. We normally look at combinators whose argument and result types are data types (rather than functional types).\n    \n*   _Arity (of combinator)_ is a non-negative integer, the number of combinator arguments.\n    \n*   _Combinator identifier_ is an identifier beginning with a lowercase Roman letter that uniquely identifies a combinator.\n    \n*   _Combinator number_ or _combinator name_ is a 32-bit number (i.e., an element of A) that uniquely identifies a combinator. Most often, it is CRC32 of the string containing the combinator description without the final semicolon, and with one space between contiguous lexemes. This always falls in the range from 0x01000000 to 0xffffff00. The highest 256 values are reserved for the so-called _temporal-logic combinators_ used to transmit functions. We frequently denote as _combinator_ the combinator name with single quotes: '_combinator_'.\n    \n*   _Combinator description_ is a string of format `combinator_name type_arg_1 ... type_arg_N = type_res;` where `N` stands for the arity of the combinator, `type_arg_i` is the type of the i-th argument (or rather, a string with the combinator name), and `type_res` is the combinator value type.\n    \n*   _Constructor_ is a combinator that cannot be computed (reduced). This is used to represent composite data types. For example, combinator 'int\\_tree' with description `int_tree IntTree int IntTree = IntTree`, alongside combinator `empty_tree = IntTree`, may be used to define a composite data type called \u201cIntTree\u201d that takes on values in the form of binary trees with integers as nodes.\n    \n*   _Function (functional combinator)_ is a combinator which may be computed (reduced) on condition that the requisite number of arguments of requisite types are provided. The result of the computation is an expression consisting of constructors and base type values only.\n    \n*   _Normal form_ is an expression consisting only of constructors and base type values; that which is normally the result of computing a function.\n    \n*   _Type identifier_ is an identifier that normally starts with a capital letter in Roman script and uniquely identifies the type.\n    \n*   _Type number_ or _type name_ is a 32-bit number that uniquely identifies a type; it normally is the sum of the CRC32 values of the descriptions of the type constructors.\n    \n*   _Description of (composite) Type T_ is a collection of the descriptions of all constructors that take on Type _T_ values. This is normally written as text with each string containing the description of a single constructor. Here is a description of Type 'IntTree', for example:\n    \n    int\\_tree IntTree int IntTree = IntTree; empty\\_tree = IntTree;\n    \n*   _Polymorphic type_ is a type whose description contains parameters (_type variables_) in lieu of actual types; approximately, what would be a template in C++. Here is a description of Type `List alpha` where `List` is a polymorphic type of arity 1 (i. e., dependent on a single argument), and `alpha` is a type variable which appears as the constructor's optional parameter (in curly braces):\n    \n    cons {alpha:Type} alpha (List alpha) = List alpha; nil {alpha:Type} = List alpha;\n    \n*   _Value of (composite) Type T_ is any sequence from A\\* in the format `constr_num arg1 ... argN`, where constr\\_num is the index number of some Constructor _C_ which takes on values of Type _T_, and arg\\_i is a value of Type _T\\_i_ which is the type of the i-th argument to Constructor _C_. For example, let Combinator int\\_tree have the index number 17, whereas Combinator empty\\_tree has the index number 239. Then, the value of Type `IntTree` is, for example, `17 17 239 1 239 2 239` which is more conveniently written as `'int_tree' 'int_tree' 'empty_tree' 1 'empty_tree' 2 'empty_tree'`. From the standpoint of a high-level language, this is `int_tree (int_tree (empty_tree) 1 (empty_tree)) 2 (empty_tree): IntTree`.\n    \n*   _Schema_ is a collection of all the (composite) data type descriptions. This is used to define some agreed-to system of types.\n    \n\n#### [](#boxed-and-bare-types)Boxed and Bare Types\n\n*   _Boxed type_ is a type any value of which starts with the constructor number. Since every constructor has a uniquely determined value type, the first number in any boxed type value uniquely defines its type. This guarantees that the various boxed types in totality make up a coordinated system of types. A boxed type identifier is always capitalized.\n*   _Bare type_ is a type whose values do not contain a constructor number, which is implied instead. A bare type identifier always coincides with the name of the implied constructor (and therefore, begins with a lowercase letter) which may be padded at the front by the percentage sign (%). In addition, if `X` is a boxed type with no more than a single constructor, then `%X` refers to the corresponding bare type. The values of a bare type are identical with the set of number sequences obtained by dropping the first number (i. e., the external constructor index number) from the set of values of the corresponding boxed type (which is the result type of the selected constructor), starting with the selected constructor index number. For example, `3 4` is a value of the `int_couple` bare type, defined using `int_couple int int = IntCouple`. The corresponding boxed type is `IntCouple`; if 404 is the constructor index number for `int_couple`, then `404 3 4` is the value for the `IntCouple` boxed type which corresponds to the value of the bare type `int_couple` (also known as `%int_couple` and `%IntCouple`; the latter form is conceptually preferable but longer).\n\nConceptually, only boxed types should be used everywhere. However, for speed and compactness, bare types have to be used (for instance, an array of 10,000 bare int values is 40,000 bytes long, whereas boxed Int values take up twice as much space; therefore, when transmitting a large array of integer identifiers, say, it is more efficient to use the `Vector int` type rather than `Vector Int`). In addition, all base types (int, long, double, string) are bare.\n\nIf a boxed type is polymorphic of type arity r, this is also true of any derived bare type. In other words, if one were to define `intCouple {alpha:Type} int alpha = IntCouple alpha`, then, thereafter, intCouple as an identifier would also be a polymorphic type of arity 1 in combinator (and consequently, in constructor and type) descriptions. The notations `intCouple X`, `%(IntCouple X)`, and `%IntCouple X` are equivalent.\n\n#### [](#base-types)Base Types\n\nBase types exist both as bare (int, long, double, string) and as boxed (Int, Long, Double, String) versions. Their _constructor_ identifiers coincide with the names of the relevant bare types. Their pseudodescriptions have the following appearance:\n\n```\nint ? = Int;\nlong ? = Long;\ndouble ? = Double;\nstring ? = String;\n```\n\nConsequently, the `int` constructor index number, for example, is the CRC32 of the string `\"int ? = Int\"`.\n\nThe values of bare type `int` are exactly all the single-element _sequences_, i. e. numbers between -2^31 and 2^31-1 represent themselves in this case. Values of type `long` are two-element sequences that are 64-bit signed numbers (little endian again). Values of type `double`, again, are two-element sequences containing 64-bit real numbers in a standard double format. And finally, the values of type `string` look differently depending on the length L of the string being serialized:\n\n*   If L <= 253, the serialization contains one byte with the value of L, then L bytes of the string followed by 0 to 3 characters containing 0, such that the overall length of the value be divisible by 4, whereupon all of this is interpreted as a sequence of int(L/4)+1 32-bit numbers.\n*   If L >= 254, the serialization contains byte 254, followed by 3 bytes with the string length L, followed by L bytes of the string, further followed by 0 to 3 null padding bytes.\n\n#### [](#object-pseudotype)Object Pseudotype\n\nThe `Object` pseudotype is a \u201ctype\u201d which can take on values that belong to any boxed type in the schema. This helps quickly define such types as _list of random items_ without using polymorphic types. It is best not to abuse this capability since it results in the use of dynamic typing. Nonetheless, it is hard to imagine the data structures that we know from PHP and JSON without using the Object pseudotype.\n\nIt is recommended to use `TypedObject` instead whenever possible:\n\n```\nobject X:Type value:X = TypedObject;\n```\n\n#### [](#built-in-composite-types-vectors-and-associative-arrays)Built-In Composite Types: Vectors and Associative Arrays\n\nThe Vector t polymorphic pseudotype is a \u201ctype\u201d whose value is a sequence of values of any type t, either boxed or bare.\n\n```\nvector {t:Type} # [ t ] = Vector t;\n```\n\nSerialization always uses the same constructor \u201cvector\u201d (const 0x1cb5c415 = crc32(\"vector t:Type # \\[ t \\] = Vector t\u201d) that is not dependent on the specific value of the variable of type t. The value of the Vector t type is the index number of the relevant constructor number followed by N, the number of elements in the vector, and then by N values of type t. The value of the optional parameter t is not involved in the serialization since it is derived from the result type (always known prior to deserialization).\n\nPolymorphic pseudotypes IntHash t and StrHash t are associative arrays mapping integer and string keys to values of type t. They are, in fact, vectors containing bare 2-tuples (int, t) or (string, t):\n\n```\ncoupleInt {t:Type} int t = CoupleInt t;\nintHash {t:Type} (vector %(CoupleInt t)) = IntHash t;\ncoupleStr {t:Type} string t = CoupleStr t;\nstrHash {t:Type} (vector %(CoupleStr t)) = StrHash t;\n```\n\nThe percentage sign, in this case, means that a bare type that corresponds to the boxed type in parentheses is taken; the boxed type in question must have no more than a single constructor, whatever the values of the parameters.\n\nThe keys may be sorted or be in some other order (as in PHP arrays). For associative arrays with sorted keys, the IntSortedHash or StrSortedHash alias is used:\n\n```\nintSortedHash {t:Type} (intHash t) = IntSortedHash t;\nstrSortedHash {t:Type} (strHash t) = StrSortedHash t;\n```\n\n#### [](#polymorphic-type-constructors)Polymorphic Type Constructors\n\nThe constructor of a polymorphic type does not depend on the specific types to which the polymorphic type is applied. When it is computed, optional parameters (normally containing type variables and placed in curly braces) cease to be optional (the curly braces are removed), and, in addition to that, all parenthesis are also removed. Therefore,\n\n```\nvector {t:Type} # [ t ] = Vector t;\n```\n\ncorresponds to the constructor number crc32(\"vector t:Type # \\[ t \\] = Vector t\") = 0x1cb5c415. During (de)serialization, the specific values of the optional variable t are derived from the result type (i. e. the object being serialized or deserialized) that is always known, and are never serialized explicitly.\n\nPreviously, it had to be known which specific variable types each polymorphic type will apply to. To accomplish this, the type system used strings of the form\n\n```\npolymorphic_type_name type_1 ... type_N;\n```\n\nFor example,\n\n```\nVector int;\nVector string;\nVector Object;\n```\n\nNow they are ignored.\n\nSee also [polymorphism in TL](https://core.telegram.org/mtproto/TL-polymorph).\n\nIn this case, the Object pseudotype permits using Vector Object to store lists of anything (the values of any boxed types). Since bare types are efficient when short, in practice it is unlikely that cases more complex than the ones cited above will be required.\n\n#### [](#field-names)Field Names\n\nLet us say that we need to represent _users_ as triplets containing one integer (user ID) and two strings (first and last names). The requisite data structure is the triplet int, string, string which may be declared as follows:\n\n```\nuser int string string = User;\n```\n\nOn the other hand, a group may be described by a similar triplet consisting of a group ID, its name, and description:\n\n```\ngroup int string string = Group;\n```\n\nFor the difference between User and Group to be clear, it is convenient to assign names to some or all of the fields:\n\n```\nuser id:int first_name:string last_name:string = User;\ngroup id:int title:string description:string = Group;\n```\n\nIf the User type needs to be extended at a later time by having records with some additional field added to it, it could be accomplished as follows:\n\n```\nuserv2 id:int unread_messages:int first_name:string last_name:string in_groups:vector int = User;\n```\n\nAside from other things, this approach helps define correct mappings between fields that belong to different constructors of the same type, convert between them as well as convert type values into an associative array with string keys (field names, if defined, are natural choices for such keys).\n\n### [](#tl-language)TL Language\n\nSee [TL Language](https://core.telegram.org/mtproto/TL)",
    "url": "https://core.telegram.org/mtproto/serialize"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/mtproto/TL",
      "title": "\ufeffTL Language",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "\ufeffTL Language"
        },
        {
          "property": "og:description",
          "content": "TL (Type Language) serves to describe the used system of types, constructors, and existing functions. In fact, the combinator\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:00 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4092",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# TL Language\n\nTL (Type Language) serves to describe the used system of types, constructors, and existing functions. In fact, the combinator description format presented in [Binary Data Serialization](https://core.telegram.org/mtproto/serialize) is used.\n\nSee also:\n\n*   [Polymorphism in TL](https://core.telegram.org/mtproto/TL-polymorph)\n\nAdvanced topics:\n\n*   [Dependent types in TL](https://core.telegram.org/mtproto/TL-dependent)\n    \n*   [Formal description of TL](https://core.telegram.org/mtproto/TL-formal)\n    \n*   [Formal description of TL combinators](https://core.telegram.org/mtproto/TL-combinators)\n    \n*   [Type serialization](https://core.telegram.org/mtproto/TL-types)\n    \n*   [TL schema for serialization of TL schemas](https://core.telegram.org/mtproto/TL-tl)\n    \n*   [Optional combinator parameters and their values](https://core.telegram.org/mtproto/TL-optargs)\n    \n*   [Binary serialization and abstract TL types](https://core.telegram.org/mtproto/TL-abstract-types)\n    \n*   [Formal description of templates in TL](https://core.telegram.org/mtproto/TL-patterns)\n    \n\n### [](#overview)Overview\n\nA TL program usually consists of two sections separated by keyword `---functions---`. The first section consists of declarations of built-in types and aggregate types (i.e. their constructors). The second section consists of the declared functions, i.e. functional combinators.\n\nActually, both the first and second sections consist of combinator declarations, each of which ends with a semicolon. However, the first section contains only constructors, while the second section only involves functions. Each combinator is declared using a \u201ccombinator declaration\u201d in the format explained above. However, the combinator number and field names may be explicitly assigned.\n\nIf additional type declarations are required after functions have been declared, the keyword (section divider) `---types---` is used. Furthermore, a functional combinator may be declared in the type section if its result type begins with an exclamation point (in fact, when the function section is interpreted, this exclamation point is added automatically).\n\nTo explicitly define 32-bit names of combinators, a hash mark (#) is added immediately after the combinator's name, followed by 8 hexadecimal digits.\n\n### [](#namespaces)Namespaces\n\nComposite constructions like `<namespace_identifier>.<constructor_identifier>` and `<namespace_identifier>.<Type_identifier>` can be used as constructor- or type identifiers. The portion of the identifier to the left of the period is called the _namespace_. Moreover, the rule about a first uppercase letter in type identifiers and lowercase letter in constructor identifiers applies to the part of the construction after the period. For example, `auth.Message` would be a type, while `auth.std_message` would be a constructor.\n\nNamespaces do not require a special declaration.\n\n### [](#comments)Comments\n\nComments are the same as in C++.\n\n### [](#example)Example\n\n```\n// built-in types\nint#a8509bda ? = Int;\nlong ? = Long;\ndouble ? = Double;\nstring ? = String;\nnull = Null;\n\nvector {t:Type} # [ t ] = Vector t;\ncoupleInt {alpha:Type} int alpha = CoupleInt<alpha>;\ncoupleStr {gamma:Type} string gamma = CoupleStr gamma;  \n/* The name of the type variable is irrelevant: \"gamma\" could be replaced with \"alpha\"; \n   However, the combinator number will depend on the specific choice. */\n\nintHash {alpha:Type} vector<coupleInt<alpha>> = IntHash<alpha>;\nstrHash {alpha:Type} (vector (coupleStr alpha)) = StrHash alpha;\nintSortedHash {alpha:Type} intHash<alpha> = IntSortedHash<alpha>;\nstrSortedHash {alpha:Type} (strHash alpha) = StrSortedHash alpha;\n\n// custom types\npair x:Object y:Object = Pair;\ntriple x:Object y:Object z:Object = Triple;\n\nuser#d23c81a3 id:int first_name:string last_name:string = User;\nno_user#c67599d1 id:int = User;\ngroup id:int title:string last_name:string = Group;\nno_group = Group;\n\n---functions---\n\n// Maybe some built-in arithmetic functions; inverse quotes make \"identifiers\" out of arbitrary non-alphanumeric strings\n`+` Int Int = Int;\n`-` Int Int = Int;\n`+` Double Double = Double;\n// ...\n\n// API functions (aka RPC functions)\ngetUser#b0f732d5 int = User;\ngetUsers#2d84d5f5 (Vector int) = Vector User;\n```\n\nIn this case, the `user` constructor has been explicitly assigned a number (0xd23c81a3); In fact, this was not necessary, since this value is the CRC32 of the string `\"user id:int first_name:string last_name:string = User\"`, which would have been used by default.\n\nSpecial constructors are not required for Vector int, Vector User, Vector Object, etc. -- the same universal constructor can be used everywhere:\n\n```\nvector#1cb5c415 {t:Type} # [ t ] = Vector t;\n```\n\nNote that when the `getUsers (Vector int) = Vector User;` constructor number is calculated, the CRC32 of the string \"getUsers Vector int = Vector User\u201d is computed (from which all parentheses have been removed).\n\nNotation `T0<T1,T2,...,Tn>` is syntactic sugar for `(T0 (T1) (T2) ... (Tn))`. For example, `Vector<User>` and `(Vector User)` are entirely interchangeable.\n\n#### [](#example-of-an-rpc-query)Example of an RPC query\n\nSuppose we want to call `getUsers([2,3,4])`. This query will be serialized into a sequence of 32-bit integers as follows:\n\n```\n0x2d84d5f5 0x1cb5c415 0x3 0x2 0x3 0x4\n```\n\nPlease note that TL serialization yields sequences of 32-bit integers. When it has to be embedded into a byte stream, for example a network packet, each 32-bit integer is represented by four bytes in little-endian order. In this way the above query corresponds to the following byte stream:\n\n```\nF5 D5 84 2D 15 C4 B5 1C 03 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00\n```\n\nThe response might look something like this:\n\n```\n0x1cb5c415 0x3 0xd23c81a3 0x2 0x74655005 0x00007265 0x72615006 0x72656b 0xc67599d1 0x3 0xd23c81a3 0x4 0x686f4a04 0x6e 0x656f4403\n```\n\nThis roughly corresponds to\n\n```\n[{\"id\":2,\"first_name\":\"Peter\", \"last_name\":\"Parker\"},{},{\"id\":4,\"first_name\":\"John\",\"last_name\":\"Doe\"}]\n```\n\nNote that in both cases the same universal constructor `vector#1cb5c415` is used: in the request to serialize the value of type `Vector int`, and in the serialization of the value of type `Vector User` in the response. There is no ambiguity because in both cases the type of the value being (de)serialized is known before its (de)serialization begins. For example, after receiving the query, the server sees that the first part is `0x2d84d5f5`, which corresponds to the combinator `getUsers#2d84d5f5 (Vector int) = Vector User`. Thus, it is understood that what follows will be a value of type `Vector int`. After receiving the response to this query, the client knows that it must receive a value of type `Vector User` and it deserializes the response accordingly.",
    "url": "https://core.telegram.org/mtproto/TL"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/mtproto",
      "title": "Current MTProto TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current MTProto TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current MTProto TL-schema. More details on TL \u00bb\nSee also the detailed schema in JSON \u00bb\nint ? = Int;\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:00 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "2822",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current MTProto TL-schema\n\nBelow you will find the current MTProto TL-schema. [More details on TL \u00bb](https://core.telegram.org/mtproto/TL)\n\nSee also the [detailed schema in JSON \u00bb](https://core.telegram.org/schema/mtproto-json)\n\n```\nint ? = Int;\nlong ? = Long;\ndouble ? = Double;\nstring ? = String;\n\nvector {t:Type} # [ t ] = Vector t;\n\nint128 4*[ int ] = Int128;\nint256 8*[ int ] = Int256;\n\nresPQ#05162463 nonce:int128 server_nonce:int128 pq:bytes server_public_key_fingerprints:Vector<long> = ResPQ;\n\np_q_inner_data_dc#a9f55f95 pq:bytes p:bytes q:bytes nonce:int128 server_nonce:int128 new_nonce:int256 dc:int = P_Q_inner_data;\np_q_inner_data_temp_dc#56fddf88 pq:bytes p:bytes q:bytes nonce:int128 server_nonce:int128 new_nonce:int256 dc:int expires_in:int = P_Q_inner_data;\n\nserver_DH_params_ok#d0e8075c nonce:int128 server_nonce:int128 encrypted_answer:bytes = Server_DH_Params;\n\nserver_DH_inner_data#b5890dba nonce:int128 server_nonce:int128 g:int dh_prime:bytes g_a:bytes server_time:int = Server_DH_inner_data;\n\nclient_DH_inner_data#6643b654 nonce:int128 server_nonce:int128 retry_id:long g_b:bytes = Client_DH_Inner_Data;\n\ndh_gen_ok#3bcbf734 nonce:int128 server_nonce:int128 new_nonce_hash1:int128 = Set_client_DH_params_answer;\ndh_gen_retry#46dc1fb9 nonce:int128 server_nonce:int128 new_nonce_hash2:int128 = Set_client_DH_params_answer;\ndh_gen_fail#a69dae02 nonce:int128 server_nonce:int128 new_nonce_hash3:int128 = Set_client_DH_params_answer;\n\nbind_auth_key_inner#75a3f765 nonce:long temp_auth_key_id:long perm_auth_key_id:long temp_session_id:long expires_at:int = BindAuthKeyInner;\n\nrpc_result#f35c6d01 req_msg_id:long result:Object = RpcResult;\nrpc_error#2144ca19 error_code:int error_message:string = RpcError;\n\nrpc_answer_unknown#5e2ad36e = RpcDropAnswer;\nrpc_answer_dropped_running#cd78e586 = RpcDropAnswer;\nrpc_answer_dropped#a43ad8b7 msg_id:long seq_no:int bytes:int = RpcDropAnswer;\n\nfuture_salt#0949d9dc valid_since:int valid_until:int salt:long = FutureSalt;\nfuture_salts#ae500895 req_msg_id:long now:int salts:vector<future_salt> = FutureSalts;\n\npong#347773c5 msg_id:long ping_id:long = Pong;\n\ndestroy_session_ok#e22045fc session_id:long = DestroySessionRes;\ndestroy_session_none#62d350c9 session_id:long = DestroySessionRes;\n\nnew_session_created#9ec20908 first_msg_id:long unique_id:long server_salt:long = NewSession;\n\nmsg_container#73f1f8dc messages:vector<%Message> = MessageContainer;\nmessage msg_id:long seqno:int bytes:int body:Object = Message;\nmsg_copy#e06046b2 orig_message:Message = MessageCopy;\n\ngzip_packed#3072cfa1 packed_data:bytes = Object;\n\nmsgs_ack#62d6b459 msg_ids:Vector<long> = MsgsAck;\n\nbad_msg_notification#a7eff811 bad_msg_id:long bad_msg_seqno:int error_code:int = BadMsgNotification;\nbad_server_salt#edab447b bad_msg_id:long bad_msg_seqno:int error_code:int new_server_salt:long = BadMsgNotification;\n\nmsg_resend_req#7d861a08 msg_ids:Vector<long> = MsgResendReq;\nmsgs_state_req#da69fb52 msg_ids:Vector<long> = MsgsStateReq;\nmsgs_state_info#04deb57d req_msg_id:long info:bytes = MsgsStateInfo;\nmsgs_all_info#8cc0d131 msg_ids:Vector<long> info:bytes = MsgsAllInfo;\nmsg_detailed_info#276d3ec6 msg_id:long answer_msg_id:long bytes:int status:int = MsgDetailedInfo;\nmsg_new_detailed_info#809db6df answer_msg_id:long bytes:int status:int = MsgDetailedInfo;\n\ndestroy_auth_key_ok#f660e1d4 = DestroyAuthKeyRes;\ndestroy_auth_key_none#0a9f2259 = DestroyAuthKeyRes;\ndestroy_auth_key_fail#ea109b13 = DestroyAuthKeyRes;\n\nhttp_wait#9299359f max_delay:int wait_after:int max_wait:int = HttpWait;\n\n---functions---\n\nreq_pq_multi#be7e8ef1 nonce:int128 = ResPQ;\n\nreq_DH_params#d712e4be nonce:int128 server_nonce:int128 p:bytes q:bytes public_key_fingerprint:long encrypted_data:bytes = Server_DH_Params;\n\nset_client_DH_params#f5045f1f nonce:int128 server_nonce:int128 encrypted_data:bytes = Set_client_DH_params_answer;\n\nrpc_drop_answer#58e4a740 req_msg_id:long = RpcDropAnswer;\nget_future_salts#b921bd04 num:int = FutureSalts;\nping#7abe77ec ping_id:long = Pong;\nping_delay_disconnect#f3427b8c ping_id:long disconnect_delay:int = Pong;\ndestroy_session#e7512126 session_id:long = DestroySessionRes;\n\ndestroy_auth_key#d1435160 = DestroyAuthKeyRes;\n```",
    "url": "https://core.telegram.org/schema/mtproto"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/end-to-end",
      "title": "End-to-End Encryption, Secret Chats",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "End-to-End Encryption, Secret Chats"
        },
        {
          "property": "og:image",
          "content": "842181036bcb572cf0"
        },
        {
          "property": "og:description",
          "content": "New feature for end-to-end-encrypted messaging."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:01 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "8075",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# End-to-End Encryption, Secret Chats\n\n> This article on MTProto's End-to-End encryption is meant for **advanced users**.  \n> If you want to learn more about [Secret Chats](https://telegram.org/faq#secret-chats) from a less intimidating source, kindly see our [general FAQ](https://telegram.org/faq#secret-chats).\n> \n> Note that as of version 4.6, major Telegram clients are using **MTProto 2.0**.  \n> MTProto v.1.0 is deprecated and is currently being phased out.\n\n* * *\n\n##### [](#related-articles)Related articles\n\n* * *\n\nSecret Chats are one-on-one chats wherein messages are encrypted with a key held only by the chat's participants. Note that the [schema](https://core.telegram.org/schema/end-to-end) for these end-to-end encrypted Secret Chats is different from what is used for [cloud chats](https://core.telegram.org/mtproto):\n\n[![](https://core.telegram.org/file/811140633/4/hHw6Zy2DPyQ.109500/cabc10049a7190694f \"End-to-end encryption in MTProto 2.0 (Secret Chats)\")](https://core.telegram.org/file/811140633/4/hHw6Zy2DPyQ.109500/cabc10049a7190694f)\n\n#### [](#a-note-on-mtproto-2-0)A note on MTProto 2.0\n\nThis article describes the end-to-end encryption layer in the MTProto protocol version **2.0**.  \nThe principal differences from version 1.0 ([described here](https://core.telegram.org/api/end-to-end_v1) for reference) are as follows:\n\n*   SHA-256 is used instead of SHA-1;\n*   Padding bytes are involved in the computation of msg\\_key;\n*   msg\\_key depends not only on the message to be encrypted, but on a portion of the secret chat key as well;\n*   12..1024 padding bytes are used instead of 0..15 padding bytes in v.1.0.\n\nSee also: [MTProto 2.0: Cloud Chats, server-client encryption](https://core.telegram.org/mtproto)\n\n### [](#key-generation)Key Generation\n\nKeys are generated using the [Diffie-Hellman protocol](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange).\n\nLet us consider the following scenario: User **A** would like to initiate end-to-end encrypted communication with User **B**.\n\n#### [](#sending-a-request)Sending a Request\n\nUser **A** executes [messages.getDhConfig](https://core.telegram.org/method/messages.getDhConfig) to obtain the Diffie-Hellman parameters: a prime **p**, and a high-order element **g**.\n\nExecuting this method before each new key generation procedure is of vital importance. It makes sense to cache the values of the parameters together with the version in order to avoid having to receive all of the values every time. If the version stored on the client is still up-to-date, the server will return the constructor [messages.dhConfigNotModified](https://core.telegram.org/constructor/messages.dhConfigNotModified).\n\nThe client is expected to check whether **p** is a safe 2048-bit prime (meaning that both **p** and **(p-1)/2** are prime, and that 22047 < p < 22048), and that **g** generates a cyclic subgroup of prime order **(p-1)/2**, i.e. is a quadratic residue **mod p**. Since **g** is always equal to 2, 3, 4, 5, 6 or 7, this is easily done using quadratic reciprocity law, yielding a simple condition on **p mod 4g** \u2014 namely, **p mod 8 = 7** for **g = 2**; **p mod 3 = 2** for **g = 3**; no extra condition for **g = 4**; **p mod 5 = 1 or 4** for **g = 5**; **p mod 24 = 19 or 23** for **g = 6**; and **p mod 7 = 3, 5 or 6** for **g = 7**. After **g** and **p** have been checked by the client, it makes sense to cache the result, so as to avoid repeating lengthy computations in the future. This cache might be shared with one used for [Authorization Key generation](https://core.telegram.org/mtproto/auth_key).\n\nIf the client needs additional entropy for the random number generator, it can pass the **random\\_length** parameter (random\\_length> 0) so the server generates its own random sequence **random** of the appropriate length.  \n**Important**: using the server's random sequence in its raw form may be unsafe, it must be combined with a client sequence.\n\nClient **A** computes a 2048-bit number **a** (using sufficient entropy or the server's **random**; see above) and executes [messages.requestEncryption](https://core.telegram.org/method/messages.requestEncryption) after passing in `g_a := pow(g, a) mod dh_prime`.\n\nUser **B** receives the update [updateEncryption](https://core.telegram.org/constructor/updateEncryption) for all associated authorization keys (all authorized devices) with the chat constructor [encryptedChatRequested](https://core.telegram.org/constructor/encryptedChatRequested). The user must be shown basic information about User **A** and must be prompted to accept or reject the request.\n\nBoth clients are to check that **g**, **g\\_a** and **g\\_b** are greater than one and smaller than **p-1**. We recommend checking that **g\\_a** and **g\\_b** are between **2^{2048-64}** and **p - 2^{2048-64}** as well.\n\n#### [](#accepting-a-request)Accepting a Request\n\nAfter User **B** confirms the creation of a secret chat with **A** in the client interface, Client **B** also receives up-to-date configuration parameters for the Diffie-Hellman method. Thereafter, it generates a random 2048-bit number, **b**, using rules similar to those for **a**.\n\nHaving received **g\\_a** from the update with [encryptedChatRequested](https://core.telegram.org/constructor/encryptedChatRequested), it can immediately generate the final shared key: `key = (pow(g_a, b) mod dh_prime)`. If key length < 256 bytes, add several leading zero bytes as padding \u2014 so that the key is exactly 256 bytes long. Its fingerprint, **key\\_fingerprint**, is equal to the 64 last bits of SHA1 (key).\n\n**Note 1:** in this particular case SHA1 is used here even for MTProto 2.0 secret chats.\n\n**Note 2:** this fingerprint is used as a sanity check for the key exchange procedure to detect bugs when developing client software \u2014 it is not connected to the key visualization used on the clients as means of external authentication in secret chats. [Key visualizations](https://core.telegram.org/api/end-to-end/pfs#key-visualization) on the clients are generated using the first 128 bits of SHA1(initial key) followed by the first 160 bits of SHA256(key used when secret chat was updated to layer 46).\n\nClient **B** executes [messages.acceptEncryption](https://core.telegram.org/method/messages.acceptEncryption) after passing it `g_b := pow(g, b) mod dh_prime` and **key\\_fingerprint**.\n\nFor all of Client **B's** authorized devices, except the current one, [updateEncryption](https://core.telegram.org/constructor/updateEncryption) updates are sent with the constructor [encryptedChatDiscarded](https://core.telegram.org/constructor/encryptedChatDiscarded). Thereafter, the only device that will be able to access the secret chat is Device **B**, which made the call to [messages.acceptEncryption](https://core.telegram.org/method/messages.acceptEncryption).\n\nUser **A** will be sent an [updateEncryption](https://core.telegram.org/constructor/updateEncryption) update with the constructor [encryptedChat](https://core.telegram.org/constructor/encryptedChat), for the authorization key that initiated the chat.\n\nWith **g\\_b** from the update, Client **A** can also compute the shared key `key = (pow(g_b, a) mod dh_prime)`. If key length < 256 bytes, add several leading zero bytes as padding \u2014 so that the key is exactly 256 bytes long. If the fingerprint for the received key is identical to the one that was passed to [encryptedChat](https://core.telegram.org/constructor/encryptedChat), incoming messages can be sent and processed. Otherwise, [messages.discardEncryption](https://core.telegram.org/method/messages.discardEncryption) must be executed and the user notified.\n\n#### [](#perfect-forward-secrecy)Perfect Forward Secrecy\n\nIn order to keep past communications safe, official Telegram clients will initiate re-keying once a key has been used to decrypt and encrypt more than 100 messages, or has been in use for more than one week, provided the key has been used to encrypt at least one message. Old keys are then securely discarded and cannot be reconstructed, even with access to the new keys currently in use.\n\n> The re-keying protocol is further described in this article: [Perfect Forward Secrecy in Secret Chats](https://core.telegram.org/api/end-to-end/pfs).\n\nPlease note that your client must support Forward Secrecy in Secret Chats to be compatible with official Telegram clients.\n\n### [](#sending-and-receiving-messages-in-a-secret-chat)Sending and Receiving Messages in a Secret Chat\n\n#### [](#serialization-and-encryption-of-outgoing-messages)Serialization and Encryption of Outgoing Messages\n\nA TL object of type [DecryptedMessage](https://core.telegram.org/type/DecryptedMessage) is created and contains the message in plain text. For backward compatibility, the object must be wrapped in the constructor [decryptedMessageLayer](https://core.telegram.org/constructor/decryptedMessageLayer) with an indication of the supported layer (starting with 46).\n\n> The TL-Schema for the contents of end-to-end encrypted messages is available [here \u00bb](https://core.telegram.org/schema/end-to-end)\n\nThe resulting construct is serialized as an array of bytes using generic TL rules. The resulting array is prepended by 4 bytes containing the array length not counting these 4 bytes.\n\nThe byte array is padded with 12 to 1024 random padding bytes to make its length divisible by 16 bytes. (In the older MTProto 1.0 encryption, only 0 to 15 padding bytes were used.)\n\nMessage key, **msg\\_key**, is computed as the 128 middle bits of the SHA256 of the data obtained in the previous step, prepended by 32 bytes from the shared key **key**. (For the older MTProto 1.0 encryption, **msg\\_key** was computed differently, as the 128 lower bits of SHA1 of the data obtained in the previous steps, _excluding the padding bytes_.)\n\nFor MTProto 2.0, the AES key **aes\\_key** and initialization vector **aes\\_iv** are computed ( **key** is the shared key obtained during [Key Generation](#key-generation) ) as follows:\n\n*   msg\\_key\\_large = SHA256 (substr (key, 88+x, 32) + plaintext + random\\_padding);\n*   msg\\_key = substr (msg\\_key\\_large, 8, 16);\n*   sha256\\_a = SHA256 (msg\\_key + substr (key, x, 36));\n*   sha256\\_b = SHA256 (substr (key, 40+x, 36) + msg\\_key);\n*   aes\\_key = substr (sha256\\_a, 0, 8) + substr (sha256\\_b, 8, 16) + substr (sha256\\_a, 24, 8);\n*   aes\\_iv = substr (sha256\\_b, 0, 8) + substr (sha256\\_a, 8, 16) + substr (sha256\\_b, 24, 8);\n\nFor MTProto 2.0, **x=0** for messages from the originator of the secret chat, **x=8** for the messages in the opposite direction.\n\n_For the obsolete MTProto 1.0, msg\\_key, aes\\_key, and aes\\_iv were computed differently (see [this document](https://core.telegram.org/api/end-to-end_v1#serialization-and-encryption-of-outgoing-messages) for reference)._\n\nData is encrypted with a 256-bit key, **aes\\_key**, and a 256-bit initialization vector, **aes-iv**, using AES-256 encryption with infinite garble extension (IGE). Encryption key fingerprint **key\\_fingerprint** and the message key **msg\\_key** are added at the top of the resulting byte array.\n\nEncrypted data is embedded into a [messages.sendEncrypted](https://core.telegram.org/method/messages.sendEncrypted) API call and passed to Telegram server for delivery to the other party of the Secret Chat.\n\n#### [](#upgrading-to-mtproto-2-0-from-mtproto-1-0)Upgrading to MTProto 2.0 from MTProto 1.0\n\nAs soon as both parties in a secret chat are using at least Layer 73, they should only use MTProto 2.0 for all outgoing messages. Some of the first received messages may use MTProto 1.0, if a sufficiently high starting layer has not been negotiated during the creation of the secret chat. After the first message encrypted with MTProto 2.0 (or the first message with Layer 73 or higher) is received, all messages with higher [sequence numbers](#sequence-numbers) must be encrypted with MTProto 2.0 as well.\n\nAs long as the current layer is lower than 73, each party should try to decrypt received messages with MTProto 1.0, and if this is not successful (msg\\_key does not match), try MTProto 2.0. Once the first MTProto 2.0-encrypted message arrives (or the layer is upgraded to 73), there is no need to try MTProto 1.0 decryption for any of the further messages (unless the client is still waiting for some gaps to be closed).\n\n#### [](#decrypting-an-incoming-message)Decrypting an Incoming Message\n\nThe steps above are performed in reverse order.  \nWhen an encrypted message is received, you **must** check that msg\\_key is **in fact** equal to the 128 middle bits of the SHA256 hash of the decrypted message, prepended by 32 bytes taken from the shared **key**.  \nIf the message layer is greater than the one supported by the client, the user must be notified that the client version is out of date and prompted to update.\n\n#### [](#sequence-numbers)Sequence numbers\n\nIt is necessary to interpret all messages in their original order to protect against possible manipulations. Secret chats support a special mechanism for handling seq\\_no counters independently from the server.\n\n> Proper handling of these counters is further described in this article: [Sequence numbers in Secret Chats](https://core.telegram.org/api/end-to-end/seq_no).\n\nPlease note that your client must support sequence numbers in Secret Chats to be compatible with official Telegram clients.\n\n#### [](#sending-encrypted-files)Sending Encrypted Files\n\nAll files sent to secret chats are encrypted with one-time keys that are in no way related to the chat's shared key. Before an encrypted file is sent, it is assumed that the encrypted file's address will be attached to the outside of an encrypted message using the **file** parameter of the [messages.sendEncryptedFile](https://core.telegram.org/method/messages.sendEncryptedFile) method and that the key for direct decryption will be sent in the body of the message (the **key** parameter in the constructors [decryptedMessageMediaPhoto](https://core.telegram.org/constructor/decryptedMessageMediaPhoto), [decryptedMessageMediaVideo](https://core.telegram.org/constructor/decryptedMessageMediaPhoto) and [decryptedMessageMediaFile](https://core.telegram.org/constructor/decryptedMessageMediaPhoto).\n\nPrior to a file being sent to a secret chat, 2 random 256-bit numbers are computed which will serve as the AES key and initialization vector used to encrypt the file. AES-256 encryption with infinite garble extension (IGE) is used in like manner.\n\nThe key fingerprint is computed as follows:\n\n*   digest = md5(key + iv)\n*   fingerprint = substr(digest, 0, 4) XOR substr(digest, 4, 4)\n\nThe encrypted contents of a file are stored on the server in much the same way as those of a [file in cloud chats](https://core.telegram.org/api/files): piece by piece using calls to [upload.saveFilePart](https://core.telegram.org/method/upload.saveFilePart).  \nA subsequent call to [messages.sendEncryptedFile](https://core.telegram.org/method/messages.sendEncryptedFile) will assign an identifier to the stored file and send the address together with the message. The recipient will receive an update with [encryptedMessage](https://core.telegram.org/constructor/encryptedMessage), and the **file** parameter will contain file information.\n\nIncoming and outgoing encrypted files can be forwarded to other secret chats using the constructor [inputEncryptedFile](https://core.telegram.org/constructor/inputEncryptedFile) to avoid saving the same content on the server twice.\n\n#### [](#working-with-an-update-box)Working with an Update Box\n\nSecret chats are associated with specific devices (or rather with [authorization keys](https://core.telegram.org/mtproto/description#creating-an-authorization-key)), not users. A conventional message box, which uses **pts** to describe the client's status, is not suitable, because it is designed for long-term message storage and message access from different devices.\n\nAn additional temporary message queue is introduced as a solution to this problem. When an update regarding a message from a secret chat is sent, a new value of **qts** is sent, which helps reconstruct the difference if there has been a long break in the connection or in case of loss of an update.\n\nAs the number of events increases, the value of **qts** increases by 1 with each new event. The initial value may not (and will not) be equal to 0.\n\nThe fact that events from the temporary queue have been received and stored by the client is acknowledged explicitly by a call to the [messages.receivedQueue](https://core.telegram.org/method/messages.receivedQueue) method or implicitly by a call to [updates.getDifference](https://core.telegram.org/method/updates.getDifference) (the value of **qts** passed, not the final state). All messages acknowledged as delivered by the client, as well as any messages older than 7 days, may (and will) be deleted from the server.\n\nUpon de-authorization, the event queue of the corresponding device will be forcibly cleared, and the value of **qts** will become irrelevant.\n\n## [](#updating-to-new-layers)Updating to new layers\n\nYour client should always store the maximal layer that is known to be supported by the client on the other side of a secret chat. When the secret chat is first created, this value should be initialized to 46. This remote layer value must always be updated immediately after receiving _any_ packet containing information of an upper layer, i.e.:\n\n*   any secret chat message containing _layer\\_no_ in its `decryptedMessageLayer` with _layer_\\>=46, or\n*   a [decryptedMessageActionNotifyLayer](https://core.telegram.org/constructor/decryptedMessageActionNotifyLayer) service message, wrapped as if it were the [decryptedMessageService](https://core.telegram.org/constructor/decryptedMessageService) constructor of the obsolete layer 8 (constructor `decryptedMessageService#aa48327d`).\n\n#### [](#notifying-the-remote-client-about-your-local-layer)Notifying the remote client about your local layer\n\nIn order to notify the remote client of your local layer, your client must send a message of the `decryptedMessageActionNotifyLayer` type. This notification must be wrapped in a constructor of an appropriate layer.\n\nThere are two cases when your client must notify the remote client about its local layer:\n\n1.  As soon as a new secret chat has been created, immediately after the secret key has been successfully exchanged.\n2.  Immediately after the local client has been updated to support a new secret chat layer. In this case notifications must be sent to **all** currently existing secret chats. Note that this is only necessary when updating to new layers that contain changes in the secret chats implementation (e.g. you don't need to do this when your client is updated from Layer 46 to Layer 47).",
    "url": "https://core.telegram.org/api/end-to-end"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:01 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5902",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/end-to-end/video-calls",
      "title": "End-to-End Encrypted Voice and Video Calls",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "End-to-End Encrypted Voice and Video Calls"
        },
        {
          "property": "og:description",
          "content": "This article describes the end-to-end encryption used for Telegram voice and video calls.\nRelated Articles\nEnd-to-End Encryption\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:03 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "6267",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# End-to-End Encrypted Voice and Video Calls\n\nThis article describes the end-to-end encryption used for Telegram **voice** and **video calls**.\n\n##### [](#related-articles)Related Articles\n\n* * *\n\n## [](#establishing-calls)Establishing Calls\n\nBefore a call is ready, some preliminary actions have to be performed. The calling party needs to contact the party to be called and check whether it is ready to accept the call. Besides that, the parties have to negotiate the protocols to be used, learn the IP addresses of each other or of the Telegram relay servers to be used (so-called _reflectors_), and generate a one-time encryption key for this voice call with the aid of _Diffie--Hellman key exchange_. All of this is accomplished in parallel with the aid of several Telegram API methods and related notifications. This document covers details related to key generation, encryption and security.\n\n## [](#key-generation)Key Generation\n\nThe Diffie-Hellman key exchange, as well as the whole protocol used to create a new voice call, is quite similar to the one used for [Secret Chats](https://core.telegram.org/api/end-to-end#key-generation). We recommend studying the linked article before proceeding.\n\nHowever, we have introduced some important changes to facilitate the [key verification process](#key-verification). Below is the entire exchange between the two communicating parties, the Caller (A) and the Callee (B), through the Telegram servers (S).\n\n*   _A_ executes [messages.getDhConfig](https://core.telegram.org/method/messages.getDhConfig) to find out the 2048-bit Diffie-Hellman prime _p_ and generator _g_. The client is expected to check whether _p_ is a safe prime and perform all the [security checks](https://core.telegram.org/api/end-to-end#sending-a-request) necessary for secret chats.\n*   _A_ chooses a random value of _a_, 1 < a < p-1, and computes _g\\_a:=power(g,a) mod p_ (a 256-byte number) and _g\\_a\\_hash:=SHA256(g\\_a)_ (32 bytes long).\n*   _A_ invokes (sends to server _S_) [phone.requestCall](https://core.telegram.org/method/phone.requestCall), which has the field `g_a_hash:bytes`, among others. For this call, this field is to be filled with _g\\_a\\_hash_, **not** _g\\_a_ itself.\n*   The Server _S_ performs privacy checks and sends an [updatePhoneCall](https://core.telegram.org/constructor/updatePhoneCall) update with a [phoneCallRequested](https://core.telegram.org/constructor/phoneCallRequested) constructor to all of _B_'s active devices. This update, apart from the identity of _A_ and other relevant parameters, contains the _g\\_a\\_hash_ field, filled with the value obtained from _A_.\n*   _B_ accepts the call on one of their devices, stores the received value of _g\\_a\\_hash_ for this instance of the voice call creation protocol, chooses a random value of _b_, 1 < b < p-1, computes _g\\_b:=power(g,b) mod p_, performs all the required security checks, and invokes the [phone.acceptCall](https://core.telegram.org/method/phone.acceptCall) method, which has a _g\\_b:bytes_ field (among others), to be filled with the value of _g\\_b_ itself (not its hash).\n*   The Server _S_ sends an [updatePhoneCall](https://core.telegram.org/constructor/updatePhoneCall) with the [phoneCallDiscarded](https://core.telegram.org/constructor/phoneCallDiscarded) constructor to all other devices _B_ has authorized, to prevent accepting the same call on any of the other devices. From this point on, the server _S_ works only with that of _B_'s devices which has invoked [phone.acceptCall](https://core.telegram.org/method/phone.acceptCall) first.\n*   The Server _S_ sends to _A_ an [updatePhoneCall](https://core.telegram.org/constructor/updatePhoneCall) update with [phoneCallAccepted](https://core.telegram.org/constructor/phoneCallAccepted) constructor, containing the value of _g\\_b_ received from _B_.\n*   _A_ performs all the usual security checks on _g\\_b_ and _a_, computes the Diffie--Hellman key _key:=power(g\\_b,a) mod p_ and its fingerprint _key\\_fingerprint:long_, equal to the lower 64 bits of _SHA1(key)_, the same as with secret chats. Then _A_ invokes the [phone.confirmCall](https://core.telegram.org/method/phone.confirmCall) method, containing `g_a:bytes` and `key_fingerprint:long`.\n*   The Server _S_ sends to _B_ an [updatePhoneCall](https://core.telegram.org/constructor/updatePhoneCall) update with the [phoneCall](https://core.telegram.org/constructor/phoneCall) constructor, containing the value of _g\\_a_ in _g\\_a\\_or\\_b:bytes_ field, and _key\\_fingerprint:long_\n*   At this point _B_ receives the value of _g\\_a_. It checks that _SHA256(g\\_a)_ is indeed equal to the previously received value of _g\\_a\\_hash_, performs all the [usual Diffie-Hellman security checks](https://core.telegram.org/mtproto/security_guidelines), and computes the key _key:=power(g\\_a,b) mod p_ and its fingerprint, equal to the lower 64 bits of _SHA1(key)_. Then it checks that this fingerprint equals the value of `key_fingerprint:long` received from the other side, as an implementation sanity check.\n\nAt this point, the Diffie--Hellman key exchange is complete, and both parties have a 256-byte shared secret key _key_ which is used to encrypt all further exchanges between _A_ and _B_.\n\nIt is of paramount importance to accept each update only once for each instance of the key generation protocol, discarding any duplicates or alternative versions of already received and processed messages (updates).\n\n## [](#encryption)Encryption\n\n> This document describes encryption in **voice and video calls** as implemented in Telegram apps with versions **7.0** and above. See [this document](https://core.telegram.org/api/end-to-end/voice-calls) for details on encryption used in **voice calls** in app versions released before **August 14, 2020**.\n\nThe [Telegram Voice and Video Call Library](https://github.com/TelegramMessenger/tgcalls) uses an optimized version of [MTProto 2.0](https://core.telegram.org/) to send and receive **packets**, consisting of one or more end-to-end encrypted **messages** of various types ([_ice_](https://webrtcglossary.com/ice/) _candidates list, video formats, remote video status, audio stream data, video stream data, message ack_ or _empty_).\n\nThis document describes only the encryption process, leaving out encoding and network-dependent parts.\n\nThe library starts working with:\n\n*   An [encryption key](#key-generation) `key` shared between the parties, as generated above.\n*   Information whether the call is **outgoing** or **incoming**.\n*   Two data transfer channels: **signaling**, offered by the Telegram API, and **transport** based on WebRTC.\n\nBoth data transfer channels are unreliable (messages may get lost), but **signaling** is slower and more reliable.\n\n### [](#encrypting-call-data)Encrypting Call Data\n\nThe body of a packet (`decrypted_body`) consists of several messages and their respective `seq` numbers concatenated together.\n\n*   decrypted\\_body = message\\_seq1 + message\\_body1 + message\\_seq2 + message\\_body2\n\nEach `decrypted_body` is unique because no two `seq` numbers of the first message can be the same. If only old messages need to be re-sent, an _empty_ message with new unique `seq` is added to the packet first.\n\nThe [encryption key](#key-generation) `key` is used to compute a 128-bit `msg_key` and then a 256-bit `aes_key` and a 128-bit `aes_iv`:\n\n*   msg\\_key\\_large = SHA256 (substr(key, 88+x, 32) + decrypted\\_body);\n*   msg\\_key = substr (msg\\_key\\_large, 8, 16);\n*   sha256\\_a = SHA256 (msg\\_key + substr (key, x, 36));\n*   sha256\\_b = SHA256 (substr (key, 40+x, 36) + msg\\_key);\n*   aes\\_key = substr (sha256\\_a, 0, 8) + substr (sha256\\_b, 8, 16) + substr (sha256\\_a, 24, 8);\n*   aes\\_iv = substr (sha256\\_b, 0, 4) + substr (sha256\\_a, 8, 8) + substr (sha256\\_b, 24, 4);\n\n`x` depends on whether the call is **outgoing** or **incoming** and on the connection type:\n\n*   x = 0 for **outgoing** + **transport**\n*   x = 8 for **incoming** + **transport**\n*   x = 128 for **outgoing** + **signaling**\n*   x = 136 for **incoming** + **signaling**\n\nThis allows apps to decide which packet types will be sent to which connections and work in these connections independently (with each having its own `seq` counter).\n\nThe resulting `aes_key` and `aes_iv` are used to encrypt `decrypted_body`:\n\n*   encrypted\\_body = AES\\_CTR (decrypted\\_body, aes\\_key, aes\\_iv)\n\nThe packet that gets sent consists of `msg_key` and `encrypted_body`:\n\n*   packet\\_bytes = msg\\_key + encrypted\\_body\n\nWhen received, the packet gets decrypted using `key` and `msg_key`, after which `msg_key` is checked against the relevant `SHA256` substring. If the check fails, the packet **must** be discarded.\n\n### [](#protecting-against-replay-attacks)Protecting Against Replay Attacks\n\nEach of the peers maintains its own 32-bit monotonically increasing counter for outgoing messages, `seq`, starting with `1`. This `seq` counter is prepended to each sent message and increased by `1` for each new message. No two `seq` numbers of the first message in a packet can be the same. If only old messages need to be re-sent, an _empty_ message with a new unique `seq` is added to the packet first. When the `seq` counter reaches `2^30`, the call must be aborted. Each peer\u00a0stores `seq` values of all the messages it has received (and processed) which are larger than `max_received_seq - 64`, where `max_received_seq` is the largest `seq` number received so far.\n\nIf a packet is received, the first message of which has a `seq` that is smaller or equal to `max_received_seq - 64` or its `seq` had already been received, the message is discarded. Otherwise, the `seq` values of all incoming messages are memorized and `max_received_seq` is adjusted. This guarantees that no two packets will be processed twice.\n\n## [](#key-verification)Key Verification\n\nTo verify the key, and ensure that no MITM attack is taking place, both parties concatenate the secret key _key_ with the value _g\\_a_ of the Caller ( _A_ ), compute SHA256 and use it to generate a sequence of emoticons. More precisely, the SHA256 hash is split into four 64-bit integers; each of them is divided by the total number of emoticons used (currently 333), and the remainder is used to select specific emoticons. The specifics of the protocol guarantee that comparing four emoticons out of a set of 333 is sufficient to prevent eavesdropping (MiTM attack on DH) with a probability of **0.9999999999**.\n\nThis is because instead of the standard Diffie-Hellman key exchange which requires only two messages between the parties:\n\n*   A->B : (generates a and) sends g\\_a := g^a\n*   B->A : (generates b and true key (g\\_a)^b, then) sends g\\_b := g^b\n*   A : computes key (g\\_b)^a\n\nwe use a **three-message modification** thereof that works well when both parties are online (which also happens to be a requirement for voice calls):\n\n*   A->B : (generates a and) sends g\\_a\\_hash := hash(g^a)\n*   B->A : (stores g\\_a\\_hash, generates b and) sends g\\_b := g^b\n*   A->B : (computes key (g\\_b)^a, then) sends g\\_a := g^a\n*   B : checks hash(g\\_a) == g\\_a\\_hash, then computes key (g\\_a)^b\n\nThe idea here is that _A_ commits to a specific value of _a_ (and of _g\\_a_) without disclosing it to _B_. _B_ has to choose its value of _b_ and _g\\_b_ without knowing the true value of _g\\_a_, so that it cannot try different values of _b_ to force the final key _(g\\_a)^b_ to have any specific properties (such as fixed lower 32 bits of SHA256(key)). At this point, _B_ commits to a specific value of _g\\_b_ without knowing _g\\_a_. Then _A_ has to send its value _g\\_a_; it cannot change it even though it knows _g\\_b_ now, because the other party _B_ would accept only a value of _g\\_a_ that has a hash specified in the very first message of the exchange.\n\nIf some impostor is pretending to be either _A_ or _B_ and tries to perform a Man-in-the-Middle Attack on this Diffie--Hellman key exchange, the above still holds. Party _A_ will generate a shared key with _B_ -- or whoever pretends to be _B_ -- without having a second chance to change its exponent _a_ depending on the value _g\\_b_ received from the other side; and the impostor will not have a chance to adapt his value of _b_ depending on _g\\_a_, because it has to commit to a value of _g\\_b_ before learning _g\\_a_. The same is valid for the key generation between the impostor and the party _B_.\n\nThe use of hash commitment in the DH exchange constrains the attacker to only **one guess** to generate the correct visualization in their attack, which means that using just over 33 bits of entropy represented by four emoji in the visualization is enough to make a successful attack highly improbable.\n\n> For a slightly more user-friendly explanation of the above see: [How are calls authenticated?](https://core.telegram.org/techfaq#q-how-are-voice-calls-authenticated)",
    "url": "https://core.telegram.org/api/end-to-end/video-calls"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/end-to-end/pfs",
      "title": "Perfect Forward Secrecy",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Perfect Forward Secrecy"
        },
        {
          "property": "og:description",
          "content": "Telegram supports Perfect Forward Secrecy (PFS) in Secret Chats as of Layer 20. See updating to new layers.\nIn order to\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:06 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4689",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Perfect Forward Secrecy\n\n> Telegram supports Perfect Forward Secrecy (PFS) in Secret Chats as of Layer 20. See [updating to new layers](https://core.telegram.org/api/end-to-end#updating-to-new-layers).\n\nIn order to keep past communications safe, official Telegram clients will initiate re-keying once a key has been used to decrypt and encrypt more than 100 messages, or has been in use for more than one week, provided the key has been used to encrypt at least one message. Old keys are then securely discarded and cannot be reconstructed, even with access to the new keys currently in use.\n\nAny client participating in a Secret Chat can initiate re-keying as soon as it perceives that the current key has been used for too long or for encrypting too many messages. Please note that you should never initiate a new instance of the re-keying protocol if an uncompleted instance exists, initiated by either party.\n\n**Note:** third-party developers are required to maintain the same level of security. All clients with secret chat support must be able to initiate re-keying and accept relevant service messages. See [Security Guidelines](https://core.telegram.org/mtproto/security_guidelines).\n\n### [](#re-keying-protocol)Re-keying protocol\n\nNew keys are generated by exchanging special messages, using previously established keys for encryption. The re-keying protocol between parties A and B normally consists of four steps:\n\n##### [](#1-decryptedmessageactionrequestkey)1\\. decryptedMessageActionRequestKey\n\nA (re-keying initiator) generates a new value of _a_, subject to the same limitations as for the [initial Diffie-Hellman key exchange](https://core.telegram.org/api/end-to-end#key-generation), and sends the value of _pow(g,a)_ to B, embedded in a [decryptedMessageService](https://core.telegram.org/constructor/decryptedMessageService):\n\n```\ndecryptedMessageActionRequestKey exchange_id:long g_a:string = DecryptedMessageAction;\n```\n\n*   _exchange\\_id_ is a random number identifying this instance of the Re-Keying Protocol for both parties\n*   _g\\_a_ is the value of _pow(g,a) mod p_\n\nNote that the same Diffie--Hellman parameters _(p,g)_ as for the initial Diffie--Hellman key exchange in this secret chat are used. They do not need to be re-transmitted explicitly.\n\n##### [](#2-decryptedmessageactionacceptkey)2\\. decryptedMessageActionAcceptKey\n\nUpon receipt of the above service message, B checks its content, and generates a response with same _exchange\\_id_, for a newly generated value of _b_:\n\n```\ndecryptedMessageActionAcceptKey exchange_id:long g_b:string key_fingerprint:long = DecryptedMessageAction;\n```\n\n*   _exchange\\_id_ is the same as in the received [decryptedMessageActionRequestKey](https://core.telegram.org/constructor/decryptedMessageActionRequestKey)\n*   _g\\_b_ is the value of _pow(g,b) mod p_\n*   _key\\_fingerprint_ is the 64-bit fingerprint of the newly generated _key = pow(g\\_a, b) mod p_, used as a sanity check of the implementation\n\nAt this stage, B can already compute the new key _key_ = _pow(g\\_a, b) mod p_ and its _key\\_fingerprint_ (last 64 bits of its SHA-1). However, it continues using the previous key until the completion of the exchange.\n\nOnce side B sends [decryptedMessageActionAcceptKey](https://core.telegram.org/constructor/decryptedMessageActionAcceptKey), it cannot abort the key exchange; it must be ready to switch to the new key immediately after a `decryptedMessageActionCommitKey` is received. Therefore, if side B wishes to delay the usage of new key, for example in order to fill some seq\\_no gaps first, it must delay the `decryptedMessageActionAcceptKey` answer accordingly.\n\n##### [](#3-decryptedmessageactioncommitkey)3\\. decryptedMessageActionCommitKey\n\nOnce A receives a valid `decryptedMessageActionAcceptKey`, it performs all necessary checks, and \"commits\" the new key by means of the following service message:\n\n```\ndecryptedMessageActionCommitKey exchange_id:long key_fingerprint:long = DecryptedMessageAction;\n```\n\n*   _exchange\\_id_ is the same as in the two previous messages\n*   _key\\_fingerprint_ is the value of the hash (last 64 bits of SHA-1) of the new key computed by A, for implementation sanity check\n\nAfter that, A can (and must) encrypt all following messages with the new key.\n\nIf side A wishes to delay installation of the new key, for example because there are some seq\\_no gaps that it wants to fill first, it must delay [decryptedMessageActionCommitKey](https://core.telegram.org/constructor/decryptedMessageActionCommitKey) answer accordingly.\n\n##### [](#4-final-step)4\\. Final step\n\nWhen B receives either a `decryptedMessageActionCommitKey` or a message encrypted by the new key, recognized by the value of _key\\_fingerprint_ prepended to the encrypted message (it may happen that the `decryptedMessageActionCommitKey` has been lost and will be re-requested later), it assumes that A has started using the new key for encryption, and does the same.\n\nHowever, the previous key may be kept until there are no gaps in received messages up to the switch to the new key. Once all the gaps have been filled, the old key must be securely discarded.\n\nThere is one exception to this rule \u2014\u00a0the SHA-1 of the original key (generated during the establishment of Secret Chat in question) is always stored, in order to show [key visualizations](#key-visualization) on the clients.\n\n#### [](#aborting-protocol)Aborting protocol\n\nAny of the parties may abort any instance of an uncompleted re-keying protocol, unless `decryptedMessageActionCommitKey` or `decryptedMessageActionAcceptKey` has been already sent by the party in question. In order to abort re-keying, send\n\n```\ndecryptedMessageActionAbortKey exchange_id:long = DecryptedMessageAction;\n```\n\nThis could be done, for example, if the party is already participating in a different instance of the re-keying protocol, or if the received values of _g\\_a_, _g\\_b_ and other parameters do not pass security checks. In the latter case, it might be advisable to abort the Secret Chat altogether.\n\n#### [](#discarding-previous-keys)Discarding Previous Keys\n\nOnce B receives `decryptedMessageActionCommitKey`, it can safely discard the previous key provided there are no gaps. However, A may only discard the previous key after a message encrypted with the new key has been received. If no ordinary messages are scheduled to be sent, a special [no-op message](https://core.telegram.org/constructor/decryptedMessageActionNoop) should sent by B for this purpose:\n\n```\ndecryptedMessageActionNoop = DecryptedMessageAction;\n```\n\n#### [](#concurrent-re-keying)Concurrent Re-Keying\n\nIt may happen that both parties concurrently initiate re-keying by sending `decryptedMessageActionRequestKey` without knowing that the other party has already done so. If each side aborts re-keying because it is already participating in another instance of the protocol initiated by itself, the re-keying will never happen.\n\nBecause of this possibility, we suggest that only the instance with the smaller _exchange\\_id_ is aborted, with the option to re-use its _(a,g\\_a)_ for the re-keying protocol instance with the larger _exchange\\_id_ (when compared as a `long`, i.e. signed little-endian 64-bit integer).\n\nIn other words, if a `decryptedMessageActionRequestKey` is received after A has sent its `decryptedMessageActionRequestKey`, but has not yet received `decryptedMessageActionAcceptKey`, the following is to be done:\n\n*   if _exchange\\_id_ in the sent `decryptedMessageActionRequestKey` was larger than that in the `decryptionActionRequestKey` just received, abort the newly-suggested re-keying protocol instance without sending explicit [decryptedMessageActionAbortKey](https://core.telegram.org/constructor/decryptedMessageActionAbortKey) (the other side will do the same according to the next rule).\n*   if _exchange\\_id_ in our `decryptedMessageActionRequestKey` was smaller, respond to the newly-received `decryptedMessageActionRequestKey` with a `decryptedMessageActionAcceptKey`, and participate only in the re-keying protocol instance initiated by the other side. It is possible to re-use at this stage the value of _g\\_a_ (now called _g\\_b_) that was generated for the original `decryptedMessageActionRequestKey`, now abandoned, or totally new _(b,g\\_b)_ can be generated.\n*   in the unlikely (2^{-64}) case both _exchange\\_id_ are equal, abort both instances without sending an explicit `decryptedMessageActionAbortKey`. The other side will do the same.\n\n##### [](#key-visualization)Key Visualization\n\nSince all re-keying instances are carried over the secure channel established when the secret chat is created, it is necessary for the user to confirm that no MITM attack had taken place during the initial exchange. The key visualization on the clients uses the first 128-bits of the SHA-1 of the original key created when the Secret Chat was first established, followed by the first 160 bits of the SHA-256 of the key in use when the secret chat was updated to layer 46 (coincides with the original key if chat was created using layer 46).\n\n> Please note that the _key\\_fingerprint_ parameter was introduced as a maintenance tool (with a misleading name) and is **not** related to key visualization on the clients.",
    "url": "https://core.telegram.org/api/end-to-end/pfs"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/pfs",
      "title": "Perfect Forward Secrecy",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Perfect Forward Secrecy"
        },
        {
          "property": "og:image",
          "content": "a2b9f721d645a85533"
        },
        {
          "property": "og:description",
          "content": "Binding temporary authorization key to permanent ones."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:06 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "2686",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Perfect Forward Secrecy\n\n##### [](#related-articles)Related articles\n\n> _This article is about Perfect Forward Secrecy in cloud chats, see also [PFS in Secret Chats](https://core.telegram.org/api/end-to-end/pfs)._\n\n* * *\n\nTelegram supports Perfect Forward Secrecy (PFS).\n\nTo make this possible, the client generates a permanent authorization key using **p\\_q\\_inner\\_data** and a temporary key using **p\\_q\\_inner\\_data\\_temp**. (See [Creating an Authorization Key](https://core.telegram.org/mtproto/auth_key) for more info.) These 2 operations may be done in parallel using different connections. The client must save an **expires\\_at** unix timestamp `expires_at = time + expires_in`.\n\n**Important**: in order to achieve PFS, the client must **never** use the permanent auth\\_key\\_id directly. Every message that is sent to MTProto, must be encrypted by a **temp\\_auth\\_key\\_id**, that was bound to the **perm\\_auth\\_key\\_id**.\n\nAn unbound **temp\\_auth\\_key\\_id** may only be used with the following methods:\n\n*   [auth.bindTempAuthKey](https://core.telegram.org/method/auth.bindTempAuthKey)\n*   [help.getConfig](https://core.telegram.org/method/help.getConfig)\n*   [help.getNearestDc](https://core.telegram.org/method/help.getNearestDc)\n\nIn order to bind a temporary authorization key to the permanent key the client creates a [special binding message](https://core.telegram.org/method/auth.bindTempAuthKey#binding-message-contents) and executes the [auth.bindTempAuthKey](https://core.telegram.org/method/auth.bindTempAuthKey) method using **temp\\_auth\\_key**. Once **auth.bindTempAuthKey** has been executed successfully, the client may continue using the API as usual; the client must also [rewrite client info](https://core.telegram.org/api/invoking#saving-client-info) using [initConnection](https://core.telegram.org/method/initConnection) after each binding. Each permanent key may only be bound to **one** temporary key at a time, binding a new temporary key overwrites the previous one.\n\nAn [auth.bindTempAuthKey](https://core.telegram.org/method/auth.bindTempAuthKey) request may also return an `ENCRYPTED_MESSAGE_INVALID` error, which must be handled as follows:\n\n*   If and only if the permanent auth key used in the request was created more than 60 seconds ago:\n    *   Drop both the temporary and permanent auth keys.  \n        If the dropped main auth key is the main logged in auth key (the one used for logging into the user's native DC), this means the user was also logged out.\n    *   Recreate temporary and permanent auth keys.\n*   Unconditionally, retry binding the temporary and permanent keys.\n\nOnce the temporary key expires, the client needs to generate a new temporary key using **p\\_q\\_inner\\_data\\_temp**. Then it needs to re-bind that new temporary key to the initial permanent key. A new key can also be generated in advance, so that the client has a new key ready by the time the old one has expired.\n\nFor additional security, the client can store the temporary authorization key in RAM only and never save it in persistent storage.\n\nA temporary authorization key may expire at any moment before **expires\\_at**, since such keys are also stored only in the RAM on the server-side. Be prepared to handle resulting MTProto errors correctly (non-existent auth\\_key\\_id results in a 404 error).",
    "url": "https://core.telegram.org/api/pfs"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/mtproto/mtproto-transports#abridged",
      "title": "MTProto transports",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "MTProto transports"
        },
        {
          "property": "og:image",
          "content": "4a92b4139362e9f113"
        },
        {
          "property": "og:description",
          "content": "Here's a list of MTProto transport protocols (see the ISO/OSI recap for a full explanation):\nAbridged\nIntermediate\nPadded\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:07 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "6802",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# MTProto transports\n\nHere's a list of MTProto transport protocols ([see the ISO/OSI recap for a full explanation](https://core.telegram.org/mtproto#recap)):\n\n*   [Abridged](#abridged)\n*   [Intermediate](#intermediate)\n*   [Padded intermediate](#padded-intermediate)\n*   [Full](#full)\n\nThe server recognizes these different protocols (and distinguishes them from HTTP, too) by the header. Additionally, the following transport features can be used:\n\n*   [Quick ack](#quick-ack)\n*   [Transport errors](#transport-errors)\n*   [Transport obfuscation](#transport-obfuscation)\n\nExample implementations for these protocols can be seen in [tdlib](https://github.com/tdlib/td/blob/master/td/mtproto/TcpTransport.cpp) and [MadelineProto](https://github.com/danog/MadelineProto/tree/v8/src/Stream/MTProtoTransport).\n\n### [](#abridged)Abridged\n\nThe lightest protocol available.\n\n*   Overhead: Very small\n*   Minimum envelope length: 1 byte\n*   Maximum envelope length: 4 bytes\n\nPayload structure:\n\n```\n+-+----...----+\n|l|  payload  |\n+-+----...----+\nOR\n\n+-+---+----...----+\n|h|len|  payload  +\n+-+---+----...----+\n```\n\nBefore sending _anything_ into the underlying socket (see [transports](https://core.telegram.org/mtproto/transports)), the client must first send `0xef` as the first byte (the server **will not** send `0xef` as the first byte in the first reply).  \nThen, payloads are wrapped in the following envelope:\n\nIf the packet length divided by four is smaller than 127:\n\n*   Length: payload length, divided by four, and encoded as a single byte\n*   Payload: the MTProto payload\n\nIf the packet length divided by four is bigger than or equal to 127, the following envelope must be used, instead:\n\n*   Header: A single byte of value `0x7f` (127)\n*   Length: payload length, divided by four, and encoded as 3 length bytes (little endian)\n*   Payload: the MTProto payload\n\n[Quick ACK\u00a0\u00bb](#quick-ack) may be enabled for this transport.\n\nTo request a quick ACK from the server for an encrypted MTProto payload, use the following envelope for _outgoing_ messages, instead of the one specified above.\n\nIf the packet length divided by four is smaller than 127:\n\n*   Length: payload length, divided by four, plus 128, and encoded as a single byte (`(length/4)+128` or `(length >> 2) | (1 << 7)`); i.e. the most significant bit must be set.\n*   Payload: the MTProto payload\n\nIf the packet length divided by four is bigger than or equal to 127, the following envelope must be used, instead:\n\n*   Header: A single byte of value `0xff` (255)\n*   Length: payload length, divided by four, and encoded as 3 length bytes (little endian); same as for a normal abridged envelope.\n*   Payload: the MTProto payload\n\nThe server will send quick ACK tokens by bswapping them (i.e. inverting the order of the 4 bytes of the ACK token) and sending them as a standalone 4-byte packet without a length header.\n\n```\n+----+\n|dcba|\n+----+\n```\n\nThese quick ACK packets can be easily distinguished from normal abridged packets because the first byte will always have the most-significant bit set (because quick ACK tokens have the most-significant bit of the last byte set, and since they are bswapped the last byte will come first), and the length/header of normal payload packets coming from the server is always less than or equal to 127 (thus the most-significant bit is not set for normal payloads).\n\n### [](#intermediate)Intermediate\n\nIn case 4-byte data alignment is needed, an _intermediate_ version of the original protocol may be used.\n\n*   Overhead: small\n*   Minimum envelope length: 4 bytes\n*   Maximum envelope length: 4 bytes\n\nPayload structure:\n\n```\n+----+----...----+\n+len.+  payload  +\n+----+----...----+\n```\n\nBefore sending _anything_ into the underlying socket (see [transports](https://core.telegram.org/mtproto/transports)), the client must first send `0xeeeeeeee` as the first int (four bytes, the server **will not** send `0xeeeeeeee` as the first int in the first reply).  \nThen, payloads are wrapped in the following envelope:\n\n*   Length: payload length encoded as 4 length bytes (little endian)\n*   Payload: the MTProto payload\n\n[Quick ACK\u00a0\u00bb](#quick-ack) may be enabled for this transport.\n\nTo request a quick ACK from the server for an encrypted MTProto payload, add `0x80000000` to the `len` field before encoding it (equivalent to doing `len = len | (1 << 31)`, i.e. set the most-significant bit of the length).\n\nThe server will send quick ACK tokens as a standalone 4-byte packet without a length header.\n\n```\n+----+\n|abcd|\n+----+\n```\n\nThese quick ACK packets can be easily distinguished from normal intermediate packets because quick ACK tokens always have the most-significant bit of the last byte set, and trying to decode an ACK token as a little-endian 32-bit integer will always yield a value bigger than or equal to `0x80000000`, which can never be a valid packet length.\n\n### [](#padded-intermediate)Padded intermediate\n\nPadded version of the [intermediate protocol](#intermediate), to use with [obfuscation enabled](#transport-obfuscation) to **bypass ISP blocks**.\n\n*   Overhead: small-medium\n*   Minimum envelope length: random\n*   Maximum envelope length: random\n\nBefore sending _anything_ into the underlying socket (see [transports](https://core.telegram.org/mtproto/transports)), the client must first send `0xdddddddd` as the first int (four bytes, the server **will not** send `0xdddddddd` as the first int in the first reply).  \nThen, payloads are wrapped in the following envelope:\n\n```\n+----+----...----+----...----+\n|tlen|  payload  |  padding  |\n+----+----...----+----...----+\n```\n\nEnvelope description:\n\n*   Total length: payload+padding length encoded as 4 length bytes (little endian)\n*   Payload: the MTProto payload\n*   Padding: A random padding string of length `0-15`\n\n[Quick ACK\u00a0\u00bb](#quick-ack) may be enabled for this transport.\n\nTo request a quick ACK from the server for an encrypted MTProto payload, add `0x80000000` to the `len` field before encoding it (equivalent to doing `len = len | (1 << 31)`, i.e. set the most-significant bit of the length).\n\nThe server will send quick ACK tokens as a standalone 8 to 16-byte packet (excluding the length of the packet itself, encoded as usual), containing a 4-byte header with all bits set, followed by the ACK token (`abcd`), followed by 0 to 8 random padding bytes.\n\n```\n+----+----+----+----...----+\n|tlen|FFFF|abcd|  padding  |\n+----+----+----+----...----+\n```\n\nThese quick ACK packets can be easily distinguished from normal intermediate padded packets because their length will be always smaller than or equal to 16, smaller than any MTProto packet.  \nThey can be distinguished from transport errors because the first 4 bytes of the payload are equal to `0xFFFFFFFF`, not a valid transport error.\n\n### [](#full)Full\n\nThe basic MTProto transport protocol\n\n*   Overhead: medium\n*   Minimum envelope length: 12 bytes (length+seqno+crc)\n*   Maximum envelope length: 12 bytes (length+seqno+crc)\n\nPayload structure:\n\n```\n+----+----+----...----+----+\n|len.|seq.|  payload  |crc.|\n+----+----+----...----+----+\n```\n\nEnvelope description:\n\n*   Length: length+seqno+payload+crc length encoded as 4 length bytes (little endian, the length of the length field must be included, too)\n*   Seqno: the TCP sequence number for this TCP connection (different from the [MTProto sequence number](https://core.telegram.org/mtproto/description#message-sequence-number-msg-seqno)): the first packet sent is numbered 0, the next one 1, etc.\n*   payload: MTProto payload\n*   crc: 4 CRC32 bytes computed using length, sequence number, and payload together.\n\n### [](#transport-features)Transport features\n\nAdditionally, the following transport features can be used:\n\n#### [](#quick-ack)Quick ack\n\nSome of the TCP transports listed above support quick ACKs: quick ACKs are a way for clients to get quick receipt acknowledgements for packets.\n\nTo request a quick ack for a specific outgoing payload, clients must set the MSB of an appropriate field in the transport envelope (as described in the documentation for each transport protocol above).\n\nAlso, clients must generate and store a quick ACK token, associating it with the outgoing MTProto payload, by:\n\n*   Taking the first 32 bits of the SHA256 of the encrypted portion of the payload prepended by 32 bytes from the authorization key (the same hash generated when computing the [message key](https://core.telegram.org/mtproto/description#message-key-msg-key), except that instead of taking the middle 128 bits, the first 32 bits are taken instead).\n*   Setting the MSB of the last byte to 1: in other words, treat the 32 bits generated above as a little-endian integer, then add `0x80000000` to it (i.e. `ack_token = msg_key_long[0:4] | (1 << 31)` on a little-endian system).\n\nOnce the payload is successfully received, decrypted and accepted for processing by the server, the server will send back the same quick ACK token we generated above, using the encoding described in the documentation for each transport protocol.\n\nNote that reception of a quick ACK **does not** indicate that any of the RPC queries contained in the message have succeeded, failed or finished execution at all, it simply indicates that they have been received, decrypted and accepted for processing by the server.\n\nThe server will still send `msgs_ack` constructors for content-related constructors and methods contained in payloads which were quick ACKed, as well as replies/errors for methods and constructors, as usual.\n\n#### [](#transport-errors)Transport errors\n\nIn the event of a transport error (missing auth key, transport flood, etc.), the server may send a packet (framed as an MTProto payload by the chosen MTProto transport) with a signed little-endian number of 4 bytes, whose **absolute value** contains the error code (the error itself is actually negative).\n\nFor example, error Code 403 corresponds to situations where the corresponding HTTP error would have been returned by the HTTP protocol.\n\nError 404 (auth key not found) is returned when the specified auth key ID cannot be found by the DC, during the initial MTProto handshake if any of the specified queries is incorrect, or during normal operation for example if some MTProto fields are incorrect (i.e. the MTProto packet length is bigger than the transport-specified packet length, and so on).\n\nError 429 (transport flood) is returned when too many transport connections are established to the same IP in a too short lapse of time, or if any of the [container](https://core.telegram.org/mtproto/service_messages#simple-container)/[service message limits](https://core.telegram.org/mtproto/service_messages_about_messages#acknowledgment-of-receipt) are reached.\n\nError 444 (invalid DC) is returned while [creating an auth key](https://core.telegram.org/mtproto/auth_key#presenting-proof-of-work-server-authentication), [connecting to an MTProxy](#transport-obfuscation) or in other contexts if an invalid DC ID is specified.\n\nWhen using the [HTTP](https://core.telegram.org/mtproto/transports#http)/[HTTPS](https://core.telegram.org/mtproto/transports#https) transports, transport errors are not transmitted as specified above, instead they are simply returned as normal HTTP status codes (and the HTTP payload must be ignored).\n\n#### [](#transport-obfuscation)Transport obfuscation\n\nTransport obfuscation is required to use the [WebSocket transports](https://core.telegram.org/mtproto/transports#websocket).\n\nTransport obfuscation to **prevent ISP blocks** is implemented using the following protocol, situated under the MTProto transport in the ISO/OSI stack, see the [recap](https://core.telegram.org/mtproto#recap); this means that the payload is first wrapped in the [MTProto transport envelope](https://core.telegram.org/mtproto/mtproto-transports) (all transports are supported), and then obfuscated:\n\nPrior to establishing the connection (and eventually sending the protocol header of a specific [MTProto transport](https://core.telegram.org/mtproto/mtproto-transports)), a 64-byte (512-bit) **random** initialization payload is generated. During the generation process, special care must be taken in order to avoid a situation where that the first int (first four bytes) of the random string are equal to one of the known protocol identifiers (see above).  \nIn particular, the first four bytes must not be equal to `0xdddddddd` (padded intermediate), `0xeeeeeeee` (intermediate), `POST`, `GET`, `HEAD`, or any of the HTTP methods that are accepted by the MTProto servers.  \nThe first byte must also not be equal to `0xef` (abridged). Bytes `4-8` must also not be equal to `0x00000000`, since that would indicate use of the full transport with the initial TCP sequence number (0).\n\nThe protocol identifier, if present, must be inserted in the initialization payload at byte offset `56`: if its length is less than 4, it must be padded using the protocol identifier itself, to make its length 4 (`0xef` => `0xefefefef`): the standalone protocol identifier must be not be sent aftwerwards.\n\nThis protocol is also (but not exclusively) used when connecting to MTProxies: **only in this case**, the DC ID in a specially encoded form must also be inserted in the initialization payload at offset `60`. The encoding simply consists of the DC ID in two-byte signed little-endian form; `10000` has to be added to the DC ID to connect to the test servers; it has to be made negative if the DC we're connecting to is a media (not CDN) DC.\n\nNext, a secondary initialization payload is generated by reversing the primary initialization payload.\n\nTwo keys are extracted from both initialization payloads, using bytes at offsets `8-40`: the key extracted from the primary payload is used as encryption key, the key extracted from the secondary payload is used as decryption key.\n\nTwo IVs are extracted from both initialization payloads, using bytes at offsets `40-56`: the IV extracted from the primary payload is used as encryption IV, the IV extracted from the secondary payload is used as decryption IV.\n\n**Only if using MTProxy**, the secret is used to provide connection with the MTProxy server. The secret is a 16-byte string, usually distributed in its hexadecimal form along with the MTProxy host and port in [proxy deep links\u00a0\u00bb](https://core.telegram.org/api/links#mtproxy-links).\n\nOften, a 17-byte version of the secret can be found: this simply indicates that the client should use a specific MTProto transport (based on the first byte, usually it's `0xdd`, to indicate that the padded intermediate protocol should be used `0xdddddddd`; however, clients should default to the padded intermediate transport whenever an additional byte in the secret is encountered).\n\nThe extracted encryption and decryption keys must be concatenated with the secret (the first byte of which should be ignored if it's the 17-byte version), and the SHA256 hash of such string should be used as encryption/decryption key.\n\nThe obtained encryption and decryption key/IV pairs must then be used with **AES-256-CTR** to encrypt and decrypt all outgoing and incoming payloads.  \nThe final value of the encryption/decryption counter after handling an MTProto payload must be used as IV for the next payload, until the TCP/WS connection is closed.  \nIn other words, reuse the two encryption and decryption **AES-256-CTR** OpenSSL instances until the connection is closed.\n\nThe first thing that must be encrypted using the encryption key is the initialization payload itself. Then bytes `56-64` of the encrypted initialization payload are substituted in the original initialization payload: this is the part that contains the constant MTProto transport protocol identifier and the DC ID (**only for MTProxies**).\n\nThe final initialization payload must then be sent in the socket as **first 64 bytes** after the TCP handshake.\n\nExample pseudocode for the generation of an MTProxy connection payload (media DC 4) using the obfuscated [padded intermediate](#padded-intermediate) transport.  \n**Warning**: do not use the specified proxy secret in any MTProxy exposed on the internet.\n\n```\nprotocol := 0xdddddddd\ndc := 0xfcff\n\nwhile True:\n    init := (56 random bytes) + protocol + dc + (2 random bytes)\n\n    if init[0] == 0xef:\n      continue\n\n    first_int := substr(init, 0, 4)\n    if first_int == 0x44414548 || first_int == 0x54534f50 || first_int == 0x20544547 || first_int == 0x4954504f || first_int == 0x02010316 || first_int == 0xdddddddd || first_int == 0xeeeeeeee:\n      continue\n\n    second_int := substr(init, 4, 4)\n    if second_int == 0x00000000:\n      continue\n\n    break\n\ninitRev := strrev(init)\n\nencryptKey := substr(init, 8, 32)\nencryptIV := substr(init, 40, 16)\n\ndecryptKey := substr(initRev, 8, 32)\ndecryptIV := substr(initRev, 40, 16)\n\nsecret := substr(0xdd99999999999999999999999999999999, 1, 16)\n\nencryptKey = SHA256(encryptKey + secret)\ndecryptKey = SHA256(decryptKey + secret)\n\nencryptedInit := CTR(encryptKey, encryptIV, init)\n\nfinalInit := substr(init, 0, 56) + substr(encryptedInit, 56, 8)\n\nwrite(finalInit)\n```",
    "url": "https://core.telegram.org/mtproto/mtproto-transports"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/mtproto/transports#tcp",
      "title": "Transports",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Transports"
        },
        {
          "property": "og:image",
          "content": "beaf97b9951c081b35"
        },
        {
          "property": "og:description",
          "content": "Enables the delivery of encrypted containers together with the external header (hereinafter, Payload) from client to server\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:07 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5079",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Transports\n\nEnables the delivery of encrypted containers together with the external header (hereinafter, _Payload_) from client to server and back. Multiple transport protocols are defined:\n\n*   [TCP](#tcp)\n*   [WebSocket](#websocket)\n*   [WebSocket over HTTPS](#websocket-over-https)\n*   [HTTP](#http)\n*   [HTTPS](#https)\n\nThe URI format for connecting to the WebSocket and HTTP endpoints is the following:\n\n*   [URI format](#uri-format)\n    *   [TLS URI format](#tls-uri-format)\n\n### [](#tcp)TCP\n\nThe TCP transport is implemented simply by sending the payloads generated by the chosen [MTProto transport](https://core.telegram.org/mtproto/mtproto-transports) over a plain TCP socket on ports 80, 443, 5222 or other (a different port number may be returned by [help.getConfig](https://core.telegram.org/method/help.getConfig)).  \nNote that if the `this_port_only` [dcOption](https://core.telegram.org/constructor/dcOption) flag is set, clients must use only the specified port, without trying any other port.  \nAlso note that if the `force_try_ipv6` [config](https://core.telegram.org/constructor/config) flag is set, clients must prioritize IPv6 over IPv4 for all MTProto transports, even if an IPv4 connection is available.\n\nFraming is managed by the chosen [MTProto transport protocol](https://core.telegram.org/mtproto/mtproto-transports).\n\nThere are no implicit acknowledgments for the TCP transport: all messages must be acknowledged explicitly. Most frequently, acknowledgments are placed in a container with the next query or response if it is transmitted in short order. For example, this is almost always the case for client messages containing RPC queries: the acknowledgment normally arrives with the RPC response.\n\n### [](#websocket)WebSocket\n\nImplementation of the WebSocket transport is pretty much the same as with TCP: a [WebSocket](https://en.wikipedia.org/wiki/WebSocket) connection is established to the chosen MTProto server over port 80 using the specified [URI format](#uri-format).\n\nNote: a `Sec-WebSocket-Protocol: binary` header **must** be present in the handshake payload.\n\nFraming of payloads is still managed by the chosen [MTProto transport protocol](https://core.telegram.org/mtproto/mtproto-transports), not by WebSocket messages: the length of MTProto payloads is defined by the [MTProto transport protocol](https://core.telegram.org/mtproto/mtproto-transports), not by the length of the single WebSocket messages. This simply means that all data received and sent through WebSocket messages is to be treated as a single duplex stream of bytes, just like with TCP.\n\nWhen using the WebSocket transport, [transport obfuscation is required](https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation). Transport errors are transmitted [the usual way](https://core.telegram.org/mtproto/mtproto-transports#transport-errors), as with TCP. The close code of WebSockets will **always** be `1000` (normal closure), regardless of the actual exit status. In all cases, the description string will be a decimal encoded real error code (which may be forward/back-padded with whitespaces for constant length) and can be safely ignored.\n\nExample implementation: [MadelineProto](https://github.com/danog/MadelineProto/blob/v8/src/Stream/Transport/WsStream.php).\n\n### [](#websocket-over-https)WebSocket over HTTPS\n\nTo establish a WebSocket connection over HTTPS, simply use the [TLS URI format](#tls-uri-format). The rest is the same as with [plain WebSockets](#websocket).\n\nNote: a `Sec-WebSocket-Protocol: binary` header **must** be present in the handshake payload.\n\n### [](#http)HTTP\n\nNote: when implementing browser clients, [WebSocket transport](#websocket) is recommended instead of HTTP, thanks to its full-duplex stream logic similar to TCP's; this removes the need for [HTTP long polling](https://core.telegram.org/mtproto/service_messages#http-wait-long-poll) and eventual delays while relaying RPC replies.\n\nImplemented over HTTP/1.1 (with keepalive) running over the traditional TCP Port 80. [HTTPS can also be used](#https).\n\nMessage framing is **not** managed by [MTProto transport protocols](https://core.telegram.org/mtproto/mtproto-transports); it is instead handled by the HTTP protocol itself. Transport errors are also **not** transmitted [the usual way](https://core.telegram.org/mtproto/mtproto-transports#transport-errors), instead they are simply returned as normal HTTP status codes.\n\nAn HTTP connection is attached to a session (or rather, to session + key identifier) specified in the most recent user query received; normally, the session is the same in all queries, but crafty HTTP proxies may corrupt that. A server may not return a message into an HTTP connection unless it belongs to the same session, and unless it is the server's turn (an HTTP request had been received from the client to which a response has not been sent yet).\n\nThe overall arrangement is as follows. The client opens one or more keepalive HTTP or HTTPS connections to the server. If one or more messages need to be sent, they are made into a _payload_ which is followed by a POST request to the URL/api to which the payload is transmitted as data. In addition, `Content-Length`, `Keepalive`, and `Host` are valid HTTP headers.\n\nHaving received the query, the server may either wait a little while (if the query requires a response following a short timeout) or immediately return a dummy response (only acknowledging the receipt of the container). In any case, the response may contain any number of messages. The server may at the same time send out any other messages it might be holding for the session.\n\nIn addition, there exists a special [long poll RPC query](https://core.telegram.org/mtproto/service_messages#http-wait-long-poll) (valid for HTTP connections only) which transmits maximum timeout _T_. If the server has messages for the session, they are returned immediately; otherwise, a wait state is entered until such time as the server has a message for the client or _T_ seconds have elapsed. If no events occur in the span of _T_ seconds, a dummy response is returned (special message).\n\nIf a server needs to send a message to a client, it checks for an HTTP connection that belongs to the required session and is in the \u201canswering an HTTP request\u201d state (including long poll) whereupon the message is added to the response container for the connection and sent to the user. In a typical case, there is some additional wait time (50 milliseconds) against the eventuality that the server will soon have more messages for the session.\n\nIf no suitable HTTP connection is available, the messages are placed in the current session's send queue. However, they find their way there anyway until receipt is explicitly confirmed by the client. For all protocols, the client must return an explicit acknowledgment within a reasonable time (it can be added to a container for the following request).\n\n**_Important_**: if the acknowledgment fails to arrive on time, the message can be resent (possibly, in a different container). The parties must autonomously be ready for this and must store the identifiers of the most recent messages received (and ignore such duplicates rather than repeat actions). In order not to have the identifiers stored forever, there exist special _garbage collection_ messages that take advantage of message identifier monotonicity.\n\nIf the send queue overflows or if messages stay in the queue for over 10 minutes, the server forgets them. This may happen even faster, if the server is running out of buffer space (for example, because of serious network issues resulting in a large number of connections becoming severed).\n\n### [](#https)HTTPS\n\nTo establish a connection over HTTPS, simply use the [TLS URI format](#tls-uri-format). The rest is the same as with [plain HTTP](#http).\n\n### [](#uri-format)URI format\n\nThe URI format that must be used when connecting to the plain WebSocket and HTTP endpoints is the following:\n\n```\nhttp://X.X.X.X:80/api(w)(s)\n```\n\nThe following URI may also be used only for HTTP and secure WebSocket endpoints (not usable for plain WebSocket connections):\n\n```\nhttp://(name)(-1).web.telegram.org:80/api(w)(s)(_test)\n```\n\nThe `w` flag is added when CORS headers are required in order to connect from a browser.  \nThe `s` flag enables the WebSocket API.  \nThe `name` placeholder in the domain version specifies the DC ID to connect to:\n\n*   `pluto` => DC 1\n*   `venus` => DC 2\n*   `aurora` => DC 3\n*   `vesta` => DC 4\n*   `flora` => DC 5\n\n`-1` can be appended to the DC name to raise the maximum limit of simultaneous requests per hostname.  \nThe `_test` flag, when connecting to the domain version of the URL, specifies that connection to the test DCs must be made, instead.\n\n#### [](#tls-uri-format)TLS URI format\n\nWhen connecting to the HTTPS and WSS endpoints, only the domain name URI can be used over port 443:\n\n```\nhttps://(name)(-1).web.telegram.org:443/api(w)(s)(_test)\n```\n\nSee the [URI format](#uri-format) for an explanation of the placeholders.\n\nExample implementations: [tdlib](https://github.com/tdlib/td/blob/56163c2460a65afc4db2c57ece576b8c38ea194b/td/telegram/net/ConnectionCreator.cpp), [MadelineProto](https://github.com/danog/MadelineProto/blob/v8/src/DataCenter.php) (client side), [MTProxy](https://github.com/TelegramMessenger/MTProxy/blob/28f5b17eef2f50d768c4f010f8a4fc149254550a/mtproto/mtproto-proxy.c) (server side).",
    "url": "https://core.telegram.org/mtproto/transports"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/boost",
      "title": "Channel and supergroup boosts",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Channel and supergroup boosts"
        },
        {
          "property": "og:description",
          "content": "Telegram Premium users can grant their favorite channels and supergroups additional features like the ability to post stories by giving them boosts."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:08 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "7226",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Channel and supergroup boosts\n\n[Telegram Premium](https://core.telegram.org/api/premium) users can grant their favorite channels and supergroups additional features like the ability to post [stories](https://core.telegram.org/api/stories) by giving them **boosts**.\n\nChannels and supergroups level up as they gain more boosts \u2013 and for each level, they gain additional features.\n\nAdditionally, channel admins may gain even more boosts by starting [giveaways\u00a0\u00bb](https://core.telegram.org/api/giveaways).\n\nThe maximum possible boost level for a channel is specified in the [boosts\\_channel\\_level\\_max](https://core.telegram.org/api/config#boosts-channel-level-max) config key.\n\nSchema:\n\n```\nmyBoost#c448415c flags:# slot:int peer:flags.0?Peer date:int expires:int cooldown_until_date:flags.1?int = MyBoost;\n\npremium.myBoosts#9ae228e2 my_boosts:Vector<MyBoost> chats:Vector<Chat> users:Vector<User> = premium.MyBoosts;\n\n\nprepaidGiveaway#b2539d54 id:long months:int quantity:int date:int = PrepaidGiveaway;\n\npremium.boostsStatus#4959427a flags:# my_boost:flags.2?true level:int current_level_boosts:int boosts:int gift_boosts:flags.4?int next_level_boosts:flags.0?int premium_audience:flags.1?StatsPercentValue boost_url:string prepaid_giveaways:flags.3?Vector<PrepaidGiveaway> my_boost_slots:flags.2?Vector<int> = premium.BoostsStatus;\n\n\nboost#4b3e14d6 flags:# gift:flags.1?true giveaway:flags.2?true unclaimed:flags.3?true id:string user_id:flags.0?long giveaway_msg_id:flags.2?int date:int expires:int used_gift_slug:flags.4?string multiplier:flags.5?int stars:flags.6?long = Boost;\n\npremium.boostsList#86f8613c flags:# count:int boosts:Vector<Boost> next_offset:flags.0?string users:Vector<User> = premium.BoostsList;\n\nmessage#94345242 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true from_scheduled:flags.18?true legacy:flags.19?true edit_hide:flags.21?true pinned:flags.24?true noforwards:flags.26?true invert_media:flags.27?true flags2:# offline:flags2.1?true video_processing_pending:flags2.4?true id:int from_id:flags.8?Peer from_boosts_applied:flags.29?int peer_id:Peer saved_peer_id:flags.28?Peer fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?long via_business_bot_id:flags2.0?long reply_to:flags.3?MessageReplyHeader date:int message:string media:flags.9?MessageMedia reply_markup:flags.6?ReplyMarkup entities:flags.7?Vector<MessageEntity> views:flags.10?int forwards:flags.10?int replies:flags.23?MessageReplies edit_date:flags.15?int post_author:flags.16?string grouped_id:flags.17?long reactions:flags.20?MessageReactions restriction_reason:flags.22?Vector<RestrictionReason> ttl_period:flags.25?int quick_reply_shortcut_id:flags.30?int effect:flags2.2?long factcheck:flags2.3?FactCheck = Message;\nchannelFull#bbab348d flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true can_set_location:flags.16?true has_scheduled:flags.19?true can_view_stats:flags.20?true blocked:flags.22?true flags2:# can_delete_channel:flags2.0?true antispam:flags2.1?true participants_hidden:flags2.2?true translations_disabled:flags2.3?true stories_pinned_available:flags2.5?true view_forum_as_messages:flags2.6?true restricted_sponsored:flags2.11?true can_view_revenue:flags2.12?true paid_media_allowed:flags2.14?true can_view_stars_revenue:flags2.15?true paid_reactions_available:flags2.16?true id:long about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int online_count:flags.13?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:flags.23?ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?long migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int folder_id:flags.11?int linked_chat_id:flags.14?long location:flags.15?ChannelLocation slowmode_seconds:flags.17?int slowmode_next_send_date:flags.18?int stats_dc:flags.12?int pts:int call:flags.21?InputGroupCall ttl_period:flags.24?int pending_suggestions:flags.25?Vector<string> groupcall_default_join_as:flags.26?Peer theme_emoticon:flags.27?string requests_pending:flags.28?int recent_requesters:flags.28?Vector<long> default_send_as:flags.29?Peer available_reactions:flags.30?ChatReactions reactions_limit:flags2.13?int stories:flags2.4?PeerStories wallpaper:flags2.7?WallPaper boosts_applied:flags2.8?int boosts_unrestrict:flags2.9?int emojiset:flags2.10?StickerSet = ChatFull;\n\nmessageActionBoostApply#cc02aa6d boosts:int = MessageAction;\nmessageService#2b085862 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true legacy:flags.19?true id:int from_id:flags.8?Peer peer_id:Peer reply_to:flags.3?MessageReplyHeader date:int action:MessageAction ttl_period:flags.25?int = Message;\n\n---functions---\n\npremium.getMyBoosts#0be77b4a = premium.MyBoosts;\npremium.applyBoost#6b7da746 flags:# slots:flags.0?Vector<int> peer:InputPeer = premium.MyBoosts;\n\npremium.getBoostsStatus#042f1f61 peer:InputPeer = premium.BoostsStatus;\n\npremium.getUserBoosts#39854d1f peer:InputPeer user_id:InputUser = premium.BoostsList;\n\npremium.getBoostsList#60f67660 flags:# gifts:flags.0?true peer:InputPeer offset:string limit:int = premium.BoostsList;\n```\n\nEach user has a certain number of boost slots that can be assigned to channels and supergroups: the precise number depends on whether they bought or were gifted a [Premium](https://core.telegram.org/api/premium) subscription, and can be fetched using [premium.getMyBoosts](https://core.telegram.org/method/premium.getMyBoosts), along with info about the channels and supergroups currently occupying each slot, if any.\n\n[Gifting a Telegram Premium](https://core.telegram.org/api/premium#gifting-telegram-premium) subscription to another user will create [boosts\\_per\\_sent\\_gift](https://core.telegram.org/api/config#boosts-per-sent-gift) new boost slots for us, and one boost slot for the destination user.\n\nUse [premium.applyBoost](https://core.telegram.org/method/premium.applyBoost) to assign some of your boost slots to a channel or supergroup.\n\nA `PREMIUM_ACCOUNT_REQUIRED` error will be returned if the current account does not have a [Telegram Premium](https://core.telegram.org/api/premium) subscription.  \nA `BOOST_NOT_MODIFIED` RPC error will be returned when calling any of the two methods if the user is already boosting the specified channel or supergroup with the same slots.\n\nAfter assigning a slot a channel or supergroup, the user may not change the boosted channel or supergroup for that slot for a certain cooldown period, specified in the [myBoost](https://core.telegram.org/constructor/myBoost).`cooldown_until_date` field: if the cooldown period isn't over yet, the method will return a 420 `FLOOD_WAIT_X` error, indicating the number of seconds left before a different channel or supergroup can be boosted.\n\nUsers may also invoke [premium.getBoostsStatus](https://core.telegram.org/method/premium.getBoostsStatus), to get the current boost status of a channel or supergroup as a [premium.boostsStatus](https://core.telegram.org/constructor/premium.boostsStatus) constructor, check out the [constructor page](https://core.telegram.org/constructor/premium.boostsStatus) for more info.\n\nThe number of boosts we have currently assigned to the channel/supergroup will also be visible in [channelFull](https://core.telegram.org/constructor/channelFull).`boosts_applied`.\n\nChannel or supergroup administrators may invoke [premium.getBoostsList](https://core.telegram.org/method/premium.getBoostsList) to fetch the list of users currently boosting the channel or supergroup, and [premium.getUserBoosts](https://core.telegram.org/method/premium.getUserBoosts) to get info about the boosts sent to a channel or supergroup by a specific user.\n\nBoosting a channel or supergroup will emit (not immediately, after max 15 seconds to allow grouping of repeated boosts) a [messageService](https://core.telegram.org/constructor/messageService) with a [messageActionBoostApply](https://core.telegram.org/constructor/messageActionBoostApply) to all users (supergroups) or for just the sender (channels), with `from_id` equal to the sender of the boosts.\n\n### [](#features)Features\n\n#### [](#posting-stories-as-a-channel-or-supergroup)Posting stories as a channel or supergroup\n\nWith each boost, channels and supergroups can post 1 additional story per day to their subscribers' story feeds.\n\n```\ninputPeerChannel#27bcbbfc channel_id:long access_hash:long = InputPeer;\n\nmessages.chats#64ff9fd5 chats:Vector<Chat> = messages.Chats;\n\n---functions---\n\nstories.getChatsToSend#a56a8b60 = messages.Chats;\n```\n\nEverything works exactly the same as when [posting stories as a user](https://core.telegram.org/api/stories#posting-stories), with the only difference that clients should pass the appropriate [inputPeerChannel](https://core.telegram.org/constructor/inputPeerChannel) instead of [inputPeerSelf](https://core.telegram.org/constructor/inputPeerSelf) to [stories.canSendStory](https://core.telegram.org/method/stories.canSendStory), [stories.sendStory](https://core.telegram.org/method/stories.sendStory) and all the other story methods, see the [main documentation\u00a0\u00bb](https://core.telegram.org/api/stories#posting-stories) for more info.\n\nUse [stories.getChatsToSend](https://core.telegram.org/method/stories.getChatsToSend) to obtain a list of channels or supergroups where the user can post stories; [stories.canSendStory](https://core.telegram.org/method/stories.canSendStory) must still be used before uploading a story to make sure no other limit was reached, as described in the [main documentation\u00a0\u00bb](https://core.telegram.org/api/stories#posting-stories).\n\n#### [](#boost-indicator-for-supergroup-messages)Boost indicator for supergroup messages\n\nIn incoming supergroup messages from non-anonymous group members only, [message](https://core.telegram.org/constructor/message).`from_boosts_applied` contains the number of boosts that the message's author has assigned to the supergroup.  \nThis counter should be shown in the UI, in the header of the message.  \nNote that [message](https://core.telegram.org/constructor/message).`from_boosts_applied` should be locally overridden for non-anonymous _outgoing_ supergroup messages, according to the current value of [channelFull](https://core.telegram.org/constructor/channelFull).`boosts_applied`, to ensure the value is correct even for messages sent by the current user before a supergroup was boosted (or after a boost has expired or the number of boosts has changed); do not update this value for incoming messages from other users, even if their boosts have changed.\n\n#### [](#changing-message-accent-color)Changing message accent color\n\nAfter reaching at least the boost level specified in the `channel_min_level` field of the [help.peerColorOption](https://core.telegram.org/constructor/help.peerColorOption) constructor for the chosen palette, (only) channels gain the ability to change their [message accent palette\u00a0\u00bb](https://core.telegram.org/api/colors).\n\n#### [](#changing-message-accent-emoji)Changing message accent emoji\n\nAfter reaching at least the boost level specified in the [`channel_bg_icon_level_min` config parameter](https://core.telegram.org/api/config#channel-bg-icon-level-min), (only) channels gain the ability to change the emoji used in the [message accent palette\u00a0\u00bb](https://core.telegram.org/api/colors).\n\n#### [](#changing-profile-accent-color-emoji)Changing profile accent color/emoji\n\nAfter reaching at least the boost level specified in the [`channel_profile_bg_icon_level_min`\u00a0\u00bb](https://core.telegram.org/api/config#channel-profile-bg-icon-level-min)/[`group_profile_bg_icon_level_min`\u00a0\u00bb](https://core.telegram.org/api/config#group-profile-bg-icon-level-min) config parameters and the boost level specified in the `channel_min_level`/`group_min_level` field of the [help.peerColorOption](https://core.telegram.org/constructor/help.peerColorOption) constructor for the chosen palette, channels/supergroups gain the ability to change the emoji and color used in the [profile accent palette\u00a0\u00bb](https://core.telegram.org/api/colors).\n\n#### [](#setting-wallpapers)Setting wallpapers\n\nAfter reaching at least the boost level specified in the [`channel_wallpaper_level_min`\u00a0\u00bb](https://core.telegram.org/api/config#channel-wallpaper-level-min)/[`group_wallpaper_level_min`\u00a0\u00bb](https://core.telegram.org/api/config#group-wallpaper-level-min) config parameters, channels/supergroups gain the ability to set a [fill channel/supergroup wallpaper, see here \u00bb for more info](https://core.telegram.org/api/wallpapers#channel-and-supergroup-wallpapers).  \nAfter reaching at least the boost level specified in the [`channel_custom_wallpaper_level_min`\u00a0\u00bb](https://core.telegram.org/api/config#channel-custom-wallpaper-level-min)/[`group_custom_wallpaper_level_min`\u00a0\u00bb](https://core.telegram.org/api/config#group-custom-wallpaper-level-min) config parameters, channels/supergroups gain the ability to set any custom [wallpaper](https://core.telegram.org/api/wallpapers), not just [fill channel/supergroup wallpapers, see here \u00bb for more info](https://core.telegram.org/api/wallpapers).\n\n#### [](#setting-a-custom-emoji-status)Setting a custom emoji status\n\nAfter reaching at least the boost level specified in the [`channel_emoji_status_level_min`\u00a0\u00bb](https://core.telegram.org/api/config#channel-emoji-status-level-min)/[`group_emoji_status_level_min`\u00a0\u00bb](https://core.telegram.org/api/config#group-emoji-status-level-min) config parameters, channels/supergroups gain the ability to change their [status emoji\u00a0\u00bb](https://core.telegram.org/api/emoji-status).\n\n#### [](#bypass-slowmode-and-chat-restrictions)Bypass slowmode and chat restrictions\n\n```\nchannelFull#bbab348d flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true can_set_location:flags.16?true has_scheduled:flags.19?true can_view_stats:flags.20?true blocked:flags.22?true flags2:# can_delete_channel:flags2.0?true antispam:flags2.1?true participants_hidden:flags2.2?true translations_disabled:flags2.3?true stories_pinned_available:flags2.5?true view_forum_as_messages:flags2.6?true restricted_sponsored:flags2.11?true can_view_revenue:flags2.12?true paid_media_allowed:flags2.14?true can_view_stars_revenue:flags2.15?true paid_reactions_available:flags2.16?true id:long about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int online_count:flags.13?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:flags.23?ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?long migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int folder_id:flags.11?int linked_chat_id:flags.14?long location:flags.15?ChannelLocation slowmode_seconds:flags.17?int slowmode_next_send_date:flags.18?int stats_dc:flags.12?int pts:int call:flags.21?InputGroupCall ttl_period:flags.24?int pending_suggestions:flags.25?Vector<string> groupcall_default_join_as:flags.26?Peer theme_emoticon:flags.27?string requests_pending:flags.28?int recent_requesters:flags.28?Vector<long> default_send_as:flags.29?Peer available_reactions:flags.30?ChatReactions reactions_limit:flags2.13?int stories:flags2.4?PeerStories wallpaper:flags2.7?WallPaper boosts_applied:flags2.8?int boosts_unrestrict:flags2.9?int emojiset:flags2.10?StickerSet = ChatFull;\n\n---functions---\n\nchannels.setBoostsToUnblockRestrictions#ad399cee channel:InputChannel boosts:int = Updates;\n```\n\nSupergroup admins with [ban\\_users admin rights\u00a0\u00bb](https://core.telegram.org/constructor/chatAdminRights) may allow users that apply a certain number of boosts to the group to bypass [slow mode\u00a0\u00bb](https://core.telegram.org/method/channels.toggleSlowMode) and [other\u00a0\u00bb](https://core.telegram.org/api/rights#default-rights) supergroup restrictions using [channels.setBoostsToUnblockRestrictions](https://core.telegram.org/method/channels.setBoostsToUnblockRestrictions).\n\nThe number of required boosts must be specified in the `boosts` parameter (1-8, 0 to disable), and will be returned in [channelFull](https://core.telegram.org/constructor/channelFull).`boosts_unrestrict`.\n\n#### [](#setting-a-custom-emoji-stickerset-for-supergroups)Setting a custom emoji stickerset for supergroups\n\n```\nchannelFull#bbab348d flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true can_set_location:flags.16?true has_scheduled:flags.19?true can_view_stats:flags.20?true blocked:flags.22?true flags2:# can_delete_channel:flags2.0?true antispam:flags2.1?true participants_hidden:flags2.2?true translations_disabled:flags2.3?true stories_pinned_available:flags2.5?true view_forum_as_messages:flags2.6?true restricted_sponsored:flags2.11?true can_view_revenue:flags2.12?true paid_media_allowed:flags2.14?true can_view_stars_revenue:flags2.15?true paid_reactions_available:flags2.16?true id:long about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int online_count:flags.13?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:flags.23?ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?long migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int folder_id:flags.11?int linked_chat_id:flags.14?long location:flags.15?ChannelLocation slowmode_seconds:flags.17?int slowmode_next_send_date:flags.18?int stats_dc:flags.12?int pts:int call:flags.21?InputGroupCall ttl_period:flags.24?int pending_suggestions:flags.25?Vector<string> groupcall_default_join_as:flags.26?Peer theme_emoticon:flags.27?string requests_pending:flags.28?int recent_requesters:flags.28?Vector<long> default_send_as:flags.29?Peer available_reactions:flags.30?ChatReactions reactions_limit:flags2.13?int stories:flags2.4?PeerStories wallpaper:flags2.7?WallPaper boosts_applied:flags2.8?int boosts_unrestrict:flags2.9?int emojiset:flags2.10?StickerSet = ChatFull;\n\nchannelAdminLogEventActionChangeEmojiStickerSet#46d840ab prev_stickerset:InputStickerSet new_stickerset:InputStickerSet = ChannelAdminLogEventAction;\n\n---functions---\n\nchannels.setEmojiStickers#3cd930b7 channel:InputChannel stickerset:InputStickerSet = Bool;\n```\n\nAfter reaching at least the boost level specified in the [`group_emoji_stickers_level_min`\u00a0\u00bb](https://core.telegram.org/api/config#group-emoji-stickers-level-min) config parameter, supergroups gain the ability to associate a [custom emoji stickerset\u00a0\u00bb](https://core.telegram.org/api/custom-emoji), which can be used by all users of the group (including non-[Premium](https://core.telegram.org/api/premium) users!), for messages sent within the group.\n\nThis feature is the custom emoji stickerset counterpart of the supergroup stickerset feature, available through [channels.setStickers](https://core.telegram.org/method/channels.setStickers).\n\nInvoke [channels.setEmojiStickers](https://core.telegram.org/method/channels.setEmojiStickers) to choose the custom emoji stickerset to associate to the supergroup, which will be available to users in [channelFull](https://core.telegram.org/constructor/channelFull).`emojiset`, and should be prioritized when choosing a custom emoji; a [channelAdminLogEventActionChangeEmojiStickerSet](https://core.telegram.org/constructor/channelAdminLogEventActionChangeEmojiStickerSet) will be emitted to the [admin log](https://core.telegram.org/api/recent-actions) after invoking that method.\n\n#### [](#unlimited-voice-message-transcriptions-for-supergroups)Unlimited voice message transcriptions for supergroups\n\nAfter reaching at least the boost level specified in the [`group_transcribe_level_min`\u00a0\u00bb](https://core.telegram.org/api/config#group-transcribe-level-min) config parameter, non-[Premium](https://core.telegram.org/api/premium) users in the supergroup gain the ability to [transcribe any voice message](https://core.telegram.org/api/transcribe), without using up their free transcription quota.\n\n#### [](#disable-ads-on-the-channel)Disable ads on the channel\n\n```\nchannelFull#bbab348d flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true can_set_location:flags.16?true has_scheduled:flags.19?true can_view_stats:flags.20?true blocked:flags.22?true flags2:# can_delete_channel:flags2.0?true antispam:flags2.1?true participants_hidden:flags2.2?true translations_disabled:flags2.3?true stories_pinned_available:flags2.5?true view_forum_as_messages:flags2.6?true restricted_sponsored:flags2.11?true can_view_revenue:flags2.12?true paid_media_allowed:flags2.14?true can_view_stars_revenue:flags2.15?true paid_reactions_available:flags2.16?true id:long about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int online_count:flags.13?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:flags.23?ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?long migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int folder_id:flags.11?int linked_chat_id:flags.14?long location:flags.15?ChannelLocation slowmode_seconds:flags.17?int slowmode_next_send_date:flags.18?int stats_dc:flags.12?int pts:int call:flags.21?InputGroupCall ttl_period:flags.24?int pending_suggestions:flags.25?Vector<string> groupcall_default_join_as:flags.26?Peer theme_emoticon:flags.27?string requests_pending:flags.28?int recent_requesters:flags.28?Vector<long> default_send_as:flags.29?Peer available_reactions:flags.30?ChatReactions reactions_limit:flags2.13?int stories:flags2.4?PeerStories wallpaper:flags2.7?WallPaper boosts_applied:flags2.8?int boosts_unrestrict:flags2.9?int emojiset:flags2.10?StickerSet = ChatFull;\n\n---functions---\n\nchannels.restrictSponsoredMessages#9ae91519 channel:InputChannel restricted:Bool = Updates;\n```\n\nAfter reaching at least the boost level specified in the [`channel_restrict_sponsored_level_min`\u00a0\u00bb](https://core.telegram.org/api/config#channel-restrict-sponsored-level-min) config parameter, channel owners may disable ads on the channel for all users using [channels.restrictSponsoredMessages](https://core.telegram.org/method/channels.restrictSponsoredMessages).\n\nIf ads are disabled on the channel, the [channelFull](https://core.telegram.org/constructor/channelFull).`restricted_sponsored` flag will be set (owners only).",
    "url": "https://core.telegram.org/api/boost"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/giveaways",
      "title": "Giveaways",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Giveaways"
        },
        {
          "property": "og:description",
          "content": "Telegram channel and supergroup administrators may launch giveaways to randomly distribute Telegram Premium subscriptions and other gifts among their followers, in exchange for boosts."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:09 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "6567",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Giveaways\n\nTelegram [channel and supergroup](https://core.telegram.org/api/channel) administrators with any set of [rights](https://core.telegram.org/api/rights) may launch giveaways to randomly distribute [Telegram Premium](https://core.telegram.org/api/premium) subscriptions and other gifts among their followers, in exchange for [boosts](https://core.telegram.org/api/boost).\n\n### [](#giveaways-and-giftcodes)Giveaways and giftcodes\n\nThis functionality should only be enabled if the [giveaway\\_gifts\\_purchase\\_available](https://core.telegram.org/api/config#giveaway-gifts-purchase-available) config value is set to true.\n\nNote that the flow described below can also be used to gift a Premium subscriptions to multiple friends, and is different from the [old gift flow](https://core.telegram.org/api/premium#gifting-telegram-premium), which allowed gifting only one subscription with some extra limitations, not present in this flow.\n\nNote that [premium multigift links](https://core.telegram.org/api/links#premium-multigift-links) lead to a page that uses the new gift flow described below.\n\nSchema:\n\n```\npremiumGiftCodeOption#257e962b flags:# users:int months:int store_product:flags.0?string store_quantity:flags.1?int currency:string amount:long = PremiumGiftCodeOption;\n\ninputStorePaymentPremiumGiveaway#160544ca flags:# only_new_subscribers:flags.0?true winners_are_visible:flags.3?true boost_peer:InputPeer additional_peers:flags.1?Vector<InputPeer> countries_iso2:flags.2?Vector<string> prize_description:flags.4?string random_id:long until_date:int currency:string amount:long = InputStorePaymentPurpose;\ninputStorePaymentPremiumGiftCode#fb790393 flags:# users:Vector<InputUser> boost_peer:flags.0?InputPeer currency:string amount:long message:flags.1?TextWithEntities = InputStorePaymentPurpose;\n\ninputInvoicePremiumGiftCode#98986c0d purpose:InputStorePaymentPurpose option:PremiumGiftCodeOption = InputInvoice;\n\nprepaidGiveaway#b2539d54 id:long months:int quantity:int date:int = PrepaidGiveaway;\n\npremium.boostsStatus#4959427a flags:# my_boost:flags.2?true level:int current_level_boosts:int boosts:int gift_boosts:flags.4?int next_level_boosts:flags.0?int premium_audience:flags.1?StatsPercentValue boost_url:string prepaid_giveaways:flags.3?Vector<PrepaidGiveaway> my_boost_slots:flags.2?Vector<int> = premium.BoostsStatus;\n\nmessageMediaGiveaway#aa073beb flags:# only_new_subscribers:flags.0?true winners_are_visible:flags.2?true channels:Vector<long> countries_iso2:flags.1?Vector<string> prize_description:flags.3?string quantity:int months:flags.4?int stars:flags.5?long until_date:int = MessageMedia;\n\nmessageActionGiveawayLaunch#a80f51e4 flags:# stars:flags.0?long = MessageAction;\nmessageActionGiveawayResults#87e2f155 flags:# stars:flags.0?true winners_count:int unclaimed_count:int = MessageAction;\n\nmessageActionGiftCode#56d03994 flags:# via_giveaway:flags.0?true unclaimed:flags.2?true boost_peer:flags.1?Peer months:int slug:string currency:flags.2?string amount:flags.2?long crypto_currency:flags.3?string crypto_amount:flags.3?long message:flags.4?TextWithEntities = MessageAction;\n\npayments.giveawayInfo#4367daa0 flags:# participating:flags.0?true preparing_results:flags.3?true start_date:int joined_too_early_date:flags.1?int admin_disallowed_chat_id:flags.2?long disallowed_country:flags.4?string = payments.GiveawayInfo;\npayments.giveawayInfoResults#e175e66f flags:# winner:flags.0?true refunded:flags.1?true start_date:int gift_code_slug:flags.3?string stars_prize:flags.4?long finish_date:int winners_count:int activated_count:flags.2?int = payments.GiveawayInfo;\n\npayments.checkedGiftCode#284a1096 flags:# via_giveaway:flags.2?true from_id:flags.4?Peer giveaway_msg_id:flags.3?int to_id:flags.0?long date:int months:int used_date:flags.1?int chats:Vector<Chat> users:Vector<User> = payments.CheckedGiftCode;\n\n---functions---\n\npayments.getPremiumGiftCodeOptions#2757ba54 flags:# boost_peer:flags.0?InputPeer = Vector<PremiumGiftCodeOption>;\n\npayments.getPaymentForm#37148dbb flags:# invoice:InputInvoice theme_params:flags.0?DataJSON = payments.PaymentForm;\n\npremium.getBoostsStatus#042f1f61 peer:InputPeer = premium.BoostsStatus;\n\npayments.launchPrepaidGiveaway#5ff58f20 peer:InputPeer giveaway_id:long purpose:InputStorePaymentPurpose = Updates;\n\npayments.getGiveawayInfo#f4239425 peer:InputPeer msg_id:int = payments.GiveawayInfo;\n\npayments.checkGiftCode#8e51b4c1 slug:string = payments.CheckedGiftCode;\npayments.applyGiftCode#f6e26854 slug:string = Updates;\n```\n\nFirst of all, invoke [payments.getPremiumGiftCodeOptions](https://core.telegram.org/method/payments.getPremiumGiftCodeOptions) to obtain a list of [premiumGiftCodeOption](https://core.telegram.org/constructor/premiumGiftCodeOption) constructors, containing a list of giveaway options that may be chosen by the admin, indicating the number and duration of the of [Telegram Premium](https://core.telegram.org/api/premium) subscriptions that will be gifted in the giveaway, along with their price (`amount`) in the specified `currency` (see the [constructor page\u00a0\u00bb](https://core.telegram.org/constructor/premiumGiftCodeOption) for more info on these fields).\n\nOnce the admin has chosen a specific gift code option, invoke [payments.getPaymentForm](https://core.telegram.org/method/payments.getPaymentForm), passing an [inputInvoicePremiumGiftCode](https://core.telegram.org/constructor/inputInvoicePremiumGiftCode), with the chosen [premiumGiftCodeOption](https://core.telegram.org/constructor/premiumGiftCodeOption) in `option` and a `purpose` containing either:\n\n*   [inputStorePaymentPremiumGiveaway](https://core.telegram.org/constructor/inputStorePaymentPremiumGiveaway) to create a giveaway, where Telegram will randomly select `option.users` subscribers to the channel/supergroup specified in `purpose.boost_peer` (only new subscribers starting from the giveaway creation date if the `purpose.only_new_subscribers` field is set).  \n    Additional channels/supergroups that the user must join to participate to the giveaway can be specified in `additional_peers`.  \n    The set of users that can participate to the giveaway can be restricted by passing an explicit whitelist of up to [giveaway\\_countries\\_max](https://core.telegram.org/api/config#giveaway-countries-max) countries, specified as two-letter ISO 3166-1 alpha-2 country codes in `countries_iso2`.  \n    The end date of the giveaway must be specified in `until_date`, and it must be at most [giveaway\\_period\\_max](https://core.telegram.org/api/config#giveaway-period-max) seconds in the future; at that date, Telegram will randomly choose `option.users` subscribers according to the conditions specified above, and send them a Telegram Premium giftcode as a [messageActionGiftCode](https://core.telegram.org/constructor/messageActionGiftCode) constructor, that should be used client-side to generate a [giftcode link](https://core.telegram.org/api/links#premium-giftcode-links).  \n    The channel/supergroup specified in `boost_peer` will receive [giveaway\\_boosts\\_per\\_premium](https://core.telegram.org/api/config#giveaway-boosts-per-premium) [boosts](https://core.telegram.org/api/boost) from each winner, that cannot be reassigned to another channel/supergroup for the duration of the gifted subscription.\n*   or [inputStorePaymentPremiumGiftCode](https://core.telegram.org/constructor/inputStorePaymentPremiumGiftCode), to gift [Telegram Premium](https://core.telegram.org/api/premium) subscriptions only to some specific subscribers (`purpose.users`, max [giveaway\\_add\\_peers\\_max](https://core.telegram.org/api/config#giveaway-add-peers-max) users) of the channel/supergroup specified in `purpose.boost_peer`, which will receive [giveaway\\_boosts\\_per\\_premium](https://core.telegram.org/api/config#giveaway-boosts-per-premium) [boosts](https://core.telegram.org/api/boost) from each user, that cannot be reassigned to another channel/supergroup for the duration of the gifted subscription.  \n    Users may also use this method to simply gift subscriptions to contacts by **not** setting the `boost_peer` field: in this case, gifting a [Telegram Premium](https://core.telegram.org/api/premium) subscription to another user will create [boosts\\_per\\_sent\\_gift](https://core.telegram.org/api/config#boosts-per-sent-gift) [boost slots\u00a0\u00bb](https://core.telegram.org/api/boost) for us, and one boost slot for the destination user.\n\nThen, follow the [invoice payment flow as described in the payments documentation\u00a0\u00bb](https://core.telegram.org/api/payments#22-getting-invoice-info-about-the-product).\n\nMore alternative payment flows are also available:\n\n*   The Premium Bot flow, by contacting [premium\\_bot\\_username](https://core.telegram.org/api/config#premium-bot-username), and following the inline keyboard payment flow for giveaways (the final keyboard with the prices will contain buttons with [invoice deep links\u00a0\u00bb](https://core.telegram.org/api/links#invoice-links) that should be used to make the payment).\n*   Payment via [Fragment](https://fragment.com/), which also allows making larger purchases.\n*   The store-based subscription flow based on [payments.assignAppStoreTransaction](https://core.telegram.org/method/payments.assignAppStoreTransaction)/[payments.assignPlayMarketTransaction](https://core.telegram.org/method/payments.assignPlayMarketTransaction), currently not available to third-party apps.\n\nThen:\n\n*   If the payment was made using the [payments.getPaymentForm](https://core.telegram.org/method/payments.getPaymentForm) or [payments.assignAppStoreTransaction](https://core.telegram.org/method/payments.assignAppStoreTransaction)/[payments.assignPlayMarketTransaction](https://core.telegram.org/method/payments.assignPlayMarketTransaction) payment flows, the giveaway will launch as soon as the payment is complete.\n    \n*   Otherwise, if the [Premium bot](https://core.telegram.org/api/config#premium-bot-username) or [Fragment](https://fragment.com/) flows were used, once the payment for the giveaway is made, invoke [premium.getBoostsStatus](https://core.telegram.org/method/premium.getBoostsStatus), passing to `peer` the ID of the channel/supergroup that we selected when paying for the giveaway, to obtain a [prepaidGiveaway](https://core.telegram.org/constructor/prepaidGiveaway) constructor in [premium.boostsStatus](https://core.telegram.org/constructor/premium.boostsStatus).`prepaid_giveaways`, containing info about the prepaid giveaway.\n    \n    To actually launch the giveaway for the Fragment and bot flows, invoke [payments.launchPrepaidGiveaway](https://core.telegram.org/method/payments.launchPrepaidGiveaway), passing [prepaidGiveaway](https://core.telegram.org/constructor/prepaidGiveaway).`id` to `giveaway_id`, the ID of the channel/supergroup to `peer` and giveaway settings in `purpose` (populated as specified above).\n    \n\nFinally:\n\n*   If the payment succeeds and we're launching a giveaway using [inputStorePaymentPremiumGiveaway](https://core.telegram.org/constructor/inputStorePaymentPremiumGiveaway): a [messageActionGiveawayLaunch](https://core.telegram.org/constructor/messageActionGiveawayLaunch) service message and a media message containing a [messageMediaGiveaway](https://core.telegram.org/constructor/messageMediaGiveaway) will be sent to the channel/supergroup.\n    \n    Once the giveaway is over, a [messageActionGiveawayResults](https://core.telegram.org/constructor/messageActionGiveawayResults) will be sent to the channel/supergroup and the winners will automatically receive a [messageActionGiftCode](https://core.telegram.org/constructor/messageActionGiftCode) service message from Telegram's service user, containing the `slug` that can be used to generate a [giftcode link](https://core.telegram.org/api/links#premium-giftcode-links) to redeem the Premium subscription.  \n    The [messageActionGiftCode](https://core.telegram.org/constructor/messageActionGiftCode).`via_giveaway` flag will be set.\n    \n*   If the payment succeeds and we're simply gifting some subscriptions to specific users [inputStorePaymentPremiumGiftCode](https://core.telegram.org/constructor/inputStorePaymentPremiumGiftCode): the specified users will automatically receive a [messageActionGiftCode](https://core.telegram.org/constructor/messageActionGiftCode) service message from Telegram's service user, containing the `slug` that can be used to generate a [giftcode link](https://core.telegram.org/api/links#premium-giftcode-links) to redeem the Premium subscription.  \n    The [messageActionGiftCode](https://core.telegram.org/constructor/messageActionGiftCode).`via_giveaway` flag will not be set.\n    \n    Note that if the payment was made on behalf of the user (i.e. if `boost_peer` was **not** set), then the users to which the gift was sent will instead receive a [messageService](https://core.telegram.org/constructor/messageService) from the user that sent the gift, containing a [messageActionGiftPremium](https://core.telegram.org/constructor/messageActionGiftPremium) constructor with further info about the price and duration of the gifted Telegram Premium subscription.  \n    Clients should display this message, along with a sticker from the [inputStickerSetPremiumGifts](https://core.telegram.org/constructor/inputStickerSetPremiumGifts) [stickerset](https://core.telegram.org/api/stickers): here's an [example](https://telegram.org/blog/custom-emoji#gifting-telegram-premium).\n    \n\nThe [messageActionGiftCode](https://core.telegram.org/constructor/messageActionGiftCode).`slug` should be used to generate a [giftcode link](https://core.telegram.org/api/links#premium-giftcode-links), that the user can use to redeem the subscription, or re-gift it to someone else.\n\nIf `winners_are_visible` flag is set while starting a giveaway, giveaway winners are public and will be listed in a [messageMediaGiveawayResults](https://core.telegram.org/constructor/messageMediaGiveawayResults) message that will be automatically sent to the channel/supergroup once the giveaway ends.\n\nAny user can invoke [payments.checkGiftCode](https://core.telegram.org/method/payments.checkGiftCode) with the link's slug to obtain info about the giveaway, such as the channel/supergroup that gifted the subscription (`from_id`), and the user that originally received the gift (`to_id`).  \nThis can also be useful to channel/supergroup administrators to precisely determine the winners of a giveaway, for example if the giveaway also included some extra gifts apart from Premium subscriptions (_like Teslas_): the winners can simply send their link as undisputable proof that they won the giveaway, because the user that received the gift can be viewed in the `to_id` field returned by Telegram when invoking [payments.checkGiftCode](https://core.telegram.org/method/payments.checkGiftCode) on the slug.  \nAnother way for admins to check who received the gifts is to simply use [premium.getBoostsList](https://core.telegram.org/method/premium.getBoostsList) while the boosts received by the gifts are still active.\n\nTo claim the [Telegram Premium](https://core.telegram.org/api/premium) subscription, simply invoke [payments.applyGiftCode](https://core.telegram.org/method/payments.applyGiftCode), passing the link's `slug`.\n\n### [](#star-giveaways)Star giveaways\n\n```\nstarsGiveawayOption#94ce852a flags:# extended:flags.0?true default:flags.1?true stars:long yearly_boosts:int store_product:flags.2?string currency:string amount:long winners:Vector<StarsGiveawayWinnersOption> = StarsGiveawayOption;\n\nstarsGiveawayWinnersOption#54236209 flags:# default:flags.0?true users:int per_user_stars:long = StarsGiveawayWinnersOption;\n\ninputInvoiceStars#65f00ce3 purpose:InputStorePaymentPurpose = InputInvoice;\n\ninputStorePaymentStarsGiveaway#751f08fa flags:# only_new_subscribers:flags.0?true winners_are_visible:flags.3?true stars:long boost_peer:InputPeer additional_peers:flags.1?Vector<InputPeer> countries_iso2:flags.2?Vector<string> prize_description:flags.4?string random_id:long until_date:int currency:string amount:long users:int = InputStorePaymentPurpose;\n\n---functions---\n\npayments.getStarsGiveawayOptions#bd1efd3e = Vector<StarsGiveawayOption>;\n\npayments.getPaymentForm#37148dbb flags:# invoice:InputInvoice theme_params:flags.0?DataJSON = payments.PaymentForm;\n```\n\nStar giveaways are similar to [normal giveaways](#giveaways-and-giftcodes), with the only difference that instead of giving away gifts or [Telegram Premium subscriptions](https://core.telegram.org/api/premium), the giveaway will automatically distribute [Telegram Stars](https://core.telegram.org/api/stars) among the winners.\n\nFirst of all, invoke [payments.getStarsGiveawayOptions](https://core.telegram.org/method/payments.getStarsGiveawayOptions) to obtain a list of [starsGiveawayOption](https://core.telegram.org/constructor/starsGiveawayOption) constructors, containing a list of giveaway options that may be chosen by the admin, indicating the number of winners of the giveaway, the number of [Telegram Stars](https://core.telegram.org/api/stars) that will be gifted in the giveaway, along with their price (`amount`) in the specified `currency` (see the [constructor page\u00a0\u00bb](https://core.telegram.org/constructor/starsGiveawayOption) for more info on these and all the remaining fields).\n\nOnce the admin has chosen a specific giveaway option, invoke [payments.getPaymentForm](https://core.telegram.org/method/payments.getPaymentForm), passing an [inputInvoiceStars](https://core.telegram.org/constructor/inputInvoiceStars), containing an [inputStorePaymentStarsGiveaway](https://core.telegram.org/constructor/inputStorePaymentStarsGiveaway) constructor, with:\n\n*   The `stars`, `currency` and `amount` from the chosen [starsGiveawayOption](https://core.telegram.org/constructor/starsGiveawayOption) and some extra options, as specified in the [constructor page \u00bb](https://core.telegram.org/constructor/inputStorePaymentStarsGiveaway).\n*   Additional channels/supergroups that the user must join to participate to the giveaway can be specified in `additional_peers`.\n*   The set of users that can participate to the giveaway can be restricted by passing an explicit whitelist of up to [giveaway\\_countries\\_max](https://core.telegram.org/api/config#giveaway-countries-max) countries, specified as two-letter ISO 3166-1 alpha-2 country codes in `countries_iso2`.\n*   The end date of the giveaway must be specified in `until_date`, and it must be at most [giveaway\\_period\\_max](https://core.telegram.org/api/config#giveaway-period-max) seconds in the future; at that date, Telegram will randomly choose `users` subscribers according to the conditions specified above, and send them `per_user_stars` Telegram Stars as a [messageActionPrizeStars](https://core.telegram.org/constructor/messageActionPrizeStars) constructor.  \n    A [messageActionPrizeStars](https://core.telegram.org/constructor/messageActionPrizeStars) with the `unclaimed` flag set may also be emitted, refunding the remaining stars to the creator of a giveaway if, when the giveaway ends, the number of members in the channel is smaller than the number of winners in the giveaway.\n*   The channel/supergroup specified in `boost_peer` will receive [starsGiveawayOption](https://core.telegram.org/constructor/starsGiveawayOption).`yearly_boosts` [boosts](https://core.telegram.org/api/boost) for one year.\n\nThen, follow the [invoice payment flow as described in the payments documentation\u00a0\u00bb](https://core.telegram.org/api/payments#22-getting-invoice-info-about-the-product).\n\nMore alternative payment flows are also available:\n\n*   The Premium Bot flow, by contacting [premium\\_bot\\_username](https://core.telegram.org/api/config#premium-bot-username), and following the inline keyboard payment flow for star giveaways (the final keyboard with the prices will contain buttons with [invoice deep links\u00a0\u00bb](https://core.telegram.org/api/links#invoice-links) that should be used to make the payment).\n*   The store-based subscription flow based on [payments.assignAppStoreTransaction](https://core.telegram.org/method/payments.assignAppStoreTransaction)/[payments.assignPlayMarketTransaction](https://core.telegram.org/method/payments.assignPlayMarketTransaction), currently not available to third-party apps.\n\nThen:\n\n*   If the payment was made using the [payments.getPaymentForm](https://core.telegram.org/method/payments.getPaymentForm) or [payments.assignAppStoreTransaction](https://core.telegram.org/method/payments.assignAppStoreTransaction)/[payments.assignPlayMarketTransaction](https://core.telegram.org/method/payments.assignPlayMarketTransaction) payment flows, the giveaway will launch as soon as the payment is complete.\n    \n*   Otherwise, if the [Premium bot](https://core.telegram.org/api/config#premium-bot-username) flow was used, once the payment for the giveaway is made, invoke [premium.getBoostsStatus](https://core.telegram.org/method/premium.getBoostsStatus), passing to `peer` the ID of the channel/supergroup that we selected when paying for the giveaway, to obtain a [prepaidStarsGiveaway](https://core.telegram.org/constructor/prepaidStarsGiveaway) constructor in [premium.boostsStatus](https://core.telegram.org/constructor/premium.boostsStatus).`prepaid_giveaways`, containing info about the prepaid star giveaway.  \n    To actually launch the giveaway for the bot flow, invoke [payments.launchPrepaidGiveaway](https://core.telegram.org/method/payments.launchPrepaidGiveaway), passing [prepaidStarsGiveaway](https://core.telegram.org/constructor/prepaidStarsGiveaway).`id` to `giveaway_id`, the ID of the channel/supergroup to `peer` and giveaway settings in `purpose` (populated in the [inputStorePaymentStarsGiveaway](https://core.telegram.org/constructor/inputStorePaymentStarsGiveaway) created above).",
    "url": "https://core.telegram.org/api/giveaways"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/action-bar",
      "title": "Action bar",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Action bar"
        },
        {
          "property": "og:description",
          "content": "Sometimes, when interacting with Telegram users via private or secret chats, an action bar must be shown on top of the chat, offering convenient action buttons or notices regarding the user."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:11 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5466",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Action bar\n\nSometimes, when interacting with Telegram users via private or secret chats, an action bar must be shown on top of the chat, offering convenient action buttons or notices regarding the user.\n\nSchema:\n\n```\npeerSettings#acd66c5e flags:# report_spam:flags.0?true add_contact:flags.1?true block_contact:flags.2?true share_contact:flags.3?true need_contacts_exception:flags.4?true report_geo:flags.5?true autoarchived:flags.7?true invite_members:flags.8?true request_chat_broadcast:flags.10?true business_bot_paused:flags.11?true business_bot_can_reply:flags.12?true geo_distance:flags.6?int request_chat_title:flags.9?string request_chat_date:flags.9?int business_bot_id:flags.13?long business_bot_manage_url:flags.13?string = PeerSettings;\n\nuserFull#979d2376 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true voice_messages_forbidden:flags.20?true translations_disabled:flags.23?true stories_pinned_available:flags.26?true blocked_my_stories_from:flags.27?true wallpaper_overridden:flags.28?true contact_require_premium:flags.29?true read_dates_private:flags.30?true flags2:# sponsored_enabled:flags2.7?true can_view_revenue:flags2.9?true bot_can_manage_emoji_status:flags2.10?true id:long about:flags.1?string settings:PeerSettings personal_photo:flags.21?Photo profile_photo:flags.2?Photo fallback_photo:flags.22?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int ttl_period:flags.14?int theme_emoticon:flags.15?string private_forward_name:flags.16?string bot_group_admin_rights:flags.17?ChatAdminRights bot_broadcast_admin_rights:flags.18?ChatAdminRights premium_gifts:flags.19?Vector<PremiumGiftOption> wallpaper:flags.24?WallPaper stories:flags.25?PeerStories business_work_hours:flags2.0?BusinessWorkHours business_location:flags2.1?BusinessLocation business_greeting_message:flags2.2?BusinessGreetingMessage business_away_message:flags2.3?BusinessAwayMessage business_intro:flags2.4?BusinessIntro birthday:flags2.5?Birthday personal_channel_id:flags2.6?long personal_channel_message:flags2.6?int stargifts_count:flags2.8?int starref_program:flags2.11?StarRefProgram = UserFull;\n\nupdatePeerSettings#6a7e7366 peer:Peer settings:PeerSettings = Update;\n\nmessages.peerSettings#6880b94d settings:PeerSettings chats:Vector<Chat> users:Vector<User> = messages.PeerSettings;\n\n---functions---\n\nmessages.getPeerSettings#efd9a6a2 peer:InputPeer = messages.PeerSettings;\n\nmessages.hidePeerSettingsBar#4facb138 peer:InputPeer = Bool;\n```\n\nThe action bar is represented by the [peerSettings](https://core.telegram.org/constructor/peerSettings) constructor, fetchable using [messages.getPeerSettings](https://core.telegram.org/method/messages.getPeerSettings); it is also contained in the [userFull](https://core.telegram.org/constructor/userFull) constructor returned by [users.getFullUser](https://core.telegram.org/method/users.getFullUser).\n\nChanges to the chat bar may also be notified by the server using [updatePeerSettings](https://core.telegram.org/constructor/updatePeerSettings).\n\nThe currently active action bar may also be dismissed using [messages.hidePeerSettingsBar](https://core.telegram.org/method/messages.hidePeerSettingsBar).\n\nWhat follows is a list of the various (_mutually exclusive_) chat bar types, along with the **condition** used to identify each type, by checking the appropriate flags of [peerSettings](https://core.telegram.org/constructor/peerSettings).\n\n### [](#report-spam-block-or-add-contact)Report spam, block or add contact\n\n```\ninputReportReasonSpam#58dbcab8 = ReportReason;\n\n---functions---\n\naccount.reportPeer#c5ba3d86 peer:InputPeer reason:ReportReason message:string = Bool;\n\ncontacts.addContact#e8f463d0 flags:# add_phone_privacy_exception:flags.0?true id:InputUser first_name:string last_name:string phone:string = Updates;\n\ncontacts.block#2e2e8734 flags:# my_stories_from:flags.0?true id:InputPeer = Bool;\n```\n\nThis action bar, associated to a private or secret chat, offers the user buttons to:\n\n*   Report the chat for spam using [account.reportPeer](https://core.telegram.org/method/account.reportPeer) and [inputReportReasonSpam](https://core.telegram.org/constructor/inputReportReasonSpam).  \n    If the other user has an emoji status, then the bar should also show a notice, indicating that the emoji status is shown next to the user's name because they have purchased [Telegram Premium](https://core.telegram.org/api/premium) (i.e. this is useful to avoid issues if the user uses an emoji status similar to a verified checkmark).  \n    Additionally, if the chat was automatically [archived\u00a0\u00bb](https://core.telegram.org/api/folders#peer-folders) (according to [peerSettings](https://core.telegram.org/constructor/peerSettings).`autoarchived`), an extra button can be shown to unarchive the chat [as specified here\u00a0\u00bb](https://core.telegram.org/api/folders#peer-folders) instead of reporting it.\n*   Add the other user of the chat to the contact list using [contacts.addContact](https://core.telegram.org/method/contacts.addContact).  \n    Optionally, the [peerSettings](https://core.telegram.org/constructor/peerSettings).`need_contacts_exception` flag may also be set: if so, the `add_phone_privacy_exception` flag **must** be set if the user clicks on the add contact button, invoking [contacts.addContact](https://core.telegram.org/method/contacts.addContact).\n*   Block the other user of the chat from writing to us using [contacts.block](https://core.telegram.org/method/contacts.block) (without setting the `my_stories_from` flag).\n\n**Condition**: the [peerSettings](https://core.telegram.org/constructor/peerSettings).`report_spam`, [peerSettings](https://core.telegram.org/constructor/peerSettings).`add_contact`, [peerSettings](https://core.telegram.org/constructor/peerSettings).`block_contact` flags must all be set.\n\nAdditionally, if the [peerSettings](https://core.telegram.org/constructor/peerSettings).`geo_distance` flag is set, the bar should also display the distance between us and the user, indicating that the user found us by invoking [contacts.getLocated](https://core.telegram.org/method/contacts.getLocated), because we are currently advertising our location with the same method.\n\n### [](#report-spam-or-unarchive)Report spam or unarchive\n\n```\ninputReportReasonSpam#58dbcab8 = ReportReason;\n\n---functions---\n\naccount.reportPeer#c5ba3d86 peer:InputPeer reason:ReportReason message:string = Bool;\n```\n\nThis action bar, associated to a private or secret chat, offers the user a button to report the chat for spam using [account.reportPeer](https://core.telegram.org/method/account.reportPeer) and [inputReportReasonSpam](https://core.telegram.org/constructor/inputReportReasonSpam).\n\nIf the other user has an emoji status, then the bar should also show a notice, indicating that the emoji status is shown next to the user's name because they have purchased [Telegram Premium](https://core.telegram.org/api/premium) (i.e. this is useful to avoid issues if the user uses an emoji status similar to a verified checkmark).\n\n**Condition**: the [peerSettings](https://core.telegram.org/constructor/peerSettings).`report_spam` flag must be set, and the [peerSettings](https://core.telegram.org/constructor/peerSettings).`add_contact`, [peerSettings](https://core.telegram.org/constructor/peerSettings).`block_contact` flags must **not** be set.\n\nAdditionally, if the chat was automatically [archived\u00a0\u00bb](https://core.telegram.org/api/folders#peer-folders) (according to [peerSettings](https://core.telegram.org/constructor/peerSettings).`autoarchived`), an extra button can be shown to unarchive the chat [as specified here\u00a0\u00bb](https://core.telegram.org/api/folders#peer-folders) instead of reporting it.\n\n### [](#add-contact)Add contact\n\n```\n---functions---\n\ncontacts.addContact#e8f463d0 flags:# add_phone_privacy_exception:flags.0?true id:InputUser first_name:string last_name:string phone:string = Updates;\n```\n\nThis action bar, associated to a private or secret chat, offers the user a button to add the other user of the chat to the contact list using [contacts.addContact](https://core.telegram.org/method/contacts.addContact).\n\n**Conditions**: the [peerSettings](https://core.telegram.org/constructor/peerSettings).`add_contact` flag must be set **and**:\n\n*   For secret chats, the chat must **not** be archived.\n*   For private chats, the `block_contact` and `report_spam` flags must **not** be set.\n\nOptionally, the [peerSettings](https://core.telegram.org/constructor/peerSettings).`need_contacts_exception` flag may also be set: if so, the `add_phone_privacy_exception` flag **must** be set if the user clicks on the add contact button, invoking [contacts.addContact](https://core.telegram.org/method/contacts.addContact).\n\n### Share phone number\n\n```\n---functions---\n\ncontacts.acceptContact#f831a20f id:InputUser = Updates;\n```\n\nThis action bar, associated to a private or secret chat, offers the user a button to share their phone number with the other user using [contacts.acceptContact](https://core.telegram.org/method/contacts.acceptContact).\n\n**Condition**: the [peerSettings](https://core.telegram.org/constructor/peerSettings).`share_contact` flag must be set.\n\nThis flag is set and the bar is activated only if the other user has added us as a contact using [contacts.addContact](https://core.telegram.org/method/contacts.addContact), without using a phone number, and none of the `add_contact`, `report_spam`, `block_contact` flags are set.\n\n### [](#report-irrelevant-geolocation)Report irrelevant geolocation\n\n```\ninputReportReasonGeoIrrelevant#dbd4feed = ReportReason;\n\n---functions---\n\naccount.reportPeer#c5ba3d86 peer:InputPeer reason:ReportReason message:string = Bool;\n```\n\nThis bar indicates that the associated location-based supergroup can be reported for having an unrelated location using a bar button that invokes [account.reportPeer](https://core.telegram.org/method/account.reportPeer) with `reason` [inputReportReasonGeoIrrelevant](https://core.telegram.org/constructor/inputReportReasonGeoIrrelevant).\n\n**Condition**: the [peerSettings](https://core.telegram.org/constructor/peerSettings).`report_geo` flag must be set.\n\n### [](#invite-new-members)Invite new members\n\n```\n---functions---\n\nmessages.addChatUser#cbc6d107 chat_id:long user_id:InputUser fwd_limit:int = messages.InvitedUsers;\n\nchannels.inviteToChannel#c9e33d54 channel:InputChannel users:Vector<InputUser> = messages.InvitedUsers;\n```\n\nThis bar indicates that the associated group was created recently, and it offers a bar button to invite new members using [messages.addChatUser](https://core.telegram.org/method/messages.addChatUser) or [channels.inviteToChannel](https://core.telegram.org/method/channels.inviteToChannel), depending on whether the associated peer is a [group or a supergroup](https://core.telegram.org/api/channel).\n\n**Condition**: the [peerSettings](https://core.telegram.org/constructor/peerSettings).`invite_members` flag must be set.\n\n### [](#an-admin-from-a-recent-join-request-is-contacting-you)An admin from a recent join request is contacting you\n\nThis bar indicates that the associated private or secret chat is a chat with an administrator of a [group or channel](https://core.telegram.org/api/channel) to which the user sent a [join request, see here for more info on join requests\u00a0\u00bb](https://core.telegram.org/api/invites#join-requests).\n\n**Condition**: the `request_chat_title` and `request_chat_date` fields of [peerSettings](https://core.telegram.org/constructor/peerSettings) must both be set; optionally `request_chat_broadcast` may also be set:\n\n*   `request_chat_title` - Contains the group/channel's title.\n*   `request_chat_date` - Contains the timestamp indicating when the join request was sent.\n*   `request_chat_broadcast` - This flag is set if the join request is related to a channel (otherwise, the join request is related to a group).\n\n### [](#manage-a-connected-business-bot)Manage a connected business bot\n\nThis bar indicates that the associated private (non-secret) chat _with another user_ is currently being managed by a [business bot connected to our current account\u00a0\u00bb](https://core.telegram.org/api/business#connected-bots).\n\n**Condition**: the `business_bot_id` and `business_bot_manage_url` fields of [peerSettings](https://core.telegram.org/constructor/peerSettings) must both be set; optionally, `business_bot_paused` and/or `business_bot_can_reply` may also be set:\n\n*   `business_bot_id` - Contains the ID of the [business bot\u00a0\u00bb](https://core.telegram.org/api/business#connected-bots) managing this chat, used to display info about the bot in the action bar.\n*   `business_bot_manage_url` - Contains a [deep link\u00a0\u00bb](https://core.telegram.org/api/links), used to open a management menu in the business bot.\n*   `business_bot_paused` - Whether the business bot was paused in this chat using [account.toggleConnectedBotPaused\u00a0\u00bb](https://core.telegram.org/method/account.toggleConnectedBotPaused).\n*   `business_bot_can_reply` - Whether the business bot can reply to messages in this chat, as specified by the settings during [initial configuration](https://core.telegram.org/api/business#connected-bots).\n\nThe main action button of the action bar should be a Pause/Resume button that invokes [account.toggleConnectedBotPaused\u00a0\u00bb](https://core.telegram.org/method/account.toggleConnectedBotPaused).\n\nThe action bar dropdown menu should contain:\n\n*   A button to manage the bot, by opening the deep link in `business_bot_manage_url`\n*   A button to disconnect the bot from this chat, which when pressed should invoke [account.disablePeerConnectedBot\u00a0\u00bb](https://core.telegram.org/method/account.toggleConnectedBotPaused) to permanently disconnect the bot from this peer (this will also hide the action bar, unsetting the `business_bot_manage_url` and `business_bot_id` fields).\n\nSee [here\u00a0\u00bb](https://core.telegram.org/api/business#connected-bots) for more info on business bots.\n\n### [](#bot-ads)Bot ads\n\nThis bar contains [advertisements](https://core.telegram.org/api/sponsored-messages).\n\n**Condition**: the current chat is a private chat with a bot and [messages.getSponsoredMessages](https://core.telegram.org/method/messages.getSponsoredMessages) returned some sponsored messages for this bot.\n\nSee [here \u00bb](https://core.telegram.org/api/sponsored-messages#displaying-sponsored-messages) for more info on how to render this action bar.",
    "url": "https://core.telegram.org/api/action-bar"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/saved-messages",
      "title": "Saved messages",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Saved messages"
        },
        {
          "property": "og:description",
          "content": "The Saved Messages chat allows users to bookmark messages and media: it's a personal cloud storage for any messages or media you may want to send or forward there."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:12 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5986",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Saved messages\n\nThe Saved Messages chat allows users to bookmark messages and media: it's a personal cloud storage for any messages or media you may want to send or forward there.\n\nInternally, the Saved Messages chat is simply the private chat with ourselves (i.e. the chat with [inputPeerSelf](https://core.telegram.org/constructor/inputPeerSelf)): the only difference between the Saved Messages chat and a chat with any other user, is that additional features are available to better organize messages and media sent to it.\n\n### [](#saved-message-dialogs)Saved message dialogs\n\nSchema:\n\n```\nmessage#94345242 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true from_scheduled:flags.18?true legacy:flags.19?true edit_hide:flags.21?true pinned:flags.24?true noforwards:flags.26?true invert_media:flags.27?true flags2:# offline:flags2.1?true video_processing_pending:flags2.4?true id:int from_id:flags.8?Peer from_boosts_applied:flags.29?int peer_id:Peer saved_peer_id:flags.28?Peer fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?long via_business_bot_id:flags2.0?long reply_to:flags.3?MessageReplyHeader date:int message:string media:flags.9?MessageMedia reply_markup:flags.6?ReplyMarkup entities:flags.7?Vector<MessageEntity> views:flags.10?int forwards:flags.10?int replies:flags.23?MessageReplies edit_date:flags.15?int post_author:flags.16?string grouped_id:flags.17?long reactions:flags.20?MessageReactions restriction_reason:flags.22?Vector<RestrictionReason> ttl_period:flags.25?int quick_reply_shortcut_id:flags.30?int effect:flags2.2?long factcheck:flags2.3?FactCheck = Message;\nmessageFwdHeader#4e4df4bb flags:# imported:flags.7?true saved_out:flags.11?true from_id:flags.0?Peer from_name:flags.5?string date:int channel_post:flags.2?int post_author:flags.3?string saved_from_peer:flags.4?Peer saved_from_msg_id:flags.4?int saved_from_id:flags.8?Peer saved_from_name:flags.9?string saved_date:flags.10?int psa_type:flags.6?string = MessageFwdHeader;\n\nsavedDialog#bd87cb6c flags:# pinned:flags.2?true peer:Peer top_message:int = SavedDialog;\n\nupdateSavedDialogPinned#aeaf9e74 flags:# pinned:flags.0?true peer:DialogPeer = Update;\nupdatePinnedSavedDialogs#686c85a6 flags:# order:flags.0?Vector<DialogPeer> = Update;\n\nmessages.savedDialogs#f83ae221 dialogs:Vector<SavedDialog> messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.SavedDialogs;\nmessages.savedDialogsSlice#44ba9dd9 count:int dialogs:Vector<SavedDialog> messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.SavedDialogs;\nmessages.savedDialogsNotModified#c01f6fe8 count:int = messages.SavedDialogs;\n\nsavedDialog#bd87cb6c flags:# pinned:flags.2?true peer:Peer top_message:int = SavedDialog;\n\n---functions---\n\nmessages.getSavedDialogs#5381d21a flags:# exclude_pinned:flags.0?true offset_date:int offset_id:int offset_peer:InputPeer limit:int hash:long = messages.SavedDialogs;\nmessages.getSavedHistory#3d9a414d peer:InputPeer offset_id:int offset_date:int add_offset:int limit:int max_id:int min_id:int hash:long = messages.Messages;\nmessages.deleteSavedHistory#6e98102b flags:# peer:InputPeer max_id:int min_date:flags.2?int max_date:flags.3?int = messages.AffectedHistory;\nmessages.getPinnedSavedDialogs#d63d94e0 = messages.SavedDialogs;\nmessages.toggleSavedDialogPin#ac81bbde flags:# pinned:flags.0?true peer:InputDialogPeer = Bool;\nmessages.reorderPinnedSavedDialogs#8b716587 flags:# force:flags.0?true order:Vector<InputDialogPeer> = Bool;\n\n\nmessages.search#29ee847a flags:# peer:InputPeer q:string from_id:flags.0?InputPeer saved_peer_id:flags.2?InputPeer saved_reaction:flags.3?Vector<Reaction> top_msg_id:flags.1?int filter:MessagesFilter min_date:int max_date:int offset_id:int add_offset:int limit:int max_id:int min_id:int hash:long = messages.Messages;\nmessages.getSearchCounters#1bbcf300 flags:# peer:InputPeer saved_peer_id:flags.2?InputPeer top_msg_id:flags.0?int filters:Vector<MessagesFilter> = Vector<messages.SearchCounter>;\nmessages.getSearchResultsCalendar#6aa3f6bd flags:# peer:InputPeer saved_peer_id:flags.2?InputPeer filter:MessagesFilter offset_id:int offset_date:int = messages.SearchResultsCalendar;\nmessages.getSearchResultsPositions#9c7f2f10 flags:# peer:InputPeer saved_peer_id:flags.2?InputPeer filter:MessagesFilter offset_id:int limit:int = messages.SearchResultsPositions;\n```\n\nMessages sent and forwarded from various users (including ourselves) to Saved Messages are automatically categorized by their original dialog into a saved dialog list, quite similar to the normal dialog list used to normally interact with chats.\n\nTo add new dialogs to the normal dialog list a user has to write to them (or join a channel/chat, etc.).  \nTo add new dialogs to the saved dialog list, simply forward messages from any normal dialog to [inputPeerSelf](https://core.telegram.org/constructor/inputPeerSelf) (the current user): the forwarded messages (including outgoing ones) will be added to a saved dialog with the same ID of the original dialog.\n\nThis includes outgoing messages, for example assume the following:\n\n*   Our user `id` is equal to `11111111`\n*   We send a message A with ID `10` to a [supergroup](https://core.telegram.org/api/channel) with `id=-100122222222` (bot API format, equivalent to a [peerChannel](https://core.telegram.org/constructor/peerChannel) with ID `122222222`)\n*   Another user with `id=133333333` replies `B` to our previous message, message ID `11`\n*   We forward both messages `A` and `B` with IDs `10` and `11` to [inputPeerSelf](https://core.telegram.org/constructor/inputPeerSelf), which will:\n    *   Create a new [savedDialog](https://core.telegram.org/constructor/savedDialog) with `peer=-100122222222` (if it doesn't exist already because we already forwarded messages from that supergroup)\n    *   Generate two messages:\n        *   Message `A`:\n            *   `id`: an unrelated message ID, the next one in the common ID sequence, for example `1234`\n            *   `peer_id`: `11111111`\n            *   `saved_peer_id`: `-100122222222`\n            *   `fwd_from.from_id`: `11111111`\n            *   `fwd_from.saved_from_peer`: `-100122222222`\n            *   `fwd_from.saved_from_msg_id`: `10`\n        *   Message `B`:\n            *   `id`: an unrelated message ID, the next one in the common ID sequence, for example `1235`\n            *   `reply_to.reply_to_msg_id`: `1234`\n            *   `peer_id`: `11111111`\n            *   `saved_peer_id`: `-100122222222`\n            *   `fwd_from.from_id`: `133333333`\n            *   `fwd_from.saved_from_peer`: `-100122222222`\n            *   `fwd_from.saved_from_msg_id`: `11`\n\nSaving messages from private chats with users with forward privacy enabled will add them to a saved dialog entry of a special anonymous user with `id=2666000`.\n\nClients may use the following pseudocode to manually populate the `saved_peer_id` of old `layer < 170` [message](https://core.telegram.org/constructor/message)s stored in the **local** database.\n\n```\n// user_id is the ID of the current user.\n\nif (message.peer_id == user_id) {\n  if (message.fwd_from.saved_from_peer) {\n    message.saved_peer_id = message.fwd_from.saved_from_peer\n  } elseif (message.fwd_from.from_id) {\n    message.saved_peer_id = user_id;\n  } elseif (message.fwd_from.from_name) {\n    message.saved_peer_id = 2666000;\n  } else {\n    message.saved_peer_id = user_id;\n  }\n}\n```\n\nSending (not forwarding from another dialog) new messages directly to ourselves will add them to a saved dialog entry with ourselves.\n\nA set of methods can then be used to obtain this dialog list, pin/unpin dialogs inside of it, view and remove messages from saved dialogs: [messages.getSavedDialogs](https://core.telegram.org/method/messages.getSavedDialogs), [messages.getSavedHistory](https://core.telegram.org/method/messages.getSavedHistory), [messages.deleteSavedHistory](https://core.telegram.org/method/messages.deleteSavedHistory), [messages.getPinnedSavedDialogs](https://core.telegram.org/method/messages.getPinnedSavedDialogs), [messages.toggleSavedDialogPin](https://core.telegram.org/method/messages.toggleSavedDialogPin), [messages.reorderPinnedSavedDialogs](https://core.telegram.org/method/messages.reorderPinnedSavedDialogs) work just like their counterparts [messages.getDialogs](https://core.telegram.org/method/messages.getDialogs), [messages.getHistory](https://core.telegram.org/method/messages.getHistory), [messages.deleteHistory](https://core.telegram.org/method/messages.deleteHistory), [messages.getPinnedDialogs](https://core.telegram.org/method/messages.getPinnedDialogs), [messages.toggleDialogPin](https://core.telegram.org/method/messages.toggleDialogPin), [messages.reorderPinnedDialogs](https://core.telegram.org/method/messages.reorderPinnedDialogs), with the sole difference that they affect the saved dialog list, instead of the main dialog list.\n\nTo search for messages within a saved dialog, use the usual [messages.search](https://core.telegram.org/method/messages.search), [messages.getSearchCounters](https://core.telegram.org/method/messages.getSearchCounters), [messages.getSearchResultsCalendar](https://core.telegram.org/method/messages.getSearchResultsCalendar), [messages.getSearchResultsPositions](https://core.telegram.org/method/messages.getSearchResultsPositions) methods with `peer`\\=[inputPeerSelf](https://core.telegram.org/constructor/inputPeerSelf) and `saved_peer_id`\\=id of the saved dialog.\n\n### [](#tags)Tags\n\nFor even more organization, [Premium users](https://core.telegram.org/api/premium) can add **multiple tags** to your Saved Messages that let you quickly **filter** them in Search.\n\n```\nmessageReactions#a339f0b flags:# min:flags.0?true can_see_list:flags.2?true reactions_as_tags:flags.3?true results:Vector<ReactionCount> recent_reactions:flags.1?Vector<MessagePeerReaction> top_reactors:flags.4?Vector<MessageReactor> = MessageReactions;\n\nsavedReactionTag#cb6ff828 flags:# reaction:Reaction title:flags.0?string count:int = SavedReactionTag;\n\nmessages.savedReactionTagsNotModified#889b59ef = messages.SavedReactionTags;\nmessages.savedReactionTags#3259950a tags:Vector<SavedReactionTag> hash:long = messages.SavedReactionTags;\n\nupdateSavedReactionTags#39c67432 = Update;\n\n---functions---\n\nmessages.sendReaction#d30d78d4 flags:# big:flags.1?true add_to_recent:flags.2?true peer:InputPeer msg_id:int reaction:flags.0?Vector<Reaction> = Updates;\n\nmessages.search#29ee847a flags:# peer:InputPeer q:string from_id:flags.0?InputPeer saved_peer_id:flags.2?InputPeer saved_reaction:flags.3?Vector<Reaction> top_msg_id:flags.1?int filter:MessagesFilter min_date:int max_date:int offset_id:int add_offset:int limit:int max_id:int min_id:int hash:long = messages.Messages;\n\nmessages.getDefaultTagReactions#bdf93428 hash:long = messages.Reactions;\n\nmessages.updateSavedReactionTag#60297dec flags:# reaction:Reaction title:flags.0?string = Bool;\nmessages.getSavedReactionTags#3637e05b flags:# peer:flags.0?InputPeer hash:long = messages.SavedReactionTags;\n```\n\nTags are based on [reactions\u00a0\u00bb](https://core.telegram.org/api/reactions): adding a tag to a saved message is as easy as [reacting to it\u00a0\u00bb](https://core.telegram.org/api/reactions) using [messages.sendReaction](https://core.telegram.org/method/messages.sendReaction).\n\nReactions are considered as tags only for saved messages, if the following conditions are met:\n\n*   The saved message did not previously have any reaction,\n*   OR if the saved message already has some reactions _and_ the [messageReactions](https://core.telegram.org/constructor/messageReactions).`reactions_as_tags` flag is set.  \n    If the `reactions_as_tags` flag is not set on a saved message with at least one reaction, the reaction was added before tags were introduced (before layer 171). In this case, to enable adding reaction tags, the user must first remove all existing reactions on the message, and then re-add the appropriate reaction tags.\n\nYou may search for saved messages tagged with one or more reactions using the `saved_reaction` parameter of [messages.search](https://core.telegram.org/method/messages.search).\n\n[messages.getDefaultTagReactions](https://core.telegram.org/method/messages.getDefaultTagReactions) can be used to fetch a default recommended list of tag reactions.\n\nThe user may also assign a name (max 12 UTF-8 chars) to a tag reaction using [messages.updateSavedReactionTag](https://core.telegram.org/method/messages.updateSavedReactionTag); to remove the name, call the same method without setting the `title` flag.\n\n[messages.getSavedReactionTags](https://core.telegram.org/method/messages.getSavedReactionTags) can be used to fetch and locally cache the full list of reaction tag names assigned by the user; a `peer` may be optionally specified, to fetch only reaction tags used on messages of a specific [saved message dialog](#saved-message-dialogs).  \nUpdating the name of a reaction tag will emit an [updateSavedReactionTags](https://core.telegram.org/constructor/updateSavedReactionTags) update to all logged-in sessions except for the current one; this update should trigger a call to [messages.getSavedReactionTags](https://core.telegram.org/method/messages.getSavedReactionTags) _without_ setting the `peer` flag to refresh the locally cached list.\n\nIf non-empty, the list of saved reaction tags returned by [messages.getSavedReactionTags](https://core.telegram.org/method/messages.getSavedReactionTags) should be shown in the UI just below the search input bar, in descending order by `count`; if searching within a specific [saved message dialog](#saved-message-dialogs), use `peer` to only return tags used in a specific saved message dialog.\n\nThe tag reaction selection UI, on the other hand, should first display the reactions returned by [messages.getSavedReactionTags](https://core.telegram.org/method/messages.getSavedReactionTags) (global tag list, i.e. without `peer` regardless of the current saved message dialog) in descending order by `count`, then the reactions returned by [messages.getDefaultTagReactions](https://core.telegram.org/method/messages.getDefaultTagReactions) that weren't already returned by [messages.getSavedReactionTags](https://core.telegram.org/method/messages.getSavedReactionTags), then any installed [custom emoji packs](https://core.telegram.org/api/custom-emoji).",
    "url": "https://core.telegram.org/api/saved-messages"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/themes",
      "title": "Themes",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Themes"
        },
        {
          "property": "og:description",
          "content": "Telegram apps support generating, sharing and synchronizing app themes."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:13 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3590",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Themes\n\nTelegram apps support generating, sharing and synchronizing app themes.\n\n### [](#uploading-theme-files)Uploading theme files\n\n```\ndocument#8fd4c4d8 flags:# id:long access_hash:long file_reference:bytes date:int mime_type:string size:long thumbs:flags.0?Vector<PhotoSize> video_thumbs:flags.1?Vector<VideoSize> dc_id:int attributes:Vector<DocumentAttribute> = Document;\n\n---functions---\n\naccount.uploadTheme#1c3db333 flags:# file:InputFile thumb:flags.0?InputFile file_name:string mime_type:string = Document;\n```\n\n[Theme files](https://core.telegram.org/themes) can be uploaded using [account.uploadTheme](https://core.telegram.org/method/account.uploadTheme): optionally a JPEG thumbnail for the theme can also be provided to `thumb`.  \nThe resulting document should be used when [creating](#creating-themes) or [updating](#updating-themes) themes.\n\nThe actual content of the theme file depends on the formats supported by the theming engine of the client.\n\n### [](#creating-themes)Creating themes\n\n```\nbaseThemeClassic#c3a12462 = BaseTheme;\nbaseThemeDay#fbd81688 = BaseTheme;\nbaseThemeNight#b7b31ea8 = BaseTheme;\nbaseThemeTinted#6d5f77ee = BaseTheme;\nbaseThemeArctic#5b11125a = BaseTheme;\n\ninputWallPaper#e630b979 id:long access_hash:long = InputWallPaper;\ninputWallPaperSlug#72091c80 slug:string = InputWallPaper;\ninputWallPaperNoFile#967a462e id:long = InputWallPaper;\n\nwallPaperSettings#372efcd0 flags:# blur:flags.1?true motion:flags.2?true background_color:flags.0?int second_background_color:flags.4?int third_background_color:flags.5?int fourth_background_color:flags.6?int intensity:flags.3?int rotation:flags.4?int emoticon:flags.7?string = WallPaperSettings;\n\ninputThemeSettings#8fde504f flags:# message_colors_animated:flags.2?true base_theme:BaseTheme accent_color:int outbox_accent_color:flags.3?int message_colors:flags.0?Vector<int> wallpaper:flags.1?InputWallPaper wallpaper_settings:flags.1?WallPaperSettings = InputThemeSettings;\n\ntheme#a00e67d6 flags:# creator:flags.0?true default:flags.1?true for_chat:flags.5?true id:long access_hash:long slug:string title:string document:flags.2?Document settings:flags.3?Vector<ThemeSettings> emoticon:flags.6?string installs_count:flags.4?int = Theme;\n\n---functions---\n\naccount.createTheme#652e4400 flags:# slug:string title:string document:flags.2?InputDocument settings:flags.3?Vector<InputThemeSettings> = Theme;\n```\n\nUse [account.createTheme](https://core.telegram.org/method/account.createTheme) to create a theme, see the [method page for more info about the parameters\u00a0\u00bb](https://core.telegram.org/method/account.createTheme).\n\nThe resulting theme can be shared by generating a [theme deep link\u00a0\u00bb](https://core.telegram.org/api/links#theme-links) using either a user-provided `slug`, or an autogenerated one by leaving the `slug` parameter empty and using the returned `slug`.\n\n### [](#updating-themes)Updating themes\n\n```\ninputTheme#3c5693e9 id:long access_hash:long = InputTheme;\ninputThemeSlug#f5890df1 slug:string = InputTheme;\n\nupdateTheme#8216fba3 theme:Theme = Update;\n\n---functions---\n\naccount.updateTheme#2bf40ccc flags:# format:string theme:InputTheme slug:flags.0?string title:flags.1?string document:flags.2?InputDocument settings:flags.3?Vector<InputThemeSettings> = Theme;\n```\n\nA previously uploaded theme can be modified by the creator using [account.updateTheme](https://core.telegram.org/method/account.updateTheme), passing the same parameters used when [creating themes](#creating-themes), along with an [InputTheme](https://core.telegram.org/type/InputTheme) containing the ID and access hash parameters from the [theme](https://core.telegram.org/constructor/theme) constructor returned by [account.createTheme](https://core.telegram.org/method/account.createTheme) or [account.getTheme](https://core.telegram.org/method/account.getTheme).\n\nAll users that have installed this theme will receive an [updateTheme](https://core.telegram.org/constructor/updateTheme) with the updated theme.\n\n### [](#installing-themes)Installing themes\n\n```\ninputTheme#3c5693e9 id:long access_hash:long = InputTheme;\ninputThemeSlug#f5890df1 slug:string = InputTheme;\n\ntheme#a00e67d6 flags:# creator:flags.0?true default:flags.1?true for_chat:flags.5?true id:long access_hash:long slug:string title:string document:flags.2?Document settings:flags.3?Vector<ThemeSettings> emoticon:flags.6?string installs_count:flags.4?int = Theme;\n\nthemeSettings#fa58b6d4 flags:# message_colors_animated:flags.2?true base_theme:BaseTheme accent_color:int outbox_accent_color:flags.3?int message_colors:flags.0?Vector<int> wallpaper:flags.1?WallPaper = ThemeSettings;\n\naccount.themesNotModified#f41eb622 = account.Themes;\naccount.themes#9a3d8c6d hash:long themes:Vector<Theme> = account.Themes;\n\n---functions---\n\naccount.saveTheme#f257106c theme:InputTheme unsave:Bool = Bool;\naccount.installTheme#c727bb3b flags:# dark:flags.0?true theme:flags.1?InputTheme format:flags.2?string base_theme:flags.3?BaseTheme = Bool;\naccount.getTheme#3a5869ec format:string theme:InputTheme = Theme;\naccount.getThemes#7206e458 format:string hash:long = account.Themes;\n```\n\nOnce you've [created your theme](#creating-themes) or received a [theme deep link](https://core.telegram.org/api/links#theme-links), it can be installed as follows.\n\nFirst of all, to get info about a theme from a [theme deep link](https://core.telegram.org/api/links#theme-links) use [account.getTheme](https://core.telegram.org/method/account.getTheme) with [inputThemeSlug](https://core.telegram.org/constructor/inputThemeSlug).\n\nThe API keeps a list of theme that the user can apply.  \nTo fetch the list use [account.getThemes](https://core.telegram.org/method/account.getThemes).  \nTo save a theme to the list use [account.saveTheme](https://core.telegram.org/method/account.saveTheme) with `unsave=false`.  \nTo remove a theme from the list use [account.saveTheme](https://core.telegram.org/method/account.saveTheme) with `unsave=true`.\n\nWhen a client applies a theme, call [account.installTheme](https://core.telegram.org/method/account.installTheme) to signal the installation to the server.\n\nIn all methods, `format` indicates the theme format, a string that identifies the theming engines supported by the client.",
    "url": "https://core.telegram.org/api/themes"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/sponsored-messages",
      "title": "Sponsored messages",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Sponsored messages"
        },
        {
          "property": "og:description",
          "content": "Related TL schema:\nGetting sponsored messages\nsponsoredMessage#4d93a990 flags:# recommended:flags.5?true can_report:flags.12?true\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:14 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5047",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Sponsored messages\n\nRelated TL schema:\n\n#### [](#getting-sponsored-messages)Getting sponsored messages\n\n```\nsponsoredMessage#4d93a990 flags:# recommended:flags.5?true can_report:flags.12?true random_id:bytes url:string title:string message:string entities:flags.1?Vector<MessageEntity> photo:flags.6?Photo media:flags.14?MessageMedia color:flags.13?PeerColor button_text:string sponsor_info:flags.7?string additional_info:flags.8?string = SponsoredMessage;\n\nmessages.sponsoredMessages#c9ee1d87 flags:# posts_between:flags.0?int messages:Vector<SponsoredMessage> chats:Vector<Chat> users:Vector<User> = messages.SponsoredMessages;\n\n---functions---\n\nmessages.getSponsoredMessages#9bd2f439 peer:InputPeer = messages.SponsoredMessages;\n```\n\nEach time the user opens a channel or a chat with a bot, [messages.getSponsoredMessages](https://core.telegram.org/method/messages.getSponsoredMessages) must be called to receive [sponsored messages](https://promote.telegram.org/) available for the channel or bot. The result must be cached for **5 minutes**.\n\n> [More about sponsored messages on Telegram](https://t.me/durov/172)\n\n#### [](#displaying-sponsored-messages)Displaying sponsored messages\n\nSponsored messages must be displayed as follows:\n\n*   In channels, they must be displayed below all other posts in the channel, after the user scrolls further down, past the last message.  \n    Sponsored channel messages have:\n    \n    *   A title (contained in `title`)\n    *   A text (contained in `message`+`entities`)\n    *   An optional media (contained in `media`, clicking on it should open the URL in `url` as below; a separate button should be available to expand the video in fullscreen, which should _not_ open the linked `url` when clicked).\n    *   A button at the button (label in `button_text`) that when clicked, opens the URL in `url`.  \n        A confirmation prompt should be shown before opening the URL, unless the host part of the URL matches the following regex: `(^|\\\\.)(telegram\\.(org|me|dog)|t\\.me|te\\.?legra\\.ph|graph\\.org|fragment\\.com|telesco\\.pe)$`, in which case the URL should be opened without confirmation (and if it's a [deep link\u00a0\u00bb](https://core.telegram.org/api/links), it should be opened directly in-app, without passing through the browser).\n    *   The message should be marked as \"Recommended\" instead of \"Sponsored\" if the `recommended` flag is set.\n    *   If the `photo` flag is set, it should be used to display a profile photo bubble for the sponsored message, like for messages sent in groups.\n    *   If the `sponsor_info` or `additional_info` flags are set, an additional \"Sponsor info\" menu item must be present in the message context menu (the menu that pops up when clicking on a button), that when clicked, displays the contents of the flags.\n*   In bots, they must be displayed [above the chat](https://telegram.org/blog/dynamic-video-quality-and-more#telegram-ads-in-bots), akin to an [action bar](https://core.telegram.org/api/action-bar) Bot ads have:\n    \n    *   A title (contained in `title`): must be locally prepended with a blue-colored \"Ad\" prefix, or a \"Recommended\" prefix if the `recommended` flag is set.\n    *   A text (contained in `message`+`entities`)\n    *   When the ad action bar is clicked, clients should open the URL in `url`.  \n        A confirmation prompt should be shown before opening the URL, unless the host part of the URL matches the following regex: `(^|\\\\.)(telegram\\.(org|me|dog)|t\\.me|te\\.?legra\\.ph|graph\\.org|fragment\\.com|telesco\\.pe)$`, in which case the URL should be opened without confirmation (and if it's a [deep link\u00a0\u00bb](https://core.telegram.org/api/links), it should be opened directly in-app, without passing through the browser).\n    \n    If the `photo` flag is set, a thumbnail-sized version of it should be displayed in the right section of the action bar.\n    \n\nIf set, the sponsored message/action bar should use the [message accent color\u00a0\u00bb](https://core.telegram.org/api/colors) specified in `color`.\n\n#### [](#counting-sponsored-message-views)Counting sponsored message views\n\n```\n---functions---\n\nmessages.viewSponsoredMessage#673ad8f1 peer:InputPeer random_id:bytes = Bool;\n```\n\nOnce the entire text of the ad is shown on the screen (excluding the button for channel ads), [messages.viewSponsoredMessage](https://core.telegram.org/method/messages.viewSponsoredMessage) must be called with the `random_id` of the sponsored message.\n\n#### [](#clicking-on-sponsored-messages)Clicking on sponsored messages\n\n```\n---functions---\n\nmessages.clickSponsoredMessage#f093465 flags:# media:flags.0?true fullscreen:flags.1?true peer:InputPeer random_id:bytes = Bool;\n```\n\nDepending on the action made by the user, the following logic must be followed.\n\n*   Click on a link in the sponsored message: invoke [messages.clickSponsoredMessage](https://core.telegram.org/method/messages.clickSponsoredMessage), open link.\n*   Click on the bot ad bar: invoke [messages.clickSponsoredMessage](https://core.telegram.org/method/messages.clickSponsoredMessage), open link.\n*   Open a sponsored chat or a sponsored website via the associated button: invoke [messages.clickSponsoredMessage](https://core.telegram.org/method/messages.clickSponsoredMessage), open chat.\n*   Open the sponsored chat via the sponsored message name, the sponsored message photo, or a mention in the sponsored message: invoke [messages.clickSponsoredMessage](https://core.telegram.org/method/messages.clickSponsoredMessage), open chat.\n*   Clicks on media (only **photos and videos without sound**): invoke [messages.clickSponsoredMessage](https://core.telegram.org/method/messages.clickSponsoredMessage) with the `media` flag set, open link.\n*   Clicks on media (only **videos with sound**): invoke [messages.clickSponsoredMessage](https://core.telegram.org/method/messages.clickSponsoredMessage) with the `media` flag set, open video in fullscreen (do **not** open the link yet).\n*   Clicks on media (only **videos with sound in fullscreen**): invoke [messages.clickSponsoredMessage](https://core.telegram.org/method/messages.clickSponsoredMessage) with the `media` and `fullscreen` flags set, open link.\n*   Clicks on the button while a sponsored video is in fullscreen: invoke [messages.clickSponsoredMessage](https://core.telegram.org/method/messages.clickSponsoredMessage) with the `fullscreen` flag set, open link.\n\n#### [](#reporting-sponsored-messages)Reporting sponsored messages\n\n```\nsponsoredMessage#4d93a990 flags:# recommended:flags.5?true can_report:flags.12?true random_id:bytes url:string title:string message:string entities:flags.1?Vector<MessageEntity> photo:flags.6?Photo media:flags.14?MessageMedia color:flags.13?PeerColor button_text:string sponsor_info:flags.7?string additional_info:flags.8?string = SponsoredMessage;\n\nsponsoredMessageReportOption#430d3150 text:string option:bytes = SponsoredMessageReportOption;\n\nchannels.sponsoredMessageReportResultChooseOption#846f9e42 title:string options:Vector<SponsoredMessageReportOption> = channels.SponsoredMessageReportResult;\nchannels.sponsoredMessageReportResultAdsHidden#3e3bcf2f = channels.SponsoredMessageReportResult;\nchannels.sponsoredMessageReportResultReported#ad798849 = channels.SponsoredMessageReportResult;\n\n---functions---\n\nmessages.reportSponsoredMessage#1af3dbb8 peer:InputPeer random_id:bytes option:bytes = channels.SponsoredMessageReportResult;\n```\n\nTo report a sponsored message to Telegram's moderators, invoke [messages.reportSponsoredMessage](https://core.telegram.org/method/messages.reportSponsoredMessage), passing the channel/bot ID, the `random_id` of the sponsored message and an empty `option` field.\n\nNote that only sponsored messages with the [sponsoredMessage](https://core.telegram.org/constructor/sponsoredMessage).`can_report` flag set may be reported.\n\nThen, if the result is:\n\n*   A [channels.sponsoredMessageReportResultChooseOption](https://core.telegram.org/constructor/channels.sponsoredMessageReportResultChooseOption) constructor, the user must choose a report option from the localized options available in `options`, and after selection, the method must be invoked again, passing the option's `option` field to the `option` parameter of [channels.reportSponsoredMessage](https://core.telegram.org/method/channels.reportSponsoredMessage).  \n    The `title` field of [channels.sponsoredMessageReportResultChooseOption](https://core.telegram.org/constructor/channels.sponsoredMessageReportResultChooseOption) must be used as title of the option selection popup.\n*   A [channels.sponsoredMessageReportResultAdsHidden](https://core.telegram.org/constructor/channels.sponsoredMessageReportResultAdsHidden) constructor, sponsored messages were hidden for the user in all chats.\n*   A [channels.sponsoredMessageReportResultReported](https://core.telegram.org/constructor/channels.sponsoredMessageReportResultReported) constructor, the sponsored message was reported successfully.\n\nThe method may also return:\n\n*   An `AD_EXPIRED` RPC error, for expired (too old or not found) ads\n*   A `PREMIUM_ACCOUNT_REQUIRED` RPC error, if the user asked to hide sponsored messages in the chosen option, but Telegram Premium is required for this action.\n\n#### [](#testing-sponsored-messages)Testing sponsored messages\n\nFor the channel [https://t.me/SecretAdTestChannel](https://t.me/SecretAdTestChannel) the system will **always** return a sponsored message: promoting either a channel, a particular message in a channel, or a bot with a start parameter.\n\n#### [](#withdrawing-ad-revenue-as-a-channel-bot-owner)Withdrawing ad revenue as a channel/bot owner\n\nTelegram has one of the **most generous reward systems** in the history of social media. Telegram channel/bot owners can now receive **50%** of the revenue from ads displayed in their channels.\n\n[See here\u00a0\u00bb](https://core.telegram.org/api/revenue) for more info on how to withdraw channel/bot ad revenue, as well as view detailed revenue stats.\n\n* * *\n\n#### [](#sponsored-messages-in-third-party-apps)Sponsored messages in third-party apps\n\nTelegram continues to grow worldwide, in part thanks to third-party apps using the Telegram API. To cover the increasing costs that come with this growth, Telegram added [sponsored messages](https://promote.telegram.org/) \u2013 a paid [privacy-friendly way](https://t.me/durov/172) to promote **bots and channels**.\n\nIf their app allows its users to **access content from Telegram channels**, third-party developers using the Telegram API are required to support and properly display official sponsored messages in their apps by **January 1, 2022**. Unfortunately, Telegram cannot financially sustain third-party apps that do not display sponsored messages and they will have to be disconnected.\n\nTelegram's API usage will continue to be **free of charge** for all developers. The [rules](https://core.telegram.org/api/terms#3-advertising-amp-monetization) regarding monetization in third-party apps remain the same: developers are allowed to monetize their coding efforts through advertising of their own or other legitimate means, provided that all the methods of monetization used in their apps are prominently mentioned in their app store descriptions.",
    "url": "https://core.telegram.org/api/sponsored-messages"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/profile",
      "title": "Profile",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Profile"
        },
        {
          "property": "og:description",
          "content": "Telegram offers many customization options for your profile!"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:13 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "7465",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Profile\n\nTelegram offers many customization options for your profile!\n\n### [](#name-and-bio)Name and bio\n\n```\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\nuserFull#979d2376 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true voice_messages_forbidden:flags.20?true translations_disabled:flags.23?true stories_pinned_available:flags.26?true blocked_my_stories_from:flags.27?true wallpaper_overridden:flags.28?true contact_require_premium:flags.29?true read_dates_private:flags.30?true flags2:# sponsored_enabled:flags2.7?true can_view_revenue:flags2.9?true bot_can_manage_emoji_status:flags2.10?true id:long about:flags.1?string settings:PeerSettings personal_photo:flags.21?Photo profile_photo:flags.2?Photo fallback_photo:flags.22?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int ttl_period:flags.14?int theme_emoticon:flags.15?string private_forward_name:flags.16?string bot_group_admin_rights:flags.17?ChatAdminRights bot_broadcast_admin_rights:flags.18?ChatAdminRights premium_gifts:flags.19?Vector<PremiumGiftOption> wallpaper:flags.24?WallPaper stories:flags.25?PeerStories business_work_hours:flags2.0?BusinessWorkHours business_location:flags2.1?BusinessLocation business_greeting_message:flags2.2?BusinessGreetingMessage business_away_message:flags2.3?BusinessAwayMessage business_intro:flags2.4?BusinessIntro birthday:flags2.5?Birthday personal_channel_id:flags2.6?long personal_channel_message:flags2.6?int stargifts_count:flags2.8?int starref_program:flags2.11?StarRefProgram = UserFull;\n\nupdateUserName#a7848924 user_id:long first_name:string last_name:string usernames:Vector<Username> = Update;\nupdateUser#20529438 user_id:long = Update;\n\n---functions---\n\naccount.updateProfile#78515775 flags:# first_name:flags.0?string last_name:flags.1?string about:flags.2?string = User;\n```\n\nUse [account.updateProfile](https://core.telegram.org/method/account.updateProfile) to change the name and bio (`about`) of the current account.\n\n`first_name` and `last_name` will be contained in the [user](https://core.telegram.org/constructor/user) constructor, and the `about` field in the [userFull](https://core.telegram.org/constructor/userFull) constructor.\n\nChanging the first/last name will emit an [updateUserName](https://core.telegram.org/constructor/updateUserName) update, changing the `about` bio will emit an [updateUser](https://core.telegram.org/constructor/updateUser) update (which should lead to an invalidation of the locally cached [userFull](https://core.telegram.org/constructor/userFull) constructor, and subsequent refetch using [users.getFullUser](https://core.telegram.org/method/users.getFullUser) if and when needed).\n\n### [](#profile-photo)Profile photo\n\n```\nuserProfilePhotoEmpty#4f11bae1 = UserProfilePhoto;\nuserProfilePhoto#82d1f706 flags:# has_video:flags.0?true personal:flags.2?true photo_id:long stripped_thumb:flags.1?bytes dc_id:int = UserProfilePhoto;\n\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\nupdateUser#20529438 user_id:long = Update;\n\n---functions---\n\nphotos.updateProfilePhoto#9e82039 flags:# fallback:flags.0?true bot:flags.1?InputUser id:InputPhoto = photos.Photo;\nphotos.uploadProfilePhoto#388a3b5 flags:# fallback:flags.3?true bot:flags.5?InputUser file:flags.0?InputFile video:flags.1?InputFile video_start_ts:flags.2?double video_emoji_markup:flags.4?VideoSize = photos.Photo;\n```\n\nUse [photos.updateProfilePhoto](https://core.telegram.org/method/photos.updateProfilePhoto) or [photos.uploadProfilePhoto](https://core.telegram.org/method/photos.uploadProfilePhoto) to set a profile (optionally animated) picture, emitting an [updateUser](https://core.telegram.org/constructor/updateUser).\n\nThe photo will be contained in [user](https://core.telegram.org/constructor/user).`photo`.\n\nSee [here\u00a0\u00bb](https://core.telegram.org/api/files#uploading-profile-or-chat-pictures) for full info on profile pictures and how to work with them.\n\n### [](#introduction)Introduction\n\n```\nmessages.stickersNotModified#f1749a22 = messages.Stickers;\nmessages.stickers#30a6ec7e hash:long stickers:Vector<Document> = messages.Stickers;\n\n---functions---\n\nmessages.getStickers#d5a5d3a1 emoticon:string hash:long = messages.Stickers;\n```\n\nWhen the user opens a private chat with a user they don't have a history with, the UI should display a randomly chosen greeting sticker+invitation to send a message.\n\nTo fetch this special list of greeting stickers, invoke [messages.getStickers](https://core.telegram.org/method/messages.getStickers) with `emoticon=![\ud83d\udc4b](https://telegram.org/img/emoji/40/F09F918B.png)![\u2b50\ufe0f](https://telegram.org/img/emoji/40/E2AD90.png)`.\n\nNote that if a custom [Telegram Business introduction\u00a0\u00bb](https://core.telegram.org/api/business#business-introduction) is enabled, the message+sticker specified in [userFull](https://core.telegram.org/constructor/userFull).`intro` must be used, instead.\n\n### [](#emoji-status)Emoji status\n\n```\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\nupdateUserEmojiStatus#28373599 user_id:long emoji_status:EmojiStatus = Update;\n\n---functions---\n\naccount.updateEmojiStatus#fbd3de6b emoji_status:EmojiStatus = Bool;\n```\n\n[account.updateEmojiStatus](https://core.telegram.org/method/account.updateEmojiStatus) may be used to update the [emoji status\u00a0\u00bb](https://core.telegram.org/api/emoji-status) of the current account, which is displayed next to the name.\n\nThe emoji status will be contained in [user](https://core.telegram.org/constructor/user).`emoji_status`, and changing it will emit an [updateUserEmojiStatus](https://core.telegram.org/constructor/updateUserEmojiStatus) update.\n\nSee [here\u00a0\u00bb](https://core.telegram.org/api/emoji-status) for more info on emoji statuses.\n\n### [](#username)Username\n\n```\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\nupdateUserName#a7848924 user_id:long first_name:string last_name:string usernames:Vector<Username> = Update;\n\ncontacts.resolvedPeer#7f077ad9 peer:Peer chats:Vector<Chat> users:Vector<User> = contacts.ResolvedPeer;\n\n---functions---\n\naccount.updateUsername#3e0bdd7c username:string = User;\naccount.toggleUsername#58d6b376 username:string active:Bool = Bool;\naccount.reorderUsernames#ef500eab order:Vector<string> = Bool;\n\ncontacts.resolveUsername#725afbbc flags:# username:string referer:flags.0?string = contacts.ResolvedPeer;\n```\n\nUse [account.updateUsername](https://core.telegram.org/method/account.updateUsername) to change the `@username` of the current account, which other users may use to contact you, by resolving it using [contacts.resolveUsername](https://core.telegram.org/method/contacts.resolveUsername).\n\nMultiple [collectible usernames](https://core.telegram.org/api/fragment) may also be configured, using [account.toggleUsername](https://core.telegram.org/method/account.toggleUsername) and [account.reorderUsernames](https://core.telegram.org/method/account.reorderUsernames).\n\nThe main username will be contained in [user](https://core.telegram.org/constructor/user).`username`, any extra usernames will be contained in [user](https://core.telegram.org/constructor/user).`usernames`.  \nUpdating/reordering usernames will emit an [updateUserName](https://core.telegram.org/constructor/updateUserName).\n\nSee [here\u00a0\u00bb](https://core.telegram.org/api/links#public-username-links) for more info on public username links.\n\n### [](#accent-colors)Accent colors\n\n```\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\nupdateUser#20529438 user_id:long = Update;\n\n---functions---\n\naccount.updateColor#7cefa15d flags:# for_profile:flags.1?true color:flags.2?int background_emoji_id:flags.0?long = Bool;\n```\n\nUse [account.updateColor](https://core.telegram.org/method/account.updateColor) to update the accent color and background emoji of the current profile, present in [user](https://core.telegram.org/constructor/user).`color`/[user](https://core.telegram.org/constructor/user).`profile_color`.\n\nChanging it will emit an [updateUser](https://core.telegram.org/constructor/updateUser) update.\n\nSee [here\u00a0\u00bb](https://core.telegram.org/api/colors) for more info on accent colors.\n\n### [](#birthday)Birthday\n\n```\nbirthday#6c8e1e06 flags:# day:int month:int year:flags.0?int = Birthday;\n\nuserFull#979d2376 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true voice_messages_forbidden:flags.20?true translations_disabled:flags.23?true stories_pinned_available:flags.26?true blocked_my_stories_from:flags.27?true wallpaper_overridden:flags.28?true contact_require_premium:flags.29?true read_dates_private:flags.30?true flags2:# sponsored_enabled:flags2.7?true can_view_revenue:flags2.9?true bot_can_manage_emoji_status:flags2.10?true id:long about:flags.1?string settings:PeerSettings personal_photo:flags.21?Photo profile_photo:flags.2?Photo fallback_photo:flags.22?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int ttl_period:flags.14?int theme_emoticon:flags.15?string private_forward_name:flags.16?string bot_group_admin_rights:flags.17?ChatAdminRights bot_broadcast_admin_rights:flags.18?ChatAdminRights premium_gifts:flags.19?Vector<PremiumGiftOption> wallpaper:flags.24?WallPaper stories:flags.25?PeerStories business_work_hours:flags2.0?BusinessWorkHours business_location:flags2.1?BusinessLocation business_greeting_message:flags2.2?BusinessGreetingMessage business_away_message:flags2.3?BusinessAwayMessage business_intro:flags2.4?BusinessIntro birthday:flags2.5?Birthday personal_channel_id:flags2.6?long personal_channel_message:flags2.6?int stargifts_count:flags2.8?int starref_program:flags2.11?StarRefProgram = UserFull;\n\nupdateUser#20529438 user_id:long = Update;\n\ncontactBirthday#1d998733 contact_id:long birthday:Birthday = ContactBirthday;\n\ncontacts.contactBirthdays#114ff30d contacts:Vector<ContactBirthday> users:Vector<User> = contacts.ContactBirthdays;\n\ninputPrivacyKeyBirthday#d65a11cc = InputPrivacyKey;\n\nprivacyKeyBirthday#2000a518 = PrivacyKey;\n\n---functions---\n\naccount.updateBirthday#cc6e0c11 flags:# birthday:flags.0?Birthday = Bool;\n\ncontacts.getBirthdays#daeda864 = contacts.ContactBirthdays;\n\nhelp.dismissSuggestion#f50dbaa1 peer:InputPeer suggestion:string = Bool;\n```\n\nUse [account.updateBirthday](https://core.telegram.org/method/account.updateBirthday) to set a birthday date that will be displayed to the users specified in the [privacy settings\u00a0\u00bb](https://core.telegram.org/api/privacy), according to the current privacy setting of [inputPrivacyKeyBirthday](https://core.telegram.org/constructor/inputPrivacyKeyBirthday) (only contacts by default).\n\nThe birthday (if accessible to the current user) will be present in [user](https://core.telegram.org/constructor/user).`birthday`, changing it will emit an [updateUser](https://core.telegram.org/constructor/updateUser) update.\n\nSetting the actual birth `year` is optional, and if set, the allowed age range is currently `0 <= years <= 150` (checked only when updating the birthday); a `400 BIRTHDAY_INVALID` error will be emitted otherwise.\n\nTo remove the birthday, call the method without setting the `birthday` flag.\n\nThe client should display a tooltip to set a birthday; this tooltip may be dismissed by the user, triggering a call to [help.dismissSuggestion](https://core.telegram.org/method/help.dismissSuggestion) with suggestion=`BIRTHDAY_SETUP` to sync the state on all currently logged-in clients through the `dismissed_suggestions` [client configuration field\u00a0\u00bb](https://core.telegram.org/api/config#dismissed-suggestions).\n\n[contacts.getBirthdays](https://core.telegram.org/method/contacts.getBirthdays) returns all users with birthdays that fall within +1/-1 days, relative to the current day: this method should be invoked by clients every 6-8 hours, and if the result is non-empty, it should be used to appropriately update locally cached birthday information in [user](https://core.telegram.org/constructor/user).`birthday`.\n\nIf and only if the `BIRTHDAY_CONTACTS_TODAY` [suggestion\u00a0\u00bb](https://core.telegram.org/api/config#suggestions) is **not** set, all _contacts_ whose [user](https://core.telegram.org/constructor/user).`birthday` fields (updated through [contacts.getBirthdays](https://core.telegram.org/method/contacts.getBirthdays) and in other ways, i.e. through [updateUser](https://core.telegram.org/constructor/updateUser) updates) fall within +1/-1 days relative to today should be always listed in an action bar shown in the global dialog list (_not_ the user-specific [action bar\u00a0\u00bb](https://core.telegram.org/api/action-bar)), inviting the user to make a birthday [gift to those users, in the form of one or more Telegram Premium subscriptions\u00a0\u00bb](https://core.telegram.org/api/premium#gifting-telegram-premium).\n\nThe birthday action bar may be dismissed by the user, syncing its state to other currently logged-in sessions by invoking [help.dismissSuggestion](https://core.telegram.org/method/help.dismissSuggestion) with suggestion=`BIRTHDAY_CONTACTS_TODAY`.  \nSince `BIRTHDAY_CONTACTS_TODAY` is an _inverted_ suggestion, dismissing it will actually _enable_ it in the [client configuration](https://core.telegram.org/api/config#client-configuration) on all currently logged-in sessions, notified by an [updateConfig](https://core.telegram.org/constructor/updateConfig), and its _presence_ should be treated as a signal to _not_ display the birthday action bar.\n\nThe suggestion is also automatically enabled by the server if the user gifts one or more Telegram Premium subscriptions to friends with birthdays falling within the next/previous 24 hours, thus hiding the birthday action bar to other logged-in sessions.\n\nAdditionally, if a user has a birthday falling within the specified time range (+1/-1 days) as specified in [user](https://core.telegram.org/constructor/user).`birthday`, a gift icon tooltip should be shown in the text input bar in private chats with them, leading to the [Telegram Premium gift flow\u00a0\u00bb](https://core.telegram.org/api/premium#gifting-telegram-premium) (this also applies to non-contacts that have allowed us to see their birthday date), regardless of the presence or absence of `BIRTHDAY_CONTACTS_TODAY`.\n\n### [](#personal-channel)Personal channel\n\n```\ninputChannel#f35aec28 channel_id:long access_hash:long = InputChannel;\ninputChannelEmpty#ee8c1e86 = InputChannel;\n\nuserFull#979d2376 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true voice_messages_forbidden:flags.20?true translations_disabled:flags.23?true stories_pinned_available:flags.26?true blocked_my_stories_from:flags.27?true wallpaper_overridden:flags.28?true contact_require_premium:flags.29?true read_dates_private:flags.30?true flags2:# sponsored_enabled:flags2.7?true can_view_revenue:flags2.9?true bot_can_manage_emoji_status:flags2.10?true id:long about:flags.1?string settings:PeerSettings personal_photo:flags.21?Photo profile_photo:flags.2?Photo fallback_photo:flags.22?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int ttl_period:flags.14?int theme_emoticon:flags.15?string private_forward_name:flags.16?string bot_group_admin_rights:flags.17?ChatAdminRights bot_broadcast_admin_rights:flags.18?ChatAdminRights premium_gifts:flags.19?Vector<PremiumGiftOption> wallpaper:flags.24?WallPaper stories:flags.25?PeerStories business_work_hours:flags2.0?BusinessWorkHours business_location:flags2.1?BusinessLocation business_greeting_message:flags2.2?BusinessGreetingMessage business_away_message:flags2.3?BusinessAwayMessage business_intro:flags2.4?BusinessIntro birthday:flags2.5?Birthday personal_channel_id:flags2.6?long personal_channel_message:flags2.6?int stargifts_count:flags2.8?int starref_program:flags2.11?StarRefProgram = UserFull;\n\nupdateUser#20529438 user_id:long = Update;\n\n---functions---\n\nchannels.getAdminedPublicChannels#f8b036af flags:# by_location:flags.0?true check_limit:flags.1?true for_personal:flags.2?true = messages.Chats;\n\naccount.updatePersonalChannel#d94305e0 channel:InputChannel = Bool;\n```\n\nUse [account.updatePersonalChannel](https://core.telegram.org/method/account.updatePersonalChannel) to associate (or remove via [inputChannelEmpty](https://core.telegram.org/constructor/inputChannelEmpty)) a personal [channel\u00a0\u00bb](https://core.telegram.org/api/channel), that will be listed on our personal profile page.\n\nTo fetch the full list of channels that may be passed to [account.updatePersonalChannel](https://core.telegram.org/method/account.updatePersonalChannel), invoke [channels.getAdminedPublicChannels](https://core.telegram.org/method/channels.getAdminedPublicChannels), setting the `for_personal` flag.\n\nThe ID of the associated channel will be present in [user](https://core.telegram.org/constructor/user).`personal_channel_id`, and the ID of the latest message that should be shown in the UI preview is contained in [user](https://core.telegram.org/constructor/user).`personal_channel_message`.\n\nChanging it will emit an [updateUser](https://core.telegram.org/constructor/updateUser) update.\n\n### [](#business-profile)Business profile\n\n```\n---functions---\n\naccount.updateBusinessWorkHours#4b00e066 flags:# business_work_hours:flags.0?BusinessWorkHours = Bool;\naccount.updateBusinessLocation#9e6b131a flags:# geo_point:flags.1?InputGeoPoint address:flags.0?string = Bool;\naccount.updateBusinessGreetingMessage#66cdafc4 flags:# message:flags.0?InputBusinessGreetingMessage = Bool;\naccount.updateBusinessAwayMessage#a26a7fa5 flags:# message:flags.0?InputBusinessAwayMessage = Bool;\naccount.updateBusinessIntro#a614d034 flags:# intro:flags.0?InputBusinessIntro = Bool;\n```\n\nA large number of various [Telegram Business-related](https://core.telegram.org/api/business) information should be displayed on the profile page, see [here\u00a0\u00bb](https://core.telegram.org/api/business) for the full list of fields and how they can be changed.\n\n### [](#online-status)Online status\n\n```\nuserStatusEmpty#9d05049 = UserStatus;\nuserStatusOnline#edb93949 expires:int = UserStatus;\nuserStatusOffline#8c703f was_online:int = UserStatus;\nuserStatusRecently#7b197dc8 flags:# by_me:flags.0?true = UserStatus;\nuserStatusLastWeek#541a1d1a flags:# by_me:flags.0?true = UserStatus;\nuserStatusLastMonth#65899777 flags:# by_me:flags.0?true = UserStatus;\n\nupdateUserStatus#e5bdf8de user_id:long status:UserStatus = Update;\n\n---functions---\n\naccount.updateStatus#6628562c offline:Bool = Bool;\n```\n\nUse [account.updateStatus](https://core.telegram.org/method/account.updateStatus) to change the online status of the current account.\n\nChanging the online status will emit an [updateUserStatus](https://core.telegram.org/constructor/updateUserStatus) update.\n\n### [](#gifts)Gifts\n\nSee [here \u00bb](https://core.telegram.org/api/gifts) for more info on how to add, remove and fetch [gifts](https://core.telegram.org/api/gifts) from a user's profile page.",
    "url": "https://core.telegram.org/api/profile"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/revenue",
      "title": "Channel and bot ad revenue",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Channel and bot ad revenue"
        },
        {
          "property": "og:description",
          "content": "Telegram has one of the most generous reward systems in the history of social media. Telegram channel and bot owners can now receive 50% of the revenue from ads displayed in their channels and bots.  This page describes the methods used to withdraw channel/bot ad revenue, as well as view detailed revenue stats."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:15 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4582",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Channel and bot ad revenue\n\nTelegram has one of the **most generous reward systems** in the history of social media. Telegram channel and bot owners can now receive **50%** of the revenue from ads displayed in their channels and bots.\n\nThis page describes the methods used to withdraw channel and bot ad revenue, as well as view detailed revenue stats.\n\nSee [here\u00a0\u00bb](https://core.telegram.org/api/sponsored-messages) for more info on how to display the ads in the client UI.\n\n### [](#balance-and-transaction-history)Balance and transaction history\n\n```\nbroadcastRevenueTransactionProceeds#557e2cc4 amount:long from_date:int to_date:int = BroadcastRevenueTransaction;\nbroadcastRevenueTransactionWithdrawal#5a590978 flags:# pending:flags.0?true failed:flags.2?true amount:long date:int provider:string transaction_date:flags.1?int transaction_url:flags.1?string = BroadcastRevenueTransaction;\nbroadcastRevenueTransactionRefund#42d30d2e amount:long date:int provider:string = BroadcastRevenueTransaction;\n\nstats.broadcastRevenueTransactions#87158466 count:int transactions:Vector<BroadcastRevenueTransaction> = stats.BroadcastRevenueTransactions;\n\nbroadcastRevenueBalances#c3ff71e7 flags:# withdrawal_enabled:flags.0?true current_balance:long available_balance:long overall_revenue:long = BroadcastRevenueBalances;\n\nupdateBroadcastRevenueTransactions#dfd961f5 peer:Peer balances:BroadcastRevenueBalances = Update;\n\n---functions---\n\nstats.getBroadcastRevenueTransactions#70990b6d peer:InputPeer offset:int limit:int = stats.BroadcastRevenueTransactions;\n```\n\nThe channel/bot ad revenue transaction history and balance may be fetched by channel/bot admins if the [channelFull](https://core.telegram.org/constructor/channelFull).`can_view_revenue`/[userFull](https://core.telegram.org/constructor/userFull).`can_view_revenue` flag is set.\n\nThe transaction history may be fetched using [stats.getBroadcastRevenueTransactions](https://core.telegram.org/method/stats.getBroadcastRevenueTransactions), which will return a vector of [BroadcastRevenueTransaction](https://core.telegram.org/type/BroadcastRevenueTransaction) constructors, one of:\n\n*   [broadcastRevenueTransactionProceeds](https://core.telegram.org/constructor/broadcastRevenueTransactionProceeds) - Describes earnings from sponsored messages in a channel in some time frame\n*   [broadcastRevenueTransactionWithdrawal](https://core.telegram.org/constructor/broadcastRevenueTransactionWithdrawal) - Describes a [withdrawal](#withdrawing-revenue) of ad earnings\n*   [broadcastRevenueTransactionRefund](https://core.telegram.org/constructor/broadcastRevenueTransactionRefund) - Describes a refund for failed withdrawal of ad earnings\n\nThe server will also emit an [updateBroadcastRevenueTransactions](https://core.telegram.org/constructor/updateBroadcastRevenueTransactions) every time a new transaction is added: if the client is currently in the Monetization tab of the channel, this update should apply the new balances (contained in the update), and refresh the transaction list using [stats.getBroadcastRevenueTransactions](https://core.telegram.org/method/stats.getBroadcastRevenueTransactions).\n\nNote that all balances and currency amounts and graph values are in the smallest unit of the chosen cryptocurrency (currently nanotons for TONs, so to obtain a value in USD divide the chosen amount by `10^9`, and then divide by `usd_rate`).\n\n### [](#revenue-statistics)Revenue statistics\n\n```\nchannelFull#bbab348d flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true can_set_location:flags.16?true has_scheduled:flags.19?true can_view_stats:flags.20?true blocked:flags.22?true flags2:# can_delete_channel:flags2.0?true antispam:flags2.1?true participants_hidden:flags2.2?true translations_disabled:flags2.3?true stories_pinned_available:flags2.5?true view_forum_as_messages:flags2.6?true restricted_sponsored:flags2.11?true can_view_revenue:flags2.12?true paid_media_allowed:flags2.14?true can_view_stars_revenue:flags2.15?true paid_reactions_available:flags2.16?true id:long about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int online_count:flags.13?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:flags.23?ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?long migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int folder_id:flags.11?int linked_chat_id:flags.14?long location:flags.15?ChannelLocation slowmode_seconds:flags.17?int slowmode_next_send_date:flags.18?int stats_dc:flags.12?int pts:int call:flags.21?InputGroupCall ttl_period:flags.24?int pending_suggestions:flags.25?Vector<string> groupcall_default_join_as:flags.26?Peer theme_emoticon:flags.27?string requests_pending:flags.28?int recent_requesters:flags.28?Vector<long> default_send_as:flags.29?Peer available_reactions:flags.30?ChatReactions reactions_limit:flags2.13?int stories:flags2.4?PeerStories wallpaper:flags2.7?WallPaper boosts_applied:flags2.8?int boosts_unrestrict:flags2.9?int emojiset:flags2.10?StickerSet = ChatFull;\n\nbroadcastRevenueBalances#c3ff71e7 flags:# withdrawal_enabled:flags.0?true current_balance:long available_balance:long overall_revenue:long = BroadcastRevenueBalances;\n\nstats.broadcastRevenueStats#5407e297 top_hours_graph:StatsGraph revenue_graph:StatsGraph balances:BroadcastRevenueBalances usd_rate:double = stats.BroadcastRevenueStats;\n\n---functions---\n\nstats.getBroadcastRevenueStats#f788ee19 flags:# dark:flags.0?true peer:InputPeer = stats.BroadcastRevenueStats;\n```\n\nChannel/bot ad revenue statistics may be fetched by channel/bot admins if the [channelFull](https://core.telegram.org/constructor/channelFull).`can_view_revenue`/[userFull](https://core.telegram.org/constructor/userFull).`can_view_revenue` flag is set.\n\nUse [stats.getBroadcastRevenueStats](https://core.telegram.org/method/stats.getBroadcastRevenueStats) to fetch statistics about the revenue earned from sponsored messages in a channel/bot; the returned [StatsGraph](https://core.telegram.org/type/StatsGraph) graphs can be rendered [as described here\u00a0\u00bb](https://core.telegram.org/api/stats#graph-visualization).\n\nSpecifically:\n\n*   `top_hours_graph` - Ad impressions graph\n*   `revenue_graph` - Ad revenue graph (in the smallest unit of the cryptocurrency in which revenue is calculated)\n*   `balances` - Current balance, current withdrawable balance and overall revenue\n*   `usd_rate` - Current conversion rate of the cryptocurrency (**not** in the smallest unit) in which revenue is calculated to USD\n\nNote that all balances and currency amounts and graph values are in the smallest unit of the chosen cryptocurrency (currently nanotons for TONs, so to obtain a value in USD divide the chosen amount by `10^9`, and then divide by `usd_rate`).\n\n### [](#withdrawing-revenue)Withdrawing revenue\n\n```\nstats.broadcastRevenueWithdrawalUrl#ec659737 url:string = stats.BroadcastRevenueWithdrawalUrl;\n\n---functions---\n\nstats.getBroadcastRevenueWithdrawalUrl#9df4faad peer:InputPeer password:InputCheckPasswordSRP = stats.BroadcastRevenueWithdrawalUrl;\n```\n\nTo withdraw a channel/bot's ad revenue, invoke [stats.getBroadcastRevenueWithdrawalUrl](https://core.telegram.org/method/stats.getBroadcastRevenueWithdrawalUrl), passing the current account's [2FA password](https://core.telegram.org/api/srp) as an [InputCheckPasswordSRP](https://core.telegram.org/type/InputCheckPasswordSRP) constructor, generated [as specified here\u00a0\u00bb](https://core.telegram.org/api/srp).\n\nOnly the channel/bot owner can invoke this method, and only if the [channel\\_revenue\\_withdrawal\\_enabled field is equal to `true`\u00a0\u00bb](https://core.telegram.org/api/config#channel-revenue-withdrawal-enabled) (valid both for channels and bots) and the [broadcastRevenueBalances](https://core.telegram.org/constructor/broadcastRevenueBalances).`withdrawal_enabled` flag is set.\n\nThe method will return a unique URL to a [Fragment](https://fragment.com/ads) page where the user will be able to specify and submit the address of the TON wallet where the funds will be sent.\n\n#### [](#disable-ads-on-the-channel)Disable ads on the channel\n\n```\nchannelFull#bbab348d flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true can_set_location:flags.16?true has_scheduled:flags.19?true can_view_stats:flags.20?true blocked:flags.22?true flags2:# can_delete_channel:flags2.0?true antispam:flags2.1?true participants_hidden:flags2.2?true translations_disabled:flags2.3?true stories_pinned_available:flags2.5?true view_forum_as_messages:flags2.6?true restricted_sponsored:flags2.11?true can_view_revenue:flags2.12?true paid_media_allowed:flags2.14?true can_view_stars_revenue:flags2.15?true paid_reactions_available:flags2.16?true id:long about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int online_count:flags.13?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:flags.23?ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?long migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int folder_id:flags.11?int linked_chat_id:flags.14?long location:flags.15?ChannelLocation slowmode_seconds:flags.17?int slowmode_next_send_date:flags.18?int stats_dc:flags.12?int pts:int call:flags.21?InputGroupCall ttl_period:flags.24?int pending_suggestions:flags.25?Vector<string> groupcall_default_join_as:flags.26?Peer theme_emoticon:flags.27?string requests_pending:flags.28?int recent_requesters:flags.28?Vector<long> default_send_as:flags.29?Peer available_reactions:flags.30?ChatReactions reactions_limit:flags2.13?int stories:flags2.4?PeerStories wallpaper:flags2.7?WallPaper boosts_applied:flags2.8?int boosts_unrestrict:flags2.9?int emojiset:flags2.10?StickerSet = ChatFull;\n\n---functions---\n\nchannels.restrictSponsoredMessages#9ae91519 channel:InputChannel restricted:Bool = Updates;\n```\n\nAfter reaching at least the boost level specified in the [`channel_restrict_sponsored_level_min`\u00a0\u00bb](https://core.telegram.org/api/config#channel-restrict-sponsored-level-min) config parameter, channel owners may disable ads on the channel for all users using [channels.restrictSponsoredMessages](https://core.telegram.org/method/channels.restrictSponsoredMessages).\n\nIf ads are disabled on the channel, the [channelFull](https://core.telegram.org/constructor/channelFull).`restricted_sponsored` flag will be set (owners only).",
    "url": "https://core.telegram.org/api/revenue"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/contacts",
      "title": "Contacts",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Contacts"
        },
        {
          "property": "og:description",
          "content": "Working with contacts."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:18 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5726",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Contacts\n\nWorking with contacts.\n\n### [](#importing-phone-contacts)Importing phone contacts\n\nSchema:\n\n```\ninputPhoneContact#f392b7f4 client_id:long phone:string first_name:string last_name:string = InputContact;\n\nimportedContact#c13e3c50 user_id:long client_id:long = ImportedContact;\npopularContact#5ce14175 client_id:long importers:int = PopularContact;\n\ncontacts.importedContacts#77d01c3b imported:Vector<ImportedContact> popular_invites:Vector<PopularContact> retry_contacts:Vector<long> users:Vector<User> = contacts.ImportedContacts;\n\n---functions---\n\ncontacts.importContacts#2c800be5 contacts:Vector<InputContact> = contacts.ImportedContacts;\n```\n\nTo upload the local contact list to Telegram and see which contacts are already signed up on telegram, use [contacts.importContacts](https://core.telegram.org/method/contacts.importContacts), passing an array of [inputPhoneContact](https://core.telegram.org/constructor/inputPhoneContact) constructors, containing:\n\n*   `phone` - The phone number in international format\n*   `first_name` - First name\n*   `last_name` - Last name, can be empty\n*   `client_id` - An arbitrary 64-bit integer (**not** the contact's Telegram user ID, since we do not have it yet); make sure there are no collisions between the client\\_ids passed to a single [contacts.importContacts](https://core.telegram.org/method/contacts.importContacts) call (for example, use a simple incremental ID starting from 0)\n\nThe method will return a [contacts.importedContacts](https://core.telegram.org/constructor/contacts.importedContacts) constructor, containing the following fields:\n\n*   `imported` - A list of successfully imported contacts that have an associated Telegram account as [importedContact](https://core.telegram.org/constructor/importedContact) constructors.  \n    `user_id` is the Telegram user ID, `client_id` is the `client_id` associated to the contact, passed during the method call. Note that according to the user's [privacy settings](https://core.telegram.org/api/privacy), not all contacts which have an associated Telegram account may be returned here.\n*   `users` - Contains info about the Telegram users mentioned in `imported`\n*   `popular_invites` - Contains info about popular contacts: each [popularContact](https://core.telegram.org/constructor/popularContact) constructor indicates that the contact with the specified `client_id` was imported `imported` times by that many Telegram users.\n*   `retry_contacts` - List of contact ids that could not be imported due to a server-side system limitation and have to be reimported with another call to [contacts.importedContacts](https://core.telegram.org/constructor/contacts.importedContacts).\n\n### [](#adding-telegram-users-as-contacts)Adding Telegram users as contacts\n\nSchema:\n\n```\nusers.userFull#3b6d152e full_user:UserFull chats:Vector<Chat> users:Vector<User> = users.UserFull;\n\ninputUser#f21158c6 user_id:long access_hash:long = InputUser;\n\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\npeerSettings#acd66c5e flags:# report_spam:flags.0?true add_contact:flags.1?true block_contact:flags.2?true share_contact:flags.3?true need_contacts_exception:flags.4?true report_geo:flags.5?true autoarchived:flags.7?true invite_members:flags.8?true request_chat_broadcast:flags.10?true business_bot_paused:flags.11?true business_bot_can_reply:flags.12?true geo_distance:flags.6?int request_chat_title:flags.9?string request_chat_date:flags.9?int business_bot_id:flags.13?long business_bot_manage_url:flags.13?string = PeerSettings;\n\nuserFull#979d2376 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true voice_messages_forbidden:flags.20?true translations_disabled:flags.23?true stories_pinned_available:flags.26?true blocked_my_stories_from:flags.27?true wallpaper_overridden:flags.28?true contact_require_premium:flags.29?true read_dates_private:flags.30?true flags2:# sponsored_enabled:flags2.7?true can_view_revenue:flags2.9?true bot_can_manage_emoji_status:flags2.10?true id:long about:flags.1?string settings:PeerSettings personal_photo:flags.21?Photo profile_photo:flags.2?Photo fallback_photo:flags.22?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int ttl_period:flags.14?int theme_emoticon:flags.15?string private_forward_name:flags.16?string bot_group_admin_rights:flags.17?ChatAdminRights bot_broadcast_admin_rights:flags.18?ChatAdminRights premium_gifts:flags.19?Vector<PremiumGiftOption> wallpaper:flags.24?WallPaper stories:flags.25?PeerStories business_work_hours:flags2.0?BusinessWorkHours business_location:flags2.1?BusinessLocation business_greeting_message:flags2.2?BusinessGreetingMessage business_away_message:flags2.3?BusinessAwayMessage business_intro:flags2.4?BusinessIntro birthday:flags2.5?Birthday personal_channel_id:flags2.6?long personal_channel_message:flags2.6?int stargifts_count:flags2.8?int starref_program:flags2.11?StarRefProgram = UserFull;\n\nupdatePeerSettings#6a7e7366 peer:Peer settings:PeerSettings = Update;\n\n---functions---\n\nusers.getFullUser#b60f5918 id:InputUser = users.UserFull;\n\ncontacts.addContact#e8f463d0 flags:# add_phone_privacy_exception:flags.0?true id:InputUser first_name:string last_name:string phone:string = Updates;\n```\n\nTelegram users may also be added to the contact list (even if we do not have access to their phone number!) using [contacts.addContact](https://core.telegram.org/method/contacts.addContact).\n\nSet the `add_phone_privacy_exception` flag if we wish to allow the other user to see our phone number: this flag **must** be set if the `need_contacts_exception` flag of [peerSettings](https://core.telegram.org/constructor/peerSettings) is set (see the [action bar documentation for more info\u00a0\u00bb](https://core.telegram.org/api/action-bar)).\n\nThe other user will be offered to also add us to the contact list via the [add contact action bar](https://core.telegram.org/api/action-bar): if they accept, their phone number will be automatically added to our contact.\n\n### Share our phone number\n\n```\n---functions---\n\ncontacts.acceptContact#f831a20f id:InputUser = Updates;\n```\n\nThis method is invoked if the user clicks on the add contact button in the [add contact chat bar](https://core.telegram.org/api/action-bar#add-contact).\n\nThe bar is activated only if the other user has [added us as a contact](#adding-telegram-users-as-contacts) using [contacts.addContact](https://core.telegram.org/method/contacts.addContact) without using a phone number, and none of the `add_contact`, `report_spam`, `block_contact` [bar flags](https://core.telegram.org/api/action-bar) are set, the `share_contact` flag are be set, indicating we can invoke [contacts.acceptContact](https://core.telegram.org/method/contacts.acceptContact) to share our phone number with the other user.\n\n### [](#fetching-the-contact-list)Fetching the contact list\n\nSchema:\n\n```\ncontact#145ade0b user_id:long mutual:Bool = Contact;\n\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\ncontacts.contacts#eae87e42 contacts:Vector<Contact> saved_count:int users:Vector<User> = contacts.Contacts;\ncontacts.contactsNotModified#b74ba9d2 = contacts.Contacts;\n\nsavedPhoneContact#1142bd56 phone:string first_name:string last_name:string date:int = SavedContact;\n\n---functions---\n\ncontacts.getContacts#5dd69e12 hash:long = contacts.Contacts;\n\ncontacts.getSaved#82f1e39f = Vector<SavedContact>;\n\ncontacts.getContactIDs#7adc669d hash:long = Vector<int>;\n```\n\nUse [contacts.getContacts](https://core.telegram.org/method/contacts.getContacts) to obtain all members of the contact list that have an associated Telegram account.\n\nUse [contacts.getContactIDs](https://core.telegram.org/method/contacts.getContactIDs) to obtain an array of Telegram user IDs for all contacts (0 is returned for contacts do not have an associated Telegram account or have hidden their account using privacy settings).\n\nTo obtain the _full_ contact list, including contacts which do not have an associated Telegram account, use [contacts.getSaved](https://core.telegram.org/method/contacts.getSaved) in combination with a [takeout session\u00a0\u00bb](https://core.telegram.org/api/takeout).\n\n### [](#getting-contact-statuses)Getting contact statuses\n\nSchema:\n\n```\nuserStatusEmpty#9d05049 = UserStatus;\nuserStatusOnline#edb93949 expires:int = UserStatus;\nuserStatusOffline#8c703f was_online:int = UserStatus;\nuserStatusRecently#7b197dc8 flags:# by_me:flags.0?true = UserStatus;\nuserStatusLastWeek#541a1d1a flags:# by_me:flags.0?true = UserStatus;\nuserStatusLastMonth#65899777 flags:# by_me:flags.0?true = UserStatus;\n\ncontactStatus#16d9703b user_id:long status:UserStatus = ContactStatus;\n\n---functions---\n\ncontacts.getStatuses#c4a353ee = Vector<ContactStatus>;\n```\n\nUse [contacts.getStatuses](https://core.telegram.org/method/contacts.getStatuses) to obtain the online statuses of all contacts with an accessible Telegram account.\n\n### [](#searching-for-contacts)Searching for contacts\n\nSchema:\n\n```\ncontacts.found#b3134d9d my_results:Vector<Peer> results:Vector<Peer> chats:Vector<Chat> users:Vector<User> = contacts.Found;\n\n---functions---\n\ncontacts.search#11f812d8 q:string limit:int = contacts.Found;\n```\n\nUse [contacts.search](https://core.telegram.org/method/contacts.search) to search within the contact list.\n\n### [](#deleting-contacts)Deleting contacts\n\nSchema:\n\n```\n---functions---\n\ncontacts.deleteContacts#96a0e00 id:Vector<InputUser> = Updates;\n\ncontacts.deleteByPhones#1013fd9e phones:Vector<string> = Bool;\n\ncontacts.resetSaved#879537f1 = Bool;\n```\n\nUse [contacts.deleteContacts](https://core.telegram.org/method/contacts.deleteContacts) to delete contacts with an associated Telegram account; the returned [Updates](https://core.telegram.org/constructor/Updates) will contain updated user information.\n\nUse [contacts.deleteByPhones](https://core.telegram.org/method/contacts.deleteByPhones) to delete contacts by their phone number, even if they don't have an associated Telegram account.\n\nUse [contacts.resetSaved](https://core.telegram.org/method/contacts.resetSaved) to remove all contacts without an associated Telegram account.",
    "url": "https://core.telegram.org/api/contacts"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/factcheck",
      "title": "Fact-checks",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Fact-checks"
        },
        {
          "property": "og:description",
          "content": "Telegram clients support displaying fact-checks added to messages by independent fact-checkers."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:18 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3095",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Fact-checks\n\nTelegram clients support displaying fact-checks added to messages by independent fact-checkers.\n\n### [](#displaying-fact-checks)Displaying fact-checks\n\n```\nfactCheck#b89bfccf flags:# need_check:flags.0?true country:flags.1?string text:flags.1?TextWithEntities hash:long = FactCheck;\n\nmessage#94345242 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true from_scheduled:flags.18?true legacy:flags.19?true edit_hide:flags.21?true pinned:flags.24?true noforwards:flags.26?true invert_media:flags.27?true flags2:# offline:flags2.1?true video_processing_pending:flags2.4?true id:int from_id:flags.8?Peer from_boosts_applied:flags.29?int peer_id:Peer saved_peer_id:flags.28?Peer fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?long via_business_bot_id:flags2.0?long reply_to:flags.3?MessageReplyHeader date:int message:string media:flags.9?MessageMedia reply_markup:flags.6?ReplyMarkup entities:flags.7?Vector<MessageEntity> views:flags.10?int forwards:flags.10?int replies:flags.23?MessageReplies edit_date:flags.15?int post_author:flags.16?string grouped_id:flags.17?long reactions:flags.20?MessageReactions restriction_reason:flags.22?Vector<RestrictionReason> ttl_period:flags.25?int quick_reply_shortcut_id:flags.30?int effect:flags2.2?long factcheck:flags2.3?FactCheck = Message;\n\n---functions---\n\nmessages.getFactCheck#b9cdc5ee peer:InputPeer msg_id:Vector<int> = Vector<FactCheck>;\n```\n\nFact-checks are represented by [factCheck](https://core.telegram.org/constructor/factCheck) constructors, contained in the `factcheck` field of the [message](https://core.telegram.org/constructor/message) constructor.\n\nSometimes (i.e. for performance reasons), even if a message _does_ have a factcheck, it may not be returned in the `text` field of the [factCheck](https://core.telegram.org/constructor/factCheck) associated to the [message](https://core.telegram.org/constructor/message): in this case, the [factCheck](https://core.telegram.org/constructor/factCheck).`need_check` flag will be set and the `country`/`text` flags won't be set, and the client should request the full text of the fact check manually using [messages.getFactCheck](https://core.telegram.org/method/messages.getFactCheck) when the message scrolls into view.\n\nThese manual requests should be bundled: every time a new ID is added to the queue of factchecks to manually fetch, postpone fetching by 80ms.\n\nStore all _full_ (i.e. those with a `country`/`text`) factchecks in a local database, using the `hash` as key.  \nAvoid fetching _min_ (i.e. those where `need_check` is set) factchecks if a factcheck with the same `hash` is already cached in the local database.\n\nExample implementation: [android](https://github.com/DrKLO/Telegram/blob/5fa5549a4a7f48476be29cc0facf68990ea10f62/TMessagesProj/src/main/java/org/telegram/messenger/FactCheckController.java).\n\n### [](#editing-fact-checks)Editing fact-checks\n\n```\nfactCheck#b89bfccf flags:# need_check:flags.0?true country:flags.1?string text:flags.1?TextWithEntities hash:long = FactCheck;\n\n---functions---\n\nmessages.editFactCheck#0589ee75 peer:InputPeer msg_id:int text:TextWithEntities = Updates;\nmessages.deleteFactCheck#d1da940c peer:InputPeer msg_id:int = Updates;\n```\n\nFact-checks may be created, deleted and edited by independent fact-checkers using [messages.editFactCheck](https://core.telegram.org/method/messages.editFactCheck) and [messages.deleteFactCheck](https://core.telegram.org/method/messages.deleteFactCheck).\n\nThose methods can be used by independent fact-checkers, which will have the [appConfig.can\\_edit\\_factcheck](https://core.telegram.org/api/config#can-edit-factcheck) configuration flag set to `true`.\n\nIf the flag mentioned above is set to `true`, the maximum UTF-8 length for a fact check will be specified in the [appConfig.factcheck\\_length\\_limit](https://core.telegram.org/api/config#factcheck-length-limit) field.",
    "url": "https://core.telegram.org/api/factcheck"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/nearby",
      "title": "Nearby users&chats",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Nearby users&chats"
        },
        {
          "property": "og:description",
          "content": "How to work with geolocation-based features like geochats and the nearby users feature."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:19 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3003",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Nearby users&chats\n\nHow to work with geolocation-based features like geochats and the nearby users feature.\n\n### [](#fetching-nearby-users-and-geogroups)Fetching nearby users and geogroups\n\n```\ninputGeoPoint#48222faf flags:# lat:double long:double accuracy_radius:flags.0?int = InputGeoPoint;\n\n---functions---\n\ncontacts.getLocated#d348bc44 flags:# background:flags.1?true geo_point:InputGeoPoint self_expires:flags.0?int = Updates;\n```\n\nUse [contacts.getLocated](https://core.telegram.org/method/contacts.getLocated) to fetch a list of nearby users and groups.\n\nDo **not** set any of the `background`, `self_expires` flags: only populate `geo_point` with the current geolocation of the user: a list of users and geochats located nearby will be returned (**without** publishing the current location of the user).\n\nThis functionality is useful for example to [exchange contacts](https://core.telegram.org/api/contacts#adding-telegram-users-as-contacts) with a nearby Telegram user, or [join](https://core.telegram.org/method/channels.joinChannel) a location-based group chat, see [here\u00a0\u00bb](https://telegram.org/blog/contacts-local-groups) for more usecases.\n\nSee [here\u00a0\u00bb](#creating-a-geogroup) for more info on how to create a geogroup, and [here\u00a0\u00bb](#advertising-our-current-location) for more info on how to advertise our current location to other users.\n\n### [](#creating-a-geogroup)Creating a geogroup\n\n```\ninputGeoPoint#48222faf flags:# lat:double long:double accuracy_radius:flags.0?int = InputGeoPoint;\n\n---functions---\n\nchannels.createChannel#91006707 flags:# broadcast:flags.0?true megagroup:flags.1?true for_import:flags.3?true forum:flags.5?true title:string about:string geo_point:flags.2?InputGeoPoint address:flags.2?string ttl_period:flags.4?int = Updates;\n\nchannels.editLocation#58e63f6d channel:InputChannel geo_point:InputGeoPoint address:string = Bool;\n```\n\nPass a `geo_point` to [channels.createChannel](https://core.telegram.org/method/channels.createChannel) when creating a [supergroup](https://core.telegram.org/api/channel) in order to create a geogroup associated to a geolocation, that will be returned to [nearby users\u00a0\u00bb](#fetching-nearby-users-and-geogroups).\n\nA textual description of the location (1-64 UTF-8 chars) should also be passed in `address`.\n\nUse [channels.editLocation](https://core.telegram.org/method/channels.editLocation) to change the group's location.\n\n### [](#advertising-our-current-location)Advertising our current location\n\n```\ninputGeoPoint#48222faf flags:# lat:double long:double accuracy_radius:flags.0?int = InputGeoPoint;\n\n---functions---\n\ncontacts.getLocated#d348bc44 flags:# background:flags.1?true geo_point:InputGeoPoint self_expires:flags.0?int = Updates;\n```\n\nOur current location may be [advertised to other users](#fetching-nearby-users-and-geogroups) using [contacts.getLocated](https://core.telegram.org/method/contacts.getLocated): in this case the `self_expires` flag **must always be set**.\n\nNote that if the current user is already advertising their location using the [Telegram Business location feature\u00a0\u00bb](https://core.telegram.org/api/business#location) (even without a `geo_point`, just with a textual `address`), the method will return a `BUSINESS_ADDRESS_ACTIVE` error, indicating that the location may only be changed (or removed) using [account.updateBusinessLocation\u00a0\u00bb](https://core.telegram.org/method/account.updateBusinessLocation), instead of [contacts.getLocated](https://core.telegram.org/method/contacts.getLocated).\n\nThis flag is used to specify the expiration TTL of the passed geolocation (i.e. the geolocation will expire after `self_expires` seconds); pass `0x7fffffff` to disable expiry, 0 to make the current geolocation private.\n\nThe method will also return a list of nearby users and chats, but only if the passed expiration TTL is not equal to zero.  \nUsers may still fetch nearby users and chats without making their geolocation public by simply not setting the flag, see [here\u00a0\u00bb](#fetching-nearby-users-and-geogroups) for more info.\n\nWhile the geolocation of the current user is public, clients should update it in the background every half-an-hour or so (or in any case before the expiration date specified with `self_expires`), while setting this flag: if the new location is more than 1 KM away from the previous one, or if the previous location is unknown, the `background` flag should be set.",
    "url": "https://core.telegram.org/api/nearby"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/block",
      "title": "Blocklist",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Blocklist"
        },
        {
          "property": "og:description",
          "content": "Working with the blocklist."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:19 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "2280",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Blocklist\n\nWorking with the blocklist.\n\nScheme:\n\n```\npeerBlocked#e8fd8014 peer_id:Peer date:int = PeerBlocked;\n\ncontacts.blocked#ade1591 blocked:Vector<PeerBlocked> chats:Vector<Chat> users:Vector<User> = contacts.Blocked;\n\nupdatePeerBlocked#ebe07752 flags:# blocked:flags.0?true blocked_my_stories_from:flags.1?true peer_id:Peer = Update;\n\n---functions---\n\ncontacts.block#2e2e8734 flags:# my_stories_from:flags.0?true id:InputPeer = Bool;\ncontacts.unblock#b550d328 flags:# my_stories_from:flags.0?true id:InputPeer = Bool;\n\ncontacts.getBlocked#9a868f80 flags:# my_stories_from:flags.0?true offset:int limit:int = contacts.Blocked;\ncontacts.setBlocked#94c65c76 flags:# my_stories_from:flags.0?true id:Vector<InputPeer> limit:int = Bool;\n```\n\nUse [contacts.block](https://core.telegram.org/method/contacts.block) and [contacts.unblock](https://core.telegram.org/method/contacts.unblock) to block and unblock peers.\n\nIf the `my_stories_from` is set, peers will be added/removed only to/from the story blocklist; otherwise, they will be added/removed to/from the the main blocklist.\n\nPeers in the story blocklist won't be able view your [stories](https://core.telegram.org/api/stories).  \nPeers in the main blocklist won't be able to write messages to you, view your status, photo and stories.\n\nAdding or removing a peer from a blocklist will emit an [updatePeerBlocked](https://core.telegram.org/constructor/updatePeerBlocked) to all currenly logged-in sessions (the peer we blocked/unblocked _won't_ receive any update).\n\nUse [contacts.getBlocked](https://core.telegram.org/method/contacts.getBlocked) to fetch the list of blocked peers; as usual, the `my_stories_from` flag can be used to fetch the story blocklist or the main blocklist, and the `offset`/`limit` parameters are used for [pagination\u00a0\u00bb](https://core.telegram.org/api/offsets).\n\n[contacts.setBlocked](https://core.telegram.org/method/contacts.setBlocked) may also be used to completely replace the contents of an entire blocklist in bulk: just pass the blocklist type in `my_stories_from`, the full list of IDs to block in `id` and the length of the list passed to `id` in `limit`: the server will completely replace the specified blocklist.",
    "url": "https://core.telegram.org/api/block"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/web-events",
      "title": "Web events",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Web events"
        },
        {
          "property": "og:description",
          "content": "How telegram apps interact with webpages"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:20 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "13020",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Web events\n\nWhen interacting with HTML5 games, websites of payment gateways and [bot mini apps](https://core.telegram.org/api/bots/webapps), Telegram apps should expose APIs to allow receiving data and events from the websites.\n\n### [](#event-apis)Event APIs\n\nGames, payment gateways and [bot mini apps](https://core.telegram.org/api/bots/webapps) can generate events that are meant to be received by the Telegram apps. Typically events are generated by using the `postEvent` method of the [GamingCommunication library](https://github.com/TelegramMessenger/GamingCommunication/blob/master/games.js), or by the [bot mini apps library](https://core.telegram.org/bots/webapps#initializing-mini-apps).  \nThe `postEvent` function will try sending the event to the Telegram app in a number of different ways.\n\n#### [](#webviewproxy)WebviewProxy\n\nIn mobile apps, the event receiver API should be typically exposed as a `window.TelegramWebviewProxy` object with a `postEvent` method.\n\n```\nwindow.TelegramWebviewProxy.postEvent(eventType, eventData)\n```\n\n#### [](#windowexternal)window.external\n\nAlternatively, a `window.external.notify` method can be exposed, accepting a string JSON payload with the event type and payload:\n\n```\nwindow.external.notify(JSON.stringify({eventType: eventType, eventData: eventData}));\n```\n\n#### [](#postmessage-api)postMessage API\n\nFinally, web MTProto clients that need to open a game, open a [bot mini app](https://core.telegram.org/api/bots/webapps) or process a payment in an iframe can use the [postMessage API](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) to receive events from iframes.  \nThe GamingCommunication and bot mini apps libraries by default will use `'*'` as `targetOrigin`, sending messages to parent pages regardless of the origin of the embedder.\n\n```\nwindow.parent.postMessage(JSON.stringify({eventType: eventType, eventData: eventData}), targetOrigin);\n```\n\n### [](#event-types)Event types\n\n`eventType` is a simple string indicating the event type, and `eventData` is a payload with an object that will be parsed by the Telegram app.\n\n#### [](#payment-form-submit)`payment_form_submit`\n\nEvent payload: JSON object with `credentials` and `title` fields.\n\n*   `title` is the censored credit card title.\n*   `credentials` is a service-specific JSON object with information about the payment credentials provided by the user to the payment system.\n\n**Neither Telegram, nor bots will have access to your credit card information.**  \nCredit card details will be handled only by the payment system, see the [payment documentation for more info\u00a0\u00bb](https://core.telegram.org/api/payments).\n\n#### `share_score`\n\nNo event payload.\n\nWill be called by games when the user explicitly clicks on the **share score** button to share the game, along with their score.  \nTypically done by using [messages.forwardMessages](https://core.telegram.org/method/messages.forwardMessages) on the game message with the `with_my_score` flag.\n\n#### `share_game`\n\nNo event payload.\n\nWill be called by games when the user explicitly clicks on the **share game** button to share the game, without sharing their score.  \nTypically done by using [messages.forwardMessages](https://core.telegram.org/method/messages.forwardMessages) on the game message without the `with_my_score` flag, or by sharing the game's [deep link](https://core.telegram.org/api/links#game-links).\n\n#### [](#web-app-close)`web_app_close`\n\nNo event payload, OR a JSON object with the following fields (which should be properly validated by the client).\n\n*   `return_back` - If true, if the web app was opened through a [deep link](https://core.telegram.org/api/links) in another app (i.e. not through a deep link in a Telegram client), the Telegram client should return to the app that opened the link, not to the main page of the Telegram client. (boolean, optional)\n\nEmitted by [bot mini apps](https://core.telegram.org/api/bots/webapps) when the mini app webview should be closed.\n\n#### [](#web-app-open-popup)`web_app_open_popup`\n\nEvent data: a JSON object with the following fields (which should be properly validated by the client).\n\n*   `title` - Title for the popup (optional string, max 64 characters)\n*   `message` - Message of the popup (string, max 256 characters)\n*   `buttons` - An array of the following objects (array of 1-3 objects)\n    *   `type` - Button type (string, one of `ok`, `close`, `cancel`, `default`, `destructive` (in this case, the button must be red))\n    *   `text` - Button text (string, optional for `ok`, `close` and `cancel` types)\n    *   `id` - Button ID (unique string)\n\nEmitted by [bot mini apps](https://core.telegram.org/api/bots/webapps) to open a native pop-up over the webview.\n\nBy default, buttons should be displayed on one row.  \nIf the mini app provides two buttons that can't fit horizontally on one row, display each button on a separate row.  \nIf the mini app provides three buttons, always display each button on a separate row.\n\n*   If the user presses any of the buttons, call `window.Telegram.WebView.receiveEvent(\"popup_closed\", {\"button_id\": \"<button id>\"})`\n*   If the user cancels the interaction without pressing any of the specified buttons, call `window.Telegram.WebView.receiveEvent(\"popup_closed\", {})`\n\nDisable handling of this event if a popup is already being displayed, re-enable handling only after the `popup_closed` response event is emitted.  \nWhile handling is enabled, maximum 3 consecutive valid events of this type can be handled in a timespan of 3 seconds, ignore excess events.\n\n#### [](#web-app-request-write-access)`web_app_request_write_access`\n\nEvent data: `null`\n\nEmitted by [bot mini apps](https://core.telegram.org/api/bots/webapps) to ask permission from the user to send them messages.\n\nUpon receiving this event, clients should first invoke [bots.canSendMessage](https://core.telegram.org/method/bots.canSendMessage), to check whether they have already granted the bot permission to write them in some way.\n\n*   If the method returns [boolTrue](https://core.telegram.org/constructor/boolTrue), a [write\\_access\\_requested event\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#write-access-requested) with `{\"status\": \"allowed\"}` should be sent to the Mini App.\n*   Otherwise, if the method returns [boolFalse](https://core.telegram.org/constructor/boolFalse), a prompt should be shown to the user, indicating that the bot is asking permission to send messages to them.  \n    If the user accepts, invoke [bots.allowSendMessage](https://core.telegram.org/method/bots.allowSendMessage), and if the method call succeeds emit a [write\\_access\\_requested event\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#write-access-requested) with `{\"status\": \"allowed\"}`.  \n    Otherwise, if the user refuses or the [bots.allowSendMessage](https://core.telegram.org/method/bots.allowSendMessage) call fails, emit a [write\\_access\\_requested event\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#write-access-requested) with `{\"status\": \"cancelled\"}`.\n\n#### [](#web-app-request-phone)`web_app_request_phone`\n\nEvent data: `null`\n\nEmitted by [bot mini apps](https://core.telegram.org/api/bots/webapps) to ask the user to share their phone number as a contact.\n\nUpon receiving this event, clients should show a prompt to the user, indicating that the bot is asking them to share their phone number (optionally also asking the user to unblock the bot, if it's currently blocked).\n\nIf they accept, the user's phone number should be shared by sending a contact to the bot (unblocking it first, if it's currently blocked by the user); if all RPC queries (to unblock the bot, to send the message) succeed, a [phone\\_requested event\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#write-access-requested) should be sent with `{\"status\": \"sent\"}`.\n\nIf the user refuses or any intermdiate method call fails, a [phone\\_requested event\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#write-access-requested) should be sent with `{\"status\": \"cancelled\"}`.\n\n#### [](#web-app-biometry-get-info)`web_app_biometry_get_info`\n\nEvent data: `null`\n\nEmitted by [bot mini apps](https://core.telegram.org/api/bots/webapps) to ask the client to initialize the biometric authentication manager object for the current bot, emitting a [`biometry_info_received` event\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#biometry-info-received) on completion.\n\nThis request should just initialize the client-side state, i.e. by checking if biometric authentication is even available or not, it should not ask the user anything.\n\n#### [](#web-app-biometry-request-access)`web_app_biometry_request_access`\n\nEvent data: a JSON object, with an optional `reason` string field (1-128 chars, used in the prompt), containing the reason why the bot is asking to use biometric authentication.\n\nEmitted by [bot mini apps](https://core.telegram.org/api/bots/webapps) to ask the user permission to use biometric authentication, emitting a [`biometry_info_received` event\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#biometry-info-received) on completion.\n\nThis request should not actually prompt biometric authentication, it should just ask the user permission to use it through a popup that should be shown only **once** (for this bot): no popup must be shown if the user has already previously allowed, denied or cancelled a biometry permission popup from this bot.\n\n#### [](#web-app-biometry-update-token)`web_app_biometry_update_token`\n\nEvent data: a JSON object with the following fields:\n\n*   `token` - The new token (string, 0-1024 chars), or an empty string to remove it.\n*   `reason` - Optional string field, containing the reason why the bot is asking to authenticate using biometrics (1-128 chars, used in the prompt).\n\nEmitted by [bot mini apps](https://core.telegram.org/api/bots/webapps) to authenticate using biometrics and store the biometric token securely stored on-device, emitting a [`biometry_token_updated` event\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#biometry-token-updated) on completion.\n\nThis token (which may be for example the private key of a cryptocurrency wallet, or some other data the app must keep safe) must be safely stored by the Telegram client, associating it to the bot that owns the mini app.\n\nFor example, the token may be directly stored in the on-device secure storage, accessible only after biometric authentication, or it may be stored to normal, non-secure storage, but **in encrypted form**, encrypted using the key returned from the device's secure storage after biometric authentication (for example on Android, using the CryptoObject returned by [the biometric prompt authentication result](https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.AuthenticationResult#getCryptoObject\\\\(\\\\))).\n\nIf the user has [previously disallowed](#web-app-biometry-request-access) the bot from using biometric authentication, this request should immediately fail, emitting an appropriate [`biometry_token_updated` event\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#biometry-token-updated).\n\n#### [](#web-app-biometry-request-auth)`web_app_biometry_request_auth`\n\nEvent data: a JSON object, with an optional `reason` string field, containing the reason why the bot is asking to authenticate using biometrics (1-128 chars, used in the prompt).\n\nEmitted by [bot mini apps](https://core.telegram.org/api/bots/webapps) to authenticate using biometrics and fetch the [previously stored secure token](#web-app-biometry-update-token), emitting a [`biometry_auth_requested` event\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#biometry-auth-requested) on completion, containing either an error, or the decrypted [biometric token\u00a0\u00bb](#web-app-biometry-update-token) (or an empty string if no token was configured yet).\n\nShould only be used if the `token_saved` field of the [biometry\\_info\\_received object\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#biometry-info-received) is equal to `true`, otherwise set a new token first using [web\\_app\\_biometry\\_update\\_token\u00a0\u00bb](#web-app-biometry-update-token).\n\nIf the user has [previously disallowed](#web-app-biometry-request-access) the bot from using biometric authentication, this request should immediately fail, emitting an appropriate [`biometry_auth_requested` event\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#biometry-auth-requested).\n\n#### [](#web-app-biometry-open-settings)`web_app_biometry_open_settings`\n\nEvent data: `null`\n\nEmitted by [bot mini apps](https://core.telegram.org/api/bots/webapps) to open the biometric authentication settings page for bots, useful when the app needs to request permission to use biometrics from users who have previously denied it.\n\nNote that this event should only be handled in response to user interaction with the Mini App interface (e.g. a click inside the Mini App or on the main button), and it must be handled at most once a second.\n\n#### [](#web-app-invoke-custom-method)`web_app_invoke_custom_method`\n\nEvent data: a JSON object with the following fields:\n\n*   `req_id` - A string with the ID of the current request\n*   `method` - A string, containing the name of the called custom method\n*   `params` - An object containing the parameters of the method call\n\nEmitted by [bot mini apps](https://core.telegram.org/api/bots/webapps) to make custom method calls to Telegram's servers on behalf of the user.\n\nThis event should trigger a [bots.invokeWebViewCustomMethod](https://core.telegram.org/method/bots.invokeWebViewCustomMethod) request, passing the `method` to `custom_method`, and the `params` to `params`.\n\nUpon receiving a reply, a [custom\\_method\\_invoked event\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#custom-method-invoked) should be emitted, with the following fields:\n\n*   `req_id` - The `req_id` from the `web_app_invoke_custom_method` object\n*   `result` - The JSON data contained in the response of the [bots.invokeWebViewCustomMethod](https://core.telegram.org/method/bots.invokeWebViewCustomMethod) method, if the method call succeeded\n*   `error` - The text of the RPC error, if the method call failed\n\n#### [](#web-app-read-text-from-clipboard)`web_app_read_text_from_clipboard`\n\nEvent data: a JSON object with the following fields:\n\n*   `req_id` - A string with the ID of the current request\n\nEmitted by [bot mini apps](https://core.telegram.org/api/bots/webapps) to obtain the contents of the system clipboard.\n\nOnly for Mini Apps owned by bots added to the [attachment menu](https://core.telegram.org/api/bots/attach), regardles of how the Mini App itself was launched, this event should trigger a [clipboard\\_text\\_received event\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#clipboard-text-received) with the following payload:\n\n*   `req_id` - The `req_id` from the `web_app_read_text_from_clipboard` request\n*   `data` - A string with the clipboard contents\n\nNote that this method can be called only in response to a user interaction with the Mini App interface (e.g. a click inside the Mini App or on the main or settings button).  \nNote that user interactions must have a TTL of 10 seconds: events of this type must be ignored and a [clipboard\\_text\\_received event\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#clipboard-text-received) with the correct `req_id` and no `data` field must be sent if the last Mini App user interaction (as described above) happened more than 10 seconds ago.\n\nA [clipboard\\_text\\_received event\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#clipboard-text-received) with the correct `req_id` and no `data` field must also be sent if the bot is not installed in the [attachment menu](https://core.telegram.org/api/bots/attach).\n\n#### [](#web-app-open-scan-qr-popup)`web_app_open_scan_qr_popup`\n\nEvent data: a JSON object with the following fields:\n\n*   `text` - Optional string, containing the text to be displayed under the 'Scan QR' heading, 0-64 characters.\n\nEmitted by [bot mini apps](https://core.telegram.org/api/bots/webapps) to prompt the client to open the native QR code scanner and start continuously scanning for QR codes.\n\nA [`qr_text_received` event\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#qr-text-received) should be emitted every time a new QR code is scanned, until the user closes the popup via the UI or the Mini App closes the popup with a [web\\_app\\_close\\_scan\\_qr\\_popup](#web-app-close-scan-qr-popup) event.\n\nClosing the popup should emit a [`scan_qr_popup_closed` event\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#scan-qr-popup-closed); the same event should be emitted if the scan QR code popup cannot be opened due to permission issues.\n\n#### [](#web-app-close-scan-qr-popup)`web_app_close_scan_qr_popup`\n\nEvent data: `null`\n\nEmitted by [bot mini apps](https://core.telegram.org/api/bots/webapps) to prompt the client to close the native QR code scanner opened using [web\\_app\\_open\\_scan\\_qr\\_popup](#web-app-open-scan-qr-popup).\n\nThe [`scan_qr_popup_closed` event\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#scan-qr-popup-closed) event should _not_ be emitted if the QR code popup is closed using this event.\n\n#### [](#web-app-setup-closing-behavior)`web_app_setup_closing_behavior`\n\nEvent data: a JSON object with a boolean `need_confirmation`.\n\nIf equal to `true`, the client should require user confirmation with a \"Changes that you made may not be saved.\" popup with \"Cancel\"/\"Close anyway\" buttons before closing the webview, to avoid accidentally aborting a sensitive operation; otherwise no confirmation should be requested.\n\n#### [](#web-app-set-background-color)`web_app_set_background_color`\n\nEvent data: a JSON object with a string `color` with a hex RGB color.\n\nUsed to set the mini app background and lower overscroll color.\n\n#### [](#web-app-set-header-color)`web_app_set_header_color`\n\nEvent data: a JSON object with the following fields:\n\n*   `color_key` - A string with one of the following values:\n    *   `bg_color` - The `bg_color` from the [theme parameters](https://core.telegram.org/api/bots/webapps#theme-parameters) should be used.\n    *   `secondary_bg_color` - The `secondary_bg_color` from the [theme parameters](https://core.telegram.org/api/bots/webapps#theme-parameters) should be used.\n*   `color` - A color in hex RGB format (`#ffffff`).\n\nThe two fields are mutually exclusive, if none of the two fields are provided the default header color is used.\n\nUsed to set the mini app header and upper overscroll color.\n\n#### [](#web-app-data-send)`web_app_data_send`\n\nEvent data: a JSON object with a string `data` field.\n\nUsed **only** by [keyboard button mini apps](https://core.telegram.org/api/bots/webapps#keyboard-button-mini-apps) to send back data to the bot as specified [here\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#keyboard-button-mini-apps). The Mini App will be closed.\n\n#### [](#web-app-switch-inline-query)`web_app_switch_inline_query`\n\nEvent data: a JSON object with the following keys:\n\n*   `query` - The inline query that will be inserted in the chat's input field, after the bot's username.  \n    May be an empty string, in which case just the bot's username will be inserted, triggering an empty inline query.\n*   `chat_types` - An array of strings, containing a combination of `users`, `bots`, `groups`, `channels`.  \n    If non-empty, the client should prompt the user to choose a specific chat of the specified type(s), then open the chosen chat and inserts the bot's username and the specified inline query in the input field.  \n    The array values specify which types of chats the user will be able to choose from.  \n    If empty, the current chat is used.\n\nUsed by [inline mode mini apps](https://core.telegram.org/api/bots/webapps#inline-mode-mini-apps) to send back data to the bot as specified [here\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#inline-mode-mini-apps). The Mini App will be closed.\n\n#### [](#web-app-trigger-haptic-feedback)`web_app_trigger_haptic_feedback`\n\nEvent data: a JSON object with the following fields:\n\n*   `type` - One of the following values (string):\n    *   `impact` - An impact occurred.\n    *   `notification` - A task or action has succeeded, failed, or produced a warning.\n    *   `selection_change` - The user has changed a selection.\n*   `impact_style` - Only for `impact` feedbacks, one of the following values (string):\n    *   `light` - Indicates a collision between small or lightweight UI objects\n    *   `medium` - Indicates a collision between medium-sized or medium-weight UI objects\n    *   `heavy` - Indicates a collision between large or heavyweight UI objects\n    *   `rigid` - Indicates a collision between hard or inflexible UI objects\n    *   `soft` - Indicates a collision between soft or flexible UI objects\n*   `notification_type` - Only for `notification` feedbacks, one of the folowing values (string):\n    *   `error` - Indicates that a task or action has failed\n    *   `success` - Indicates that a task or action has completed successfully\n    *   `warning` - Indicates that a task or action produced a warning\n\nUsed to trigger haptic feedback for a user interaction in a webapp.\n\n#### [](#web-app-open-link)`web_app_open_link`\n\nEvent data: a JSON object with the following fields:\n\n*   `url` - The URL to open\n*   `try_instant_view` - Optional boolean, if set, equal to `true` and the scheme of the URL is either `http` or `https`, the link should be opened in [Instant View mode](https://core.telegram.org/methods#working-with-instant-view-pages) if possible.\n*   `try_browser` - Optional string, if set, must contain one of the following browser identifiers, and the client should attempt to open the link using the specified browser (if it's currently installed on the device):\n    *   `google-chrome` or `chrome` - Google Chrome\n    *   `mozilla-firefox` or `firefox` - Firefox\n    *   `microsoft-edge` or `edge` - Microsoft Edge\n    *   `opera` - Opera\n    *   `opera-mini` - Opera Mini\n    *   `brave` or `brave-browser` - Brave Browser\n    *   `duckduckgo` or `duckduckgo-browser` - Duckduckgo Browser\n    *   `samsung` or `samsung-browser` - Samsung Browser\n    *   `vivaldi` or `vivaldi-browser` - Vivaldi\n    *   `kiwi` or `\u0138iwi-browser` - Kiwi\n    *   `uc` or `uc-browser` - UC browser\n    *   `tor` or `tor-browser` - TOR browser\n\nUsed to open a link in an external browser (or in a new tab for browser clients). The Mini App will not be closed.\n\nOnly URLs with the scheme equal to one of the schemes specified in [web\\_app\\_allowed\\_protocols](https://core.telegram.org/api/config#web-app-allowed-protocols) may be opened.\n\nNote that this method can be called only in response to a user interaction with the Mini App interface (e.g. a click inside the Mini App or on the main or settings button).  \nAfter opening the URL, further events of this type should be ignored until the user interacts again with the Mini App interface (as above).  \nNote that user interactions must have a TTL of 1 second: events of this type must be ignored if the last Mini App user interaction happened more than 1 second ago.\n\n#### [](#web-app-open-tg-link)`web_app_open_tg_link`\n\nEvent data: a JSON object with the following fields:\n\n*   `path_full` - string field, containing the path+query component of a [t.me deep link](https://core.telegram.org/api/links) (`url = 'https://t.me' + path_full`)\n*   `force_request` - optional boolean field, if set and true the client must ignore any locally cached information for the deep link (mainly used to refresh the cache information for [stickerset links \u00bb](https://core.telegram.org/api/links#stickerset-links))\n\nUsed to open a [t.me deep link](https://core.telegram.org/api/links). The Mini App must not be closed.\n\n#### [](#web-app-open-invoice)`web_app_open_invoice`\n\nEvent data: a JSON object with a string `slug` field, containing an [invoice deep link](https://core.telegram.org/api/links#invoice-links).\n\nUsed to initiate [payment of an invoice\u00a0\u00bb](https://core.telegram.org/api/payments), by opening an invoice popup over the Mini App: the Mini App itself must not be closed.\n\nThe payment status must be reported back to the mini app using [invoice\\_closed](https://core.telegram.org/api/bots/webapps#invoice-closed).\n\n#### [](#web-app-expand)`web_app_expand`\n\nNo event payload.\n\nExpands the mini app to the maximum available height.  \nThe mini app must also be expanded when the user swipes up on the webview.\n\nThis event must be ignored _during_ a user swipe down, used to reduce the webview.\n\n#### [](#web-app-request-viewport)`web_app_request_viewport`\n\nNo event payload.\n\nUsed by mini apps to request information about the viewport, clients should emit a [viewport\\_changed event](https://core.telegram.org/api/bots/webapps#viewport-changed).\n\n#### [](#web-app-request-theme)`web_app_request_theme`\n\nNo event payload.\n\nUsed by mini apps to request information about the current theme, clients should emit a [theme\\_changed event](https://core.telegram.org/api/bots/webapps#theme-changed).\n\n#### [](#web-app-ready)`web_app_ready`\n\nNo event payload.\n\nEmitted by mini apps when they are fully loaded, signaling to client apps that the loading spinner placeholder can be removed.\n\nNote that there is no guarantee that this event will be emitted when the mini app is fully loaded: clients should remove the loading spinner upon receiving this event or when the page finishes loading (native webview/iframe event), whichever event comes first.\n\n#### [](#web-app-setup-main-button)`web_app_setup_main_button`\n\nEvent payload: JSON object with the following fields:\n\n*   `is_visible` - Whether the main button is visible (boolean, false by default)\n*   `is_active` - Whether the main button is active (boolean, true by default)\n*   `text` - Button text (string, if `trim(text)` is empty the button must be hidden)\n*   `color` - Button color in hex RGB format (string, defaults to the [`button_color` theme parameter](https://core.telegram.org/api/bots/webapps#theme-parameters))\n*   `text_color` - Button text color in hex RGB format (string, defaults to the [`button_text_color` theme parameter](https://core.telegram.org/api/bots/webapps#theme-parameters))\n*   `is_progress_visible` - Indicates whether the button should display a loading indicator (boolean, false by default)\n*   `has_shine_effect` - Whether the button should have a shine effect (boolean, false by default)\n\nConfigures the main button, located immediately below the webview: when the user presses it a [`main_button_pressed` event should be emitted by the client](https://core.telegram.org/api/bots/webapps#main-button-pressed).\n\nSome clients implement a horizontal media type tab bar located at the bottom of the screen, opened when the user clicks on the attachment menu button: this tab bar contains a horizontal list of buttons used to attach media of a certain type and to open installed [attachment menu mini apps](https://core.telegram.org/api/bots/attach).  \nIn clients that implements a tab bar, iff the user opens a mini app through a tab bar button and the mini app emits a `web_app_setup_main_button` with `is_visible=true`, the main button should be displayed (replacing the tab bar) only after the first tap inside of the webview, to prevent bots from immediately blocking the tab bar.\n\nOtherwise, the main button can be displayed right away with no user interaction when receiving a `web_app_setup_main_button` event with `is_visible=true`.\n\n#### [](#web-app-setup-back-button)`web_app_setup_back_button`\n\nEvent data: a JSON object with an `is_visible` boolean field.\n\nDetermines whether to show or hide the back button: when the user presses it a [`back_button_pressed` event should be emitted by the client](https://core.telegram.org/api/bots/webapps#back-button-pressed).  \nNote that on supported platforms, the OS back button can be used instead of a custom back button: in this case, if `is_visible` is true pressing the OS back button should emit a [`back_button_pressed` event](https://core.telegram.org/api/bots/webapps#back-button-pressed), otherwise the webview should be closed.\n\n#### [](#web-app-setup-settings-button)`web_app_setup_settings_button`\n\nEvent data: a JSON object with an `is_visible` boolean field.\n\nDetermines whether to show or hide the settings button: when the user presses it a [`settings_button_pressed` event should be emitted by the client](https://core.telegram.org/api/bots/webapps#settings-button-pressed).\n\n#### [](#resize-frame)`resize_frame`\n\nEvent payload: JSON object with `height` field.\n\nCalled by supported pages inside of [IV](https://instantview.telegram.org/) iframe embeds, indicates the new size of the embed frame.\n\n#### [](#web-app-setup-swipe-behavior)`web_app_setup_swipe_behavior`\n\nEvent payload: JSON object with boolean `allow_vertical_swipe` field.\n\nCalled [bot web apps](https://core.telegram.org/api/bots/webapps) to tell the client to enable or disable the vertical swipe gesture usually used on mobile to minimize the web app.\n\n#### [](#web-app-set-bottom-bar-color)`web_app_set_bottom_bar_color`\n\nEvent data: a JSON object with a string `color` with a hex RGB color.\n\nUsed to set the mini app bottom bar color.\n\n#### [](#web-app-setup-secondary-button)`web_app_setup_secondary_button`\n\nEvent payload: JSON object with the following fields:\n\n*   `is_visible` - Whether the button is visible (boolean, false by default)\n*   `is_active` - Whether the button is active (boolean, true by default)\n*   `text` - Button text (string, if `trim(text)` is empty the button must be hidden)\n*   `color` - Button color in hex RGB format (string, defaults to the [`button_color` theme parameter](https://core.telegram.org/api/bots/webapps#theme-parameters))\n*   `text_color` - Button text color in hex RGB format (string, defaults to the [`button_text_color` theme parameter](https://core.telegram.org/api/bots/webapps#theme-parameters))\n*   `is_progress_visible` - Indicates whether the button should display a loading indicator (boolean, false by default)\n*   `has_shine_effect` - Whether the button should have a shine effect (boolean, false by default)\n*   `position` - One of `left`, `right`, `top`, `bottom` (string, defaults to `left`)\n\nConfigures the secondary button, located immediately below the webview, either on the left, right, top or bottom of the main button (if it is visible, otherwise it is located where the main button is usually located).\n\nWhen the user presses it a [`secondary_button_pressed` event should be emitted by the client](https://core.telegram.org/api/bots/webapps#secondary-button-pressed).\n\nSome clients implement a horizontal media type tab bar located at the bottom of the screen, opened when the user clicks on the attachment menu button: this tab bar contains a horizontal list of buttons used to attach media of a certain type and to open installed [attachment menu mini apps](https://core.telegram.org/api/bots/attach).  \nIn clients that implements a tab bar, iff the user opens a mini app through a tab bar button and the mini app emits a `web_app_setup_secondary_button` with `is_visible=true`, the secondary button should be displayed (replacing the tab bar) only after the first tap inside of the webview, to prevent bots from immediately blocking the tab bar.\n\nOtherwise, the secondary button can be displayed right away with no user interaction when receiving a `web_app_setup_secondary_button` event with `is_visible=true`.\n\n#### `web_app_share_to_story`\n\nEvent payload: JSON object with the following fields:\n\n*   `media_url` - A string containing an HTTPS URL of the media to share as a story\n*   `text` - An optional string caption for the media\n*   `widget_link` - An optional object describing a [URL media area \u00bb](https://core.telegram.org/api/stories#urls) to be included in the story, with the following fields:\n    *   `url` - A string with the URL of the widget\n    *   `text` - An optional string with a label for the widget\n\nUsed by [mini apps](https://core.telegram.org/api/bots/webapps) to share a [story on the user's profile \u00bb](https://core.telegram.org/api/stories), specifying an optional caption and [URL widget \u00bb](https://core.telegram.org/api/stories#urls).\n\nThis event should open the app's story editor with the specified media, caption and widget, letting the user tweak the story before posting it.\n\n#### [](#web-app-request-fullscreen)`web_app_request_fullscreen`\n\nEvent payload: `null`\n\nEmitted by [mini web apps](https://core.telegram.org/api/bots/webapps) to request expansion of the web app to fullscreen mode.\n\nOn success, emits a [fullscreen\\_changed event](https://core.telegram.org/api/bots/webapps#fullscreen-changed) with `is_fullscreen=true`.  \nOn failure, emits a [fullscreen\\_failed event](https://core.telegram.org/api/bots/webapps#fullscreen-failed) with `error` equal to `UNSUPPORTED` (Fullscreen mode is not supported on this device or platform) or `ALREADY_FULLSCREEN` (The Mini App is already in fullscreen mode).\n\n#### [](#web-app-exit-fullscreen)`web_app_exit_fullscreen`\n\nEvent payload: `null`\n\nEmitted by [mini web apps](https://core.telegram.org/api/bots/webapps) to request exiting fullscreen mode.\n\nThis method should unconditionally emit a [fullscreen\\_changed event](https://core.telegram.org/api/bots/webapps#fullscreen-changed) with `is_fullscreen=false` (even if we've already exited fullscreen mode).  \nOn platforms where fullscreen mode is not supported, must emit a [fullscreen\\_failed event](https://core.telegram.org/api/bots/webapps#fullscreen-failed) with `error` equal to `UNSUPPORTED` instead of `fullscreen_changed`.\n\n#### [](#web-app-start-accelerometer)`web_app_start_accelerometer`\n\nEvent payload: JSON object with the following fields:\n\n*   `refresh_rate` - An optional integer indicating the refresh rate in milliseconds, ranging from 20 to 1000 (defaults to 1000).\n\nUsed by [mini apps](https://core.telegram.org/api/bots/webapps) to start accelerometer tracking.\n\nThe specified refresh rate may be ignored on platforms where it is not supported, or if it doesn't fall within the supported range: this should not cause an error, tracking should be started with the closest supported refresh rate.\n\nEmits an [accelerometer\\_started event](https://core.telegram.org/api/bots/webapps#accelerometer-started) on success, or an [accelerometer\\_failed event](https://core.telegram.org/api/bots/webapps#accelerometer-failed) with `error=UNSUPPORTED` on platforms with no accelerometer tracking.\n\nUntil [web\\_app\\_stop\\_accelerometer](#web-app-stop-accelerometer) is emitted by the mini app, the client will emit [accelerometer\\_changed events](https://core.telegram.org/api/bots/webapps#accelerometer-changed) at most every `refresh_rate` milliseconds with accelerometer readings.\n\n#### [](#web-app-stop-accelerometer)`web_app_stop_accelerometer`\n\nEvent payload: `null`\n\nUsed by [mini apps](https://core.telegram.org/api/bots/webapps) to stop accelerometer tracking, stopping the emission of [accelerometer\\_changed events](https://core.telegram.org/api/bots/webapps#accelerometer-changed).\n\nEmits an [accelerometer\\_stopped event](https://core.telegram.org/api/bots/webapps#accelerometer-stopped) on success, or an [accelerometer\\_failed event](https://core.telegram.org/api/bots/webapps#accelerometer-failed) with `error=UNSUPPORTED` on platforms with no accelerometer tracking.\n\n#### [](#web-app-start-gyroscope)`web_app_start_gyroscope`\n\nEvent payload: JSON object with the following fields:\n\n*   `refresh_rate` - An optional integer indicating the refresh rate in milliseconds, ranging from 20 to 1000 (defaults to 1000).\n\nUsed by [mini apps](https://core.telegram.org/api/bots/webapps) to start gyroscope tracking.\n\nThe specified refresh rate may be ignored on platforms where it is not supported, or if it doesn't fall within the supported range: this should not cause an error, tracking should be started with the closest supported refresh rate.\n\nEmits a [gyroscope\\_started event](https://core.telegram.org/api/bots/webapps#gyroscope-started) on success, or a [gyroscope\\_failed event](https://core.telegram.org/api/bots/webapps#gyroscope-failed) with `error=UNSUPPORTED` on platforms with no gyroscope tracking.\n\nUntil [web\\_app\\_stop\\_gyroscope](#web-app-stop-gyroscope) is emitted by the mini app, the client will emit [gyroscope\\_changed events](https://core.telegram.org/api/bots/webapps#gyroscope-changed) at most every `refresh_rate` milliseconds with gyroscope readings.\n\n#### [](#web-app-stop-gyroscope)`web_app_stop_gyroscope`\n\nEvent payload: `null`\n\nUsed by [mini apps](https://core.telegram.org/api/bots/webapps) to stop gyroscope tracking, stopping the emission of [gyroscope\\_changed events](https://core.telegram.org/api/bots/webapps#gyroscope-changed).\n\nEmits a [gyroscope\\_stopped event](https://core.telegram.org/api/bots/webapps#gyroscope-stopped) on success, or a [gyroscope\\_failed event](https://core.telegram.org/api/bots/webapps#gyroscope-failed) with `error=UNSUPPORTED` on platforms with no gyroscope tracking.\n\n#### [](#web-app-start-device-orientation)`web_app_start_device_orientation`\n\nEvent payload: JSON object with the following fields:\n\n*   `refresh_rate` - An optional integer indicating the refresh rate in milliseconds, ranging from 20 to 1000 (defaults to 1000).\n*   `need_absolute` - An optional boolean, indicating whether the app is requesting to receive absolute orientation data, allowing it to determine the device's attitude relative to magnetic north (useful to implement features like a compass, defaults to `false`)\n\nUsed by [mini apps](https://core.telegram.org/api/bots/webapps) to start device orientation tracking.\n\nThe specified refresh rate may be ignored on platforms where it is not supported, or if it doesn't fall within the supported range: this should not cause an error, tracking should be started with the closest supported refresh rate.  \nAbsolute orientation data may also not be supported on some platforms, in which case relative orientation events will be sent, instead.\n\nEmits a [device\\_orientation\\_started event](https://core.telegram.org/api/bots/webapps#device-orientation-started) on success, or a [device\\_orientation\\_failed event](https://core.telegram.org/api/bots/webapps#device-orientation-failed) with `error=UNSUPPORTED` on platforms with no device orientation tracking.\n\nUntil [web\\_app\\_stop\\_device\\_orientation](#web-app-stop-device-orientation) is emitted by the mini app, the client will emit [device\\_orientation\\_changed events](https://core.telegram.org/api/bots/webapps#device-orientation-changed) at most every `refresh_rate` milliseconds with device orientation readings.\n\n#### [](#web-app-stop-device-orientation)`web_app_stop_device_orientation`\n\nEvent payload: `null`\n\nUsed by [mini apps](https://core.telegram.org/api/bots/webapps) to stop device orientation tracking, stopping the emission of [device\\_orientation\\_changed events](https://core.telegram.org/api/bots/webapps#device-orientation-changed).\n\nEmits a [device\\_orientation\\_stopped event](https://core.telegram.org/api/bots/webapps#device-orientation-stopped) on success, or a [device\\_orientation\\_failed event](https://core.telegram.org/api/bots/webapps#device-orientation-failed) with `error=UNSUPPORTED` on platforms with no device orientation tracking.\n\n#### [](#web-app-add-to-home-screen)`web_app_add_to_home_screen`\n\nEvent payload: `null`\n\nUsed by [mini apps](https://core.telegram.org/api/bots/webapps) to ask the user to add a shortcut to the mini app (using the bot's logo) on the homescreen.\n\nIgnore incoming events of this type if another event of the same type is still being handled, or if the last click of the user within the app occurred more than 10 seconds ago.\n\nEmits a [home\\_screen\\_added event](https://core.telegram.org/api/bots/webapps#home-screen-added) if the shortcut was (already) added successfully, and a [home\\_screen\\_failed event](https://core.telegram.org/api/bots/webapps#home-screen-failed) with `error=\"UNSUPPORTED\"` on unsupported platforms.\n\nIt is acceptable to not emit the `home_screen_added` and `home_screen_failed` events if the current platform doesn't have a way to determine the installation status of the shortcut.\n\n#### [](#web-app-check-home-screen)`web_app_check_home_screen`\n\nEvent payload: `null`\n\nUsed by [mini apps](https://core.telegram.org/api/bots/webapps) to check if a shortcut to the mini app was added to the homescreen.\n\nMust emit a [home\\_screen\\_checked event \u00bb](https://core.telegram.org/api/bots/webapps#home-screen-checked) event with the status (including on unsupported platforms, see the [event documentation \u00bb](https://core.telegram.org/api/bots/webapps#home-screen-checked) for this case).\n\n#### [](#web-app-set-emoji-status)`web_app_set_emoji_status`\n\nEvent payload: JSON object with the following fields:\n\n*   `custom_emoji_id` - Long integer in string form, containing the ID of the [custom emoji](https://core.telegram.org/api/custom-emoji) to set as emoji status (string)\n*   `duration` - Optional integer, indicating the TTL of the status; if 0, the status doesn't expire (integer, defaults to 0)\n\nUsed by [mini apps](https://core.telegram.org/api/bots/webapps) to manually set (or remove) the [status emoji](https://core.telegram.org/api/emoji-status) of a user.\n\nIgnore incoming events of this type if another event of the same type is still being handled, or if the last click of the user within the app occurred more than 10 seconds ago.\n\nEmits an [emoji\\_status\\_set event](https://core.telegram.org/api/bots/webapps#emoji-status-set) on success and [emoji\\_status\\_failed event](https://core.telegram.org/api/bots/webapps#emoji-status-failed) on failure.\n\n#### [](#web-app-request-emoji-status-access)`web_app_request_emoji_status_access`\n\nEvent payload: `null`\n\nIgnore incoming events of this type if another event of the same type is still being handled, or if the last click of the user within the app occurred more than 10 seconds ago.\n\nUsed by [mini apps](https://core.telegram.org/api/bots/webapps) to ask permission to update the [emoji status](https://core.telegram.org/api/emoji-status) of a user using the [bots.updateUserEmojiStatus](https://core.telegram.org/method/bots.updateUserEmojiStatus) method.\n\nIf the user already previously agreed (i.e. the [userFull](https://core.telegram.org/constructor/userFull).`bot_can_manage_emoji_status` flag of the bot is set for the user), emit an [emoji\\_status\\_access\\_requested event](https://core.telegram.org/api/bots/webapps#emoji-status-access-requested) event with `status=\"allowed\"` and terminate the flow.\n\nIf the user refuses, emit an [emoji\\_status\\_access\\_requested event](https://core.telegram.org/api/bots/webapps#emoji-status-access-requested) event with `status=\"cancelled\"` and terminate the flow.\n\nIf the user agrees, the client must invoke the [bots.toggleUserEmojiStatusPermission](https://core.telegram.org/method/bots.toggleUserEmojiStatusPermission) method, passing `enabled=true` and the ID of the bot: if the method returns [boolTrue](https://core.telegram.org/constructor/boolTrue), emit an [emoji\\_status\\_access\\_requested event](https://core.telegram.org/api/bots/webapps#emoji-status-access-requested) event with `status=\"allowed\"`; otherwise emit the same event with `status=\"cancelled\"`.\n\nOn success, the bot will be able to use [bots.updateUserEmojiStatus](https://core.telegram.org/method/bots.updateUserEmojiStatus) to change the emoji status of the user.\n\n#### [](#web-app-request-safe-area)`web_app_request_safe_area`\n\nEvent payload: `null`\n\nUsed by [mini apps](https://core.telegram.org/api/bots/webapps) to request the emission of a [safe\\_area\\_changed event \u00bb](https://core.telegram.org/api/bots/webapps#safe-area-changed), containing the current system-defined safe area inset padding values.\n\n#### [](#web-app-request-content-safe-area)`web_app_request_content_safe_area`\n\nEvent payload: `null`\n\nUsed by [mini apps](https://core.telegram.org/api/bots/webapps) to request the emission of a [content\\_safe\\_area\\_changed event \u00bb](https://core.telegram.org/api/bots/webapps#content-safe-area-changed), containing the current content-defined safe area inset padding values.\n\n#### [](#web-app-check-location)`web_app_check_location`\n\nEvent payload: `null`\n\nMust be used by [mini apps](https://core.telegram.org/api/bots/webapps) to initialize the geolocation object in the client and obtain basic information about geolocation capabilities and status, as a [location\\_checked event \u00bb](https://core.telegram.org/api/bots/webapps#location-checked).\n\nThis event should not actually ask anything from the user, just return the current settings (not the current geolocation).\n\n#### [](#web-app-request-location)`web_app_request_location`\n\nEvent payload: `null`\n\nUsed by [mini apps](https://core.telegram.org/api/bots/webapps) to request the emission of a [location\\_requested event \u00bb](https://core.telegram.org/api/bots/webapps#location-requested), containing current geolocation data of the user (or nothing if the user denied access to their current geolocation).\n\nThis event should ask the user permission to share their location with the current mini app only if the user hasn't already denied or allowed location access to the mini app, in which case no prompt must be shown.\n\n#### [](#web-app-open-location-settings)`web_app_open_location_settings`\n\nEvent payload: `null`\n\nUsed by [mini apps](https://core.telegram.org/api/bots/webapps) to request opening the geolocation settings page for bots, useful when the app needs to request permission to use the current geolocation from users who have previously denied it.\n\nNote that this event should only be handled in response to user interaction with the Mini App interface (e.g. a click inside the Mini App or on the main button within the last 10 seconds) and only if an event of the same type isn't already being handled.\n\n#### [](#web-app-request-file-download)`web_app_request_file_download`\n\nEvent data: a JSON object with `url` and `filename` string fields.\n\nUsed by [bot web apps](https://core.telegram.org/api/bots/webapps) to request the download of a file.\n\nHandle this event using the following steps:\n\n1.  Invoke [bots.checkDownloadFileParams](https://core.telegram.org/method/bots.checkDownloadFileParams), passing the `url`, `filename` and the ID of the bot.  \n    Ignore further `web_app_request_file_download` events until step 3 is reached (new `web_app_request_file_download` _can_ be accepted while the previous file is being downloaded).  \n    1.1) If the method doesn't return [boolTrue](https://core.telegram.org/constructor/boolTrue), emit a [file\\_download\\_requested](https://core.telegram.org/api/bots/webapps#file-download-requested) event with status equal to `cancelled` and abort the process.\n2.  If [boolTrue](https://core.telegram.org/constructor/boolTrue) is returned, show a prompt to the user, notifying them that `$nameOfTheBot` is asking to download a file with name `filename`.  \n    2.1) If the user refuses to download the file, emit a [file\\_download\\_requested](https://core.telegram.org/api/bots/webapps#file-download-requested) event with status equal to `cancelled` and abort the process.\n3.  If the user agrees, start downloading the file from `url` as `filename` and emit a [file\\_download\\_requested](https://core.telegram.org/api/bots/webapps#file-download-requested) event with status equal to `downloading`.\n4.  When the download is finished, show a toast to the user, indicating that the file was downloaded successfully.\n\n#### [](#web-app-send-prepared-message)`web_app_send_prepared_message`\n\nEvent data: a JSON object with an `id` string field.\n\nUsed by [bot web apps](https://core.telegram.org/api/bots/webapps) to invite the user to send a [prepared inline message \u00bb](https://core.telegram.org/api/bots/inline#21-using-a-prepared-inline-message).\n\n#### [](#web-app-toggle-orientation-lock)`web_app_toggle_orientation_lock`\n\nEvent data: a JSON object with a `locked` boolean field (defaults to `false`).\n\nUsed by [bot web apps](https://core.telegram.org/api/bots/webapps) to enable or disable the orientation lock.",
    "url": "https://core.telegram.org/api/web-events"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/links",
      "title": "Deep links",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Deep links"
        },
        {
          "property": "og:description",
          "content": "Telegram clients must handle special tg:// and t.me deep links encountered in messages, link entities and in other apps by registering OS handlers."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:20 GMT",
        "content-type": "text/html; charset=utf-8",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "strict-transport-security": "max-age=35768000",
        "content-encoding": "gzip",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Deep links\n\nTelegram clients must handle special `tg://` and `t.me` deep links encountered in messages, link entities and in other apps by registering OS handlers.\n\nLinks are generally available in two flavors: `t.me` HTTPS links and `tg:` URIs.\n\n`t.me` link syntax examples:\n\n*   `t.me/path?query`\n*   `http://t.me/path?query`\n*   `https://t.me/path?query`\n\nWhere `t.me` can also be `telegram.me`, `telegram.dog`, and the domain specified in the `me_url_prefix` field of the global [configuration](https://core.telegram.org/constructor/config), obtainable using [help.getConfig](https://core.telegram.org/method/help.getConfig).\n\n`tg:` link syntax examples:\n\n*   `tg:path?query`\n*   `tg://path?query`\n\nThe `#fragment` part is always ignored when parsing Telegram deep links.\n\nAlso note that whenever a `<username>.t.me` link is encountered and `<username>`:\n\n*   Is not equal to:\n    *   `www`\n    *   `addemoji`\n    *   `addlist`\n    *   `addstickers`\n    *   `addtheme`\n    *   `auth`\n    *   `boost`\n    *   `confirmphone`\n    *   `contact`\n    *   `giftcode`\n    *   `invoice`\n    *   `joinchat`\n    *   `login`\n    *   `m`\n    *   `proxy`\n    *   `setlanguage`\n    *   `share`\n    *   `socks`\n    *   `web`\n    *   `a`\n    *   `k`\n    *   `z`\n*   AND is not a single letter\n*   AND is a valid username\n\n...it should be treated exactly as a `t.me/<username>/` link (generate a `t.me/<username>/` link and append the rest of the path (if present) and the query string (if present)).\n\nEverywhere where link parameters contain a user, chat, channel or supergroup ID, it will be in MTProto format, see [here\u00a0\u00bb](https://core.telegram.org/api/bots/ids) for info on how to convert it to bot API format.\n\n### [](#ton-sites)TON Sites\n\nUsed to open [TON Sites](https://blog.ton.org/ton-sites) using the in-app [Telegram Browser](https://telegram.org/blog/w3-browser-mini-app-store#telegram-browser).\n\nSyntax:\n\n```\ntonsite://somesite.domain/path?query#hash\n```\n\nAlso available without the `tonsite://` scheme for `.ton` domains:\n\n```\ngetting-started.ton/path?query#hash\n```\n\nIn both cases, the `#hash` part of the URL should **not** be ignored.\n\nTo open such URLs:\n\n*   Replace the `tonsite` scheme with `https`\n*   Transform the host part of the URL thusly:\n    *   Replace all `.` characters with `-d`\n    *   Replace `-` characters with `-h` (except for the `-`s generated by the first replace)\n    *   Append a `.`\n    *   Append the domain name specified in the [ton\\_proxy\\_address client configuration parameter\u00a0\u00bb](https://core.telegram.org/api/config#ton-proxy-address)\n\nThe resulting URL should only be opened using the in-app [Telegram Browser](https://telegram.org/blog/w3-browser-mini-app-store#telegram-browser) (i.e. no option should be given to open such links using third party browsers).\n\n### [](#public-username-links)Public username links\n\nUsed to link to public users, groups and channels, see [here for more info on how to handle them\u00a0\u00bb](https://core.telegram.org/api/invites#public-usernames).\n\n`t.me` syntax:\n\n```\nt.me/<username>?text=<draft_text>&profile\n```\n\n`tg:` syntax:\n\n```\ntg://resolve?domain=<username>&text=<draft_text>&profile\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `username` | Required | Username to [check or import\u00a0\u00bb](https://core.telegram.org/api/invites#public-usernames) |\n| `draft_text` | Optional | UTF-8 text to pre-enter into the text input bar, if the user can write in the chat.  <br>Before insertion:  <br>\\- Validate that the text is valid UTF-8.  <br>\\- If the text starts with a `@`, prepend a whitespace to it (to avoid triggering an [inline query](https://core.telegram.org/api/bots/inline)).  <br>\\- Trim the text to [message\\_length\\_max](https://core.telegram.org/constructor/config) UTF-8 codepoints. |\n| `profile` | Optional | If set, clicking on this link should open the destination peer's profile page, not the chat view. |\n\nNote that [message links](#message-links) have the same syntax, with extra parameters.\n\n### [](#temporary-profile-links)Temporary profile links\n\nUsed to link to user profiles, generated using [contacts.exportContactToken](https://core.telegram.org/method/contacts.exportContactToken).  \nThese links can be generated even for profiles that don't have a username, and they have an expiration date, specified by the `expires` field of the [exportedContactToken](https://core.telegram.org/constructor/exportedContactToken) constructor returned by [contacts.exportContactToken](https://core.telegram.org/method/contacts.exportContactToken).\n\n`t.me` syntax:\n\n```\nt.me/contact/<token>\n```\n\n`tg:` syntax:\n\n```\ntg://contact?token=<token>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `token` | Required | Profile token to import using [contacts.importContactToken](https://core.telegram.org/method/contacts.importContactToken), will return user information. |\n\n### [](#phone-number-links)Phone number links\n\nUsed to link to public and private users by their phone number.\n\n`t.me` syntax:\n\n```\nt.me/+<phone_number>?text=<draft_text>&profile\n```\n\n`tg:` syntax:\n\n```\ntg://resolve?phone=<phone_number>&text=<draft_text>&profile\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `phone_number` | Required | Phone number to resolve using [contacts.resolvePhone](https://core.telegram.org/method/contacts.resolvePhone) |\n| `draft_text` | Optional | UTF-8 text to pre-enter into the text input bar, if the user can write in the chat.  <br>Before insertion:  <br>\\- Validate that the text is valid UTF-8.  <br>\\- If the text starts with a `@`, prepend a whitespace to it (to avoid triggering an [inline query](https://core.telegram.org/api/bots/inline)).  <br>\\- Trim the text to [message\\_length\\_max](https://core.telegram.org/constructor/config) UTF-8 codepoints. |\n| `profile` | Optional | If set, clicking on this link should open the user's profile page, not the chat with them. |\n\nNote that [chat invite links](#message-links) have the same syntax, but `<phone_number>` won't be a valid phone number.\n\n### [](#chat-invite-links)Chat invite links\n\nUsed to invite users to private groups and channels, see [here for more info on how to generate such links\u00a0\u00bb](https://core.telegram.org/api/invites#invite-links).\n\n`t.me` syntax:\n\n```\nt.me/+<hash>\n```\n\n`t.me` syntax (legacy):\n\n```\nt.me/joinchat/<hash>\n```\n\n`tg:` syntax:\n\n```\ntg://join?invite=<hash>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `hash` | Required | Invite hash to [check or import\u00a0\u00bb](https://core.telegram.org/api/invites#invite-links) |\n\n### [](#chat-folder-links)Chat folder links\n\nUsed to invite users to private groups and channels, see [here for more info on how to generate such links\u00a0\u00bb](https://core.telegram.org/api/folders#shared-folders).\n\n`t.me` syntax:\n\n```\nt.me/addlist/<slug>\n```\n\n`tg:` syntax:\n\n```\ntg://addlist?slug=<slug>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `slug` | Required | Invite slug to [check or import\u00a0\u00bb](https://core.telegram.org/api/folders#shared-folders) |\n\n### [](#message-links)Message links\n\nUsed to link to specific messages in public or private groups and channels.\n\n`t.me` syntax (public links):\n\n```\nt.me/<username>/<id>?single&thread=<thread_id>&comment=<comment>&t=<media_timestamp>\nt.me/<username>/<thread_id>/<id>?single&comment=<comment>&t=<media_timestamp>\n```\n\n`t.me` syntax (private links):\n\n```\nt.me/c/<channel>/<id>?single&thread=<thread_id>&comment=<comment>&t=<media_timestamp>\nt.me/c/<channel>/<thread_id>/<id>?single&comment=<comment>&t=<media_timestamp>\n```\n\n`tg:` syntax (public links):\n\n```\ntg://resolve?domain=<username>&post=<id>&single&thread=<thread_id>&comment=<comment>&t=<media_timestamp>\n```\n\n`tg:` syntax (private links):\n\n```\ntg://privatepost?channel=<channel>&post=<id>&single&thread=<thread_id>&comment=<comment>&t=<media_timestamp>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `username` | Required if public link | Dialog username. |\n| `channel` | Required if private link | Channel or supergroup ID. |\n| `id` | Required | Message ID. |\n| `single` | Optional | For albums/grouped media, if set indicates that this is a link to a specific media in the album; otherwise, it is a link to the entire album. |\n| `thread_id` | Optional | For [message threads](https://core.telegram.org/api/threads), contains the thread ID. |\n| `comment` | Optional | For [channel comments](https://core.telegram.org/api/discussion), `username` will contain the channel username, `id` will contain the message ID of the channel message that started the comment section and this field will contain the message ID of the comment in the discussion group. |\n| `media_timestamp` | Optional | Timestamp at which to start playing the media file present in the body or in the webpage preview of the message, in the following formats:  <br>\\- Seconds: `123`, regex `^(\\d+)$`  <br>\\- Minutes and seconds: `10:23`, example regex `^(\\d+):(\\d{1,2})$`  <br>\\- Hours, minutes and seconds: `1h23m10s`, example regex `^(?:(\\d+)h)?(?:(\\d{1,2})m)?(?:(\\d{1,2})s)$` |\n\nNote that since a [forum topic](https://core.telegram.org/api/forum#forum-topics) ID is actually the ID of the service message that created the topic, whenever the client resolves a [message link](#message-links) that points to a [messageActionTopicCreate](https://core.telegram.org/constructor/messageActionTopicCreate) service message, it should open the topic, instead.  \nAlso, if the message ID is `1` and the linked-to supergroup is a forum, the \"General\" topic should be opened instead of the first message of the supergroup.\n\n### [](#forum-topic-links)Forum topic links\n\nUsed to link to a specific [forum topic](https://core.telegram.org/api/forum#forum-topics).\n\nThe syntax is exactly the same as for [message links](#message-links), because the topic ID is actually the ID of the service message that created the topic, so whenever the client resolves a [message link](#message-links) that points to a [messageActionTopicCreate](https://core.telegram.org/constructor/messageActionTopicCreate) service message, it should open the topic, instead.\n\nAlso, if the message ID is `1` and the linked-to supergroup is a forum, the \"General\" topic should be opened instead of the first message of the supergroup.\n\n### Share links\n\nUsed to share a prepared message and URL into a chosen chat's text field.  \nThese links should be handled as follows:\n\n*   Open a dialog selection prompt\n*   After selection: validate, trim and enter the URL at the beginning of the text field\n*   Append a newline to the text field\n*   Append and select the `text`, if present\n\n`t.me` syntax:\n\n```\nt.me/share?url=<url>&text=<text>\n```\n\n`tg:` syntax:\n\n```\ntg://msg_url?url=<url>&text=<text>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `url` | Required | URL to share (urlencoded) |\n| `text` | Optional | Message to share |\n\n### [](#business-chat-links)Business chat links\n\n[Business chat deep links\u00a0\u00bb](https://core.telegram.org/api/business#business-chat-links) allow business owners to share pre-made links to their [Telegram Business](https://core.telegram.org/api/business) account, optionally filling out the message input field with a pre-prepared message (with support for [styled text entities\u00a0\u00bb](https://core.telegram.org/api/entities)).\n\nThere is no additional limit on the prepared message length (because the message text is _not_ present in the URL's query string, but rather it's fetched from the server using the link slug); each created business chat deep link also has a view counter.\n\nSee [here\u00a0\u00bb](https://core.telegram.org/api/business#business-chat-links) for more info on how to create, edit, resolve and get view information about business chat links.\n\nThese links should be handled as follows:\n\n*   Invoke [account.resolveBusinessChatLink](https://core.telegram.org/method/account.resolveBusinessChatLink), passing the `slug` to obtain info about the link as a [account.resolvedBusinessChatLinks](https://core.telegram.org/constructor/account.resolvedBusinessChatLinks) and increase the view counter.\n*   Open the returned `peer`, pre-filling the text input field with the returned `message` and `entities` (if present).\n\n`t.me` syntax:\n\n```\nt.me/m/<slug>\n```\n\n`tg:` syntax:\n\n```\ntg://message?slug=<slug>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `slug` | Required | Slug to pass to [account.resolveBusinessChatLink](https://core.telegram.org/method/account.resolveBusinessChatLink) and link management methods. |\n\n### [](#video-chat-livestream-links)Video chat/Livestream links\n\nUsed to join video/voice chats in groups, and livestreams in channels.  \nSuch links are generated using [phone.exportGroupCallInvite](https://core.telegram.org/method/phone.exportGroupCallInvite).  \nNote that `voicechat` links are deprecated, the API will always export `videochat` links for video and voice chats in groups, clients should support parsing the old link format only for backwards compatibility.\n\n`t.me` syntax:\n\n```\nt.me/<username>?videochat\nt.me/<username>?videochat=<invite_hash>\nt.me/<username>?livestream\nt.me/<username>?livestream=<invite_hash>\nt.me/<username>?voicechat\nt.me/<username>?voicechat=<invite_hash>\n```\n\n`tg:` syntax:\n\n```\ntg://resolve?domain=<username>&videochat\ntg://resolve?domain=<username>&videochat=<invite_hash>\ntg://resolve?domain=<username>&livestream\ntg://resolve?domain=<username>&livestream=<invite_hash>\ntg://resolve?domain=<username>&voicechat\ntg://resolve?domain=<username>&voicechat=<invite_hash>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `invite_hash` | Optional | Invite hash exported if the `can_self_unmute` flag is set when calling [phone.exportGroupCallInvite](https://core.telegram.org/method/phone.exportGroupCallInvite): should be passed to [phone.joinGroupCall](https://core.telegram.org/method/phone.joinGroupCall), allows the user to speak in livestreams or muted group chats. |\n\n### [](#stickerset-links)Stickerset links\n\nUsed to import stickersets or [custom emoji](https://core.telegram.org/api/custom-emoji) stickersets as described [here\u00a0\u00bb](https://core.telegram.org/api/stickers#installing-stickersets).\n\n`t.me` syntax:\n\n```\nt.me/addstickers/<slug>\nt.me/addemoji/<slug>\n```\n\n`tg:` syntax:\n\n```\ntg://addstickers?set=<slug>\ntg://addemoji?set=<slug>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `slug` | Required | Stickerset short name, used when [installing stickers](https://core.telegram.org/api/stickers#installing-stickersets). |\n\n### [](#custom-emoji-stickerset-links)Custom emoji stickerset links\n\nUsed to import [custom emoji](https://core.telegram.org/api/custom-emoji) stickersets as described [here\u00a0\u00bb](https://core.telegram.org/api/stickers#installing-stickersets).\n\n`t.me` syntax:\n\n```\nt.me/addemoji/<slug>\n```\n\n`tg:` syntax:\n\n```\ntg://addemoji?set=<slug>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `slug` | Required | Stickerset short name, used when [installing stickers](https://core.telegram.org/api/stickers#installing-stickersets). |\n\n### [](#story-links)Story links\n\nUsed to link to a [Telegram Story\u00a0\u00bb](https://core.telegram.org/api/stories), generated using the procedure [specified here\u00a0\u00bb](https://core.telegram.org/api/links#story-links).\n\n`t.me` syntax:\n\n```\nt.me/<username>/s/<story_id>\n```\n\n`tg:` syntax:\n\n```\ntg://resolve?domain=<username>&story=<story_id>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `username` | Required | Username of the user or channel that posted the story. |\n| `story_id` | Required | ID of the [Telegram Story to be fetched and viewed as described here\u00a0\u00bb](https://core.telegram.org/api/stories#watching-stories). |\n\n### [](#boost-links)Boost links\n\nUsed by users to [boost channels\u00a0\u00bb](https://core.telegram.org/api/boost), granting them the ability to post stories and further perks.\n\nUse the channel information to boost the channel as described [here\u00a0\u00bb](https://core.telegram.org/api/boost).\n\n`t.me` syntax (public channels):\n\n```\nt.me/boost/<username>\nt.me/<username>?boost\n```\n\n`t.me` syntax (private channels):\n\n```\nt.me/boost?c=<id>\nt.me/c/<id>?boost\n```\n\n`tg:` syntax (public channels):\n\n```\ntg://boost?domain=<username>\n```\n\n`tg:` syntax (private channels):\n\n```\ntg://boost?channel=<id>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `username` | Required for public links | Channel username. |\n| `channel` | Required for private links | Channel ID. |\n\n### [](#proxy-links)Proxy links\n\nUsed to share a proxy server that can be used to connect to Telegram.\n\n#### [](#mtproxy-links)MTProxy links\n\nUsed for [MTProxies\u00a0\u00bb](https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation).\n\n`t.me` syntax:\n\n```\nt.me/proxy?server=<server>&port=<port>&secret=<secret>\n```\n\n`tg:` syntax:\n\n```\ntg://proxy?server=<server>&port=<port>&secret=<secret>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `server` | Required | MTProxy server IP address or host |\n| `port` | Required | MTProxy server port |\n| `secret` | Required | MTProxy [secret\u00a0\u00bb](https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation) |\n\n#### [](#socks5-proxy-links)Socks5 proxy links\n\nUsed for socks5 proxies.\n\n`t.me` syntax:\n\n```\nt.me/socks?server=<server>&port=<port>&user=<user>&pass=<pass>\n```\n\n`tg:` syntax:\n\n```\ntg://socks?server=<server>&port=<port>&user=<user>&pass=<pass>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `server` | Required | Proxy server IP address or host |\n| `port` | Required | Proxy server port |\n| `user` | Optional | Proxy server username |\n| `pass` | Optional | Proxy server password |\n\n### [](#theme-links)Theme links\n\nUsed to [install themes\u00a0\u00bb](https://core.telegram.org/api/themes#installing-themes).\n\n`t.me` syntax:\n\n```\nt.me/addtheme/<name>\n```\n\n`tg:` syntax:\n\n```\ntg://addtheme?slug=<name>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `name` | Required | Theme short name used when [installing themes\u00a0\u00bb](https://core.telegram.org/api/themes#installing-themes) |\n\n### [](#wallpaper-links)Wallpaper links\n\nUsed to share and install chat backgrounds (wallpapers): see [here for more info on the various wallpaper and fill types\u00a0\u00bb](https://core.telegram.org/api/wallpapers).\n\n#### [](#image-wallpapers)[Image wallpapers](https://core.telegram.org/api/wallpapers#image-wallpapers)\n\nUsed for [image-based wallpapers\u00a0\u00bb](https://core.telegram.org/api/wallpapers#image-wallpapers).\n\n`t.me` syntax:\n\n```\nt.me/bg/<slug>?mode=<mode>\n```\n\n`tg:` syntax:\n\n```\ntg://bg?slug=<slug>&mode=<mode>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `slug` | Required | Wallpaper slug used to obtain the image file using [account.getWallPaper](https://core.telegram.org/method/account.getWallPaper). |\n| `mode` | Optional | A combination of `blur` and `motion` (joined by `+`) to enable blurring and/or parallax motion as specified in the [docs\u00a0\u00bb](https://core.telegram.org/api/wallpapers#image-wallpapers). |\n\n#### [](#solid-fill-wallpapers)Solid fill wallpapers\n\nUsed for [fill wallpapers\u00a0\u00bb](https://core.telegram.org/api/wallpapers#fill-wallpapers) with a [solid fill\u00a0\u00bb](https://core.telegram.org/api/wallpapers#solid-fill).\n\n`t.me` syntax:\n\n```\nt.me/bg/<hex_color>\n```\n\n`tg:` syntax:\n\n```\ntg://bg?color=<hex_color>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `hex_color` | Required | Fill color in hex RGB format. |\n\n#### [](#gradient-fill-wallpapers)Gradient fill wallpapers\n\nUsed for [fill wallpapers\u00a0\u00bb](https://core.telegram.org/api/wallpapers#fill-wallpapers) with a [gradient fill\u00a0\u00bb](https://core.telegram.org/api/wallpapers#gradient-fill).\n\n`t.me` syntax:\n\n```\nt.me/bg/<top_color>-<bottom_color>?rotation=<rotation>\n```\n\n`tg:` syntax:\n\n```\ntg://bg?gradient=<top_color>-<bottom_color>&rotation=<rotation>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `top_color` | Required | Top gradient color in hex RGB format. |\n| `bottom_color` | Required | Bottom gradient color in hex RGB format. |\n| `rotation` | Optional | Clockwise rotation angle of the gradient, in degrees; 0-359. Must be always divisible by 45, default to 0 if not set. |\n\n#### [](#freeform-gradient-fill-wallpapers)Freeform gradient fill wallpapers\n\nUsed for [fill wallpapers\u00a0\u00bb](https://core.telegram.org/api/wallpapers#fill-wallpapers) with a [freeform gradient fill\u00a0\u00bb](https://core.telegram.org/api/wallpapers#freeform-gradient-fill).\n\n`t.me` syntax:\n\n```\nt.me/bg/<hex_color1>~<hex_color2>~<hex_color3>\nt.me/bg/<hex_color1>~<hex_color2>~<hex_color3>~<hex_color4>\n```\n\n`tg:` syntax:\n\n```\ntg://bg?gradient=<hex_color1>~<hex_color2>~<hex_color3>\ntg://bg?gradient=<hex_color1>~<hex_color2>~<hex_color3>~<hex_color4>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `hex_color1` | Required | First gradient color in hex RGB format. |\n| `hex_color2` | Required | Second gradient color in hex RGB format. |\n| `hex_color3` | Required | Third gradient color in hex RGB format. |\n| `hex_color4` | Optional | Fourth gradient color in hex RGB format. |\n\n#### [](#solid-pattern-wallpapers)Solid pattern wallpapers\n\nUsed for [pattern wallpapers\u00a0\u00bb](https://core.telegram.org/api/wallpapers#pattern-wallpapers) with a [solid fill\u00a0\u00bb](https://core.telegram.org/api/wallpapers#solid-fill).\n\n`t.me` syntax:\n\n```\nt.me/bg/<slug>?intensity=<intensity>&bg_color=<bg_color>&mode=<mode>\n```\n\n`tg:` syntax:\n\n```\ntg://bg?slug=<slug>&intensity=<intensity>&bg_color=<bg_color>&mode=<mode>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `slug` | Required | Wallpaper slug used to obtain the pattern file using [account.getWallPaper](https://core.telegram.org/method/account.getWallPaper). |\n| `intensity` | Required | A value ranging from -100 to 100, used to combine the pattern with the fill [as specified in the docs](https://core.telegram.org/api/wallpapers#pattern-wallpapers). |\n| `bg_color` | Required | Fill color in hex RGB format. |\n| `mode` | Optional | `motion` to enable parallax motion as specified in the [docs](https://core.telegram.org/api/wallpapers#image-wallpapers). |\n\n#### [](#gradient-pattern-wallpapers)Gradient pattern wallpapers\n\nUsed for [pattern wallpapers\u00a0\u00bb](https://core.telegram.org/api/wallpapers#pattern-wallpapers) with a [gradient fill\u00a0\u00bb](https://core.telegram.org/api/wallpapers#gradient-fill).\n\n`t.me` syntax:\n\n```\nt.me/bg/<slug>?intensity=<intensity>&bg_color=<top_color>-<bottom_color>&rotation=<rotation>&mode=<mode>\n```\n\n`tg:` syntax:\n\n```\ntg://bg?slug=<slug>&intensity=<intensity>&bg_color=<top_color>-<bottom_color>&rotation=<rotation>&mode=<mode>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `slug` | Required | Wallpaper slug used to obtain the pattern file using [account.getWallPaper](https://core.telegram.org/method/account.getWallPaper). |\n| `intensity` | Required | A value ranging from -100 to 100, used to combine the pattern with the fill [as specified in the docs](https://core.telegram.org/api/wallpapers#pattern-wallpapers). |\n| `top_color` | Required | Top gradient color in hex RGB format. |\n| `bottom_color` | Required | Bottom gradient color in hex RGB format. |\n| `rotation` | Optional | Clockwise rotation angle of the gradient, in degrees; 0-359. Must be always divisible by 45, default to 0 if not set. |\n| `mode` | Optional | `motion` to enable parallax motion as specified in the [docs](https://core.telegram.org/api/wallpapers#image-wallpapers). |\n\n#### [](#freeform-gradient-pattern-wallpapers)Freeform gradient pattern wallpapers\n\nUsed for [pattern wallpapers\u00a0\u00bb](https://core.telegram.org/api/wallpapers#pattern-wallpapers) with a [freeform gradient fill\u00a0\u00bb](https://core.telegram.org/api/wallpapers#freeform-gradient-fill).\n\n`t.me` syntax:\n\n```\nt.me/bg/<slug>?intensity=<intensity>&bg_color=<hex_color1>~<hex_color2>~<hex_color3>&mode=<mode>\nt.me/bg/<slug>?intensity=<intensity>&bg_color=<hex_color1>~<hex_color2>~<hex_color3>~<hex_color4>&mode=<mode>\n```\n\n`tg:` syntax:\n\n```\ntg://bg?slug=<slug>&intensity=<intensity>&bg_color=<hex_color1>~<hex_color2>~<hex_color3>&mode=<mode>\ntg://bg?slug=<slug>&intensity=<intensity>&bg_color=<hex_color1>~<hex_color2>~<hex_color3>~<hex_color4>&mode=<mode>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `slug` | Required | Wallpaper slug used to obtain the pattern file using [account.getWallPaper](https://core.telegram.org/method/account.getWallPaper). |\n| `intensity` | Required | A value ranging from -100 to 100, used to combine the pattern with the fill [as specified in the docs](https://core.telegram.org/api/wallpapers#pattern-wallpapers). |\n| `hex_color1` | Required | First gradient color in hex RGB format. |\n| `hex_color2` | Required | Second gradient color in hex RGB format. |\n| `hex_color3` | Required | Third gradient color in hex RGB format. |\n| `hex_color4` | Optional | Fourth gradient color in hex RGB format. |\n| `mode` | Optional | `motion` to enable parallax motion as specified in the [docs](https://core.telegram.org/api/wallpapers#image-wallpapers). |\n\n### [](#bot-links)Bot links\n\nUsed to link to bots.\n\n`t.me` syntax:\n\n```\nt.me/<bot_username>?start=<parameter>\n```\n\n`tg:` syntax:\n\n```\ntg://resolve?domain=<bot_username>&start=<parameter>\n```\n\nNote that [referral links have a similar syntax, with a mandatory prefix in `parameter`](#referral-links).\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `bot_username` | Required | Bot username |\n| `parameter` | Optional | Start parameter, up to 64 [base64url](https://en.wikipedia.org/wiki/Base64#The_URL_applications) characters: if provided and the `bot_username` is indeed a bot, the text input bar should be replaced with a `Start` button (even if the user has already started the bot) that should invoke [messages.startBot](https://core.telegram.org/method/messages.startBot) with the appropriate `parameter` once clicked. Note that if the `bot_username` is equal to the [`premium_bot_username` configuration value\u00a0\u00bb](https://core.telegram.org/api/config#premium-bot-username), clicking on this link should immediately invoke [messages.startBot](https://core.telegram.org/method/messages.startBot) with the appropriate `parameter`. |\n\n### [](#group-channel-bot-links)Group/channel bot links\n\nUsed to add bots to groups or channels.  \nFirst of all, check that the `<bot_username>` indeed links to a bot.  \nThen, for group links:\n\n*   If the `admin` parameter is not provided:\n    *   Bring up a dialog selection of groups where the user can add members\n    *   Add the bot to the group\n    *   If a `parameter` is provided, invoke [messages.startBot](https://core.telegram.org/method/messages.startBot) with the appropriate `parameter`\n*   If the `admin` parameter is provided:\n    *   Bring up a dialog selection of groups where the user can add/edit admins\n    *   If the bot is already an admin of the group, combine existing admin rights with the admin rights in `admin`\n    *   Add the bot as admin/modify admin permissions to the new rights\n    *   If a `parameter` is provided, invoke [messages.startBot](https://core.telegram.org/method/messages.startBot) with the appropriate `parameter`\n\nFor channel links:\n\n*   Bring up a dialog selection of channels where the user can add/edit admins\n*   If the bot is already an admin of the channel, combine existing admin rights with the admin rights in `admin`\n*   Add the bot as admin/modify admin permissions to the new rights\n\n`t.me` syntax (groups):\n\n```\nt.me/<bot_username>?startgroup=<parameter>&admin=<permissions>\nt.me/<bot_username>?startgroup&admin=<permissions>\n```\n\n`tg:` syntax (groups):\n\n```\ntg://resolve?domain=<bot_username>&startgroup=<parameter>&admin=<permissions>\ntg://resolve?domain=<bot_username>&startgroup&admin=<permissions>\n```\n\n`t.me` syntax (channels):\n\n```\nt.me/<bot_username>?startchannel&admin=<permissions>\n```\n\n`tg:` syntax (channels):\n\n```\ntg://resolve?domain=<bot_username>&startchannel&admin=<permissions>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `bot_username` | Required | Bot username |\n| `parameter` | Optional for group links, absent in channel links | Start parameter, only for group links, up to 64 [base64url](https://en.wikipedia.org/wiki/Base64#The_URL_applications) characters: if provided and the `bot_username` is indeed a bot, [messages.startBot](https://core.telegram.org/method/messages.startBot) with the appropriate `parameter` should be invoked after adding the bot to the group. |\n| `admin` | Optional for group links, required for channel links | A combination of the following identifiers separated by `+`, each corresponding to the appropriate flag in the [chatAdminRights\u00a0\u00bb](https://core.telegram.org/constructor/chatAdminRights) constructor:  <br>\\- `change_info` - [chatAdminRights.change\\_info](https://core.telegram.org/constructor/chatAdminRights)  <br>\\- `post_messages` - [chatAdminRights.post\\_messages](https://core.telegram.org/constructor/chatAdminRights)  <br>\\- `edit_messages` - [chatAdminRights.edit\\_messages](https://core.telegram.org/constructor/chatAdminRights)  <br>\\- `delete_messages` - [chatAdminRights.delete\\_messages](https://core.telegram.org/constructor/chatAdminRights)  <br>\\- `restrict_members` - [chatAdminRights.ban\\_users](https://core.telegram.org/constructor/chatAdminRights)  <br>\\- `invite_users` - [chatAdminRights.invite\\_users](https://core.telegram.org/constructor/chatAdminRights)  <br>\\- `pin_messages` - [chatAdminRights.pin\\_messages](https://core.telegram.org/constructor/chatAdminRights)  <br>\\- `manage_topics` - [chatAdminRights.manage\\_topics](https://core.telegram.org/constructor/chatAdminRights)  <br>\\- `promote_members` - [chatAdminRights.add\\_admins](https://core.telegram.org/constructor/chatAdminRights)  <br>\\- `manage_video_chats` - [chatAdminRights.manage\\_call](https://core.telegram.org/constructor/chatAdminRights)  <br>\\- `anonymous` - [chatAdminRights.anonymous](https://core.telegram.org/constructor/chatAdminRights)  <br>\\- `manage_chat` - [chatAdminRights.other](https://core.telegram.org/constructor/chatAdminRights)  <br>\\- `post_stories` - [chatAdminRights.post\\_stories](https://core.telegram.org/constructor/chatAdminRights)  <br>\\- `edit_stories` - [chatAdminRights.edit\\_stories](https://core.telegram.org/constructor/chatAdminRights)  <br>\\- `delete_stories` - [chatAdminRights.delete\\_stories](https://core.telegram.org/constructor/chatAdminRights) |\n\n### [](#game-links)Game links\n\nUsed to share [games](https://core.telegram.org/api/bots/games).\n\nThese links should be handled as follows:\n\n*   Check if `bot_username` is indeed a bot username, if so then\n*   Bring up a dialog selection prompt\n*   Send the game to the selected dialog using an [inputMediaGame](https://core.telegram.org/constructor/inputMediaGame) with an [inputGameShortName](https://core.telegram.org/constructor/inputGameShortName) as specified in the [game docs](https://core.telegram.org/api/bots/games#sending-a-game).\n\n`t.me` syntax:\n\n```\nt.me/<bot_username>?game=<short_name>\n```\n\n`tg:` syntax:\n\n```\ntg://resolve?domain=<bot_username>&game=<short_name>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `bot_username` | Required | Username of the bot that owns the [game](https://core.telegram.org/api/bots/games) |\n| `short_name` | Required | Game short name |\n\n### [](#settings-links)Settings links\n\n#### [](#settings-link)Settings link\n\nUsed to bring the user to the app settings.\n\n`tg:` syntax:\n\n```\ntg://settings\n```\n\nNo parameters.\n\n#### [](#change-phone-number-link)Change phone number link\n\nUsed to bring the user to the phone number modification page, invoking [account.sendChangePhoneCode](https://core.telegram.org/method/account.sendChangePhoneCode) and [account.changePhone](https://core.telegram.org/method/account.changePhone).\n\n`tg:` syntax:\n\n```\ntg://settings/change_number\n```\n\nNo parameters.\n\n#### [](#active-sessions-link)Active sessions link\n\nUsed to bring the user to the active sessions page, calling [account.getAuthorizations](https://core.telegram.org/method/account.getAuthorizations).\n\n`tg:` syntax:\n\n```\ntg://settings/devices\n```\n\nNo parameters.\n\n#### [](#folder-settings-link)Folder settings link\n\nUsed to bring the user to the [folder settings](https://core.telegram.org/api/folders).\n\n`tg:` syntax:\n\n```\ntg://settings/folders\n```\n\nNo parameters.\n\n#### [](#language-settings-link)Language settings link\n\nUsed to bring the user to the language settings.\n\n`tg:` syntax:\n\n```\ntg://settings/language\n```\n\nNo parameters.\n\n#### [](#privacy-and-security-settings-link)Privacy and security settings link\n\nUsed to bring the user to the privacy and security settings.\n\n`tg:` syntax:\n\n```\ntg://settings/privacy\n```\n\nNo parameters.\n\n#### [](#autodelete-settings-link)Autodelete settings link\n\nUsed to bring the user to the message autodeletion settings.\n\n`tg:` syntax:\n\n```\ntg://settings/auto_delete\n```\n\nNo parameters.\n\n#### [](#profile-settings-link)Profile settings link\n\nUsed to bring the user to the profile settings menu.\n\n`tg:` syntax:\n\n```\ntg://settings/edit_profile\n```\n\nNo parameters.\n\n#### [](#theme-settings-link)Theme settings link\n\nUsed to bring the user to the theme settings section of the app.\n\n`tg:` syntax:\n\n```\ntg://settings/theme\n```\n\nNo parameters.\n\n### [](#login-code-link)Login code link\n\nContains the phone number verification code to use during [user authorization\u00a0\u00bb](https://core.telegram.org/api/auth).\n\n`t.me` syntax:\n\n```\nt.me/login/<code>\n```\n\n`tg:` syntax:\n\n```\ntg://login?code=<code>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `code` | Required | Login code. |\n\n### [](#invoice-links)Invoice links\n\nUsed to initiate [payment of an invoice\u00a0\u00bb](https://core.telegram.org/api/payments), generated using [payments.exportedInvoice](https://core.telegram.org/constructor/payments.exportedInvoice).\n\n`t.me` syntax:\n\n```\nt.me/invoice/<slug>\nt.me/$<slug>\n```\n\n`tg:` syntax:\n\n```\ntg://invoice?slug=<slug>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `slug` | Required | The invoice slug to be used [during payment\u00a0\u00bb](https://core.telegram.org/api/payments). |\n\n### [](#language-pack-links)Language pack links\n\nUsed to import custom language packs using [langpack.getLangPack](https://core.telegram.org/method/langpack.getLangPack).\n\n`t.me` syntax:\n\n```\nt.me/setlanguage/<slug>\n```\n\n`tg:` syntax:\n\n```\ntg://setlanguage?lang=<slug>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `slug` | Required | Name of language pack to import using [langpack.getLangPack](https://core.telegram.org/method/langpack.getLangPack) |\n\n### [](#telegram-passport-links)Telegram Passport links\n\nSee [the Telegram Passport documentation for parameters and usage\u00a0\u00bb](https://core.telegram.org/api/passport#uri-format).\n\n`tg:` syntax:\n\n```\ntg://passport?params\ntg://resolve?domain=telegrampassport&params\n```\n\n### [](#phone-confirmation-links)Phone confirmation links\n\nDifferent from [login code links](#login-code-link).  \nThese links are used to confirm ownership of the phone number, to prevent account deletion: see [the account deletion docs for more info on how to handle them\u00a0\u00bb](https://core.telegram.org/api/account-deletion).\n\n`t.me` syntax:\n\n```\nt.me/confirmphone?phone=<phone>&hash=<hash>\n```\n\n`tg:` syntax:\n\n```\ntg://confirmphone?phone=<phone>&hash=<hash>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `phone` | Required | Phone number |\n| `hash` | Required | Confirmation hash to handle [as described here\u00a0\u00bb](https://core.telegram.org/api/account-deletion) |\n\n### [](#premium-multigift-links)Premium multigift links\n\nUsed to bring the user to the screen used for gifting Telegram Premium subscriptions to friends, see [here for more info on gifting Telegram Premium to multiple users\u00a0\u00bb](https://core.telegram.org/api/giveaways).\n\nThis link is used to invite users to gift Premium subscription to other users, see [here\u00a0\u00bb](#premium-giftcode-links) for the different link type containing the actual giftcodes that can be used to import a gifted Telegram Premium subscription.\n\n`tg:` syntax:\n\n```\ntg://premium_multigift?ref=<referrer>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `referrer` | Optional | Used by official apps for analytics using [help.saveAppLog](https://core.telegram.org/method/help.saveAppLog). |\n\n### [](#premium-referrer-links)Premium referrer links\n\nUsed by official apps to show the [Telegram Premium](https://core.telegram.org/api/premium) subscription page.\n\n`tg:` syntax:\n\n```\ntg://premium_offer?ref=<referrer>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `referrer` | Optional | Used by official apps for analytics using [help.saveAppLog](https://core.telegram.org/method/help.saveAppLog) |\n\n### [](#premium-giftcode-links)Premium giftcode links\n\nUsed to process [Telegram Premium giftcode links](https://core.telegram.org/api/giveaways).\n\n`tg:` syntax:\n\n```\ntg://giftcode?slug=<slug>\n```\n\n`t.me` syntax:\n\n```\nt.me/giftcode/<slug>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `slug` | Optional | Gift code slug to be passed to [payments.checkGiftCode](https://core.telegram.org/method/payments.checkGiftCode) to obtain further info, and eventually to [payments.applyGiftCode](https://core.telegram.org/method/payments.applyGiftCode) to apply it. See the [giveaways](https://core.telegram.org/api/giveaways) documentation for more info. |\n\n### [](#qr-code-login-links)QR code login links\n\nUsed by the [QR code login flow\u00a0\u00bb](https://core.telegram.org/api/qr-login).\n\n`tg:` syntax:\n\n```\ntg://login?token=<base64encodedtoken>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `server` | Required | Base64URL-encoded [QR code login token](https://core.telegram.org/api/qr-login) |\n\n### [](#main-mini-app-links)Main Mini App links\n\nUsed to open [Main Mini Apps\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#main-mini-apps).\n\nIf the specified bot **does not** have a configured Main Mini App (i.e. the [user](https://core.telegram.org/constructor/user).`bot_has_main_app` flag will **not** be set), fall back to the behavior of [username links\u00a0\u00bb](#public-username-links).\n\nThe main mini app should be opened using [messages.requestMainWebView](https://core.telegram.org/method/messages.requestMainWebView).\n\n`t.me` syntax:\n\n```\nt.me/<bot_username>?startapp&mode=<mode>\nt.me/<bot_username>?startapp=<start_parameter>&mode=<mode>\n```\n\nNote that [Direct Mini App links](#direct-mini-app-links) have a similar syntax, with an additional `short_name` parameter to identify a specific Mini App owned by the bot.\n\n`tg:` syntax:\n\n```\ntg://resolve?domain=<bot_username>&startapp&mode=<mode>\ntg://resolve?domain=<bot_username>&startapp=<start_parameter>&mode=<mode>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `bot_username` | Required | Username of the bot that owns the [main mini app\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#main-mini-apps) |\n| `start_parameter` | Optional | If provided, should be passed to [messages.requestMainWebView](https://core.telegram.org/method/messages.requestMainWebView).`start_param` |\n| `mode` | Optional | If equal to `compact`, the [messages.requestMainWebView](https://core.telegram.org/method/messages.requestMainWebView).`compact` flag must be set.  <br>If equal to `fullscreen`, the [messages.requestMainWebView](https://core.telegram.org/method/messages.requestMainWebView).`fullscreen` flag must be set. |\n\n### [](#direct-mini-app-links)Direct mini app links\n\nUsed to share [Direct link Mini apps](https://core.telegram.org/api/bots/webapps#direct-link-mini-apps).\n\nThese links are different from [bot attachment menu deep links](#bot-attachment-or-side-menu-links), because they don't require the user to install an attachment menu, and a single bot can offer multiple named mini apps, distinguished by their `short_name`.\n\nThese links should be handled as specified in the [direct link Mini Apps documentation\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#direct-link-mini-apps).\n\n`t.me` syntax:\n\n```\nt.me/<bot_username>/<short_name>?startapp=<start_parameter>&mode=<mode>\n```\n\n`tg:` syntax:\n\n```\ntg://resolve?domain=<bot_username>&appname=<short_name>&startapp=<start_parameter>&mode=<mode>\n```\n\nNote that [Main Mini App links](#main-mini-app-links) have a similar syntax, _without_ a `short_name` parameter.\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `bot_username` | Required | Username of the bot that owns the [game](https://core.telegram.org/api/bots/games) |\n| `appname` | Required | Mini app short name, to pass to [inputBotAppShortName](https://core.telegram.org/constructor/inputBotAppShortName).`short_name` when invoking [messages.getBotApp](https://core.telegram.org/method/messages.getBotApp) |\n| `startapp` | Optional | `start_param` to pass to [messages.requestAppWebView](https://core.telegram.org/method/messages.requestAppWebView) |\n| `mode` | Optional | If equal to `compact`, the [messages.requestAppWebView](https://core.telegram.org/method/messages.requestAppWebView).`compact` flag must be set.  <br>If equal to `fullscreen`, the [messages.requestAppWebView](https://core.telegram.org/method/messages.requestAppWebView).`fullscreen` flag must be set. |\n\n### [](#bot-attachment-or-side-menu-links)Bot attachment or side menu links\n\nUsed to install and open a [bot attachment or side menu\u00a0\u00bb](https://core.telegram.org/api/bots/attach) in a certain chat.  \nFor all link types, clients should first [install the associated bot attachment or side menu entry as specified here\u00a0\u00bb](https://core.telegram.org/api/bots/attach), and if the user accepts the installation prompt, open the Mini App using the following logic, depending on the link subtype:\n\n#### [](#open-in-current-chat)Open in current chat\n\nAfter installing the attachment/side menu entry globally, opens the associated mini app using [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView) in the currently open chat, by passing it to the `peer` parameter of [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView).\n\nIf the current chat is not supported by the [attachMenuBot](https://core.telegram.org/constructor/attachMenuBot).`peer_types` field:\n\n*   If the user has just installed the attachment menu in the previous step, notify the user that the attachment menu was installed successfully.\n*   Otherwise, notify the user that the attachment menu webapp can't be opened in the specified chat.\n\n`t.me` syntax:\n\n```\nt.me/<bot_username>?startattach\nt.me/<bot_username>?startattach=<start_parameter>\n```\n\n`tg:` syntax:\n\n```\ntg://resolve?domain=<bot_username>&startattach\ntg://resolve?domain=<bot_username>&startattach=<start_parameter>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `bot_username` | Required | Username of the bot that owns the [attachment/side menu entry](https://core.telegram.org/api/bots/attach) |\n| `start_parameter` | Optional | If provided, should be passed to [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView).`start_param` |\n\n#### [](#open-in-specific-chat)Open in specific chat\n\nAfter installing the attachment/side menu entry globally, opens the associated mini app using [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView) in a specific chat (passed to the `peer` parameter of [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView)).\n\n`t.me` syntax:\n\n```\nt.me/<username>?attach=<bot_username>\nt.me/<username>?attach=<bot_username>&startattach=<start_parameter>\nt.me/+<phone_number>?attach=<bot_username>\nt.me/+<phone_number>?attach=<bot_username>&startattach=<start_parameter>\n```\n\n`tg:` syntax:\n\n```\ntg://resolve?domain=<username>&attach=<bot_username>\ntg://resolve?domain=<username>&attach=<bot_username>&startattach=<start_parameter>\ntg://resolve?phone=<phone_number>&attach=<bot_username>\ntg://resolve?phone=<phone_number>&attach=<bot_username>&startattach=<start_parameter>\n```\n\nIf the specified chat is not supported by the [attachMenuBot](https://core.telegram.org/constructor/attachMenuBot).`peer_types` field:\n\n*   If the user has just installed the attachment menu in the previous step, notify the user that the attachment menu was installed successfully.\n*   Otherwise, notify the user that the attachment menu webapp can't be opened in the specified chat.\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `username` | Required for [username links](#public-username-links) | Username of chat where to open the mini app |\n| `phone_number` | Required for [phone number links](#phone-number-links) | Phone number of private chat where to the open mini app |\n| `bot_username` | Required | Username of the bot that owns the [attachment/side menu](https://core.telegram.org/api/bots/attach) |\n| `start_parameter` | Optional | If provided, should be passed to [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView).`start_param` |\n\n#### [](#open-in-any-chat)Open in any chat\n\nAfter installing the attachment/side menu entry globally, opens a dialog selection form that will open the attachment menu mini app using [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView) in a specific chat (pass it to the `peer` parameter of [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView)).\n\n`t.me` syntax:\n\n```\nt.me/<bot_username>?startattach&choose=users+bots+groups+channels\nt.me/<bot_username>?startattach=<start_parameter>&choose=users+bots+groups+channels\n```\n\n`tg:` syntax:\n\n```\ntg://resolve?domain=<bot_username>&startattach&choose=users+bots+groups+channels\ntg://resolve?domain=<bot_username>&startattach=<start_parameter>&choose=users+bots+groups+channels\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `bot_username` | Required | Username of the bot that owns the [attachment/side menu](https://core.telegram.org/api/bots/attach) |\n| `start_parameter` | Optional | If provided, should be passed to [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView).`start_param` |\n| `choose` | Optional | A combination of `users`, `bots`, `groups`, `channels` separated by `+`: indicates the dialog types to show in the dialog selection popup: must be intersected with the dialog types contained in the [attachMenuBot](https://core.telegram.org/constructor/attachMenuBot).`peer_types` field before use. |\n\n### [](#stars-topup-link)Stars topup link\n\nUsed to ensure that the user has at least N [Telegram Stars](https://core.telegram.org/api/stars) on their balance.  \nIf not, this link must bring the user to the [Telegram Star topup page](https://core.telegram.org/api/stars#buying-or-gifting-stars).\n\n`tg:` syntax:\n\n```\ntg://stars_topup?balance=<star_count>&purpose=<purpose>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `star_count` | Required | Indicates the number of required stars to execute an action (integer, must be clamped between 1 and 1000000000000).  <br>If the current balance is higher than or equal to this value, instead of bringing up the topup form, a simple toast should be displayed, indicating that the user already has enough stars to complete the operation: this toast should also contain a \"Buy anyway\" button that must bring up the star topup form unconditionally. |\n| `purpose` | Optional | Contains a string indicating the reason why the topup is required, that must be shown on the topup page (if activated), possible values:<br><br>\\- `subs` - Buy **Stars** to keep your channel subscriptions.  <br>\\- `subadvance12` - Buy **Stars** to keep your subscriptions active for the next 12 months. |\n\n### [](#referral-links)Referral links\n\nUsed for [Affiliate programs](https://core.telegram.org/api/bots/referrals): when imported, all Telegram Star purchases made for digital products and subscriptions in the associated [mini app](https://core.telegram.org/api/bots/webapps) will also transfer a certain amount of Stars to the _creator_ of the link.\n\nSee [here \u00bb](https://core.telegram.org/api/bots/referrals) for more info on the full flow.\n\n`t.me` syntax:\n\n```\nt.me/<bot_username>?ref=<referrer>\nt.me/<bot_username>?start={prefix}<referrer>\n```\n\n`tg:` syntax:\n\n```\ntg://resolve?domain=<bot_username>&ref=<referrer>\ntg://resolve?domain=<bot_username>&start={prefix}<referrer>\n```\n\n`{prefix}` is any of the prefixes specified in the [starref\\_start\\_param\\_prefixes client configuration parameter \u00bb](https://core.telegram.org/api/config#starref-start-param-prefixes): it is mandatory for the second variants of referral links, to distinguish them from [bot links](#bot-links).\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `bot_username` | Required | Username of the bot that owns the [mini app](https://core.telegram.org/api/bots/webapps) |\n| `referrer` | Required | Referrer ID, to be passed to [contacts.resolveUsername](https://core.telegram.org/method/contacts.resolveUsername) |\n\n### [](#id-links)ID links\n\nID links are merely an abstraction offered by the [bot API](https://core.telegram.org/bots/api) to simplify construction of [inputMessageEntityMentionName](https://core.telegram.org/constructor/inputMessageEntityMentionName) and [inputKeyboardButtonUserProfile](https://core.telegram.org/constructor/inputKeyboardButtonUserProfile) constructors, and should be ignored by normal clients.\n\n`tg:` syntax:\n\n```\ntg://user?id=<id>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `id` | Required | User ID |\n\n### [](#emoji-links)Emoji links\n\nEmoji links are merely an abstraction offered by the [bot API](https://core.telegram.org/bots/api) to simplify construction of [messageEntityCustomEmoji](https://core.telegram.org/constructor/messageEntityCustomEmoji) constructors, and should be ignored by normal clients.\n\n`tg:` syntax:\n\n```\ntg://emoji?id=<id>\n```\n\nParameters:\n\n| Name | Optional | Description |\n| --- | --- | --- |\n| `id` | Required | [Custom emoji ID](https://core.telegram.org/api/custom-emoji) |\n\n### [](#unsupported-links)Unsupported links\n\nIf a client encounters a `tg:` link type not listed on this page, [help.getDeepLinkInfo](https://core.telegram.org/method/help.getDeepLinkInfo) should be invoked with just the `path` component of the link.\n\nSchema:\n\n```\nhelp.deepLinkInfoEmpty#66afa166 = help.DeepLinkInfo;\nhelp.deepLinkInfo#6a4ee832 flags:# update_app:flags.0?true message:string entities:flags.1?Vector<MessageEntity> = help.DeepLinkInfo;\n\n---functions---\n\nhelp.getDeepLinkInfo#3fedc75f path:string = help.DeepLinkInfo;\n```\n\nThe method may return formatted text, containing for example:\n\n*   A description of what the link does or,\n*   An explanation of why a certain link isn't supported by the app;\n\nAnd/or an invitation to upgrade to the latest version of the client app to be able to use the link: in this case, the result `update_app` flag will also be set, and the app should directly link to a store or attempt updating to the latest version.\n\nExample links that can be used for testing:\n\n*   `tg://need_update_for_some_feature?test=a`\n*   `tg:some_unsupported_feature?test=b`\n\nIn these cases, [help.getDeepLinkInfo](https://core.telegram.org/method/help.getDeepLinkInfo) should be invoked with the following parameters:\n\n*   `help.getDeepLinkInfo({path: \"need_update_for_some_feature\"})`\n*   `help.getDeepLinkInfo({path: \"some_unsupported_feature\"})`\n\nNote that this method should not be called for unrecognized `t.me` links, the usual HTTP link handling logic must be used, instead.",
    "url": "https://core.telegram.org/api/links"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/takeout",
      "title": "Takeout API",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Takeout API"
        },
        {
          "property": "og:description",
          "content": "Telegram's API allows users to export all of their information through the takeout API."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:21 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4117",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Takeout API\n\nTelegram's API allows users to export all of their information through the takeout API.\n\n```\naccount.takeout#4dba4501 id:long = account.Takeout;\n\ninputTakeoutFileLocation#29be5899 = InputFileLocation;\n\n---functions---\n\naccount.initTakeoutSession#8ef3eab0 flags:# contacts:flags.0?true message_users:flags.1?true message_chats:flags.2?true message_megagroups:flags.3?true message_channels:flags.4?true files:flags.5?true file_max_size:flags.5?long = account.Takeout;\n\ninvokeWithTakeout#aca9fd2e {X:Type} takeout_id:long query:!X = X;\n\naccount.finishTakeoutSession#1d2652ee flags:# success:flags.0?true = Bool;\n```\n\nUse [account.initTakeoutSession](https://core.telegram.org/method/account.initTakeoutSession) to initialize a takeout session: pass the appropriate flags to enable usage of the corresponding methods, as described below.\n\nWhen invoking the methods described below, each query must be wrapped using [invokeWithTakeout](https://core.telegram.org/method/invokeWithTakeout), with the `id` returned by [account.initTakeoutSession](https://core.telegram.org/method/account.initTakeoutSession).\n\nAfter finishing the export, terminate the session using [account.finishTakeoutSession](https://core.telegram.org/method/account.finishTakeoutSession).\n\n### [](#split-ranges)Split ranges\n\n```\nmessageRange#ae30253 min_id:int max_id:int = MessageRange;\n\n---functions---\n\nmessages.getSplitRanges#1cff7e08 = Vector<MessageRange>;\n\ninvokeWithMessagesRange#365275f2 {X:Type} range:MessageRange query:!X = X;\n```\n\nSome method calls require additional pagination using message ranges.\n\nFirst of all, obtain a list of message ranges by invoking [messages.getSplitRanges](https://core.telegram.org/method/messages.getSplitRanges) (wrapping it in an [invokeWithTakeout](https://core.telegram.org/method/invokeWithTakeout) as usual).\n\nThen, when invoking methods that require message range pagination, wrap the method using [invokeWithMessagesRange](https://core.telegram.org/method/invokeWithMessagesRange), before also wrapping it in an [invokeWithTakeout](https://core.telegram.org/method/invokeWithTakeout) as usual.\n\nStart by passing the first message range; continue passing the same message range while paginating using the [usual `offset_*`, `limit`, etc parameters](https://core.telegram.org/api/offsets); once there are no more results left, switch to the next message range, re-starting `offset_*`, `limit` pagination from the beginning.  \nRepeat until you've finished all the message ranges that were returned by [messages.getSplitRanges](https://core.telegram.org/method/messages.getSplitRanges).\n\n### [](#procedure)Procedure\n\nExample implementation: [tdesktop](https://github.com/telegramdesktop/tdesktop/tree/dev/Telegram/SourceFiles/export).\n\nHere's an overview of the steps required to export account information.\n\nAll requests must be wrapped in an [invokeWithTakeout](https://core.telegram.org/method/invokeWithTakeout) constructors, including [upload.getFile](https://core.telegram.org/method/upload.getFile) calls to save files.\n\nUnless otherwise specified, all requests do **not** require pagination using [split ranges](#split-ranges).\n\n*   If the user wants to download messages from chats, groups or channels:\n    \n    *   First of all, fetch and save the dialog list using [split ranges](#split-ranges) and [messages.getDialogs](https://core.telegram.org/method/messages.getDialogs); at the beginning of each split range, make an initial request with all offsets set to `0` and `limit=1` to fetch total dialog `count` to display a proper progress bar.\n        \n    *   [Request and save info about left channels and supergroups](#left-channels) if the user wants to export channel and group messages.\n        \n    *   For all dialogs, check if they match the dialog types chosen by the user, and if yes download all messages using [split ranges](#split-ranges) and [messages.getHistory](https://core.telegram.org/method/messages.getHistory); for each split range, make an initial request with all offsets set to `0` and `limit=1` to fetch the initial message count to display a proper progress bar.  \n        Use the single message returned by the initial `limit=1` request to also skip ranges that don't have any messages, because an empty `messages` vector or a single [messageEmpty](https://core.telegram.org/constructor/messageEmpty) is returned.  \n        If the user also chose to download only messages within a specific date interval, skip ranges whose:\n        \n        *   Last message (returned by that same initial `limit=1` call) has a `date` bigger than the top of the specified date interval.\n        *   First message (returned by a new call to [messages.getHistory](https://core.telegram.org/method/messages.getHistory) with `limit=1`, `offset_id=1`, `add_offset=-1`) has a `date` smaller than the bottom of the specified date interval.\n        \n        For each downloaded and saved message, also download and save all attached media, including [custom emojis](https://core.telegram.org/api/custom-emoji) present in messages and captions, respecting the per-file download filesize limits imposed by the user.\n        \n        If the user chose to download only their own messages, not messages sent by other users, use [messages.search](https://core.telegram.org/method/messages.search) with `peer` set to [inputPeerSelf](https://core.telegram.org/constructor/inputPeerSelf) instead of [messages.getHistory](https://core.telegram.org/method/messages.getHistory).\n        \n*   If the user wants to export their [stories](https://core.telegram.org/api/stories):\n    \n    *   Use [stories.getStoriesArchive](https://core.telegram.org/method/stories.getStoriesArchive) to fetch, download and store all posted stories, including [custom emojis](https://core.telegram.org/api/custom-emoji) present in captions.\n*   If the user wants to export personal info:\n    \n    *   Invoke and store the result of [users.getFullUser](https://core.telegram.org/method/users.getFullUser) with [inputUserSelf](https://core.telegram.org/constructor/inputUserSelf).\n*   If the user wants to export their own profile pictures:\n    \n    *   Invoke [photos.getUserPhotos](https://core.telegram.org/method/photos.getUserPhotos) to fetch the list of and download all profile pictures.\n*   If the user wants to export their contact list:\n    \n    *   See [here\u00a0\u00bb](#contacts)\n*   If the user wants to export their sessions:\n    \n    *   Invoke and store the result of [account.getAuthorizations](https://core.telegram.org/method/account.getAuthorizations) and [account.getWebAuthorizations](https://core.telegram.org/method/account.getWebAuthorizations)\n*   If the user wants to export any other data not mentioned above, like for example personal data related to new Telegram features, that do not have any specific takeout methods in the Takeout API yet.\n    \n    *   Use [upload.getFile](https://core.telegram.org/method/upload.getFile) with [inputTakeoutFileLocation](https://core.telegram.org/constructor/inputTakeoutFileLocation); this will download a JSON file that will contain all personal data related to features that do not have a specialized takeout method yet.\n\n#### [](#contacts)Contacts\n\n```\nsavedPhoneContact#1142bd56 phone:string first_name:string last_name:string date:int = SavedContact;\n\n---functions---\n\ncontacts.getSaved#82f1e39f = Vector<SavedContact>;\n```\n\nThis method does **not** require pagination using [message ranges](#split-ranges).\n\nUse [contacts.getSaved](https://core.telegram.org/method/contacts.getSaved) to export the full contact list, see [here\u00a0\u00bb](https://core.telegram.org/api/contacts#fetching-the-contact-list) for another alternative method that may be used to fetch the full list of all contacts with a Telegram account, without using a takeout session.\n\n#### [](#left-channels)Left channels\n\n```\nmessages.chats#64ff9fd5 chats:Vector<Chat> = messages.Chats;\nmessages.chatsSlice#9cd81144 count:int chats:Vector<Chat> = messages.Chats;\n\n---functions---\n\nchannels.getLeftChannels#8341ecc0 offset:int = messages.Chats;\n```\n\nThis method does **not** require pagination using [message ranges](#split-ranges).\n\nUse [channels.getLeftChannels](https://core.telegram.org/method/channels.getLeftChannels) to get a list of channels or supergroups we left.",
    "url": "https://core.telegram.org/api/takeout"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/bots/referrals",
      "title": "Affiliate programs",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Affiliate programs"
        },
        {
          "property": "og:description",
          "content": "Developers can open affiliate programs for their mini app \u2013 allowing content creators, other mini app developers and any Telegram user to promote it and earn commissions on purchases made by people they referred."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:24 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5759",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Affiliate programs\n\nDevelopers can open affiliate programs for their [mini app](https://core.telegram.org/api/bots/webapps) \u2013 allowing **content creators**, other **mini app developers** and **any Telegram user** to promote it and earn commissions on purchases made by people they referred.\n\n### [](#creating-an-affiliate-program)Creating an affiliate program\n\n```\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\nstarsAmount#bbb6b4a3 amount:long nanos:int = StarsAmount;\nstarRefProgram#dd0c66f2 flags:# bot_id:long commission_permille:int duration_months:flags.0?int end_date:flags.1?int daily_revenue_per_user:flags.2?StarsAmount = StarRefProgram;\n\n---functions---\n\nbots.getAdminedBots#b0711d83 = Vector<User>;\n\nbots.updateStarRefProgram#778b5ab3 flags:# bot:InputUser commission_permille:int duration_months:flags.0?int = StarRefProgram;\n```\n\nA mini app developer can invoke [bots.updateStarRefProgram](https://core.telegram.org/method/bots.updateStarRefProgram) to create, edit or delete the [affiliate program](https://telegram.org/tour/affiliate-programs) of [mini apps \u00bb](https://core.telegram.org/api/bots/webapps) they own.  \nOwned bots can be fetched using [bots.getAdminedBots](https://core.telegram.org/method/bots.getAdminedBots), or by checking the `bot_can_edit` flag of the associated [user](https://core.telegram.org/constructor/user).\n\nIf the `bot_can_edit` flag is set, graphical clients should display an \"Affiliate program\" option when editing the bot's profile, that can be used to create and edit the bot's affiliate program.  \nNote that all UI elements and functionality related to the creation of affiliate programs by bot owners must be hidden and disabled if the [`starref_program_allowed` client configuration parameter \u00bb](https://core.telegram.org/api/config#starref-program-allowed) is set and equal to false.\n\nWhen invoking [bots.updateStarRefProgram](https://core.telegram.org/method/bots.updateStarRefProgram), pass the following parameters:\n\n*   The `bot` parameter must contain the ID of the bot that owns the [mini app](https://core.telegram.org/api/bots/webapps).\n*   The `commission_permille` parameter specifies the permille commission rate: it indicates the share of Telegram Stars received by affiliates for every transaction made by users they referred inside of the mini app.  \n    The minimum and maximum values for this parameter are contained in the [starref\\_min\\_commission\\_permille](https://core.telegram.org/api/config#starref-min-commission-permille) and [starref\\_max\\_commission\\_permille](https://core.telegram.org/api/config#starref-max-commission-permille) client configuration parameters.\n*   The `duration_months` can be optionally populated, indicating the duration of the affiliate program; if not set, there is no expiration date.\n\nBoth the duration and the commission may only be raised after creation of the program: to lower them, the program must first be terminated and a new one created.\n\nTo end an affiliate program, pass `0` to `commission_permille`: around 24 hours after invoking the method (specifically, exactly at the time specified in [userFull](https://core.telegram.org/constructor/userFull).`starref_program`.`end_date`), the program will be terminated, invalidating all [created affiliate links](#becoming-an-affiliate).  \nA new affiliate program can only be created after termination of the current one (after [userFull](https://core.telegram.org/constructor/userFull).`starref_program`.`end_date`); invoking the method before the end\\_date will emit a `STARREF_AWAITING_END` RPC error.  \nNote that after termination, affiliates will still retain all commissions they earned before the program was terminated. Additionally, future purchases by users who were referred by affiliates that joined while the program was active will continue generating commissions for those affiliates until their originally specified commission period has elapsed.\n\nIf a bot has an active affiliate program, the [userFull](https://core.telegram.org/constructor/userFull).`starref_program` flag will be set, containing info about the referral program.  \nMini apps, channel owners and simple users can join the referral program as specified [here \u00bb](#becoming-an-affiliate).\n\n### [](#becoming-an-affiliate)Becoming an affiliate\n\n```\nstarsAmount#bbb6b4a3 amount:long nanos:int = StarsAmount;\nstarRefProgram#dd0c66f2 flags:# bot_id:long commission_permille:int duration_months:flags.0?int end_date:flags.1?int daily_revenue_per_user:flags.2?StarsAmount = StarRefProgram;\n\nuserFull#979d2376 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true voice_messages_forbidden:flags.20?true translations_disabled:flags.23?true stories_pinned_available:flags.26?true blocked_my_stories_from:flags.27?true wallpaper_overridden:flags.28?true contact_require_premium:flags.29?true read_dates_private:flags.30?true flags2:# sponsored_enabled:flags2.7?true can_view_revenue:flags2.9?true bot_can_manage_emoji_status:flags2.10?true id:long about:flags.1?string settings:PeerSettings personal_photo:flags.21?Photo profile_photo:flags.2?Photo fallback_photo:flags.22?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int ttl_period:flags.14?int theme_emoticon:flags.15?string private_forward_name:flags.16?string bot_group_admin_rights:flags.17?ChatAdminRights bot_broadcast_admin_rights:flags.18?ChatAdminRights premium_gifts:flags.19?Vector<PremiumGiftOption> wallpaper:flags.24?WallPaper stories:flags.25?PeerStories business_work_hours:flags2.0?BusinessWorkHours business_location:flags2.1?BusinessLocation business_greeting_message:flags2.2?BusinessGreetingMessage business_away_message:flags2.3?BusinessAwayMessage business_intro:flags2.4?BusinessIntro birthday:flags2.5?Birthday personal_channel_id:flags2.6?long personal_channel_message:flags2.6?int stargifts_count:flags2.8?int starref_program:flags2.11?StarRefProgram = UserFull;\n\npayments.suggestedStarRefBots#b4d5d859 flags:# count:int suggested_bots:Vector<StarRefProgram> users:Vector<User> next_offset:flags.0?string = payments.SuggestedStarRefBots;\n\nconnectedBotStarRef#19a13f71 flags:# revoked:flags.1?true url:string date:int bot_id:long commission_permille:int duration_months:flags.0?int participants:long revenue:long = ConnectedBotStarRef;\n\npayments.connectedStarRefBots#98d5ea1d count:int connected_bots:Vector<ConnectedBotStarRef> users:Vector<User> = payments.ConnectedStarRefBots;\n\n---functions---\n\npayments.getSuggestedStarRefBots#0d6b48f7 flags:# order_by_revenue:flags.0?true order_by_date:flags.1?true peer:InputPeer offset:string limit:int = payments.SuggestedStarRefBots;\n\npayments.connectStarRefBot#7ed5348a peer:InputPeer bot:InputUser = payments.ConnectedStarRefBots;\n\npayments.getConnectedStarRefBots#5869a553 flags:# peer:InputPeer offset_date:flags.2?int offset_link:flags.2?string limit:int = payments.ConnectedStarRefBots;\npayments.getConnectedStarRefBot#b7d998f0 peer:InputPeer bot:InputUser = payments.ConnectedStarRefBots;\n\npayments.editConnectedStarRefBot#e4fca4a3 flags:# revoked:flags.0?true peer:InputPeer link:string = payments.ConnectedStarRefBots;\n```\n\n[Mini apps](https://core.telegram.org/api/bots/webapps) with the [userFull](https://core.telegram.org/constructor/userFull).`starref_program` flag set have affiliate programs that the user may join, becoming an affiliate.  \nAn affiliate gets a commission of [starRefProgram](https://core.telegram.org/constructor/starRefProgram).`commission_permille`\u2030 [Telegram Stars](https://core.telegram.org/api/stars) for every mini app transaction made by users they refer, for `duration_months` months after your referral link is imported by any user, earning an estimated `daily_revenue_per_user * commission_permille / 1000` stars per day per referred user.\n\nUsers may obtain a list of suggested [mini apps](https://core.telegram.org/api/bots/webapps) with available affiliate programs using [payments.getSuggestedStarRefBots](https://core.telegram.org/method/payments.getSuggestedStarRefBots).\n\nTo become an affiliate, invoke [payments.connectStarRefBot](https://core.telegram.org/method/payments.connectStarRefBot), passing to `bot` the identifier of the mini app that we want to affiliate with, and to `peer` the affiliate peer, either:\n\n*   The current user ([inputPeerSelf](https://core.telegram.org/constructor/inputPeerSelf))\n*   A bot we own (one of the bots returned by [bots.getAdminedBots](https://core.telegram.org/method/bots.getAdminedBots))\n*   A channel we own (one of the channels returned by [channels.getAdminedPublicChannels](https://core.telegram.org/method/channels.getAdminedPublicChannels), locally filtering out only [channels](https://core.telegram.org/constructor/channel) with the `post_messages` [admin right](https://core.telegram.org/api/rights))\n\nThis will create a [referral link](https://core.telegram.org/api/links#referral-links) for the mini app passed in `bot`: the link will be contained in the `url` field of the returned [connectedBotStarRef](https://core.telegram.org/constructor/connectedBotStarRef) constructor.\n\nThese links can then be shared (responsibly): any Telegram user who starts the mini app for the first time after following a referral link will be considered a successful referral \u2013 and any purchases they make with Telegram Stars within the mini app will earn us commissions (as specified above), transferring [Stars](https://core.telegram.org/api/stars) to the star balance of the affiliate passed to `peer`.\n\nUse [payments.getConnectedStarRefBots](https://core.telegram.org/method/payments.getConnectedStarRefBots) to fetch all affiliations we have created for a certain affiliate `peer`.  \nUse [payments.getConnectedStarRefBot](https://core.telegram.org/method/payments.getConnectedStarRefBot) to fetch info about a specific affiliation we have created for a certain affiliate `peer` with a certain `bot`.  \nUse [payments.editConnectedStarRefBot](https://core.telegram.org/method/payments.editConnectedStarRefBot) to revoke an affiliation for a specific affiliate `peer`, revoking the specified [referral link \u00bb](https://core.telegram.org/api/links#referral-links) ([connectedBotStarRef](https://core.telegram.org/constructor/connectedBotStarRef).`url`).\n\nNote that all UI elements that would allow the user to join affiliate programs and becoming an affiliate must be hidden and disabled if the [`starref_connect_allowed` client configuration parameter \u00bb](https://core.telegram.org/api/config#starref-connect-allowed) is set and equal to false.\n\n### [](#importing-an-affiliate-link)Importing an affiliate link\n\n```\n---functions---\n\ncontacts.resolveUsername#725afbbc flags:# username:string referer:flags.0?string = contacts.ResolvedPeer;\n```\n\nWhen clicking on a [referral link \u00bb](https://core.telegram.org/api/links#referral-links), created by an affiliated user, channel or mini app as [specified here \u00bb](#becoming-an-affiliate), the `referrer` parameter must be passed to the `referer` parameter of [contacts.resolveUsername](https://core.telegram.org/method/contacts.resolveUsername).\n\nWhen opening [referral links \u00bb](https://core.telegram.org/api/links#referral-links), [contacts.resolveUsername](https://core.telegram.org/method/contacts.resolveUsername) must be **always** invoked, even if the client already has a cached [Peer](https://core.telegram.org/type/Peer) for the associated `username`.\n\nIf a `STARREF_EXPIRED` RPC error is returned by the method, an error indicating that the passed referral link is invalid must be shown to the user.",
    "url": "https://core.telegram.org/api/bots/referrals"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/bots/attach",
      "title": "Bot attachment menu and side menu entries",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Bot attachment menu and side menu entries"
        },
        {
          "property": "og:description",
          "content": "Bots can install attachment menu and side menu entries, offering conveniently accessible, versatile web apps."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:24 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3935",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Bot attachment menu and side menu entries\n\nBots can install attachment menu and side menu entries, offering conveniently accessible, versatile [mini apps](https://core.telegram.org/api/bots/webapps#attachment-menu-mini-apps).\n\nSchema:\n\n```\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\nattachMenuBotsBot#93bf667f bot:AttachMenuBot users:Vector<User> = AttachMenuBotsBot;\n\nattachMenuBot#d90d8dfe flags:# inactive:flags.0?true has_settings:flags.1?true request_write_access:flags.2?true show_in_attach_menu:flags.3?true show_in_side_menu:flags.4?true side_menu_disclaimer_needed:flags.5?true bot_id:long short_name:string peer_types:flags.3?Vector<AttachMenuPeerType> icons:Vector<AttachMenuBotIcon> = AttachMenuBot;\n\nattachMenuPeerTypeSameBotPM#7d6be90e = AttachMenuPeerType;\nattachMenuPeerTypeBotPM#c32bfa1a = AttachMenuPeerType;\nattachMenuPeerTypePM#f146d31f = AttachMenuPeerType;\nattachMenuPeerTypeChat#509113f = AttachMenuPeerType;\nattachMenuPeerTypeBroadcast#7bfbdefc = AttachMenuPeerType;\n\nattachMenuBotIcon#b2a7386b flags:# name:string icon:Document colors:flags.0?Vector<AttachMenuBotIconColor> = AttachMenuBotIcon;\n\nattachMenuBotIconColor#4576f3f0 name:string color:int = AttachMenuBotIconColor;\n\n\nupdateAttachMenuBots#17b7a20b = Update;\n\nattachMenuBotsNotModified#f1d88a5c = AttachMenuBots;\nattachMenuBots#3c4301c0 hash:long bots:Vector<AttachMenuBot> users:Vector<User> = AttachMenuBots;\n\n\n---functions---\n\nmessages.getAttachMenuBot#77216192 bot:InputUser = AttachMenuBotsBot;\n\nmessages.toggleBotInAttachMenu#69f59d69 flags:# write_allowed:flags.0?true bot:InputUser enabled:Bool = Bool;\n\nmessages.getAttachMenuBots#16fcc2cb hash:long = AttachMenuBots;\n```\n\nBots that have the `bot_attach_menu` flag set offer an attachment or side menu entry that can be added to the in-app attachment menu or main view side menu.\n\nUse [messages.getAttachMenuBot](https://core.telegram.org/method/messages.getAttachMenuBot) to get info about the attachment/side menu entry of a given bot, see the [attachMenuBot constructor page for more info\u00a0\u00bb](https://core.telegram.org/constructor/attachMenuBot).\n\nThe currently installed attachment/side menu list can be fetched using [messages.getAttachMenuBots](https://core.telegram.org/method/messages.getAttachMenuBots).\n\nUse [messages.toggleBotInAttachMenu](https://core.telegram.org/method/messages.toggleBotInAttachMenu) to enable or disable the attachment and/or side menu of a given bot (the entries that must be installed or uninstalled depend on the values of the [attachMenuBot](https://core.telegram.org/constructor/attachMenuBot).`show_in_attach_menu` and [attachMenuBot](https://core.telegram.org/constructor/attachMenuBot).`show_in_side_menu` flags).  \nChanges made using this method will trigger an [updateAttachMenuBots](https://core.telegram.org/constructor/updateAttachMenuBots) update in other clients, which should trigger a [messages.getAttachMenuBots](https://core.telegram.org/method/messages.getAttachMenuBots) call to fetch the full updated list of installed attachment/side menu entries.  \nThe attachment/side menu list should also be refreshed if the user changes the app's language in the settings.\n\nOnce an attachment/side menu is enabled for a certain user, the [user](https://core.telegram.org/constructor/user).`attach_menu_enabled` flag will be set _for the bot_, and the [attachMenuBot](https://core.telegram.org/constructor/attachMenuBot).`inactive` flag will be unset.\n\nClicking on the attachment/side menu entry should open the related [attachment menu mini app](https://core.telegram.org/api/bots/webapps#attachment-menu-mini-apps), see [here\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#attachment-menu-mini-apps) and [here\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#side-menu-mini-apps) for more info on the required steps.\n\nAttachment menus can be installed and opened through [attachment/side menu deep links](https://core.telegram.org/api/links#bot-attachment-or-side-menu-links).\n\nIn particular, when clicking on such a link, [messages.getAttachMenuBot](https://core.telegram.org/method/messages.getAttachMenuBot) should be invoked to check if the bot has an associated attachment/side menu entry, and if yes:\n\n*   If the [attachMenuBot](https://core.telegram.org/constructor/attachMenuBot).`inactive` flag:\n    *   ...is set, the attachment/side menu entry is not installed.  \n        Thus, before launching the mini app when clicking on a [attachment/side menu deep link](https://core.telegram.org/api/links#bot-attachment-or-side-menu-links), the client should show a prompt to the user, asking to add the mini app to the attachment/side menu.  \n        Note that if the [attachMenuBot](https://core.telegram.org/constructor/attachMenuBot).`side_menu_disclaimer_needed` flag is set, an additional mandatory checkbox to accept the [mini apps TOS](https://telegram.org/tos/mini-apps) and a disclaimer indicating that this Mini App is not affiliated to Telegram should be shown in the installation prompt.  \n        If the user accepts, invoke [messages.toggleBotInAttachMenu](https://core.telegram.org/method/messages.toggleBotInAttachMenu) with the `write_allowed` flag set and proceed to the next step, otherwise abort the process.\n    *   ...is not set, and the [attachMenuBot](https://core.telegram.org/constructor/attachMenuBot).`side_menu_disclaimer_needed` flag is still set, an additional mandatory checkbox to accept the [mini apps TOS](https://telegram.org/tos/mini-apps) and a disclaimer indicating that this Mini App is not affiliated to Telegram should be shown.  \n        If the user accepts, proceed to the next step, otherwise abort the process.\n*   Open the Mini App:\n    *   If the link is a [direct mini app link](https://core.telegram.org/api/links#direct-mini-app-links), open the Mini App regardless of the currently open Telegram chat (in fact, the Mini App should opened even if the client itself is minimized), as specified [here\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#direct-link-mini-apps).\n    *   For [attachment/side menu links](https://core.telegram.org/api/links#bot-attachment-or-side-menu-links), check that the attachment menu can be opened in the chosen chat type by checking the [attachMenuBot](https://core.telegram.org/constructor/attachMenuBot).`peer_types` field.\n        *   If the chosen chat is supported, open the [attachment menu mini app\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#attachment-menu-mini-apps) as specified [here\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#attachment-menu-mini-apps).\n        *   Otherwise:\n            *   If the user has just installed the attachment menu @ step 1, notify the user that the attachment menu was installed successfully.\n            *   Otherwise, notify the user that the attachment menu webapp can't be opened in the specified chat.",
    "url": "https://core.telegram.org/api/bots/attach"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/colors",
      "title": "Accent colors",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Accent colors"
        },
        {
          "property": "og:description",
          "content": "Telegram users and channels can change the accent color and background pattern of their profile page and their messages!"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:27 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4342",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Accent colors\n\nTelegram users and channels can change the accent color and background pattern of their profile page and their messages!\n\nSchema:\n\n```\npeerColor#b54b5acf flags:# color:flags.0?int background_emoji_id:flags.1?long = PeerColor;\n\nhelp.peerColorSet#26219a58 colors:Vector<int> = help.PeerColorSet;\nhelp.peerColorProfileSet#767d61eb palette_colors:Vector<int> bg_colors:Vector<int> story_colors:Vector<int> = help.PeerColorSet;\n\nhelp.peerColorOption#adec6ebe flags:# hidden:flags.0?true color_id:int colors:flags.1?help.PeerColorSet dark_colors:flags.2?help.PeerColorSet channel_min_level:flags.3?int group_min_level:flags.4?int = help.PeerColorOption;\n\nhelp.peerColorsNotModified#2ba1f5ce = help.PeerColors;\nhelp.peerColors#00f8ed08 hash:int colors:Vector<help.PeerColorOption> = help.PeerColors;\n\nstickerSet#2dd14edc flags:# archived:flags.1?true official:flags.2?true masks:flags.3?true emojis:flags.7?true text_color:flags.9?true channel_emoji_status:flags.10?true creator:flags.11?true installed_date:flags.0?int id:long access_hash:long title:string short_name:string thumbs:flags.4?Vector<PhotoSize> thumb_dc_id:flags.4?int thumb_version:flags.4?int thumb_document_id:flags.8?long count:int hash:int = StickerSet;\n\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\nchannel#fe4478bd flags:# creator:flags.0?true left:flags.2?true broadcast:flags.5?true verified:flags.7?true megagroup:flags.8?true restricted:flags.9?true signatures:flags.11?true min:flags.12?true scam:flags.19?true has_link:flags.20?true has_geo:flags.21?true slowmode_enabled:flags.22?true call_active:flags.23?true call_not_empty:flags.24?true fake:flags.25?true gigagroup:flags.26?true noforwards:flags.27?true join_to_send:flags.28?true join_request:flags.29?true forum:flags.30?true flags2:# stories_hidden:flags2.1?true stories_hidden_min:flags2.2?true stories_unavailable:flags2.3?true signature_profiles:flags2.12?true id:long access_hash:flags.13?long title:string username:flags.6?string photo:ChatPhoto date:int restriction_reason:flags.9?Vector<RestrictionReason> admin_rights:flags.14?ChatAdminRights banned_rights:flags.15?ChatBannedRights default_banned_rights:flags.18?ChatBannedRights participants_count:flags.17?int usernames:flags2.0?Vector<Username> stories_max_id:flags2.4?int color:flags2.7?PeerColor profile_color:flags2.8?PeerColor emoji_status:flags2.9?EmojiStatus level:flags2.10?int subscription_until_date:flags2.11?int = Chat;\n\n---functions---\n\nhelp.getPeerColors#da80f42f hash:int = help.PeerColors;\nhelp.getPeerProfileColors#abcfa9fd hash:int = help.PeerColors;\n\naccount.getDefaultBackgroundEmojis#a60ab9ce hash:long = EmojiList;\n\naccount.updateColor#7cefa15d flags:# for_profile:flags.1?true color:flags.2?int background_emoji_id:flags.0?long = Bool;\n\nchannels.updateColor#d8aa3671 flags:# for_profile:flags.1?true channel:InputChannel color:flags.2?int background_emoji_id:flags.0?long = Updates;\n```\n\nA [peerColor](https://core.telegram.org/constructor/peerColor) constructor contains a color palette ID (`id`) and a [custom emoji sticker\u00a0\u00bb](https://core.telegram.org/api/custom-emoji) (`background_emoji`) to be re-colored using the colors in the palette and spread out throughout the palette, generating a background that can be used in the profile page of a user, and in other places throughout the UI, namely in in webpage preview message frames and message accent colors when quoting or replying to messages sent by a channel or user that enabled a custom message accents.\n\nThe color palettes is identified by an `id` (not by an RGB24 color); use [help.getPeerProfileColors](https://core.telegram.org/method/help.getPeerProfileColors) to obtain all color palettes (represented by [help.peerColorOption](https://core.telegram.org/constructor/help.peerColorOption) constructors) that can be used in the background of a profile page, and use [help.getPeerColors](https://core.telegram.org/method/help.getPeerColors) to obtain all color palettes that can be used in message accents.\n\nA color palette is represented by a [help.peerColorOption](https://core.telegram.org/constructor/help.peerColorOption) constructor: the palette ID is contained in `color_id`; the palette for light mode is contained in the `colors` field, the palette for dark mode is contained in the `dark_colors` field.  \nIf the `hidden` flag is set it should not be displayed as an option to the user when choosing a palette to use in the profile page or in message accents.\n\nThe actual colors that should be used are contained either in a [help.peerColorSet](https://core.telegram.org/constructor/help.peerColorSet) (returned by [help.getPeerColors](https://core.telegram.org/method/help.getPeerColors), containing a palette for message accents) or in a [help.peerColorProfileSet](https://core.telegram.org/constructor/help.peerColorProfileSet) (returned by [help.getPeerColors](https://core.telegram.org/method/help.getPeerColors) containing a palette for profile pages), see the relative constructor pages for more info.\n\nUse [account.getDefaultBackgroundEmojis](https://core.telegram.org/method/account.getDefaultBackgroundEmojis) to obtain a list of IDs of [custom emojis](https://core.telegram.org/api/custom-emoji) that can be used in a palette background.\n\nAll custom emojis in [custom emoji stickersets\u00a0\u00bb](https://core.telegram.org/api/custom-emoji) with `text_color` flag set can also be used for the same purpose.\n\nUse [account.updateColor](https://core.telegram.org/method/account.updateColor) to update the color palette of the current account's message accents and/or profile page; note that the current account must be subscribed to [Telegram Premium](https://core.telegram.org/api/premium) in order to call the method.  \nUse [channels.updateColor](https://core.telegram.org/method/channels.updateColor) to update the color palette of a channel/supergroup's profile page accents, or a channel's message accent.\n\nNote that channels/supergroups can use a message accent palette or profile palette only after reaching at least the [boost level](https://core.telegram.org/api/boost) specified in the `channel_min_level`/`group_min_level` field of the [help.peerColorOption](https://core.telegram.org/constructor/help.peerColorOption) constructor for the chosen palette.\n\nAdditionally, to change **profile** palettes, channels/supergroups must **also** reach at least the [boost level](https://core.telegram.org/api/boost) specified in the [`channel_profile_bg_icon_level_min`\u00a0\u00bb](https://core.telegram.org/api/config#channel-profile-bg-icon-level-min)/[`group_profile_bg_icon_level_min`\u00a0\u00bb](https://core.telegram.org/api/config#group-profile-bg-icon-level-min) config parameters.\n\nThe chosen message accent palette will be visible to other users in the [channel](https://core.telegram.org/constructor/channel).`color` and [user](https://core.telegram.org/constructor/user).`color` fields; changing it will emit an [updateChannel](https://core.telegram.org/constructor/updateChannel)/[updateUser](https://core.telegram.org/constructor/updateUser) update.\n\nThe chosen profile palettes will be visible in the [user](https://core.telegram.org/constructor/user).`profile_color` and [channel](https://core.telegram.org/constructor/channel).`profile_color` fields; changing it will emit an [updateUser](https://core.telegram.org/constructor/updateUser) update/[updateChannel](https://core.telegram.org/constructor/updateChannel) update.\n\nIf no palette is specified for a peer, a random color from red, orange, violet, green, cyan, blue, pink (eventually tweaked according to the client's theme) must be chosen locally as message accent palette once for every met peer.",
    "url": "https://core.telegram.org/api/colors"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/stories",
      "title": "Stories",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Stories"
        },
        {
          "property": "og:description",
          "content": "Telegram users and channels can easily post and view stories through the API."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:25 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "16306",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Stories\n\nTelegram users and channels can easily post and view [stories](https://telegram.org/blog/stories) through the API.\n\n### [](#posting-stories)Posting stories\n\nSchema:\n\n```\ninputPeerSelf#7da07ec9 = InputPeer;\ninputPeerChannel#27bcbbfc channel_id:long access_hash:long = InputPeer;\n\nboolFalse#bc799737 = Bool;\nboolTrue#997275b5 = Bool;\n\nupdateStory#75b3b798 peer:Peer story:StoryItem = Update;\n\nupdateStoryID#1bf335b9 id:int random_id:long = Update;\n\n---functions---\n\nstories.canSendStory#c7dfdfdd peer:InputPeer = Bool;\nstories.sendStory#e4e6694b flags:# pinned:flags.2?true noforwards:flags.4?true fwd_modified:flags.7?true peer:InputPeer media:InputMedia media_areas:flags.5?Vector<MediaArea> caption:flags.0?string entities:flags.1?Vector<MessageEntity> privacy_rules:Vector<InputPrivacyRule> random_id:long period:flags.3?int fwd_from_id:flags.6?InputPeer fwd_from_story:flags.6?int = Updates;\n\nstories.getChatsToSend#a56a8b60 = messages.Chats;\n```\n\nBefore posting a story, clients should invoke [stories.canSendStory](https://core.telegram.org/method/stories.canSendStory), to make sure they can send stories to the specified `peer` (which can be [inputPeerSelf](https://core.telegram.org/constructor/inputPeerSelf) to send the story as a normal user and [inputPeerChannel](https://core.telegram.org/constructor/inputPeerChannel) to send a story as a channel or supergroup).\n\nUse [stories.getChatsToSend](https://core.telegram.org/method/stories.getChatsToSend) to obtain a list of channels/supergroups where the user can post stories; [stories.canSendStory](https://core.telegram.org/method/stories.canSendStory) must still be used before uploading a story to make sure no other limit was reached, as described in the [main documentation\u00a0\u00bb](https://core.telegram.org/api/stories#posting-stories). Note that in order to obtain permission to post stories as a channel/supergroup, it must be boosted, first, see [here\u00a0\u00bb](https://core.telegram.org/api/boost) for more info.\n\n[stories.canSendStory](https://core.telegram.org/method/stories.canSendStory) returns [boolTrue](https://core.telegram.org/constructor/boolTrue) only if:\n\n*   If we're trying to send a story as a channel/supergroup:\n    *   The current user is an administrator of the channel/supergroup and has [`post_stories` admin rights](https://core.telegram.org/constructor/chatAdminRights); otherwise, a `CHAT_ADMIN_REQUIRED` error is returned.\n    *   AND the channel/supergroup has [received enough boosts to post the story\u00a0\u00bb](https://core.telegram.org/api/boost); otherwise, a `BOOSTS_REQUIRED` error is returned.\n*   If we're trying to send a story as the current user:\n    *   The user can post stories according to the [`stories_posting` client configuration parameter](https://core.telegram.org/api/config#stories-posting); otherwise, a `PREMIUM_ACCOUNT_REQUIRED` error is returned.\n    *   AND The user hasn't hit the maximum active stories limit specified by the [`story_expiring_limit_*` client configuration parameters](https://core.telegram.org/api/config#story-expiring-limit-default); otherwise a `STORIES_TOO_MUCH` error is returned, indicating that the user should buy a [Premium](https://core.telegram.org/api/premium) subscription, delete an active story, or wait for the oldest story to expire.\n    *   AND The user hasn't hit the weekly story limit specified by the [`stories_sent_weekly_limit_*` client configuration parameters](https://core.telegram.org/api/config#stories-sent-weekly-limit-default); otherwise, a `STORY_SEND_FLOOD_WEEKLY_%d` error is returned, indicating the number of seconds to wait before posting a new story.\n    *   AND The user hasn't hit the monthly story limit specified by the [`stories_sent_monthly_limit_*` client configuration parameters](https://core.telegram.org/api/config#stories-sent-monthly-limit-default); otherwise, a `STORY_SEND_FLOOD_MONTHLY_%d` error is returned, indicating the number of seconds to wait before posting a new story.\n\nAfter checking if a story can be posted, the client may invoke [stories.sendStory](https://core.telegram.org/method/stories.sendStory) to upload the story.  \nNote that if any of the conditions changes in the period between the call to [stories.canSendStory](https://core.telegram.org/method/stories.canSendStory) and [stories.sendStory](https://core.telegram.org/method/stories.sendStory) (for example, the user uploads a story from another client, reaching the weekly limit), the same errors listed above for [stories.canSendStory](https://core.telegram.org/method/stories.canSendStory) will be emitted by [stories.sendStory](https://core.telegram.org/method/stories.sendStory).\n\nThe parameters of [stories.sendStory](https://core.telegram.org/method/stories.sendStory) are fully described on the [method page\u00a0\u00bb](https://core.telegram.org/method/stories.sendStory), here are some of the most important ones:\n\n*   `peer`: The peer to send the story as.\n*   `media`: The story media (a vertical photo or a vertical video, max 30 MB).\n*   `media_areas`: [Media areas](https://core.telegram.org/api/stories#media-areas) associated to the story, see [here\u00a0\u00bb](https://core.telegram.org/api/stories#media-areas) for more info.\n*   `privacy_rules`: A set of [privacy rules\u00a0\u00bb](https://core.telegram.org/api/privacy#privacy-rules) for the story as an array of [InputPrivacyRule](https://core.telegram.org/type/InputPrivacyRule) constructors, indicating who can or can't view the story.\n*   `expire`: Period after which the story is moved to [archive](#pinned-or-archived-stories) (and [to the profile](#pinned-or-archived-stories) if `pinned` is set), in seconds; must be one of `6 * 3600`, `12 * 3600`, `86400`, or `2 * 86400` for Telegram Premium users, and `86400` otherwise.\n*   `pinned`: Whether to also [add the story to the profile](#pinned-or-archived-stories) automatically upon expiration. If not set, the story will only be added to the [archive](#pinned-or-archived-stories).\n*   `caption` and `entities`: The story caption, and related [styled text entities](https://core.telegram.org/api/entities); note that the story caption length is limited by the [`story_caption_length_limit_*`\u00a0\u00bb](https://core.telegram.org/api/config#story-caption-length-limit-default) config keys, and story entities should only be sent and displayed according to the value of the [stories\\_entities\u00a0\u00bb](https://core.telegram.org/api/config#stories-entities) config key.\n\nOnce a story is successfully uploaded, an [updateStoryID](https://core.telegram.org/constructor/updateStoryID) will be returned, indicating the story ID (`id`) that was attributed to the story (like for messages, `random_id` indicates the `random_id` that was passed to [stories.sendStory](https://core.telegram.org/method/stories.sendStory): this way, you can tell which story was assigned a specific `id` by checking which [stories.sendStory](https://core.telegram.org/method/stories.sendStory) call has the returned `random_id`).\n\nAlso, posting a story will emit an [updateStory](https://core.telegram.org/constructor/updateStory) both for us, and for our subscribers/contacts (even if they have [hidden](#hiding-stories-of-other-users) our stories).\n\nAdditionally, a message containing a [messageMediaStory](https://core.telegram.org/constructor/messageMediaStory) with the `via_mention` flag coming from the story poster will also be generated automatically if the poster mentions us in the story's caption.\n\n[Mini apps](https://core.telegram.org/api/bots/webapps) may also request to share a story on the user's profile using the [web\\_app\\_share\\_to\\_story event \u00bb](https://core.telegram.org/api/web-events#web-app-share-to-story).\n\n#### [](#editing-stories)Editing stories\n\n```\ninputFile#f52ff27f id:long parts:int name:string md5_checksum:string = InputFile;\ninputFileBig#fa4f0bb5 id:long parts:int name:string = InputFile;\ninputFileStoryDocument#62dc8b48 id:InputDocument = InputFile;\n\ninputMediaUploadedPhoto#1e287d04 flags:# spoiler:flags.2?true file:InputFile stickers:flags.0?Vector<InputDocument> ttl_seconds:flags.1?int = InputMedia;\ninputMediaUploadedDocument#5b38c6c1 flags:# nosound_video:flags.3?true force_file:flags.4?true spoiler:flags.5?true file:InputFile thumb:flags.2?InputFile mime_type:string attributes:Vector<DocumentAttribute> stickers:flags.0?Vector<InputDocument> ttl_seconds:flags.1?int = InputMedia;\n\ninputMediaPhoto#b3ba0635 flags:# spoiler:flags.1?true id:InputPhoto ttl_seconds:flags.0?int = InputMedia;\ninputMediaDocument#33473058 flags:# spoiler:flags.2?true id:InputDocument ttl_seconds:flags.0?int query:flags.1?string = InputMedia;\n\n---functions---\n\nstories.editStory#b583ba46 flags:# peer:InputPeer id:int media:flags.0?InputMedia media_areas:flags.3?Vector<MediaArea> caption:flags.1?string entities:flags.1?Vector<MessageEntity> privacy_rules:flags.2?Vector<InputPrivacyRule> = Updates;\n```\n\nA story may also be edited using [stories.editStory](https://core.telegram.org/method/stories.editStory).\n\n**Note**: [usually](https://core.telegram.org/api/files#editing-uploaded-files), when editing just the [DocumentAttribute](https://core.telegram.org/type/DocumentAttribute)s of files (like the file name through [documentAttributeFilename](https://core.telegram.org/constructor/documentAttributeFilename), the timestamp of a video thumbnail through [documentAttributeVideo](https://core.telegram.org/constructor/documentAttributeVideo).`preload_prefix_size`, etc) without editing the media itself, a full download+reupload of the underlying media is required, as the attributes are baked into the media and cannot be modified through [inputMediaDocument](https://core.telegram.org/constructor/inputMediaDocument) (unlike some other attributes like `spoiler`, which may be edited without a reupload, simply by passing the old media in [inputMediaDocument](https://core.telegram.org/constructor/inputMediaDocument).`id` and tweaking the appropriate flags of [inputMediaDocument](https://core.telegram.org/constructor/inputMediaDocument)).\n\nHowever, a full download+reupload can be avoided **just for video stories**, when editing only the [documentAttributeVideo](https://core.telegram.org/constructor/documentAttributeVideo).`video_start_ts` attribute: in this case, [inputMediaUploadedDocument](https://core.telegram.org/constructor/inputMediaUploadedDocument) should be used, passing to `file` an [inputFileStoryDocument](https://core.telegram.org/constructor/inputFileStoryDocument) with the old story media instead of the re-uploaded [inputFile](https://core.telegram.org/constructor/inputFile), and populating the remaining fields and attributes with exactly the same values used previously, except for the [documentAttributeVideo](https://core.telegram.org/constructor/documentAttributeVideo).`video_start_ts` attribute, which should contain the new value.\n\n#### [](#pinned-or-archived-stories)Pinned or archived stories\n\n```\nstories.stories#63c3dd0a flags:# count:int stories:Vector<StoryItem> pinned_to_top:flags.0?Vector<int> chats:Vector<Chat> users:Vector<User> = stories.Stories;\n\n---functions---\n\nstories.togglePinned#9a75a1ef peer:InputPeer id:Vector<int> pinned:Bool = Vector<int>;\nstories.togglePinnedToTop#b297e9b peer:InputPeer id:Vector<int> = Bool;\n\nstories.getStoriesArchive#b4352016 peer:InputPeer offset_id:int limit:int = stories.Stories;\n\nstories.getPinnedStories#5821a5dc peer:InputPeer offset_id:int limit:int = stories.Stories;\n```\n\nAfter an active story expires, it is automatically added to the story archive: stories in the story archive are only visible to the poster, or to channel/supergroup admins with [`edit_stories` admin rights](https://core.telegram.org/constructor/chatAdminRights) rights.\n\nUse [stories.getStoriesArchive](https://core.telegram.org/method/stories.getStoriesArchive) to fetch stories in the story archive.\n\nArchived stories may then be pinned on the profile, where they may be fetched using [stories.getPinnedStories](https://core.telegram.org/method/stories.getPinnedStories) by users who explicitly open your profile: use [stories.togglePinned](https://core.telegram.org/method/stories.togglePinned) to pin or unpin one or more stories to your profile.\n\nStories may also be autopinned upon expiration if the `pinned` flag is set [when posting them](#posting-stories).\n\nAdditionally, stories pinned to a profile may **also** be pinned **to the top of the profile** using [stories.togglePinnedToTop](https://core.telegram.org/method/stories.togglePinnedToTop); stories that are pinned to the top of the profile (max [stories\\_pinned\\_to\\_top\\_count\\_max](https://core.telegram.org/api/config#stories-pinned-to-top-count-max)) should be displayed first when opening the profile.  \nStories pinned to the top of the profile will be returned first when invoking [stories.getPinnedStories](https://core.telegram.org/method/stories.getPinnedStories) with `offset_id=0`, and their IDs will also be contained in [stories.stories](https://core.telegram.org/constructor/stories.stories).`pinned_to_top`.\n\n#### [](#deleting-stories)Deleting stories\n\n```\n---functions---\n\nstories.deleteStories#ae59db5f peer:InputPeer id:Vector<int> = Vector<int>;\n```\n\nUse the [stories.deleteStories](https://core.telegram.org/method/stories.deleteStories) method to delete one or more active, pinned or archived stories by their IDs, passed in `id`.\n\n#### [](#preventing-users-from-seeing-your-stories)Preventing users from seeing your stories\n\nUsers may be individually blocked from seeing all of your stories by adding them to the [story blocklist\u00a0\u00bb](https://core.telegram.org/api/block).\n\n### [](#watching-stories)Watching stories\n\n```\nstoryItem#79b26a24 flags:# pinned:flags.5?true public:flags.7?true close_friends:flags.8?true min:flags.9?true noforwards:flags.10?true edited:flags.11?true contacts:flags.12?true selected_contacts:flags.13?true out:flags.16?true id:int date:int from_id:flags.18?Peer fwd_from:flags.17?StoryFwdHeader expire_date:int caption:flags.0?string entities:flags.1?Vector<MessageEntity> media:MessageMedia media_areas:flags.14?Vector<MediaArea> privacy:flags.2?Vector<PrivacyRule> views:flags.3?StoryViews sent_reaction:flags.15?Reaction = StoryItem;\nstoryItemSkipped#ffadc913 flags:# close_friends:flags.8?true id:int date:int expire_date:int = StoryItem;\nstoryItemDeleted#51e6ee4f id:int = StoryItem;\n\npeerStories#9a35e999 flags:# peer:Peer max_read_id:flags.0?int stories:Vector<StoryItem> = PeerStories;\n\nstoriesStealthMode#712e27fd flags:# active_until_date:flags.0?int cooldown_until_date:flags.1?int = StoriesStealthMode;\n\nstories.allStories#6efc5e81 flags:# has_more:flags.0?true count:int state:string peer_stories:Vector<PeerStories> chats:Vector<Chat> users:Vector<User> stealth_mode:StoriesStealthMode = stories.AllStories;\nstories.allStoriesNotModified#1158fe3e flags:# state:string stealth_mode:StoriesStealthMode = stories.AllStories;\n\nstories.peerStories#cae68768 stories:PeerStories chats:Vector<Chat> users:Vector<User> = stories.PeerStories;\n\nupdateReadStories#f74e932b peer:Peer max_id:int = Update;\n\n---functions---\n\nstories.getAllStories#eeb0d625 flags:# next:flags.1?true hidden:flags.2?true state:flags.0?string = stories.AllStories;\n\nstories.getStoriesByID#5774ca74 peer:InputPeer id:Vector<int> = stories.Stories;\nstories.getPeerStories#2c4ada50 peer:InputPeer = stories.PeerStories;\n\nstories.readStories#a556dac8 peer:InputPeer max_id:int = Vector<int>;\nstories.incrementStoryViews#b2028afb peer:InputPeer id:Vector<int> = Bool;\n\nstories.getAllReadPeerStories#9b5ae7f9 = Updates;\nstories.getPeerMaxIDs#535983c3 id:Vector<InputPeer> = Vector<int>;\n```\n\nActive stories of contacts, subscribed channels/supergroups and the [changelog user](https://core.telegram.org/api/config#stories-changelog-user-id) should be shown in the action bar of the homescreen.  \nUse [stories.getAllStories](https://core.telegram.org/method/stories.getAllStories) to fetch the full list of active stories.\n\nOptionally, the `hidden` flag can be set to fetch the [hidden stories to be shown in the archived tab](#hiding-stories-of-other-users), instead of the main story list.\n\nPagination using this method is a bit different from usual: a `state` string is used to maintain the pagination state.\n\n*   Initially, neither the `next` or `state` flags should be set: upon completion of the RPC call, a new `state` string is returned and should be stored locally, associated either to the main or hidden story list (depending on the value of `hidden` we passed); pass the locally stored `state` to all future calls of the method.\n*   If more stories are available, the returned [stories.allStories](https://core.telegram.org/constructor/stories.allStories).`has_more` flag will be set: in this case, the client should re-call the method with the newly returned `state` **and** the `next` flag set to fetch a new `state` and the remaining stories from the chosen story list; the process should be repeated until no more stories are available (`has_more` will **not** be set).\n\nOnce the full story list is fetched, [stories.allStories](https://core.telegram.org/constructor/stories.allStories) can be called with the stored `state` **without** setting the `next` flag to check for updates in an active story list: if no changes have occurred since our last call, [stories.allStoriesNotModified](https://core.telegram.org/constructor/stories.allStoriesNotModified) is returned, otherwise [stories.allStories](https://core.telegram.org/constructor/stories.allStories) is returned (possibly requiring further pagination as described above).  \nNote that a change is currently only defined as an addition or removal (i.e. by moving it to the hidden list or vice versa) of a peer to/from a story list, not as a new story being posted; those changes are received as simple [updateStory](https://core.telegram.org/constructor/updateStory) updates.\n\nChanges to the active stories list are contained in the [stories.allStories](https://core.telegram.org/constructor/stories.allStories).`peer_stories` field: this field contains a vector of [peerStories](https://core.telegram.org/constructor/peerStories) constructors, one for each peer, containing the peer ID, the ID of the maximum read story (if any), and a list of [StoryItem](https://core.telegram.org/type/StoryItem) constructors of type:\n\n*   [storyItem](https://core.telegram.org/constructor/storyItem) - Represents an active story\n*   [storyItemSkipped](https://core.telegram.org/constructor/storyItemSkipped) - Represents an active story, whose full information was omitted for space and performance reasons; use [stories.getStoriesByID](https://core.telegram.org/method/stories.getStoriesByID) to fetch full info about the skipped story/stories when and if needed.\n*   [storyItemDeleted](https://core.telegram.org/constructor/storyItemDeleted) - Represents a previously active story, that was now deleted\n\nUse [stories.getPeerStories](https://core.telegram.org/method/stories.getPeerStories) may also be used to fetch the full active story list of a specific peer.\n\nUse [stories.readStories](https://core.telegram.org/method/stories.readStories) to mark all stories up to a certain ID as read, for a given peer: using this method will emit an [updateReadStories](https://core.telegram.org/constructor/updateReadStories) update to all logged-in sessions if a newer ID is marked as read.  \nUse [stories.getAllReadPeerStories](https://core.telegram.org/method/stories.getAllReadPeerStories) to obtain the latest read story ID for all peers when first logging in, returned as a list of [updateReadStories](https://core.telegram.org/constructor/updateReadStories) updates: further calls to this method are not needed after login, as updates to the latest read story ID will be sent using [updateReadStories](https://core.telegram.org/constructor/updateReadStories) updates, with the usual [update delivering methods](https://core.telegram.org/api/updates).\n\nUse [stories.incrementStoryViews](https://core.telegram.org/method/stories.incrementStoryViews) to actually increment the view counter of stories the user has seen (pass max 200 story IDs at a time).\n\n#### [](#hiding-stories-of-other-users)Hiding stories of other users\n\n```\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\n---functions---\n\nstories.togglePeerStoriesHidden#bd0415c4 peer:InputPeer hidden:Bool = Bool;\n\nstories.toggleAllStoriesHidden#7c2557c4 hidden:Bool = Bool;\n```\n\nUse [stories.togglePeerStoriesHidden](https://core.telegram.org/method/stories.toggleAllStoriesHidden) to hide the active stories of a specific peer, preventing them from being displayed on the action bar on the homescreen.  \nWhen the stories of a user are marked as hidden, the `stories_hidden` flag is set on the related [user](https://core.telegram.org/constructor/user) constructor, and they should only be visible on the action bar when opening the [archive folder](https://core.telegram.org/api/folders#peer-folders), by setting the `hidden` flag when calling [stories.getAllStories](https://core.telegram.org/method/stories.getAllStories), see [here](#watching-stories) for more info.\n\nNote that the [archive folder is the peer folder used for archived chats](https://core.telegram.org/api/folders#peer-folders): hidden stories are displayed there purely due to a UI implementation detail, not because they're actually added to the [archive peer folder\u00a0\u00bb](https://core.telegram.org/api/folders#peer-folders) or the [story archive\u00a0\u00bb](#pinned-or-archived-stories), which are different things.\n\n### [](#sharing-stories)Sharing stories\n\n```\ninputMediaStory#89fdd778 peer:InputPeer id:int = InputMedia;\n\nmessageMediaStory#68cb6283 flags:# via_mention:flags.1?true peer:Peer id:int story:flags.0?StoryItem = MessageMedia;\n\n---functions---\n\nmessages.sendMedia#7852834e flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\n```\n\nStories can be shared as messages to any chat by simply using [messages.sendMedia](https://core.telegram.org/method/messages.sendMedia), passing an [inputMediaStory](https://core.telegram.org/constructor/inputMediaStory) referencing the shared story.\n\nThe story will be shared as a [messageMediaStory](https://core.telegram.org/constructor/messageMediaStory), and should be displayed as a message forwarded from the poster of the story (even though [messages.forwardMessages](https://core.telegram.org/method/messages.forwardMessages) was not used an the `fwd_from` field of the [message](https://core.telegram.org/constructor/message) **won't** be set).\n\nA message containing a [messageMediaStory](https://core.telegram.org/constructor/messageMediaStory) with the `via_mention` flag coming from the story poster will also be generated automatically if the poster mentions us in the story's caption.\n\n### [](#fetching-the-interaction-list)Fetching the interaction list\n\n```\nstoryView#b0bdeac5 flags:# blocked:flags.0?true blocked_my_stories_from:flags.1?true user_id:long date:int reaction:flags.2?Reaction = StoryView;\nstoryViewPublicForward#9083670b flags:# blocked:flags.0?true blocked_my_stories_from:flags.1?true message:Message = StoryView;\nstoryViewPublicRepost#bd74cf49 flags:# blocked:flags.0?true blocked_my_stories_from:flags.1?true peer_id:Peer story:StoryItem = StoryView;\n\nstories.storyViewsList#59d78fc5 flags:# count:int views_count:int forwards_count:int reactions_count:int views:Vector<StoryView> chats:Vector<Chat> users:Vector<User> next_offset:flags.0?string = stories.StoryViewsList;\n\nstoryReaction#6090d6d5 peer_id:Peer date:int reaction:Reaction = StoryReaction;\nstoryReactionPublicForward#bbab2643 message:Message = StoryReaction;\nstoryReactionPublicRepost#cfcd0f13 peer_id:Peer story:StoryItem = StoryReaction;\n\nstories.storyReactionsList#aa5f789c flags:# count:int reactions:Vector<StoryReaction> chats:Vector<Chat> users:Vector<User> next_offset:flags.0?string = stories.StoryReactionsList;\n\nstoryViews#8d595cd6 flags:# has_viewers:flags.1?true views_count:int forwards_count:flags.2?int reactions:flags.3?Vector<ReactionCount> reactions_count:flags.4?int recent_viewers:flags.0?Vector<long> = StoryViews;\nstories.storyViews#de9eed1d views:Vector<StoryViews> users:Vector<User> = stories.StoryViews;\n\n---functions---\n\nstories.getStoryViewsList#7ed23c57 flags:# just_contacts:flags.0?true reactions_first:flags.2?true forwards_first:flags.3?true peer:InputPeer q:flags.1?string id:int offset:string limit:int = stories.StoryViewsList;\n\nstories.getStoryReactionsList#b9b2881f flags:# forwards_first:flags.2?true peer:InputPeer id:int reaction:flags.0?Reaction offset:flags.1?string limit:int = stories.StoryReactionsList;\n\nstories.getStoriesViews#28e16cc8 peer:InputPeer id:Vector<int> = stories.StoryViews;\n```\n\nUse [stories.getStoryViewsList](https://core.telegram.org/method/stories.getStoryViewsList) to obtain the full list of users that have interacted with a specific story we posted as a user, returned as a list of [StoryView](https://core.telegram.org/type/StoryView) constructors; pass the returned `next_offset` (if present) to `offset` to paginate through the results; the full list is available at all times only to [Premium](https://core.telegram.org/api/premium) users, and will be deleted on stories posted by non-[Premium](https://core.telegram.org/api/premium) users [story\\_viewers\\_expire\\_period\u00a0\u00bb](https://core.telegram.org/api/config#story-viewers-expire-period) seconds after the story expires; if it's still viewable, the `has_viewers` flag will be set.\n\nThe above method can only be used for stories posted by users, to fetch almost the exact same information for stories posted by channels/supergroups, use [stories.getStoryReactionsList](https://core.telegram.org/method/stories.getStoryReactionsList): the data returned by both methods is actually almost exactly the same, the only difference is that:\n\n*   [stories.getStoryViewsList](https://core.telegram.org/method/stories.getStoryViewsList) can only be used for stories posted by the current user and also contains view and [blocklist](https://core.telegram.org/api/block) information.\n*   [stories.getStoryReactionsList](https://core.telegram.org/method/stories.getStoryReactionsList) can only be used for stories posted by channels/supergroups we're an admin of and does not contain view information\n\nFor the rest, both methods return information about:\n\n*   Story reactions: [storyView](https://core.telegram.org/constructor/storyView)/[storyReaction](https://core.telegram.org/constructor/storyReaction)\n*   Story forwards as a message to a public chat/channel: [storyViewPublicForward](https://core.telegram.org/constructor/storyViewPublicForward)/[storyReactionPublicForward](https://core.telegram.org/constructor/storyReactionPublicForward)\n*   Story reposts (as a story to a public channel/supergroup/user): [storyViewPublicRepost](https://core.telegram.org/constructor/storyViewPublicRepost)/[storyReactionPublicRepost](https://core.telegram.org/constructor/storyReactionPublicRepost)\n\nAdditionally, [stories.getStoriesViews](https://core.telegram.org/method/stories.getStoriesViews) can be used to obtain info about the view count, forward count, reactions and recent viewers list of one or more stories, using a single, unpaginated method call, obviously potentially returning less info than [stories.getStoryViewsList](https://core.telegram.org/method/stories.getStoryViewsList).\n\n### [](#replying-to-stories)Replying to stories\n\n```\ninputReplyToStory#5881323a peer:InputPeer story_id:int = InputReplyTo;\n\n---functions---\n\nmessages.sendMessage#983f9745 flags:# no_webpage:flags.1?true silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\n```\n\nYou may reply to stories posted by users and supergroups by using [messages.sendMessage](https://core.telegram.org/method/messages.sendMessage), [messages.sendMedia](https://core.telegram.org/method/messages.sendMedia) or any other method used to send messages, passing an [inputReplyToStory](https://core.telegram.org/constructor/inputReplyToStory) to `reply_to`, with the ID of the user that posted the story (which must also be the destination `peer` of the message) and the story ID.\n\n### [](#reposting-stories)Reposting stories\n\n```\nstoryFwdHeader#b826e150 flags:# modified:flags.3?true from:flags.0?Peer from_name:flags.1?string story_id:flags.2?int = StoryFwdHeader;\n\nstoryItem#79b26a24 flags:# pinned:flags.5?true public:flags.7?true close_friends:flags.8?true min:flags.9?true noforwards:flags.10?true edited:flags.11?true contacts:flags.12?true selected_contacts:flags.13?true out:flags.16?true id:int date:int from_id:flags.18?Peer fwd_from:flags.17?StoryFwdHeader expire_date:int caption:flags.0?string entities:flags.1?Vector<MessageEntity> media:MessageMedia media_areas:flags.14?Vector<MediaArea> privacy:flags.2?Vector<PrivacyRule> views:flags.3?StoryViews sent_reaction:flags.15?Reaction = StoryItem;\n\n---functions---\n\nstories.sendStory#e4e6694b flags:# pinned:flags.2?true noforwards:flags.4?true fwd_modified:flags.7?true peer:InputPeer media:InputMedia media_areas:flags.5?Vector<MediaArea> caption:flags.0?string entities:flags.1?Vector<MessageEntity> privacy_rules:Vector<InputPrivacyRule> random_id:long period:flags.3?int fwd_from_id:flags.6?InputPeer fwd_from_story:flags.6?int = Updates;\n```\n\nStories may be reposted by using [stories.sendStory](https://core.telegram.org/method/stories.sendStory), populating the `fwd_from_story` field with the original story ID and the `fwd_from_id` with the peer that posted the original story.\n\nThe user may modify the story (for example by overlaying a round video reaction on top of the media); either way, the modified or the original media must be passed to the `media` field as usual, and the `fwd_modified` flag must be set if the media was modified.\n\nReposted stories will have the [storyItem](https://core.telegram.org/constructor/storyItem) set and populated with a [storyFwdHeader](https://core.telegram.org/constructor/storyFwdHeader) constructor, containing info about the original story.\n\n### [](#searching-stories)Searching stories\n\n```\nfoundStory#e87acbc0 peer:Peer story:StoryItem = FoundStory;\n\nstories.foundStories#e2de7737 flags:# count:int stories:Vector<FoundStory> next_offset:flags.0?string chats:Vector<Chat> users:Vector<User> = stories.FoundStories;\n\n---functions---\n\nstories.searchPosts#d1810907 flags:# hashtag:flags.0?string area:flags.1?MediaArea peer:flags.2?InputPeer offset:string limit:int = stories.FoundStories;\n```\n\n[stories.searchPosts](https://core.telegram.org/method/stories.searchPosts) may be used to globally search for stories from all users (even non-contacts and other peers we've never seen before) using either a hashtag passed to `hashtag` (without the `#`) or a [location tag](#location-tags) passed to `area`.\n\nGlobal search should be automatically triggered when clicking on a hashtag in the description of a story, or when clicking on a [location tag](#location-tags) (results displayed under the map).\n\nNote [mediaAreaGeoPoint](https://core.telegram.org/constructor/mediaAreaGeoPoint) areas may be searched only if they have an associated `address`.\n\nEither `hashtag` or `area` must always be set when invoking the method, `offset` must initially be an empty string.  \nPaginate the results by re-calling the method, passing to `offset` the [stories.foundStories](https://core.telegram.org/constructor/stories.foundStories).`next_offset` field returned by the previous call.\n\n### [](#reporting-stories)Reporting stories\n\n```\ninputReportReasonSpam#58dbcab8 = ReportReason;\ninputReportReasonViolence#1e22c78d = ReportReason;\ninputReportReasonPornography#2e59d922 = ReportReason;\ninputReportReasonChildAbuse#adf44ee3 = ReportReason;\ninputReportReasonOther#c1e4a2b1 = ReportReason;\ninputReportReasonCopyright#9b89f93a = ReportReason;\ninputReportReasonGeoIrrelevant#dbd4feed = ReportReason;\ninputReportReasonFake#f5ddd6e7 = ReportReason;\ninputReportReasonIllegalDrugs#a8eb2be = ReportReason;\ninputReportReasonPersonalDetails#9ec7863d = ReportReason;\n\n---functions---\n\nstories.report#19d8eb45 peer:InputPeer id:Vector<int> option:bytes message:string = ReportResult;\n```\n\nUse [stories.report](https://core.telegram.org/method/stories.report) to report one or more stories.\n\n### [](#story-links)Story links\n\n```\nexportedStoryLink#3fc9053b link:string = ExportedStoryLink;\n\n---functions---\n\nstories.exportStoryLink#7b8def20 peer:InputPeer id:int = ExportedStoryLink;\n```\n\nUse [stories.exportStoryLink](https://core.telegram.org/method/stories.exportStoryLink) to generate a [story deep link](https://core.telegram.org/api/links#story-links) for a specific story.\n\nUpon encountering a story deep link, clients should open the specified story as [specified here\u00a0\u00bb](#watching-stories).\n\nSee [here\u00a0\u00bb](https://core.telegram.org/api/links#story-links) for more info on story deep links.\n\n### [](#media-areas)Media areas\n\nSchema:\n\n```\nmediaAreaCoordinates#cfc9e002 flags:# x:double y:double w:double h:double rotation:double radius:flags.0?double = MediaAreaCoordinates;\n\nstoryItem#79b26a24 flags:# pinned:flags.5?true public:flags.7?true close_friends:flags.8?true min:flags.9?true noforwards:flags.10?true edited:flags.11?true contacts:flags.12?true selected_contacts:flags.13?true out:flags.16?true id:int date:int from_id:flags.18?Peer fwd_from:flags.17?StoryFwdHeader expire_date:int caption:flags.0?string entities:flags.1?Vector<MessageEntity> media:MessageMedia media_areas:flags.14?Vector<MediaArea> privacy:flags.2?Vector<PrivacyRule> views:flags.3?StoryViews sent_reaction:flags.15?Reaction = StoryItem;\n\n---functions---\n\nstories.sendStory#e4e6694b flags:# pinned:flags.2?true noforwards:flags.4?true fwd_modified:flags.7?true peer:InputPeer media:InputMedia media_areas:flags.5?Vector<MediaArea> caption:flags.0?string entities:flags.1?Vector<MessageEntity> privacy_rules:Vector<InputPrivacyRule> random_id:long period:flags.3?int fwd_from_id:flags.6?InputPeer fwd_from_story:flags.6?int = Updates;\nstories.editStory#b583ba46 flags:# peer:InputPeer id:int media:flags.0?InputMedia media_areas:flags.3?Vector<MediaArea> caption:flags.1?string entities:flags.1?Vector<MessageEntity> privacy_rules:flags.2?Vector<InputPrivacyRule> = Updates;\n```\n\nStories can have so-called \"media areas\": clickable rectangular areas with animated overlays on top of the story offering functionality like location tags or reactions.\n\nThe coordinates and size of each media area is specified in a [mediaAreaCoordinates](https://core.telegram.org/constructor/mediaAreaCoordinates) constructor attached to each [MediaArea](https://core.telegram.org/type/MediaArea), see [the constructor page\u00a0\u00bb](https://core.telegram.org/constructor/mediaAreaCoordinates) for more info.\n\nAfter construction, the vector of [MediaArea](https://core.telegram.org/type/MediaArea) constructors can be passed to [stories.sendStory](https://core.telegram.org/method/stories.sendStory) or [stories.editStory](https://core.telegram.org/method/stories.editStory).\n\n#### [](#channel-posts)Channel posts\n\n```\ninputMediaAreaChannelPost#2271f2bf coordinates:MediaAreaCoordinates channel:InputChannel msg_id:int = MediaArea;\n\nmediaAreaChannelPost#770416af coordinates:MediaAreaCoordinates channel_id:long msg_id:int = MediaArea;\n```\n\nMessages from channels can be reposted to stories using [inputMediaAreaChannelPost](https://core.telegram.org/constructor/inputMediaAreaChannelPost)/[mediaAreaChannelPost](https://core.telegram.org/constructor/mediaAreaChannelPost).\n\nClients should fetch and display a copy of the channel post on top of the story according to the [media area](#media-areas) `coordinates`: clicking on the media area should open the linked post.\n\n#### [](#location-tags)Location tags\n\nSchema:\n\n```\ngeoPoint#b2a2f663 flags:# long:double lat:double access_hash:long accuracy_radius:flags.0?int = GeoPoint;\ngeoPointAddress#de4c5d93 flags:# country_iso2:string state:flags.0?string city:flags.1?string street:flags.2?string = GeoPointAddress;\n\nmediaAreaGeoPoint#cad5452d flags:# coordinates:MediaAreaCoordinates geo:GeoPoint address:flags.0?GeoPointAddress = MediaArea;\nmediaAreaVenue#be82db9c coordinates:MediaAreaCoordinates geo:GeoPoint title:string address:string provider:string venue_id:string venue_type:string = MediaArea;\n\ninputMediaAreaVenue#b282217f coordinates:MediaAreaCoordinates query_id:long result_id:string = MediaArea;\n```\n\nLocation tags are represented by a [mediaAreaVenue](https://core.telegram.org/constructor/mediaAreaVenue) or [mediaAreaGeoPoint](https://core.telegram.org/constructor/mediaAreaGeoPoint), associated to a location sticker on top of the story media with an associated [clickable media area](#media-areas).\n\nBoth constructors have an associated geolocation represented as a [geoPoint](https://core.telegram.org/constructor/geoPoint), and information about the clickable media area on top of the story media as a [mediaAreaCoordinates](https://core.telegram.org/constructor/mediaAreaCoordinates) constructor.\n\n[mediaAreaGeoPoint](https://core.telegram.org/constructor/mediaAreaGeoPoint) is used to represent a simple geolocation with an _optional_ textual address.  \n[mediaAreaVenue](https://core.telegram.org/constructor/mediaAreaVenue) is used to represent the location of a specific venue (i.e. a mall, a shop, a dance school et cetera), and apart from the venue's coordinates, it also contains a textual representation of the address, the venue name (`title`) and a venue type/ID (`venue_id`/`venue_type`) in a format supported by the venue provider specified in `provider`.\n\nCurrently, the only provider that needs to be supported is `foursquare`.\n\nTo send a [mediaAreaVenue](https://core.telegram.org/constructor/mediaAreaVenue), clients should use [inputMediaAreaVenue](https://core.telegram.org/constructor/inputMediaAreaVenue), constructed as follows:\n\n*   If the user gives permission to share their location with the location provider, query the inline bot specified in the [`stories_venue_search_username` client configuration parameter\u00a0\u00bb](https://core.telegram.org/api/config#stories-venue-search-username), as described as the [inline queries documentation\u00a0\u00bb](https://core.telegram.org/api/bots/inline), populating the `geo_point`.  \n    Note that this should be done transparently in a map UI, not in the usual inline query UI in the chat text bar.\n*   The results returned by the bot, containing a list of venues close to the specified `geo_point`, should be listed in the lower section of the map UI: upon selection, construct the [inputMediaAreaVenue](https://core.telegram.org/constructor/inputMediaAreaVenue) with:\n    *   `query_id`: the `query_id` from [messages.botResults](https://core.telegram.org/constructor/messages.botResults).\n    *   `result_id`: the `id` of the chosen result.\n\nClients may only re-use existing [mediaAreaVenue](https://core.telegram.org/constructor/mediaAreaVenue)s when repositioning a pre-existing location tag when editing a story; use [inputMediaAreaVenue](https://core.telegram.org/constructor/inputMediaAreaVenue) when posting a new story or adding a new location tag to an existing story.\n\n[Global story search\u00a0\u00bb](#searching-stories) should be automatically triggered when clicking on a location, passing the [mediaAreaGeoPoint](https://core.telegram.org/constructor/mediaAreaGeoPoint)/[mediaAreaVenue](https://core.telegram.org/constructor/mediaAreaVenue) to [stories.searchPosts](https://core.telegram.org/method/stories.searchPosts), with results displayed under the map.\n\nNote [mediaAreaGeoPoint](https://core.telegram.org/constructor/mediaAreaGeoPoint) areas may be searched only if they have an associated `address`.\n\n#### [](#reactions)Reactions\n\nSchema:\n\n```\nreactionEmoji#1b2286b8 emoticon:string = Reaction;\nreactionCustomEmoji#8935fc73 document_id:long = Reaction;\n\nmediaAreaSuggestedReaction#14455871 flags:# dark:flags.0?true flipped:flags.1?true coordinates:MediaAreaCoordinates reaction:Reaction = MediaArea;\n\nupdateSentStoryReaction#7d627683 peer:Peer story_id:int reaction:Reaction = Update;\n\nupdateNewStoryReaction#1824e40b story_id:int peer:Peer reaction:Reaction = Update;\n\n---functions---\n\nstories.sendReaction#7fd736b2 flags:# add_to_recent:flags.0?true peer:InputPeer story_id:int reaction:Reaction = Updates;\n```\n\nStory [reactions](https://core.telegram.org/api/reactions) are implemented using a simple in-UI button that allows the user to send any reaction using [stories.sendReaction](https://core.telegram.org/method/stories.sendReaction).\n\nSending this method will return an [updateSentStoryReaction](https://core.telegram.org/constructor/updateSentStoryReaction) update to all logged-in sessions.  \nThe story poster will also receive an [updateNewStoryReaction](https://core.telegram.org/constructor/updateNewStoryReaction) update when a user reacts to their story, if enabled as specified [here\u00a0\u00bb](https://core.telegram.org/api/reactions#notifications-about-reactions).\n\nHowever, the poster of a story may also use [mediaAreaSuggestedReaction](https://core.telegram.org/constructor/mediaAreaSuggestedReaction) [media areas\u00a0\u00bb](#media-areas) to suggest some specific reactions as simple clickable buttons: they're rendered as a round comic-style thought bubble with its \"tail\" on the right, white background and the [reaction\u00a0\u00bb](https://core.telegram.org/api/reactions) from the `reaction` field located in its center.  \nIf the `dark` flag is set, the background should be black.  \nIf the `flipped` flag is set, the \"tail\" should be located on the left. The maximum number of story reaction media areas that can be added to a story is specified by the [`stories_suggested_reactions_limit_*`\u00a0\u00bb](https://core.telegram.org/api/config#stories-suggested-reactions-limit-default) config keys.  \nClicking it should invoke [stories.sendReaction](https://core.telegram.org/method/stories.sendReaction) as usual.\n\nSee [here\u00a0\u00bb](#fetching-the-interaction-list) to get more info on how to fetch the reaction list of a [story](https://core.telegram.org/api/stories).\n\n#### [](#urls)URLs\n\n```\nmediaAreaUrl#37381085 coordinates:MediaAreaCoordinates url:string = MediaArea;\n```\n\nURL media areas offer stickers that when clicked, should offer the user a prompt (implemented as a tooltip on the sticker) to open the specified `url`.\n\nThe maximum number of URL media areas that can be added to a story is specified by the [`stories_area_url_max`\u00a0\u00bb](https://core.telegram.org/api/config#stories-area-url-max) config key.\n\n#### [](#weather)Weather\n\n```\nmediaAreaWeather#49a6549c coordinates:MediaAreaCoordinates emoji:string temperature_c:double color:int = MediaArea;\n\n---functions---\n\nmessages.getInlineBotResults#514e999d flags:# bot:InputUser peer:InputPeer geo_point:flags.0?InputGeoPoint query:string offset:string = messages.BotResults;\n```\n\nUsers can now share the weather in their stories by adding one weather media area represented by [mediaAreaWeather](https://core.telegram.org/constructor/mediaAreaWeather) to their stories.\n\nThe weather media area should be rendered using the background ARGB color specified in `color`, and should contain the emoji specified in `emoji` (rendered as an [animated emoji](https://core.telegram.org/api/animated-emojis)), followed by the temperature specified in `temperature_c` (Celsius, which should be converted by the client to Fahrenheit if required by the device's settings), followed by `\u00b0C` or `\u00b0F` depending on the unit used.\n\nTo fetch the current temperature and emoji to use when _creating_ a weather media area when posting a story, clients should internally make an [inline query](https://core.telegram.org/api/bots/inline) with [messages.getInlineBotResults](https://core.telegram.org/method/messages.getInlineBotResults) to the `bot` specified in the [weather\\_search\\_username](https://core.telegram.org/api/config#weather-search-username) client configuration parameter, passing the user's current location in `geo_point` and [inputPeerEmpty](https://core.telegram.org/constructor/inputPeerEmpty) in `peer`.  \nThis query will return a single [botInlineResult](https://core.telegram.org/constructor/botInlineResult): the `emoji` to use will be contained in the [botInlineResult](https://core.telegram.org/constructor/botInlineResult).`title` and the temperature (always in Celsius) will be contained in [botInlineResult](https://core.telegram.org/constructor/botInlineResult).`description` (it will contain just the value without the unit, so it can be easily casted to a double).\n\nThe inline query should be made internally by the client when the user creates a new weather media area, not by showing the usual inline query UI, but by treating the inline query as an API call to fetch the weather for the current user's location.\n\nIf the [story\\_weather\\_preload](https://core.telegram.org/api/config#story-weather-preload) client configuration parameter is equal to true, clients should preload the weather using the flow specified above on startup (as opposed to only doing it when creating a weather media area).\n\n### [](#stealth-mode)Stealth mode\n\n[Premium users](https://core.telegram.org/api/premium) may enable [stealth mode](https://telegram.org/tour/stories#stealth-mode), erasing their views from any stories they opened in the past [`stories_stealth_past_period` seconds\u00a0\u00bb](https://core.telegram.org/api/config#stories-stealth-past-period), and hiding their views on stories for the next [`stories_stealth_future_period` seconds\u00a0\u00bb](https://core.telegram.org/api/config#stories-stealth-future-period), as specified by the [client configuration\u00a0\u00bb](https://core.telegram.org/api/config#client-configuration).\n\nSchema:\n\n```\nstoriesStealthMode#712e27fd flags:# active_until_date:flags.0?int cooldown_until_date:flags.1?int = StoriesStealthMode;\n\nupdateStoriesStealthMode#2c084dc1 stealth_mode:StoriesStealthMode = Update;\n\n---functions---\n\nstories.activateStealthMode#57bbd166 flags:# past:flags.0?true future:flags.1?true = Updates;\n```\n\nInvoke [stories.activateStealthMode](https://core.telegram.org/method/stories.activateStealthMode) to activate stealth mode, passing the `past` flag to erase views from any stories opened in the past [`stories_stealth_past_period` seconds\u00a0\u00bb](https://core.telegram.org/api/config#stories-stealth-past-period) and/or the `future` flag to hide future story views for the next [`stories_stealth_future_period` seconds\u00a0\u00bb](https://core.telegram.org/api/config#stories-stealth-future-period).\n\nClients can only invoke this method every [`stories_stealth_cooldown_period` seconds](https://core.telegram.org/api/config#stories-stealth-cooldown-period) as specified by the [client configuration](https://core.telegram.org/api/config#client-configuration): invoking the method before the cooldown period has expired will trigger a `FLOOD_WAIT_X` error, with `X` being the number of seconds left before the cooldown period expires.\n\nAn [updateStoriesStealthMode](https://core.telegram.org/constructor/updateStoriesStealthMode) constructor will be returned, containing the following fields:\n\n*   `active_until_date` - the date up to which stealth mode will be active\n*   `cooldown_until_date` - the date starting from which the user will be allowed to call [stories.activateStealthMode](https://core.telegram.org/method/stories.activateStealthMode) again; calling the method earlier will return a `FLOOD_WAIT_X` error as specified above.\n\n### [](#statistics)Statistics\n\n```\nstats.storyStats#50cd067c views_graph:StatsGraph reactions_by_emotion_graph:StatsGraph = stats.StoryStats;\n\npublicForwardMessage#1f2bf4a message:Message = PublicForward;\npublicForwardStory#edf3add0 peer:Peer story:StoryItem = PublicForward;\n\nstats.publicForwards#93037e20 flags:# count:int forwards:Vector<PublicForward> next_offset:flags.0?string chats:Vector<Chat> users:Vector<User> = stats.PublicForwards;\n\n---functions---\n\nstats.getStoryStats#374fef40 flags:# dark:flags.0?true peer:InputPeer id:int = stats.StoryStats;\n\nstats.getStoryPublicForwards#a6437ef6 peer:InputPeer id:int offset:string limit:int = stats.PublicForwards;\n```\n\nUse [stats.getStoryStats](https://core.telegram.org/method/stats.getStoryStats) to obtain statistics about a story; the returned [StatsGraph](https://core.telegram.org/type/StatsGraph) graphs can be rendered [as described here\u00a0\u00bb](https://core.telegram.org/api/stats#graph-visualization).\n\nUse [stats.getStoryPublicForwards](https://core.telegram.org/method/stats.getStoryPublicForwards) to obtain forwards of a story as a message to public chats and reposts by public channels.",
    "url": "https://core.telegram.org/api/stories"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/privacy",
      "title": "Privacy",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Privacy"
        },
        {
          "property": "og:description",
          "content": "Telegram allows users to specify granular privacy settings, choosing which users can or can't interact with them in certain ways."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:28 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5863",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Privacy\n\nTelegram allows users to specify granular privacy settings, choosing which users can or can't interact with them in certain ways.\n\n### [](#privacy-rules)Privacy rules\n\nSchema:\n\n```\ninputPrivacyValueAllowContacts#d09e07b = InputPrivacyRule;\ninputPrivacyValueAllowAll#184b35ce = InputPrivacyRule;\ninputPrivacyValueAllowUsers#131cc67f users:Vector<InputUser> = InputPrivacyRule;\ninputPrivacyValueDisallowContacts#ba52007 = InputPrivacyRule;\ninputPrivacyValueDisallowAll#d66b66c9 = InputPrivacyRule;\ninputPrivacyValueDisallowUsers#90110467 users:Vector<InputUser> = InputPrivacyRule;\ninputPrivacyValueAllowChatParticipants#840649cf chats:Vector<long> = InputPrivacyRule;\ninputPrivacyValueDisallowChatParticipants#e94f0f86 chats:Vector<long> = InputPrivacyRule;\ninputPrivacyValueAllowCloseFriends#2f453e49 = InputPrivacyRule;\ninputPrivacyValueAllowPremium#77cdc9f1 = InputPrivacyRule;\ninputPrivacyValueAllowBots#5a4fcce5 = InputPrivacyRule;\ninputPrivacyValueDisallowBots#c4e57915 = InputPrivacyRule;\n\nprivacyValueAllowContacts#fffe1bac = PrivacyRule;\nprivacyValueAllowAll#65427b82 = PrivacyRule;\nprivacyValueAllowUsers#b8905fb2 users:Vector<long> = PrivacyRule;\nprivacyValueDisallowContacts#f888fa1a = PrivacyRule;\nprivacyValueDisallowAll#8b73e763 = PrivacyRule;\nprivacyValueDisallowUsers#e4621141 users:Vector<long> = PrivacyRule;\nprivacyValueAllowChatParticipants#6b134e8e chats:Vector<long> = PrivacyRule;\nprivacyValueDisallowChatParticipants#41c87565 chats:Vector<long> = PrivacyRule;\nprivacyValueAllowCloseFriends#f7e8d89b = PrivacyRule;\nprivacyValueAllowPremium#ece9814b = PrivacyRule;\nprivacyValueAllowBots#21461b5d = PrivacyRule;\nprivacyValueDisallowBots#f6a5f82f = PrivacyRule;\n\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\n---functions---\n\ncontacts.editCloseFriends#ba6705f0 id:Vector<long> = Bool;\n```\n\nPrivacy **rules** indicate _who_ can or can't do something and are specified by a [PrivacyRule](https://core.telegram.org/type/PrivacyRule), and its input counterpart [InputPrivacyRule](https://core.telegram.org/type/InputPrivacyRule).  \n[InputPrivacyRule](https://core.telegram.org/type/InputPrivacyRule) constructors are _passed_ as input to methods that accept privacy rules, while [PrivacyRule](https://core.telegram.org/type/PrivacyRule)s are contained in constructors _returned_ by the API.\n\nSee [the type page\u00a0\u00bb](https://core.telegram.org/type/InputPrivacyRule) for a full list of privacy rules and their descriptions.\n\nOne privacy rule in particular should be mentioned separately, (input)[privacyValueAllowCloseFriends](https://core.telegram.org/constructor/privacyValueAllowCloseFriends): this privacy rule, which can be used only when [posting stories](https://core.telegram.org/api/stories), refers exclusively to a list of \"close friends\", that can be modified using [contacts.editCloseFriends](https://core.telegram.org/method/contacts.editCloseFriends), passing the full close friend list as a list of user IDs: note that only users [in the contact list (even without a phone number)\u00a0\u00bb](https://core.telegram.org/api/contacts) can be added to the close friends list.\n\nThe current list of close friends can be checking which users in our contact list have the `close_friend` flag set in the associated [user](https://core.telegram.org/constructor/user) constructor, see [here\u00a0\u00bb](https://core.telegram.org/api/contacts#fetching-the-contact-list) for more info on how to fetch the contact list.\n\n### [](#privacy-keys)Privacy keys\n\nSchema:\n\n```\ninputPrivacyKeyStatusTimestamp#4f96cb18 = InputPrivacyKey;\ninputPrivacyKeyChatInvite#bdfb0426 = InputPrivacyKey;\ninputPrivacyKeyPhoneCall#fabadc5f = InputPrivacyKey;\ninputPrivacyKeyPhoneP2P#db9e70d2 = InputPrivacyKey;\ninputPrivacyKeyForwards#a4dd4c08 = InputPrivacyKey;\ninputPrivacyKeyProfilePhoto#5719bacc = InputPrivacyKey;\ninputPrivacyKeyPhoneNumber#352dafa = InputPrivacyKey;\ninputPrivacyKeyAddedByPhone#d1219bdd = InputPrivacyKey;\ninputPrivacyKeyVoiceMessages#aee69d68 = InputPrivacyKey;\ninputPrivacyKeyAbout#3823cc40 = InputPrivacyKey;\ninputPrivacyKeyBirthday#d65a11cc = InputPrivacyKey;\ninputPrivacyKeyStarGiftsAutoSave#e1732341 = InputPrivacyKey;\n\nprivacyKeyStatusTimestamp#bc2eab30 = PrivacyKey;\nprivacyKeyChatInvite#500e6dfa = PrivacyKey;\nprivacyKeyPhoneCall#3d662b7b = PrivacyKey;\nprivacyKeyPhoneP2P#39491cc8 = PrivacyKey;\nprivacyKeyForwards#69ec56a3 = PrivacyKey;\nprivacyKeyProfilePhoto#96151fed = PrivacyKey;\nprivacyKeyPhoneNumber#d19ae46d = PrivacyKey;\nprivacyKeyAddedByPhone#42ffd42b = PrivacyKey;\nprivacyKeyVoiceMessages#697f414 = PrivacyKey;\nprivacyKeyAbout#a486b761 = PrivacyKey;\nprivacyKeyStarGiftsAutoSave#2ca4fdf8 = PrivacyKey;\n\naccount.privacyRules#50a04e45 rules:Vector<PrivacyRule> chats:Vector<Chat> users:Vector<User> = account.PrivacyRules;\n\nupdatePrivacy#ee3b272a key:PrivacyKey rules:Vector<PrivacyRule> = Update;\n\n---functions---\n\naccount.getPrivacy#dadbc950 key:InputPrivacyKey = account.PrivacyRules;\naccount.setPrivacy#c9f81ce8 key:InputPrivacyKey rules:Vector<InputPrivacyRule> = account.PrivacyRules;\n```\n\nPrivacy **keys** together with [privacy rules\u00a0\u00bb](#privacy-rules) indicate _what_ can or can't someone do and are specified by a [PrivacyKey](https://core.telegram.org/type/PrivacyKey) constructor, and its input counterpart [InputPrivacyKey](https://core.telegram.org/type/InputPrivacyKey).  \n[InputPrivacyKey](https://core.telegram.org/type/InputPrivacyKey) constructors are _passed_ as input to methods that accept privacy keys, while [PrivacyKey](https://core.telegram.org/type/PrivacyKey)s are contained in constructors _returned_ by the API.\n\nSee [the type page\u00a0\u00bb](https://core.telegram.org/type/InputPrivacyKey) for a full list of privacy keys and their descriptions.\n\nUse [account.getPrivacy](https://core.telegram.org/method/account.getPrivacy) to obtain the current set of [rules](#privacy-rules) associated to a key, and [account.setPrivacy](https://core.telegram.org/method/account.setPrivacy) to change it.\n\nChanging the privacy settings will trigger an [updatePrivacy](https://core.telegram.org/constructor/updatePrivacy), sent to all currently logged in sessions of the current account.\n\n### [](#global-privacy-settings)Global privacy settings\n\n```\nglobalPrivacySettings#734c4ccb flags:# archive_and_mute_new_noncontact_peers:flags.0?true keep_archived_unmuted:flags.1?true keep_archived_folders:flags.2?true hide_read_marks:flags.3?true new_noncontact_peers_require_premium:flags.4?true = GlobalPrivacySettings;\n\n---functions---\n\naccount.getGlobalPrivacySettings#eb2b4cf6 = GlobalPrivacySettings;\naccount.setGlobalPrivacySettings#1edaaac2 settings:GlobalPrivacySettings = GlobalPrivacySettings;\n```\n\nSome global privacy settings can also be fetched and modified using [account.getGlobalPrivacySettings](https://core.telegram.org/method/account.getGlobalPrivacySettings) and [account.setGlobalPrivacySettings](https://core.telegram.org/method/account.setGlobalPrivacySettings).\n\nGlobal privacy settings are represented by the [globalPrivacySettings](https://core.telegram.org/constructor/globalPrivacySettings) constructor, please see the [constructor page](https://core.telegram.org/constructor/globalPrivacySettings) for a full description of all settings.\n\n#### [](#require-premium-for-new-non-contact-users)Require Premium for new non-contact users\n\n```\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\nuserFull#979d2376 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true voice_messages_forbidden:flags.20?true translations_disabled:flags.23?true stories_pinned_available:flags.26?true blocked_my_stories_from:flags.27?true wallpaper_overridden:flags.28?true contact_require_premium:flags.29?true read_dates_private:flags.30?true flags2:# sponsored_enabled:flags2.7?true can_view_revenue:flags2.9?true bot_can_manage_emoji_status:flags2.10?true id:long about:flags.1?string settings:PeerSettings personal_photo:flags.21?Photo profile_photo:flags.2?Photo fallback_photo:flags.22?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int ttl_period:flags.14?int theme_emoticon:flags.15?string private_forward_name:flags.16?string bot_group_admin_rights:flags.17?ChatAdminRights bot_broadcast_admin_rights:flags.18?ChatAdminRights premium_gifts:flags.19?Vector<PremiumGiftOption> wallpaper:flags.24?WallPaper stories:flags.25?PeerStories business_work_hours:flags2.0?BusinessWorkHours business_location:flags2.1?BusinessLocation business_greeting_message:flags2.2?BusinessGreetingMessage business_away_message:flags2.3?BusinessAwayMessage business_intro:flags2.4?BusinessIntro birthday:flags2.5?Birthday personal_channel_id:flags2.6?long personal_channel_message:flags2.6?int stargifts_count:flags2.8?int starref_program:flags2.11?StarRefProgram = UserFull;\n\n---functions---\n\nusers.getIsPremiumRequiredToContact#a622aa10 id:Vector<InputUser> = Vector<Bool>;\n```\n\nIf a user enables their **new\\_noncontact\\_peers\\_require\\_premium** [global privacy setting](https://core.telegram.org/api/privacy#global-privacy-settings), represented in [user](https://core.telegram.org/constructor/user).`contact_require_premium` for other users, only users that have a premium account, are in our contact list, or already have a private chat with them can write to them in private.\n\nNote that all the secondary conditions listed above must be checked separately to verify whether we can still write to the user, even if [user](https://core.telegram.org/constructor/user).`contact_require_premium` flag is set for a user (i.e. a mutual contact will have this flag set even if we can still write to them, and so on...); to avoid doing these extra checks if we haven't yet cached all the required information (for example while displaying the chat list in the sharing UI) the [users.getIsPremiumRequiredToContact](https://core.telegram.org/method/users.getIsPremiumRequiredToContact) method may be invoked instead, passing the list of users currently visible in the UI, returning a list of booleans that directly specify whether we can or cannot write to each user.  \nAlternatively, the [userFull](https://core.telegram.org/constructor/userFull).`contact_require_premium` flag contains the same (fully checked, i.e. it's not just a copy of [user](https://core.telegram.org/constructor/user).`contact_require_premium`) info returned by [users.getIsPremiumRequiredToContact](https://core.telegram.org/method/users.getIsPremiumRequiredToContact).\n\nThis information may then be used, for example, to display a lock near the avatar of each user that we cannot write to, with an appropriate tooltip to purchase a [Premium](https://core.telegram.org/api/premium) subscription.\n\nNote that [users.getIsPremiumRequiredToContact](https://core.telegram.org/method/users.getIsPremiumRequiredToContact) should **only** be invoked if we don't have a [Premium](https://core.telegram.org/api/premium) subscription, only for users whose full info ([userFull](https://core.telegram.org/constructor/userFull) + message history information) is not cached yet, as the same info can be computed locally if all the mentioned information is available, and updated automatically using the usual [updates](https://core.telegram.org/api/updates).",
    "url": "https://core.telegram.org/api/privacy"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/recommend",
      "title": "Similar channels",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Similar channels"
        },
        {
          "property": "og:description",
          "content": "The API offers a method to obtain a list of similarly themed public channels, selected based on similarities in their subscriber bases."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:26 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "2067",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Similar channels\n\nThe API offers a method to obtain a list of similarly themed public channels, selected based on similarities in their **subscriber bases**.\n\nScheme:\n\n```\nmessages.chats#64ff9fd5 chats:Vector<Chat> = messages.Chats;\n\n---functions---\n\nchannels.getChannelRecommendations#25a71742 flags:# channel:flags.0?InputChannel = messages.Chats;\n```\n\nClients should invoke [channels.getChannelRecommendations](https://core.telegram.org/method/channels.getChannelRecommendations) after joining a [channel](https://core.telegram.org/api/channel) (passing the channel's peer in `channel`), automatically displaying a popup with a list of similarly themed channels.\n\nThe same method should also be invoked when opening a special \"Similar channels\" tab in the channel's profile (similar to the Media/Links/Gifs/etc tabs).\n\nThe method should also be called _without_ setting the `channel` flag in the \"Similar channels\" section of the \"Channels\" tab of global search, to return a _global_ list of recommended channels, similar to the ones the current user has already joined, see [here\u00a0\u00bb](https://core.telegram.org/api/search#global-search) for more info.\n\nThe maximum number of similar channels that can be recommended by [channels.getChannelRecommendations\u00bb](https://core.telegram.org/method/channels.getChannelRecommendations) to [Premium](https://core.telegram.org/api/premium)/non-[Premium](https://core.telegram.org/api/premium) users is contained in the [recommended\\_channels\\_limit\\_premium](https://core.telegram.org/api/config#recommended-channels-limit-premium)/[recommended\\_channels\\_limit\\_default](https://core.telegram.org/api/config#recommended-channels-limit-default) app configuration keys.",
    "url": "https://core.telegram.org/api/recommend"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/search",
      "title": "Search",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Search"
        },
        {
          "property": "og:description",
          "content": "Telegram allows applying detailed message filters while looking for messages in chats."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:28 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5823",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Search\n\nTelegram allows applying detailed message filters while looking for messages in chats.\n\n### [](#search-filters)Search filters\n\n```\ninputMessagesFilterEmpty#57e2f66c = MessagesFilter;\ninputMessagesFilterPhotos#9609a51c = MessagesFilter;\ninputMessagesFilterVideo#9fc00e65 = MessagesFilter;\ninputMessagesFilterPhotoVideo#56e9f0e4 = MessagesFilter;\ninputMessagesFilterDocument#9eddf188 = MessagesFilter;\ninputMessagesFilterUrl#7ef0dd87 = MessagesFilter;\ninputMessagesFilterGif#ffc86587 = MessagesFilter;\ninputMessagesFilterVoice#50f5c392 = MessagesFilter;\ninputMessagesFilterMusic#3751b49e = MessagesFilter;\ninputMessagesFilterChatPhotos#3a20ecb8 = MessagesFilter;\ninputMessagesFilterPhoneCalls#80c99768 flags:# missed:flags.0?true = MessagesFilter;\ninputMessagesFilterRoundVoice#7a7c17a4 = MessagesFilter;\ninputMessagesFilterRoundVideo#b549da53 = MessagesFilter;\ninputMessagesFilterMyMentions#c1f8e69a = MessagesFilter;\ninputMessagesFilterGeo#e7026d0d = MessagesFilter;\ninputMessagesFilterContacts#e062db83 = MessagesFilter;\ninputMessagesFilterPinned#1bb00451 = MessagesFilter;\n\nmessages.messages#8c718e87 messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages;\nmessages.messagesSlice#3a54685e flags:# inexact:flags.1?true count:int next_rate:flags.0?int offset_id_offset:flags.2?int messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages;\nmessages.channelMessages#c776ba4e flags:# inexact:flags.1?true pts:int count:int offset_id_offset:flags.2?int messages:Vector<Message> topics:Vector<ForumTopic> chats:Vector<Chat> users:Vector<User> = messages.Messages;\nmessages.messagesNotModified#74535f21 count:int = messages.Messages;\n\n---functions---\n\nmessages.search#29ee847a flags:# peer:InputPeer q:string from_id:flags.0?InputPeer saved_peer_id:flags.2?InputPeer saved_reaction:flags.3?Vector<Reaction> top_msg_id:flags.1?int filter:MessagesFilter min_date:int max_date:int offset_id:int add_offset:int limit:int max_id:int min_id:int hash:long = messages.Messages;\n\nmessages.searchGlobal#4bc6589a flags:# broadcasts_only:flags.1?true groups_only:flags.2?true users_only:flags.3?true folder_id:flags.0?int q:string filter:MessagesFilter min_date:int max_date:int offset_rate:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;\n```\n\nWhen using [messages.search](https://core.telegram.org/method/messages.search) or [messages.searchGlobal](https://core.telegram.org/method/messages.searchGlobal), a certain message filter may be applied.  \nThis allows the server to filter messages based on a text query, and even on their type, and this feature is often used by graphical clients to implement features like the chat gallery, chat profile pictures and more. Available filters:\n\n*   [inputMessagesFilterPhotos](https://core.telegram.org/constructor/inputMessagesFilterPhotos) - Returns only photos, used for implementing the chat photo gallery, and when scrolling left or right while viewing a photo\n*   [inputMessagesFilterVideo](https://core.telegram.org/constructor/inputMessagesFilterVideo) - Returns only videos, used for implementing the chat video gallery, and when scrolling left or right while viewing a video\n*   [inputMessagesFilterPhotoVideo](https://core.telegram.org/constructor/inputMessagesFilterPhotoVideo) - Return only videos and photos, used for implementing the chat media gallery\n*   [inputMessagesFilterDocument](https://core.telegram.org/constructor/inputMessagesFilterDocument) - Return only videos and photos, used for implementing the chat document gallery\n*   [inputMessagesFilterUrl](https://core.telegram.org/constructor/inputMessagesFilterUrl) - Return only messages with links, used for implementing the chat link gallery\n*   [inputMessagesFilterGif](https://core.telegram.org/constructor/inputMessagesFilterGif) - Return only GIFs, used for implementing the chat GIF gallery\n*   [inputMessagesFilterVoice](https://core.telegram.org/constructor/inputMessagesFilterVoice) - Return only voice messages, used for implementing the chat voice message gallery, and to consecutively play voice messages in a chat\n*   [inputMessagesFilterMusic](https://core.telegram.org/constructor/inputMessagesFilterMusic) - Return only music files, used for implementing the chat music gallery\n*   [inputMessagesFilterChatPhotos](https://core.telegram.org/constructor/inputMessagesFilterChatPhotos) - Return only chat photos, used to allow scrolling through the profile picture history of a group\n*   [inputMessagesFilterPhoneCalls](https://core.telegram.org/constructor/inputMessagesFilterPhoneCalls) - Return only phone calls, used with [messages.searchGlobal](https://core.telegram.org/method/messages.searchGlobal) to implement the call tab, with the phone call history\n*   [inputMessagesFilterRoundVoice](https://core.telegram.org/constructor/inputMessagesFilterRoundVoice) - Return only round videos and voice messages, used to consecutively play round videos and voice messages in a chat\n*   [inputMessagesFilterRoundVideo](https://core.telegram.org/constructor/inputMessagesFilterRoundVideo) - Return only round videos, used to consecutively play round videos in a chat\n*   [inputMessagesFilterMyMentions](https://core.telegram.org/constructor/inputMessagesFilterMyMentions) - Return only messages mentioning me, can be used to display the [mention history](https://core.telegram.org/api/mentions) or, combined with another filter or query, return only messages that satisfy a certain criteria, and contain a mention.\n*   [inputMessagesFilterGeo](https://core.telegram.org/constructor/inputMessagesFilterGeo) - Return only geolocations, is used to fetch all recent valid [geolocations or live locations](https://core.telegram.org/api/live-location) sent in a group, to display them all in a single map\n*   [inputMessagesFilterContacts](https://core.telegram.org/constructor/inputMessagesFilterContacts) - Return only contacts\n*   [inputMessagesFilterPinned](https://core.telegram.org/constructor/inputMessagesFilterPinned) - Returns only [pinned messages](https://core.telegram.org/api/pin), used for implementing the pinned message list\n\nThe returned [messages.Messages](https://core.telegram.org/type/messages.Messages) constructors contain parameters for [pagination](https://core.telegram.org/api/offsets), the messages themselves and two `offset_id_offset`/`count` parameters that can be used to display a `progress/total` counter like `photo 134 of 200`.  \nFor example, when displaying the chat photo gallery, we could display a `photo ${offset_id_offset} of ${count}` indicator on top.\n\n#### [](#search-counters)Search counters\n\n```\nmessages.searchCounter#e844ebff flags:# inexact:flags.1?true filter:MessagesFilter count:int = messages.SearchCounter;\n\n---functions---\n\nmessages.getSearchCounters#1bbcf300 flags:# peer:InputPeer saved_peer_id:flags.2?InputPeer top_msg_id:flags.0?int filters:Vector<MessagesFilter> = Vector<messages.SearchCounter>;\n```\n\nChat counters with filters can also be returned without fetching the actual messages, as seen in the schema above.\n\n### [](#global-search)Global search\n\nThe global search view should be split into multiple tabs:\n\n*   [Chats tab](#chats-tab)\n*   [Channels tab](#channels-tab)\n*   [Apps tab](#apps-tab)\n*   [Media tab](#media-tab)\n*   [Downloads tab](#downloads-tab)\n*   [Links tab](#links-tab)\n*   [Files tab](#files-tab)\n*   [Music tab](#music-tab)\n*   [Voice messages tab](#voice-messages-tab)\n\n#### [](#chats-tab)Chats tab\n\n```\ntopPeerCategoryCorrespondents#637b7ed = TopPeerCategory;\ntopPeerCategoryBotsPM#ab661b5b = TopPeerCategory;\ntopPeerCategoryGroups#bd17a14a = TopPeerCategory;\ntopPeerCategoryChannels#161d9628 = TopPeerCategory;\n\ncontacts.topPeers#70b772a8 categories:Vector<TopPeerCategoryPeers> chats:Vector<Chat> users:Vector<User> = contacts.TopPeers;\n\nmessages.messages#8c718e87 messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages;\nmessages.messagesSlice#3a54685e flags:# inexact:flags.1?true count:int next_rate:flags.0?int offset_id_offset:flags.2?int messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages;\nmessages.channelMessages#c776ba4e flags:# inexact:flags.1?true pts:int count:int offset_id_offset:flags.2?int messages:Vector<Message> topics:Vector<ForumTopic> chats:Vector<Chat> users:Vector<User> = messages.Messages;\nmessages.messagesNotModified#74535f21 count:int = messages.Messages;\n\n---functions---\n\ncontacts.getTopPeers#973478b6 flags:# correspondents:flags.0?true bots_pm:flags.1?true bots_inline:flags.2?true phone_calls:flags.3?true forward_users:flags.4?true forward_chats:flags.5?true groups:flags.10?true channels:flags.15?true bots_app:flags.16?true offset:int limit:int hash:long = contacts.TopPeers;\n\nmessages.searchGlobal#4bc6589a flags:# broadcasts_only:flags.1?true groups_only:flags.2?true users_only:flags.3?true folder_id:flags.0?int q:string filter:MessagesFilter min_date:int max_date:int offset_rate:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;\n```\n\nContains results (peers and messages) from all private/secret chats, private/public groups, private/public channels, split in the following sections:\n\n*   `Frequent contacts`: Contains avatars and names of the most frequently used users, sorted [as specified here\u00a0\u00bb](https://core.telegram.org/api/top-rating) ([topPeerCategoryCorrespondents](https://core.telegram.org/constructor/topPeerCategoryCorrespondents) category).\n*   `Recent`: Contains avatars and names of the most frequently used peers (users+chats+channels), sorted [as specified here\u00a0\u00bb](https://core.telegram.org/api/top-rating) ([topPeerCategoryCorrespondents](https://core.telegram.org/constructor/topPeerCategoryCorrespondents), [topPeerCategoryBotsPM](https://core.telegram.org/constructor/topPeerCategoryBotsPM), [topPeerCategoryGroups](https://core.telegram.org/constructor/topPeerCategoryGroups), [topPeerCategoryChannels](https://core.telegram.org/constructor/topPeerCategoryChannels) categories).\n\nSearching when in the \"Chats\" tab should invoke [messages.searchGlobal](https://core.telegram.org/method/messages.searchGlobal), replacing the previously mentioned sections with a list of peers (avatar+name) and messages (max one message per peer).\n\n#### [](#channels-tab)Channels tab\n\n```\ntopPeerCategoryChannels#161d9628 = TopPeerCategory;\n\ncontacts.topPeers#70b772a8 categories:Vector<TopPeerCategoryPeers> chats:Vector<Chat> users:Vector<User> = contacts.TopPeers;\n\nmessages.chats#64ff9fd5 chats:Vector<Chat> = messages.Chats;\n\nmessages.messages#8c718e87 messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages;\nmessages.messagesSlice#3a54685e flags:# inexact:flags.1?true count:int next_rate:flags.0?int offset_id_offset:flags.2?int messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages;\nmessages.channelMessages#c776ba4e flags:# inexact:flags.1?true pts:int count:int offset_id_offset:flags.2?int messages:Vector<Message> topics:Vector<ForumTopic> chats:Vector<Chat> users:Vector<User> = messages.Messages;\nmessages.messagesNotModified#74535f21 count:int = messages.Messages;\n\n---functions---\n\ncontacts.getTopPeers#973478b6 flags:# correspondents:flags.0?true bots_pm:flags.1?true bots_inline:flags.2?true phone_calls:flags.3?true forward_users:flags.4?true forward_chats:flags.5?true groups:flags.10?true channels:flags.15?true bots_app:flags.16?true offset:int limit:int hash:long = contacts.TopPeers;\n\nchannels.getChannelRecommendations#25a71742 flags:# channel:flags.0?InputChannel = messages.Chats;\n\nmessages.searchGlobal#4bc6589a flags:# broadcasts_only:flags.1?true groups_only:flags.2?true users_only:flags.3?true folder_id:flags.0?int q:string filter:MessagesFilter min_date:int max_date:int offset_rate:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;\n\nbots.getPopularAppBots#c2510192 offset:string limit:int = bots.PopularAppBots;\n```\n\nContains results from private/public channels only, split in the following sections:\n\n*   `Channels you joined`: Contains avatars and names of the most frequently used channels, sorted [as specified here\u00a0\u00bb](https://core.telegram.org/api/top-rating) ([topPeerCategoryChannels](https://core.telegram.org/constructor/topPeerCategoryChannels) category).\n*   `Similar channels`: Contains avatars and names of recommended public channels, similar to the ones the current user has already joined, fetched using [channels.getChannelRecommendations](https://core.telegram.org/method/channels.getChannelRecommendations) without setting the `channel` flag, see [here\u00a0\u00bb](https://core.telegram.org/api/recommend) for more info.\n\nSearching when in the \"Channels\" tab should invoke [messages.searchGlobal](https://core.telegram.org/method/messages.searchGlobal) with the `broadcasts_only` flag set, replacing the previously mentioned sections with a list of peers (avatar+name+returned message, max one row per peer).\n\n#### [](#apps-tab)Apps tab\n\n```\ntopPeerCategoryBotsApp#fd9e7bec = TopPeerCategory;\n\ncontacts.topPeers#70b772a8 categories:Vector<TopPeerCategoryPeers> chats:Vector<Chat> users:Vector<User> = contacts.TopPeers;\n\nbots.popularAppBots#1991b13b flags:# next_offset:flags.0?string users:Vector<User> = bots.PopularAppBots;\n\n// Parse only the `users` field of the following constructors (ignoring messages.channelMessages)\nmessages.messages#8c718e87 messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages;\nmessages.messagesSlice#3a54685e flags:# inexact:flags.1?true count:int next_rate:flags.0?int offset_id_offset:flags.2?int messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages;\nmessages.messagesNotModified#74535f21 count:int = messages.Messages;\nmessages.channelMessages#c776ba4e flags:# inexact:flags.1?true pts:int count:int offset_id_offset:flags.2?int messages:Vector<Message> topics:Vector<ForumTopic> chats:Vector<Chat> users:Vector<User> = messages.Messages;\n\n---functions---\n\ncontacts.getTopPeers#973478b6 flags:# correspondents:flags.0?true bots_pm:flags.1?true bots_inline:flags.2?true phone_calls:flags.3?true forward_users:flags.4?true forward_chats:flags.5?true groups:flags.10?true channels:flags.15?true bots_app:flags.16?true offset:int limit:int hash:long = contacts.TopPeers;\n\nbots.getPopularAppBots#c2510192 offset:string limit:int = bots.PopularAppBots;\n\nmessages.searchGlobal#4bc6589a flags:# broadcasts_only:flags.1?true groups_only:flags.2?true users_only:flags.3?true folder_id:flags.0?int q:string filter:MessagesFilter min_date:int max_date:int offset_rate:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;\n```\n\nUsed to implement the [Mini App Store](https://telegram.org/blog/w3-browser-mini-app-store#mini-app-store).\n\nOnly contains bots with an associated [Main Mini App](https://core.telegram.org/api/bots/webapps#main-mini-apps) (i.e. those with the [user](https://core.telegram.org/constructor/user).`bot_has_main_app` flag set), split in the following sections:\n\n*   `Apps you use`: Contains avatars, names and MAU counters (from [user](https://core.telegram.org/constructor/user).`bot_active_users`) for [Main Mini Apps](https://core.telegram.org/api/bots/webapps#main-mini-apps) of bots most frequently used by the user, sorted [as specified here\u00a0\u00bb](https://core.telegram.org/api/top-rating) ([topPeerCategoryBotsApp](https://core.telegram.org/constructor/topPeerCategoryBotsApp) category).\n*   `Popular apps`: Contains avatars, names and MAU counters of the [Main Mini Apps](https://core.telegram.org/api/bots/webapps#main-mini-apps) of the bots returned by [bots.getPopularAppBots](https://core.telegram.org/method/bots.getPopularAppBots).\n\nSearching when in the \"Apps\" tab should invoke [messages.searchGlobal](https://core.telegram.org/method/messages.searchGlobal), replacing the previously mentioned sections with a list of avatars, names and MAU counters (from [user](https://core.telegram.org/constructor/user).`bot_active_users`) for [Main Mini Apps](https://core.telegram.org/api/bots/webapps#main-mini-apps) of the returned bots (clients should only use the returned `users` field, filtering for bots with the [user](https://core.telegram.org/constructor/user).`bot_has_main_app` flag set).\n\n#### [](#media-tab)Media tab\n\nSearches for photo+video messages.\n\nSearching should invoke [messages.searchGlobal](https://core.telegram.org/method/messages.searchGlobal) with the [inputMessagesFilterPhotoVideo](https://core.telegram.org/constructor/inputMessagesFilterPhotoVideo) filter, rendering the results as specified in the [chats tab](#chats-tab).\n\nInitially, the tab should be populated with the results returned by passing an empty string in `q`.\n\n#### [](#downloads-tab)Downloads tab\n\nContains a locally generated list of recently downloaded media (of any kind) from all peers.\n\nSearching should locally search within this list.\n\n#### [](#links-tab)Links tab\n\nSearches for messages with links.\n\nSearching should invoke [messages.searchGlobal](https://core.telegram.org/method/messages.searchGlobal) with the [inputMessagesFilterUrl](https://core.telegram.org/constructor/inputMessagesFilterUrl) filter, rendering the results as specified in the [chats tab](#chats-tab).\n\nInitially, the tab should be populated with the results returned by passing an empty string in `q`.\n\n#### [](#files-tab)Files tab\n\nSearches for messages with files.\n\nSearching should invoke [messages.searchGlobal](https://core.telegram.org/method/messages.searchGlobal) with the [inputMessagesFilterDocument](https://core.telegram.org/constructor/inputMessagesFilterDocument) filter, rendering the results as specified in the [chats tab](#chats-tab).\n\nInitially, the tab should be populated with the results returned by passing an empty string in `q`.\n\n#### [](#music-tab)Music tab\n\nSearches for music files.\n\nSearching should invoke [messages.searchGlobal](https://core.telegram.org/method/messages.searchGlobal) with the [inputMessagesFilterMusic](https://core.telegram.org/constructor/inputMessagesFilterMusic) filter, rendering the results as specified in the [chats tab](#chats-tab).\n\nInitially, the tab should be populated with the results returned by passing an empty string in `q`.\n\n#### [](#voice-messages-tab)Voice messages tab\n\nSearches for voice messages.\n\nSearching should invoke [messages.searchGlobal](https://core.telegram.org/method/messages.searchGlobal) with the [inputMessagesFilterVoice](https://core.telegram.org/constructor/inputMessagesFilterVoice) filter, rendering the results as specified in the [chats tab](#chats-tab).\n\nInitially, the tab should be populated with the results returned by passing an empty string in `q`.\n\n### [](#global-hashtag-search)Global hashtag search\n\n```\n---functions---\n\nchannels.searchPosts#d19f987b hashtag:string offset_rate:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;\n```\n\nThe special [channels.searchPosts](https://core.telegram.org/method/channels.searchPosts) method may be used to globally search for posts from public channels (_including_ those we aren't a member of) and stories from public users, channels and groups (_including_ non-contacts and peers we've never seen before), containing a specific hashtag (which should be passed in the `hashtag` field without the `#`).\n\nSee [here\u00a0\u00bb](https://core.telegram.org/api/stories#searching-stories) for more info on global search for _stories_ (which should _not_ be triggered when using the global search bar, but rather only when clicking on story hashtags and location tags).",
    "url": "https://core.telegram.org/api/search"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/poll",
      "title": "Poll",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Poll"
        },
        {
          "property": "og:description",
          "content": "Telegram allows sending polls and quizzes, that can be voted on by thousands, if not millions of users in chats and channels."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:28 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3917",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Poll\n\nTelegram allows sending polls and quizzes, that can be voted on by thousands, if not millions of users in chats and channels.\n\n### [](#sending-a-poll)Sending a poll\n\n```\npollAnswer#ff16e2ca text:TextWithEntities option:bytes = PollAnswer;\n\npoll#58747131 id:long flags:# closed:flags.0?true public_voters:flags.1?true multiple_choice:flags.2?true quiz:flags.3?true question:TextWithEntities answers:Vector<PollAnswer> close_period:flags.4?int close_date:flags.5?int = Poll;\n\ninputMediaPoll#f94e5f1 flags:# poll:Poll correct_answers:flags.0?Vector<bytes> solution:flags.1?string solution_entities:flags.1?Vector<MessageEntity> = InputMedia;\n\n---functions---\n\nmessages.sendMedia#7852834e flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\n```\n\nTo send a poll in a chat, call [messages.sendMedia](https://core.telegram.org/method/messages.sendMedia), providing an [inputMediaPoll](https://core.telegram.org/constructor/inputMediaPoll):\n\n*   `poll` is the actual [poll constructor](https://core.telegram.org/constructor/poll), containing:\n    \n    *   `question` - The poll title, aka the poll's title\n    *   `answers` - A vector of possible answers (2-10), each with a visible title `text` , and a unique `option` identifier (1-100 bytes)\n    *   `closed` - Whether the poll is closed\n    *   `public_voters` - Whether cast votes are publicly visible to all users (non-anonymous poll)\n    *   `multiple_choice` - Whether multiple options can be chosen as answer\n    *   `quiz` - Whether this is a quiz with correct answer IDs specified in `inputMediaPoll.correct_answers`\n    *   `close_period` - Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with `close_date` .\n    *   `close_date` - Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future; can't be used together with `close_period` .  \n        These last two parameters are exactly the same, except that one uses absolute, the other relative unixtime.\n*   `correct_answers` - For quizzes, option ID of the only correct answer\n    \n*   `solution` - Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds\n    \n*   `solution_entities` - [Styled text message entities](https://core.telegram.org/api/entities) for the `solution` explanation\n    \n\nIn order to prematurely close the poll, preventing further votes, use [messages.editMessage](https://core.telegram.org/method/messages.editMessage), setting the `poll.closed` flag to true.\n\n### [](#voting-in-polls)Voting in polls\n\n```\npollAnswerVoters#3b6ddad2 flags:# chosen:flags.0?true correct:flags.1?true option:bytes voters:int = PollAnswerVoters;\n\npollResults#7adf2420 flags:# min:flags.0?true results:flags.1?Vector<PollAnswerVoters> total_voters:flags.2?int recent_voters:flags.3?Vector<Peer> solution:flags.4?string solution_entities:flags.4?Vector<MessageEntity> = PollResults;\n\npoll#58747131 id:long flags:# closed:flags.0?true public_voters:flags.1?true multiple_choice:flags.2?true quiz:flags.3?true question:TextWithEntities answers:Vector<PollAnswer> close_period:flags.4?int close_date:flags.5?int = Poll;\n\nmessageMediaPoll#4bd6e798 poll:Poll results:PollResults = MessageMedia;\n\nupdateMessagePoll#aca1657b flags:# poll_id:long poll:flags.0?Poll results:PollResults = Update;\n\n---functions---\n\nmessages.sendVote#10ea6184 peer:InputPeer msg_id:int options:Vector<bytes> = Updates;\n```\n\nWhen receiving a [message](https://core.telegram.org/constructor/message) with a [messageMediaPoll](https://core.telegram.org/constructor/messageMediaPoll), users can vote in it using [messages.sendVote](https://core.telegram.org/method/messages.sendVote), specifying the chosen `option` identifiers.\n\nThe method will return an [updateMessagePoll](https://core.telegram.org/constructor/updateMessagePoll), containing an updated [pollResults](https://core.telegram.org/constructor/pollResults) constructor, with the `chosen` flag set on the options we chose, and the `correct` flag set on the correct answers.\n\n### [](#getting-poll-votes)Getting poll votes\n\n```\npollAnswerVoters#3b6ddad2 flags:# chosen:flags.0?true correct:flags.1?true option:bytes voters:int = PollAnswerVoters;\n\npollResults#7adf2420 flags:# min:flags.0?true results:flags.1?Vector<PollAnswerVoters> total_voters:flags.2?int recent_voters:flags.3?Vector<Peer> solution:flags.4?string solution_entities:flags.4?Vector<MessageEntity> = PollResults;\n\nupdateMessagePoll#aca1657b flags:# poll_id:long poll:flags.0?Poll results:PollResults = Update;\n\n---functions---\n\nmessages.getPollResults#73bb643b peer:InputPeer msg_id:int = Updates;\n```\n\nRegularly, if new users have voted in polls available to the user, they will receive an [updateMessagePoll](https://core.telegram.org/constructor/updateMessagePoll), with updated [pollResults](https://core.telegram.org/constructor/pollResults).\n\nThe same constructor can also be fetched manually using [messages.getPollResults](https://core.telegram.org/method/messages.getPollResults).\n\n### [](#getting-poll-voters-in-non-anonymous-polls)Getting poll voters in non-anonymous polls\n\n```\nmessagePeerVote#b6cc2d5c peer:Peer option:bytes date:int = MessagePeerVote;\nmessagePeerVoteInputOption#74cda504 peer:Peer date:int = MessagePeerVote;\nmessagePeerVoteMultiple#4628f6e6 peer:Peer options:Vector<bytes> date:int = MessagePeerVote;\n\nmessages.votesList#4899484e flags:# count:int votes:Vector<MessagePeerVote> chats:Vector<Chat> users:Vector<User> next_offset:flags.0?string = messages.VotesList; \n\nupdateMessagePollVote#24f40e77 poll_id:long peer:Peer options:Vector<bytes> qts:int = Update;\n\n---functions---\n\nmessages.getPollVotes#b86e380e flags:# peer:InputPeer id:int option:flags.0?bytes offset:flags.1?string limit:int = messages.VotesList; \n```\n\n[messages.getPollVotes](https://core.telegram.org/method/messages.getPollVotes) can be used to get poll results for non-anonymous polls, to see how each user voted for a poll option.  \nBots will also receive an [updateMessagePollVote](https://core.telegram.org/constructor/updateMessagePollVote) every time a user their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself.",
    "url": "https://core.telegram.org/api/poll"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/effects",
      "title": "Animated message effects",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Animated message effects"
        },
        {
          "property": "og:description",
          "content": "Telegram allows adding spectacular animated effects to messages you send."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:30 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3567",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Animated message effects\n\nTelegram allows adding spectacular **animated effects** to messages you send in 1-on-1 chats.\n\n```\navailableEffect#93c3e27e flags:# premium_required:flags.2?true id:long emoticon:string static_icon_id:flags.0?long effect_sticker_id:long effect_animation_id:flags.1?long = AvailableEffect;\n\nmessages.availableEffectsNotModified#d1ed9a5b = messages.AvailableEffects;\nmessages.availableEffects#bddb616e hash:int effects:Vector<AvailableEffect> documents:Vector<Document> = messages.AvailableEffects;\n\nmessage#94345242 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true from_scheduled:flags.18?true legacy:flags.19?true edit_hide:flags.21?true pinned:flags.24?true noforwards:flags.26?true invert_media:flags.27?true flags2:# offline:flags2.1?true video_processing_pending:flags2.4?true id:int from_id:flags.8?Peer from_boosts_applied:flags.29?int peer_id:Peer saved_peer_id:flags.28?Peer fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?long via_business_bot_id:flags2.0?long reply_to:flags.3?MessageReplyHeader date:int message:string media:flags.9?MessageMedia reply_markup:flags.6?ReplyMarkup entities:flags.7?Vector<MessageEntity> views:flags.10?int forwards:flags.10?int replies:flags.23?MessageReplies edit_date:flags.15?int post_author:flags.16?string grouped_id:flags.17?long reactions:flags.20?MessageReactions restriction_reason:flags.22?Vector<RestrictionReason> ttl_period:flags.25?int quick_reply_shortcut_id:flags.30?int effect:flags2.2?long factcheck:flags2.3?FactCheck = Message;\n\ndraftMessage#2d65321f flags:# no_webpage:flags.1?true invert_media:flags.6?true reply_to:flags.4?InputReplyTo message:string entities:flags.3?Vector<MessageEntity> media:flags.5?InputMedia date:int effect:flags.7?long = DraftMessage;\n\n---functions---\n\nmessages.getAvailableEffects#dea20a39 hash:int = messages.AvailableEffects;\n\nmessages.sendMessage#983f9745 flags:# no_webpage:flags.1?true silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\n\nmessages.sendMedia#7852834e flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\n\nmessages.sendMultiMedia#37b74355 flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo multi_media:Vector<InputSingleMedia> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\n\nmessages.saveDraft#d372c5ce flags:# no_webpage:flags.1?true invert_media:flags.6?true reply_to:flags.4?InputReplyTo peer:InputPeer message:string entities:flags.3?Vector<MessageEntity> media:flags.5?InputMedia effect:flags.7?long = Bool;\n```\n\nUse [messages.getAvailableEffects](https://core.telegram.org/method/messages.getAvailableEffects) to fetch the full list of message effects that may be used.\n\nClients should re-invoke the method (re-using the `hash` returned from the previous method call) to check for updates in the effects list at most once an hour (or if a [message](https://core.telegram.org/constructor/message) with an unknown `effect` is received).\n\nInfo about each effect is stored in the [availableEffect](https://core.telegram.org/constructor/availableEffect) constructor, identified by its `id` field: this ID should then be passed to the `effect` field of [messages.sendMessage](https://core.telegram.org/method/messages.sendMessage), [messages.sendMedia](https://core.telegram.org/method/messages.sendMedia), [messages.sendMultiMedia](https://core.telegram.org/method/messages.sendMultiMedia) to attach the effect to the [message](https://core.telegram.org/constructor/message), in the `effect` field.\n\nAll `long` IDs of [availableEffect](https://core.telegram.org/constructor/availableEffect) except for `id` are [document](https://core.telegram.org/constructor/document).`id`s from the containing [messages.availableEffects](https://core.telegram.org/constructor/messages.availableEffects) constructor.\n\nEach effect has the following info, described by the fields of [availableEffect](https://core.telegram.org/constructor/availableEffect) as follows:\n\n*   Emoji: specified in `emoticon`, used to quickly search for effects.\n*   Preview icon: the webp image from `static_icon_id` if set, otherwise the emoji specified in `emoticon`.  \n    Shown in the right bottom corner of the preview animation as a quick way for the user to classify effects. Must also be shown in messages with this effect, near the message date: clicking on this icon should re-trigger the effect.\n*   Preview animation: the [animated sticker](https://core.telegram.org/api/stickers#animated-stickers) specified in `effect_sticker_id`.  \n    Used for the effect selection menu.\n*   Effect animation: a different [animated sticker](https://core.telegram.org/api/stickers#animated-stickers), specified either by `effect_animation_id` (if set) or by the [premium animated sticker effect](https://core.telegram.org/api/stickers#premium-animated-sticker-effects) associated to the animated sticker specified in `effect_sticker_id` (always different from the animated sticker itself, fetched thanks to the [videoSize](https://core.telegram.org/constructor/videoSize) of type `f` as specified [here\u00a0\u00bb](https://core.telegram.org/api/stickers#premium-animated-sticker-effects)).  \n    The effect animation should be only played once, when first receiving or sending the message.  \n    Clicking on the preview icon near the message date should re-trigger the effect.",
    "url": "https://core.telegram.org/api/effects"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/reactions",
      "title": "Message reactions",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Message reactions"
        },
        {
          "property": "og:description",
          "content": "Telegram allows users to react on any message using specific emojis, triggering cute lottie animations."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:30 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "8955",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Message reactions\n\nTelegram allows users to react on any message using specific emojis, triggering cute lottie animations.\n\n### [](#react-to-a-message)React to a message\n\n```\nreactionEmoji#1b2286b8 emoticon:string = Reaction;\nreactionCustomEmoji#8935fc73 document_id:long = Reaction;\nreactionPaid#523da4eb = Reaction;\n\nreactionCount#a3d1cb80 flags:# chosen_order:flags.0?int reaction:Reaction count:int = ReactionCount;\n\nmessagePeerReaction#8c79b63c flags:# big:flags.0?true unread:flags.1?true my:flags.2?true peer_id:Peer date:int reaction:Reaction = MessagePeerReaction;\n\nmessageReactions#a339f0b flags:# min:flags.0?true can_see_list:flags.2?true reactions_as_tags:flags.3?true results:Vector<ReactionCount> recent_reactions:flags.1?Vector<MessagePeerReaction> top_reactors:flags.4?Vector<MessageReactor> = MessageReactions;\n\nmessage#94345242 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true from_scheduled:flags.18?true legacy:flags.19?true edit_hide:flags.21?true pinned:flags.24?true noforwards:flags.26?true invert_media:flags.27?true flags2:# offline:flags2.1?true video_processing_pending:flags2.4?true id:int from_id:flags.8?Peer from_boosts_applied:flags.29?int peer_id:Peer saved_peer_id:flags.28?Peer fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?long via_business_bot_id:flags2.0?long reply_to:flags.3?MessageReplyHeader date:int message:string media:flags.9?MessageMedia reply_markup:flags.6?ReplyMarkup entities:flags.7?Vector<MessageEntity> views:flags.10?int forwards:flags.10?int replies:flags.23?MessageReplies edit_date:flags.15?int post_author:flags.16?string grouped_id:flags.17?long reactions:flags.20?MessageReactions restriction_reason:flags.22?Vector<RestrictionReason> ttl_period:flags.25?int quick_reply_shortcut_id:flags.30?int effect:flags2.2?long factcheck:flags2.3?FactCheck = Message;\n\nupdateMessageReactions#5e1b3cb8 flags:# peer:Peer msg_id:int top_msg_id:flags.0?int reactions:MessageReactions = Update;\n\nmessages.messageReactionsList#31bd492d flags:# count:int reactions:Vector<MessagePeerReaction> chats:Vector<Chat> users:Vector<User> next_offset:flags.0?string = messages.MessageReactionsList;\n\n---functions---\n\nmessages.sendReaction#d30d78d4 flags:# big:flags.1?true add_to_recent:flags.2?true peer:InputPeer msg_id:int reaction:flags.0?Vector<Reaction> = Updates;\nmessages.getMessagesReactions#8bba90e6 peer:InputPeer id:Vector<int> = Updates;\nmessages.getMessageReactionsList#461b3f48 flags:# peer:InputPeer id:int reaction:flags.0?Reaction offset:flags.1?string limit:int = messages.MessageReactionsList;\n\nmessages.getUnreadReactions#3223495b flags:# peer:InputPeer top_msg_id:flags.0?int offset_id:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;\nmessages.readReactions#54aa7f8e flags:# peer:InputPeer top_msg_id:flags.0?int = messages.AffectedHistory;\n\nmessages.reportReaction#3f64c076 peer:InputPeer id:int reaction_peer:InputPeer = Bool;\n```\n\nUsers can react to a message with one or more reactions using [messages.sendReaction](https://core.telegram.org/method/messages.sendReaction).  \nAfter sending the reaction, the `chosen_order` field of [reactionCount](https://core.telegram.org/constructor/reactionCount) (in [messageReactions](https://core.telegram.org/constructor/messageReactions)) will be set for the reaction. The integer value indicates when was the reaction added: the bigger the value, the newer the reaction, use this value to appropriately sort the `messages.sendReaction:reaction` vector when adding new reactions.  \nReactions should be sent in **ascending order** (new reactions at the end in the `messages.sendReaction:reaction` vector), and when adding more reactions to the same message, older reactions should be removed to keep the total number of sent reactions within [reactions\\_user\\_max\\_default](https://core.telegram.org/api/config#reactions-user-max-default)/[reactions\\_user\\_max\\_premium](https://core.telegram.org/api/config#reactions-user-max-premium) reactions.  \nThe [reactions\\_uniq\\_max](https://core.telegram.org/api/config#reactions-uniq-max) configuration field also indicates the maximum number of unique reactions that can be added to a message: for example, if there are 2000 ![\ud83d\udc4d](https://telegram.org/img/emoji/40/F09F918D.png) and 1000 custom emoji ![\ud83d\ude01](https://telegram.org/img/emoji/40/F09F9881.png) reactions and reactions\\_uniq\\_max = 2, you can't add a ![\ud83d\udc4e](https://telegram.org/img/emoji/40/F09F918E.png) reaction, because that would raise the number of unique reactions to 3 > 2.\n\nChats and channels may also configure a custom limit of unique reactions; this info will be available to users in [channelFull](https://core.telegram.org/constructor/channelFull).`reactions_limit` and [chatFull](https://core.telegram.org/constructor/chatFull).`reactions_limit`.\n\nThe `big` flag can be optionally set to elicit a bigger reaction.  \nSend a [reactionEmoji](https://core.telegram.org/constructor/reactionEmoji) to react using a normal emoji, and a [reactionCustomEmoji](https://core.telegram.org/constructor/reactionCustomEmoji) to react using a [custom emoji](https://core.telegram.org/api/custom-emoji).  \nMessage authors will receive an [updateMessageReactions](https://core.telegram.org/constructor/updateMessageReactions) update when a user reacts to their message, if enabled as specified [here\u00a0\u00bb](#notifications-about-reactions).\n\n[messages.getMessagesReactions](https://core.telegram.org/method/messages.getMessagesReactions) can be used to fetch a full list of reactions for one or more messages.  \nApps should short-poll reactions for visible messages (that weren't sent by the user) once every 15-30 seconds, but only if `message.reactions` is set.\n\nIn groups, [messages.getMessageReactionsList](https://core.telegram.org/method/messages.getMessageReactionsList) can be used to fetch the reaction list, along with the sender of each reaction.  \nIn groups, [messages.reportReaction](https://core.telegram.org/method/messages.reportReaction) can be used to report a certain [custom emoji](https://core.telegram.org/api/custom-emoji) reaction, specifying the `peer`, the message `id` and the user that sent the reaction (`reaction_peer`).\n\n[messages.getUnreadReactions](https://core.telegram.org/method/messages.getUnreadReactions) is used to fetch messages with unread reactions.  \nUse [messages.readReactions](https://core.telegram.org/method/messages.readReactions) to mark all reactions as read in a certain chat.\n\nFor [saved messages](https://core.telegram.org/api/saved-messages), if the `reactions_as_tags` flag of [messageReactions](https://core.telegram.org/constructor/messageReactions) is set, or if there are no reactions, all present and future reactions should be treated as [message tags, see here \u00bb for more info](https://core.telegram.org/api/saved-messages#tags).\n\n### [](#paid-reactions)Paid reactions\n\n```\nreactionPaid#523da4eb = Reaction;\n\n---functions---\n\nmessages.setChatAvailableReactions#864b2581 flags:# peer:InputPeer available_reactions:ChatReactions reactions_limit:flags.0?int paid_enabled:flags.1?Bool = Updates;\n\nmessages.sendPaidReaction#9dd6a67b flags:# peer:InputPeer msg_id:int count:int random_id:long private:flags.0?Bool = Updates;\n```\n\nPaid reactions (aka Star reactions) may be sent to channel posts by invoking [messages.sendPaidReaction](https://core.telegram.org/method/messages.sendPaidReaction): this will transfer `count` Telegram Stars to the channel's balance and increment by `count` the reaction counter of the Star reaction with type [reactionPaid](https://core.telegram.org/constructor/reactionPaid).\n\nTo enable paid reactions, channel admins must invoke [messages.setChatAvailableReactions](https://core.telegram.org/method/messages.setChatAvailableReactions), passing [boolTrue](https://core.telegram.org/constructor/boolTrue) to `paid_enabled` and the previously configured reaction set in `available_reactions` (`reactions_limit` can be omitted, as omitting the flag will keep the previously configured value).\n\nUsers can determine whether a channel supports paid reactions by checking the value of the [channelFull](https://core.telegram.org/constructor/channelFull).`paid_reactions_available` flag.\n\nThe maximum number of paid reactions that may be sent on a post is specified in the [stars\\_paid\\_reaction\\_amount\\_max \u00bb](https://core.telegram.org/api/config#stars-paid-reaction-amount-max) client configuration value.\n\n#### [](#paid-reaction-privacy)Paid reaction privacy\n\n```\nupdatePaidReactionPrivacy#51ca7aec private:Bool = Update;\n\nupdateMessageReactions#5e1b3cb8 flags:# peer:Peer msg_id:int top_msg_id:flags.0?int reactions:MessageReactions = Update;\n\nmessageReactions#a339f0b flags:# min:flags.0?true can_see_list:flags.2?true reactions_as_tags:flags.3?true results:Vector<ReactionCount> recent_reactions:flags.1?Vector<MessagePeerReaction> top_reactors:flags.4?Vector<MessageReactor> = MessageReactions;\n\nmessageReactor#4ba3a95a flags:# top:flags.0?true my:flags.1?true anonymous:flags.2?true peer_id:flags.3?Peer count:int = MessageReactor;\n\n---functions---\n\nmessages.getPaidReactionPrivacy#472455aa = Updates;\n\nmessages.sendPaidReaction#9dd6a67b flags:# peer:InputPeer msg_id:int count:int random_id:long private:flags.0?Bool = Updates;\n\nmessages.togglePaidReactionPrivacy#849ad397 peer:InputPeer msg_id:int private:Bool = Bool;\n\nmessages.getMessagesReactions#8bba90e6 peer:InputPeer id:Vector<int> = Updates;\n```\n\nEach post with star reactions has a leaderboard with the top senders, but users can opt out of appearing there if they prefer more privacy.  \nIf the user explicitly chose to make their paid reaction(s) private, pass [boolTrue](https://core.telegram.org/constructor/boolTrue) to [messages.sendPaidReaction](https://core.telegram.org/method/messages.sendPaidReaction).`private`.  \nIf the user explicitly chose to make their paid reaction(s) private, pass [boolFalse](https://core.telegram.org/constructor/boolTrue) to [messages.sendPaidReaction](https://core.telegram.org/method/messages.sendPaidReaction).`private`.  \nIf the user did not make any explicit choice about the privacy of their paid reaction(s) (i.e. when reacting by clicking on an existing star reaction on a message), do not populate the [messages.sendPaidReaction](https://core.telegram.org/method/messages.sendPaidReaction).`private` flag: this will use the default reaction privacy, stored on the server and synced to clients using [updatePaidReactionPrivacy](https://core.telegram.org/constructor/updatePaidReactionPrivacy) (see below for more info).\n\nTo change the privacy of already sent paid reactions, invoke [messages.togglePaidReactionPrivacy](https://core.telegram.org/method/messages.togglePaidReactionPrivacy), passing the ID of the message, the channel and the desired privacy setting.\n\nExplicitly specifying a custom reaction privacy, or changing the reaction privacy of already sent reactions will update the default reaction privacy stored on the server: if the new value is different from the old one, an [updatePaidReactionPrivacy](https://core.telegram.org/constructor/updatePaidReactionPrivacy) update will be emitted.  \nClients should invoke [messages.getPaidReactionPrivacy](https://core.telegram.org/method/messages.getPaidReactionPrivacy) on startup to fetch the current default reaction privacy (because the [updatePaidReactionPrivacy](https://core.telegram.org/constructor/updatePaidReactionPrivacy) update is only sent to currently online sessions and cannot be fetched using getDifference on client startup).\n\nTo fetch the paid reactions leaderboard, invoke [messages.getMessagesReactions](https://core.telegram.org/method/messages.getMessagesReactions): the returned [updateMessageReactions](https://core.telegram.org/constructor/updateMessageReactions) constructor will contain a `top_reactors` vector of [messageReactor](https://core.telegram.org/constructor/messageReactor)s, containing the paid reactions leaderboard for that message.\n\n### [](#react-to-a-story)React to a story\n\nSee [here\u00a0\u00bb](https://core.telegram.org/api/stories#reactions) for more info on how to react to a story.\n\n### [](#notifications-about-reactions)Notifications about reactions\n\n```\nreactionNotificationsFromContacts#bac3a61a = ReactionNotificationsFrom;\nreactionNotificationsFromAll#4b9e22a0 = ReactionNotificationsFrom;\n\nreactionsNotifySettings#56e34970 flags:# messages_notify_from:flags.0?ReactionNotificationsFrom stories_notify_from:flags.1?ReactionNotificationsFrom sound:NotificationSound show_previews:Bool = ReactionsNotifySettings;\n\nupdateNewStoryReaction#1824e40b story_id:int peer:Peer reaction:Reaction = Update;\nupdateMessageReactions#5e1b3cb8 flags:# peer:Peer msg_id:int top_msg_id:flags.0?int reactions:MessageReactions = Update;\n\n---functions---\n\naccount.setReactionsNotifySettings#316ce548 settings:ReactionsNotifySettings = ReactionsNotifySettings;\naccount.getReactionsNotifySettings#6dd654c = ReactionsNotifySettings;\n```\n\nUsers may choose to receive notifications about reactions sent to their messages and stories by any user, only by contacts, or completely disable them.\n\nThese reaction notification settings may be changed using [account.setReactionsNotifySettings](https://core.telegram.org/method/account.setReactionsNotifySettings), and fetched using [account.getReactionsNotifySettings](https://core.telegram.org/method/account.getReactionsNotifySettings).\n\nA custom [notification sound\u00a0\u00bb](https://core.telegram.org/api/ringtones) may also be set for reactions in the `sound` field of the [reactionsNotifySettings](https://core.telegram.org/constructor/reactionsNotifySettings).\n\nIf `show_previews=false`, [push notifications\u00a0\u00bb](https://core.telegram.org/api/push-updates) about message/story reactions will only be of type `REACT_HIDDEN`/`REACT_STORY_HIDDEN`, without any information about the reacted-to story or the reaction itself.\n\n### [](#animated-normal-emojis)Animated normal emojis\n\n```\nreactionEmoji#1b2286b8 emoticon:string = Reaction;\n\navailableReaction#c077ec01 flags:# inactive:flags.0?true premium:flags.2?true reaction:string title:string static_icon:Document appear_animation:Document select_animation:Document activate_animation:Document effect_animation:Document around_animation:flags.1?Document center_icon:flags.1?Document = AvailableReaction;\n\nmessages.availableReactionsNotModified#9f071957 = messages.AvailableReactions;\nmessages.availableReactions#768e3aad hash:int reactions:Vector<AvailableReaction> = messages.AvailableReactions;\n\ninputStickerSetEmojiGenericAnimations#04c4d4ce = InputStickerSet;\n\n---functions---\n\nmessages.getAvailableReactions#18dea0ac hash:int = messages.AvailableReactions;\n```\n\n[messages.getAvailableReactions](https://core.telegram.org/method/messages.getAvailableReactions) can be used to fetch a list of animations to play when reacting with a normal [reactionEmoji](https://core.telegram.org/constructor/reactionEmoji).  \nThe returned vector of [availableReaction](https://core.telegram.org/constructor/availableReaction) constructors contains multiple fields with lottie [animated stickers](https://core.telegram.org/api/stickers) and simple images that should be positioned, displayed and played appropriately in the UI, as described in the [constructor page\u00a0\u00bb](https://core.telegram.org/constructor/availableReaction).\n\nUsers can also react using [custom emojis\u00a0\u00bb](https://core.telegram.org/api/custom-emoji), in which case the `appear_animation` and `select_animation` are equal to the custom emoji itself that can be fetched [as described here\u00a0\u00bb](https://core.telegram.org/api/custom-emoji).  \nFor custom emojis, the `effect_animation` must be equal to the `effect_animation` of the associated normal emoji: if no effect animation is present for the normal emoji associated to a custom emoji, a random [animated sticker](https://core.telegram.org/api/stickers) should be played from the [inputStickerSetEmojiGenericAnimations](https://core.telegram.org/constructor/inputStickerSetEmojiGenericAnimations) stickerset, fetched using [messages.getStickerSet](https://core.telegram.org/method/messages.getStickerSet) as described [here\u00a0\u00bb](https://core.telegram.org/api/stickers#stickersets).\n\n### [](#available-reactions-in-group-or-channel)Available reactions in group or channel\n\n```\nreactionEmoji#1b2286b8 emoticon:string = Reaction;\nreactionCustomEmoji#8935fc73 document_id:long = Reaction;\n\nchatReactionsNone#eafc32bc = ChatReactions;\nchatReactionsAll#52928bca flags:# allow_custom:flags.0?true = ChatReactions;\nchatReactionsSome#661d4037 reactions:Vector<Reaction> = ChatReactions;\n\nchatFull#2633421b flags:# can_set_username:flags.7?true has_scheduled:flags.8?true translations_disabled:flags.19?true id:long about:string participants:ChatParticipants chat_photo:flags.2?Photo notify_settings:PeerNotifySettings exported_invite:flags.13?ExportedChatInvite bot_info:flags.3?Vector<BotInfo> pinned_msg_id:flags.6?int folder_id:flags.11?int call:flags.12?InputGroupCall ttl_period:flags.14?int groupcall_default_join_as:flags.15?Peer theme_emoticon:flags.16?string requests_pending:flags.17?int recent_requesters:flags.17?Vector<long> available_reactions:flags.18?ChatReactions reactions_limit:flags.20?int = ChatFull;\nchannelFull#bbab348d flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true can_set_location:flags.16?true has_scheduled:flags.19?true can_view_stats:flags.20?true blocked:flags.22?true flags2:# can_delete_channel:flags2.0?true antispam:flags2.1?true participants_hidden:flags2.2?true translations_disabled:flags2.3?true stories_pinned_available:flags2.5?true view_forum_as_messages:flags2.6?true restricted_sponsored:flags2.11?true can_view_revenue:flags2.12?true paid_media_allowed:flags2.14?true can_view_stars_revenue:flags2.15?true paid_reactions_available:flags2.16?true id:long about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int online_count:flags.13?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:flags.23?ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?long migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int folder_id:flags.11?int linked_chat_id:flags.14?long location:flags.15?ChannelLocation slowmode_seconds:flags.17?int slowmode_next_send_date:flags.18?int stats_dc:flags.12?int pts:int call:flags.21?InputGroupCall ttl_period:flags.24?int pending_suggestions:flags.25?Vector<string> groupcall_default_join_as:flags.26?Peer theme_emoticon:flags.27?string requests_pending:flags.28?int recent_requesters:flags.28?Vector<long> default_send_as:flags.29?Peer available_reactions:flags.30?ChatReactions reactions_limit:flags2.13?int stories:flags2.4?PeerStories wallpaper:flags2.7?WallPaper boosts_applied:flags2.8?int boosts_unrestrict:flags2.9?int emojiset:flags2.10?StickerSet = ChatFull;\n\nchannelAdminLogEventActionChangeAvailableReactions#be4e0ef8 prev_value:ChatReactions new_value:ChatReactions = ChannelAdminLogEventAction;\n\n---functions---\n\nmessages.setChatAvailableReactions#864b2581 flags:# peer:InputPeer available_reactions:ChatReactions reactions_limit:flags.0?int paid_enabled:flags.1?Bool = Updates;\n```\n\nChat and channel administrators can use [messages.setChatAvailableReactions](https://core.telegram.org/method/messages.setChatAvailableReactions) to restrict the set of reactions that can be used in a chat or channel, see [here\u00a0\u00bb](https://core.telegram.org/type/ChatReactions) for a list of possible configuration values.  \nThe set [ChatReactions](https://core.telegram.org/type/ChatReactions) constructor can then be fetched by users using [messages.getFullChat](https://core.telegram.org/method/messages.getFullChat), and will be contained in the `available_reactions` field of the returned full info constructor.\n\nThe `reactions_limit` limit flag may be used to impose a custom limit of unique reactions (i.e. a customizable version of [appConfig.reactions\\_uniq\\_max](https://core.telegram.org/api/config#reactions-uniq-max)); this field and the other info set by the method will then be available to users in [channelFull](https://core.telegram.org/constructor/channelFull) and [chatFull](https://core.telegram.org/constructor/chatFull).\n\nThe [reactions\\_in\\_chat\\_max](https://core.telegram.org/api/config#reactions-in-chat-max) configuration field indicates the maximum number of reactions that can be specified in [chatReactionsSome](https://core.telegram.org/constructor/chatReactionsSome).\n\n### [](#recent-reactions)Recent reactions\n\n```\nreactionEmoji#1b2286b8 emoticon:string = Reaction;\nreactionCustomEmoji#8935fc73 document_id:long = Reaction;\n\nmessages.reactionsNotModified#b06fdbdf = messages.Reactions;\nmessages.reactions#eafdf716 hash:long reactions:Vector<Reaction> = messages.Reactions;\n\nupdateRecentReactions#6f7863f4 = Update;\n\n---functions---\n\nmessages.getRecentReactions#39461db2 limit:int hash:long = messages.Reactions;\nmessages.clearRecentReactions#9dfeefb4 = Bool;\n\nmessages.sendReaction#d30d78d4 flags:# big:flags.1?true add_to_recent:flags.2?true peer:InputPeer msg_id:int reaction:flags.0?Vector<Reaction> = Updates;\n```\n\nRecently used reactions can be fetched using [messages.getRecentReactions](https://core.telegram.org/method/messages.getRecentReactions): the list can be cleared using [messages.clearRecentReactions](https://core.telegram.org/method/messages.clearRecentReactions).  \nThe `add_to_recent` flag of [messages.sendReaction](https://core.telegram.org/method/messages.sendReaction) must be set iff the user reacts to a message using the extended reactions menu (as opposed to the reaction bubble): this will update the recent reaction list, triggering an [updateRecentReactions](https://core.telegram.org/constructor/updateRecentReactions) update on other logged-in sessions: this update should trigger a new call to [messages.getRecentReactions](https://core.telegram.org/method/messages.getRecentReactions) to refresh the locally cached list.\n\n### [](#featured-reactions)Featured reactions\n\n```\nreactionEmoji#1b2286b8 emoticon:string = Reaction;\nreactionCustomEmoji#8935fc73 document_id:long = Reaction;\n\nmessages.reactionsNotModified#b06fdbdf = messages.Reactions;\nmessages.reactions#eafdf716 hash:long reactions:Vector<Reaction> = messages.Reactions;\n\n---functions---\n\nmessages.getTopReactions#bb8125ba limit:int hash:long = messages.Reactions;\n```\n\nA list of featured emoji and [custom emoji](https://core.telegram.org/api/custom-emoji) reactions can be fetched using [messages.getTopReactions](https://core.telegram.org/method/messages.getTopReactions).\n\n### [](#set-default-reaction)Set default reaction\n\n```\nreactionEmoji#1b2286b8 emoticon:string = Reaction;\nreactionCustomEmoji#8935fc73 document_id:long = Reaction;\n\nconfig#cc1a241e flags:# default_p2p_contacts:flags.3?true preload_featured_stickers:flags.4?true revoke_pm_inbox:flags.6?true blocked_mode:flags.8?true force_try_ipv6:flags.14?true date:int expires:int test_mode:Bool this_dc:int dc_options:Vector<DcOption> dc_txt_domain_name:string chat_size_max:int megagroup_size_max:int forwarded_count_max:int online_update_period_ms:int offline_blur_timeout_ms:int offline_idle_timeout_ms:int online_cloud_timeout_ms:int notify_cloud_delay_ms:int notify_default_delay_ms:int push_chat_period_ms:int push_chat_limit:int edit_time_limit:int revoke_time_limit:int revoke_pm_time_limit:int rating_e_decay:int stickers_recent_limit:int channels_read_media_period:int tmp_sessions:flags.0?int call_receive_timeout_ms:int call_ring_timeout_ms:int call_connect_timeout_ms:int call_packet_timeout_ms:int me_url_prefix:string autoupdate_url_prefix:flags.7?string gif_search_username:flags.9?string venue_search_username:flags.10?string img_search_username:flags.11?string static_maps_provider:flags.12?string caption_length_max:int message_length_max:int webfile_dc_id:int suggested_lang_code:flags.2?string lang_pack_version:flags.2?int base_lang_pack_version:flags.2?int reactions_default:flags.15?Reaction autologin_token:flags.16?string = Config;\n\nupdateConfig#a229dd06 = Update;\n\n---functions---\n\nmessages.setDefaultReaction#4f47a016 reaction:Reaction = Bool;\n\nhelp.getConfig#c4f9186b = Config;\n```\n\n[messages.setDefaultReaction](https://core.telegram.org/method/messages.setDefaultReaction) can be used to change the default emoji reaction to use in the quick reaction menu.  \nThis value is synced across devices through [updateConfig](https://core.telegram.org/constructor/updateConfig) and can be fetched using [help.getConfig](https://core.telegram.org/method/help.getConfig), `reactions_default` field.",
    "url": "https://core.telegram.org/api/reactions"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/emoji-status",
      "title": "Emoji status",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Emoji status"
        },
        {
          "property": "og:description",
          "content": "Telegram allows users to set an emoticon or a custom emoji as status, to show next to their name in chats and profiles."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:33 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4818",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Emoji status\n\nTelegram allows users, channels and supergroups to set an emoticon or a [custom emoji](https://core.telegram.org/api/custom-emoji) as status, to show next to their name in chats and profiles.\n\n### [](#setting-an-emoji-status)Setting an emoji status\n\n```\nemojiStatusEmpty#2de11aae = EmojiStatus;\nemojiStatus#929b619d document_id:long = EmojiStatus;\nemojiStatusUntil#fa30a8c7 document_id:long until:int = EmojiStatus;\n\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\nupdateUserEmojiStatus#28373599 user_id:long emoji_status:EmojiStatus = Update;\n\nupdateRecentEmojiStatuses#30f443db = Update;\n\naccount.emojiStatusesNotModified#d08ce645 = account.EmojiStatuses;\naccount.emojiStatuses#90c467d1 hash:long statuses:Vector<EmojiStatus> = account.EmojiStatuses;\n\n---functions---\n\naccount.updateEmojiStatus#fbd3de6b emoji_status:EmojiStatus = Bool;\naccount.getRecentEmojiStatuses#0f578105 hash:long = account.EmojiStatuses;\naccount.clearRecentEmojiStatuses#18201aae = Bool;\n```\n\nUse [account.updateEmojiStatus](https://core.telegram.org/method/account.updateEmojiStatus) to change the status emoji of your profile.\n\n*   Pass [emojiStatus](https://core.telegram.org/constructor/emojiStatus) to set a [custom emoji](https://core.telegram.org/api/custom-emoji).\n*   Pass [emojiStatusUntil](https://core.telegram.org/constructor/emojiStatusUntil) to set a [custom emoji](https://core.telegram.org/api/custom-emoji), for a limited period of time.\n*   Pass [emojiStatusEmpty](https://core.telegram.org/constructor/emojiStatusEmpty) to set the default Premium badge.\n\nThe newly set [EmojiStatus](https://core.telegram.org/type/EmojiStatus) constructor will be contained in the `emoji_status` field of the [user](https://core.telegram.org/constructor/user) constructor, and other users will receive an [updateUserEmojiStatus](https://core.telegram.org/constructor/updateUserEmojiStatus).\n\nOther logged-in clients will also receive an [updateRecentEmojiStatuses](https://core.telegram.org/constructor/updateRecentEmojiStatuses) update, indicating that the recent status emoji list has changed.\n\nRecently used emoji statuses can be fetched using [account.getRecentEmojiStatuses](https://core.telegram.org/method/account.getRecentEmojiStatuses), and the list can be cleared using [account.clearRecentEmojiStatuses](https://core.telegram.org/method/account.clearRecentEmojiStatuses).\n\nNote that the custom emoji selection UI should offer a list of categories to quickly filter results by a (list of) emojis, or by some other criteria, see [here\u00a0\u00bb](https://core.telegram.org/api/emoji-categories) for more info.\n\n#### [](#setting-an-emoji-status-in-channels-and-supergroups)Setting an emoji status in channels and supergroups\n\n```\nemojiList#7a1e11d1 hash:long document_id:Vector<long> = EmojiList;\n\n---functions---\n\naccount.getChannelRestrictedStatusEmojis#35a9e0d5 hash:long = EmojiList;\n```\n\n**Only** channel/supergroup custom emoji [stickersets](https://core.telegram.org/constructor/stickerSet), i.e. [stickersets](https://core.telegram.org/constructor/stickerSet) with the `channel_emoji_status` flag set, can be used in channel/supergroup custom emoji statuses.\n\nNote, however, that some specific [custom emojis](https://core.telegram.org/api/custom-emoji) from channel/supergroup custom emoji stickersets cannot be used as channel/supergroup statuses: use [account.getChannelRestrictedStatusEmojis](https://core.telegram.org/method/account.getChannelRestrictedStatusEmojis) to fetch the full list of IDs of custom emojis that cannot be used in channel/supergroup statuses.\n\nChannels/supergroups gain the ability to change their status emoji only after reaching at least the [boost level](https://core.telegram.org/api/boost) specified in the [`channel_emoji_status_level_min`\u00a0\u00bb](https://core.telegram.org/api/config#channel-emoji-status-level-min)/[`group_emoji_status_level_min`\u00a0\u00bb](https://core.telegram.org/api/config#group-emoji-status-level-min) config parameters.\n\n### [](#featured-emoji-status-stickersets)Featured emoji status stickersets\n\n```\nemojiStatus#929b619d document_id:long = EmojiStatus;\n\naccount.emojiStatusesNotModified#d08ce645 = account.EmojiStatuses;\naccount.emojiStatuses#90c467d1 hash:long statuses:Vector<EmojiStatus> = account.EmojiStatuses;\n\ninputStickerSetEmojiDefaultStatuses#29d0f5ee = InputStickerSet;\ninputStickerSetEmojiChannelDefaultStatuses#49748553 = InputStickerSet;\n\n---functions---\n\naccount.getDefaultEmojiStatuses#d6753386 hash:long = account.EmojiStatuses;\naccount.getChannelDefaultEmojiStatuses#7727a7d5 hash:long = account.EmojiStatuses;\n```\n\nA set of standard statuses for users/(channels/supergroups) can be fetched by passing [inputStickerSetEmojiDefaultStatuses](https://core.telegram.org/constructor/inputStickerSetEmojiDefaultStatuses)/[inputStickerSetEmojiChannelDefaultStatuses](https://core.telegram.org/constructor/inputStickerSetEmojiChannelDefaultStatuses) to [messages.getStickerSet](https://core.telegram.org/method/messages.getStickerSet), as specified in the [stickerset documentation\u00a0\u00bb](https://core.telegram.org/api/stickers).\n\n[account.getDefaultEmojiStatuses](https://core.telegram.org/method/account.getDefaultEmojiStatuses) can also be used to get a list of featured emoji statuses, from multiple featured custom emoji stickersets.  \n[account.getChannelDefaultEmojiStatuses](https://core.telegram.org/method/account.getChannelDefaultEmojiStatuses) is the equivalent method for channel/supergroup emoji statuses.\n\n#### [](#setting-an-emoji-status-from-a-bot)Setting an emoji status from a bot\n\n```\nuserFull#979d2376 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true voice_messages_forbidden:flags.20?true translations_disabled:flags.23?true stories_pinned_available:flags.26?true blocked_my_stories_from:flags.27?true wallpaper_overridden:flags.28?true contact_require_premium:flags.29?true read_dates_private:flags.30?true flags2:# sponsored_enabled:flags2.7?true can_view_revenue:flags2.9?true bot_can_manage_emoji_status:flags2.10?true id:long about:flags.1?string settings:PeerSettings personal_photo:flags.21?Photo profile_photo:flags.2?Photo fallback_photo:flags.22?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int ttl_period:flags.14?int theme_emoticon:flags.15?string private_forward_name:flags.16?string bot_group_admin_rights:flags.17?ChatAdminRights bot_broadcast_admin_rights:flags.18?ChatAdminRights premium_gifts:flags.19?Vector<PremiumGiftOption> wallpaper:flags.24?WallPaper stories:flags.25?PeerStories business_work_hours:flags2.0?BusinessWorkHours business_location:flags2.1?BusinessLocation business_greeting_message:flags2.2?BusinessGreetingMessage business_away_message:flags2.3?BusinessAwayMessage business_intro:flags2.4?BusinessIntro birthday:flags2.5?Birthday personal_channel_id:flags2.6?long personal_channel_message:flags2.6?int stargifts_count:flags2.8?int starref_program:flags2.11?StarRefProgram = UserFull;\n\n---functions---\n\nbots.updateUserEmojiStatus#ed9f30c5 user_id:InputUser emoji_status:EmojiStatus = Bool;\nbots.toggleUserEmojiStatusPermission#06de6392 bot:InputUser enabled:Bool = Bool;\n```\n\nBots can set the emoji status of a user in two ways.\n\n*   By emitting a [web\\_app\\_set\\_emoji\\_status](https://core.telegram.org/api/web-events#web-app-set-emoji-status) event in a [mini app](https://core.telegram.org/api/bots/webapps), containing the ID of the [custom emoji](https://core.telegram.org/api/custom-emoji) to use as status, and an optional TTL for the status, see [here \u00bb](https://core.telegram.org/api/web-events#web-app-set-emoji-status) for more info on the event.\n    \n*   By using [bots.updateUserEmojiStatus](https://core.telegram.org/method/bots.updateUserEmojiStatus): to use this method, bots must first ask and obtain permission from the user to manage their emoji status without using explicit [web\\_app\\_set\\_emoji\\_status](https://core.telegram.org/api/web-events#web-app-set-emoji-status) events.  \n    To request permission, emit a [web\\_app\\_request\\_emoji\\_status\\_access](https://core.telegram.org/api/web-events#web-app-request-emoji-status-access), and follow the [full flow \u00bb](https://core.telegram.org/api/web-events#web-app-request-emoji-status-access), which on success, leads the user to invoke the [bots.toggleUserEmojiStatusPermission](https://core.telegram.org/method/bots.toggleUserEmojiStatusPermission) method, passing `enabled=true` and the ID of the bot.\n    \n    Once permission is obtained, the [userFull](https://core.telegram.org/constructor/userFull).`bot_can_manage_emoji_status` flag of the bot will be set for the user, and the [bots.updateUserEmojiStatus](https://core.telegram.org/method/bots.updateUserEmojiStatus) may be invoked by the bot to change the emoji status of the user.",
    "url": "https://core.telegram.org/api/emoji-status"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/custom-emoji",
      "title": "Custom emojis",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Custom emojis"
        },
        {
          "property": "og:description",
          "content": "Telegram allows including animated and static custom emojis inside of messages."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:34 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3571",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Custom emojis\n\nTelegram allows including animated and static custom emojis inside of messages.\n\n### [](#custom-emoji-entities)Custom emoji entities\n\n```\nmessageEntityCustomEmoji#c8cf05f8 offset:int length:int document_id:long = MessageEntity;\n\ndocument#8fd4c4d8 flags:# id:long access_hash:long file_reference:bytes date:int mime_type:string size:long thumbs:flags.0?Vector<PhotoSize> video_thumbs:flags.1?Vector<VideoSize> dc_id:int attributes:Vector<DocumentAttribute> = Document;\n\ndocumentAttributeCustomEmoji#fd149899 flags:# free:flags.0?true text_color:flags.1?true alt:string stickerset:InputStickerSet = DocumentAttribute;\n\n---functions---\n\nmessages.getCustomEmojiDocuments#d9ab0f54 document_id:Vector<long> = Vector<Document>;\n```\n\nCustom emojis are a special kind of [entity\u00a0\u00bb](https://core.telegram.org/api/entities), containing just a `document_id`, which can be passed to [messages.getCustomEmojiDocuments](https://core.telegram.org/method/messages.getCustomEmojiDocuments) to fetch the [static, animated or video sticker emoji](https://core.telegram.org/api/stickers) that should be displayed to the user as described in the [stickers documentation](https://core.telegram.org/api/stickers).\n\nCustom emoji documents will contain [documentAttributeCustomEmoji](https://core.telegram.org/constructor/documentAttributeCustomEmoji) attribute instead of a [documentAttributeSticker](https://core.telegram.org/constructor/documentAttributeSticker), containing information on the associated emoji (`alt`), whether the emoji can be used by non-premium users (`free`) and the associated `stickerset`.  \nIf the [documentAttributeCustomEmoji](https://core.telegram.org/constructor/documentAttributeCustomEmoji).`text_color` flag is set, the color of this TGS custom emoji should be changed to the text color when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context.\n\nNote that when sending messages with attached custom emojis, the [messageEntityCustomEmoji](https://core.telegram.org/constructor/messageEntityCustomEmoji) [entity\u00a0\u00bb](https://core.telegram.org/api/entities) must wrap exactly one regular emoji (the one contained in [documentAttributeCustomEmoji](https://core.telegram.org/constructor/documentAttributeCustomEmoji).`alt`) in the related text, otherwise the server will ignore it.\n\nLike stickers, custom emojis are organized in [stickersets](https://core.telegram.org/api/stickers#stickersets): see the [stickers documentation\u00a0\u00bb](https://core.telegram.org/api/stickers) for more info on how to work with them.\n\nTo send a message with one or more custom emojis, create and attach [messageEntityCustomEmoji](https://core.telegram.org/constructor/messageEntityCustomEmoji) [entities\u00a0\u00bb](https://core.telegram.org/api/entities) to a message.  \nNote that you can attach a maximum of `message_animated_emoji_max` custom emojis, as specified by the [appConfig field\u00a0\u00bb](https://core.telegram.org/api/config#message-animated-emoji-max).\n\n### [](#emoji-categories)Emoji categories\n\nThe custom emoji selection UI should offer a list of categories to quickly filter results by a (list of) emojis, or by some other criteria, see [here\u00a0\u00bb](https://core.telegram.org/api/emoji-categories) for more info.\n\n### [](#emoji-keywords)Emoji keywords\n\n```\nemojiKeyword#d5b3b9f9 keyword:string emoticons:Vector<string> = EmojiKeyword;\nemojiKeywordDeleted#236df622 keyword:string emoticons:Vector<string> = EmojiKeyword;\n\nemojiKeywordsDifference#5cc761bd lang_code:string from_version:int version:int keywords:Vector<EmojiKeyword> = EmojiKeywordsDifference;\n\nemojiLanguage#b3fb5361 lang_code:string = EmojiLanguage;\nemojiURL#a575739d url:string = EmojiURL;\n\n---functions---\n\nmessages.getEmojiKeywords#35a0e062 lang_code:string = EmojiKeywordsDifference;\nmessages.getEmojiKeywordsDifference#1508b6af lang_code:string from_version:int = EmojiKeywordsDifference;\nmessages.getEmojiKeywordsLanguages#4e9963b2 lang_codes:Vector<string> = Vector<EmojiLanguage>;\n\nmessages.getEmojiURL#d5b10c26 lang_code:string = EmojiURL;\n```\n\nFirst of all, invoke [messages.getEmojiKeywordsLanguages](https://core.telegram.org/method/messages.getEmojiKeywordsLanguages) to obtain a list of languages that must be used when fetching emoji keyword lists: usually the method will return the passed language codes (if localized) + `en` + some language codes for similar languages (if applicable).  \nThen, invoke [messages.getEmojiKeywords](https://core.telegram.org/method/messages.getEmojiKeywords) for all the returned language codes to fetch localized lists of keywords, associated to UTF-8 emojis.\n\nUse the returned keywords to allow users to search both emojis and custom emojis by keyword, by displaying both the UTF-8 emojis associated to the keyword and the custom emojis associated to those UTF-8 emojis.\n\nInvoke [messages.getEmojiKeywordsDifference](https://core.telegram.org/method/messages.getEmojiKeywordsDifference) regularly to fetch updates to locally stored keyword lists for all languages.\n\n[messages.getEmojiURL](https://core.telegram.org/method/messages.getEmojiURL) may be used to fetch an HTTP URL which can be used to automatically log in into translation platform and suggest new emoji keywords: the URL will be valid for 30 seconds after generation.\n\nAdditionally, custom emojis and non-mask stickers may also have a set of _custom_ keywords, returned in the [custom emoji stickerset information](https://core.telegram.org/api/stickers#stickersets):\n\n```\nstickerKeyword#fcfeb29c document_id:long keyword:Vector<string> = StickerKeyword;\n\nmessages.stickerSet#6e153f16 set:StickerSet packs:Vector<StickerPack> keywords:Vector<StickerKeyword> documents:Vector<Document> = messages.StickerSet;\n\nstickerSetFullCovered#40d13c0e set:StickerSet packs:Vector<StickerPack> keywords:Vector<StickerKeyword> documents:Vector<Document> = StickerSetCovered;\n```",
    "url": "https://core.telegram.org/api/custom-emoji"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/emoji-categories",
      "title": "Emoji categories",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Emoji categories"
        },
        {
          "property": "og:description",
          "content": "Sticker, custom emoji and GIF selection UIs should offer a list of categories to quickly filter results by a (list of) emojis, or by some other criteria."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:33 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "2662",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Emoji categories\n\nSticker, emoji, custom emoji and GIF selection UIs should offer a list of categories to quickly filter results by a (list of) emojis, or by some other criteria.\n\n```\nmessages.emojiGroupsNotModified#6fb4ad87 = messages.EmojiGroups;\nmessages.emojiGroups#881fb94b hash:int groups:Vector<EmojiGroup> = messages.EmojiGroups;\n\nemojiGroup#7a9abda9 title:string icon_emoji_id:long emoticons:Vector<string> = EmojiGroup;\nemojiGroupGreeting#80d26cc7 title:string icon_emoji_id:long emoticons:Vector<string> = EmojiGroup;\nemojiGroupPremium#93bcf34 title:string icon_emoji_id:long = EmojiGroup;\n\n---functions---\n\nmessages.getEmojiGroups#7488ce5b hash:int = messages.EmojiGroups;\nmessages.getEmojiStickerGroups#1dd840f5 hash:int = messages.EmojiGroups;\nmessages.getEmojiStatusGroups#2ecd56cd hash:int = messages.EmojiGroups;\nmessages.getEmojiProfilePhotoGroups#21a548f3 hash:int = messages.EmojiGroups;\n```\n\nUse:\n\n*   [messages.getEmojiStickerGroups](https://core.telegram.org/method/messages.getEmojiStickerGroups) when choosing a sticker.\n*   [messages.getEmojiStatusGroups](https://core.telegram.org/method/messages.getEmojiStatusGroups) when choosing a custom emoji to set as [emoji status](https://core.telegram.org/api/emoji-status).\n*   [messages.getEmojiProfilePhotoGroups](https://core.telegram.org/method/messages.getEmojiProfilePhotoGroups) when choosing a custom emoji to set as [profile picture](https://core.telegram.org/api/files#sticker-profile-pictures)\n*   [messages.getEmojiGroups](https://core.telegram.org/method/messages.getEmojiGroups) in all other cases (including GIFs, emojis and custom emojis).\n\nThe methods listed above must be used to fetch a categorized list of UTF-8 emojis, periodically refreshed by the client, passing the `hash` returned by the previous call.\n\nEach category is described by a `title` (i.e. \"Animals\", \"Faces\", \"Flags\"), is represented in the UI by a single [custom emoji\u00a0\u00bb](https://core.telegram.org/api/custom-emoji) (`icon_emoji_id`).\n\nAll categories should be displayed in the sticker/emoji/custom emoji/GIF search bar, located in the top section of the sticker/custom emoji/GIF selection UI, using the `icon_emoji_id`.\n\nWhen the user clicks on a specific emoji category, the client should display:\n\n*   All [Premium](https://core.telegram.org/api/premium)\\-only stickers (i.e. those with a [Premium effect\u00a0\u00bb](https://core.telegram.org/api/stickers#premium-animated-sticker-effects))/[Premium](https://core.telegram.org/api/premium)\\-only [custom emojis](https://core.telegram.org/api/custom-emoji) (i.e. those where the [documentAttributeCustomEmoji](https://core.telegram.org/constructor/documentAttributeCustomEmoji).`free` flag is **not** set) if the [emojiGroupPremium](https://core.telegram.org/constructor/emojiGroupPremium) category is clicked OR\n*   All stickers/[custom emojis](https://core.telegram.org/api/custom-emoji)/emojis/GIFs matching the emojis in `emoticons` for the selected category, if an [emojiGroup](https://core.telegram.org/constructor/emojiGroup)/[emojiGroupGreeting](https://core.telegram.org/constructor/emojiGroupGreeting) category is clicked.\n\nNote:\n\n*   When [choosing GIFs](https://core.telegram.org/api/gifs), include only [emojiGroup](https://core.telegram.org/constructor/emojiGroup)s in the category list.\n*   When choosing emojis, first list all (usable, i.e. Premium+non-Premium for Premium users, non-Premium only for non-Premium users) custom emojis matching the `emoticons` of the chosen category, then the `emoticons` themselves.\n*   When choosing a sticker for a [business introduction](https://core.telegram.org/api/business#business-introduction), locally sort the result of [messages.getEmojiStickerGroups](https://core.telegram.org/method/messages.getEmojiStickerGroups), putting all [emojiGroupGreeting](https://core.telegram.org/constructor/emojiGroupGreeting) categories first.",
    "url": "https://core.telegram.org/api/emoji-categories"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/invites",
      "title": "Invites",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Invites"
        },
        {
          "property": "og:description",
          "content": "Chats and channels may have a public username or a private invite link: private invite links may be further enhanced with per-user join requests."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:34 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "6446",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Invites\n\n[Chats and channels](https://core.telegram.org/api/channel) may have a public username or a private invite link: private invite links may be further enhanced with per-user [join requests](https://telegram.org/blog/shared-media-scrolling-calendar-join-requests-and-more#join-requests-for-groups-and-channels).\n\n### [](#public-usernames)Public usernames\n\n```\ncontacts.resolvedPeer#7f077ad9 peer:Peer chats:Vector<Chat> users:Vector<User> = contacts.ResolvedPeer;\n\n---functions---\n\ncontacts.resolveUsername#725afbbc flags:# username:string referer:flags.0?string = contacts.ResolvedPeer;\nchannels.joinChannel#24b524c5 channel:InputChannel = Updates;\n\nchannels.checkUsername#10e6bd2c channel:InputChannel username:string = Bool;\nchannels.updateUsername#3514b3de channel:InputChannel username:string = Bool;\n```\n\nOnly [supergroups and channels](https://core.telegram.org/api/channel) may have a public usernames: [normal groups](https://core.telegram.org/api/channel) must be migrated to a [supergroup](https://core.telegram.org/api/channel) before they can be assigned a username, see the [migration docs\u00a0\u00bb](https://core.telegram.org/api/channel#migration) for more info.\n\n[channels.updateUsername](https://core.telegram.org/method/channels.updateUsername) can be used to directly assign or change the public username of a supergroup or channel.  \nYou can use [channels.checkUsername](https://core.telegram.org/method/channels.updateUsername) before assigning the username to make sure that the specified username is valid and available.\n\n[channels.joinChannel](https://core.telegram.org/method/channels.joinChannel) can be used to join a supergroup or channel using peer information obtained using [contacts.resolveUsername](https://core.telegram.org/method/contacts.resolveUsername).\n\n### [](#invite-links)Invite links\n\n```\nchatInviteExported#a22cbd96 flags:# revoked:flags.0?true permanent:flags.5?true request_needed:flags.6?true link:string admin_id:long date:int start_date:flags.4?int expire_date:flags.1?int usage_limit:flags.2?int usage:flags.3?int requested:flags.7?int subscription_expired:flags.10?int title:flags.8?string subscription_pricing:flags.9?StarsSubscriptionPricing = ExportedChatInvite;\n\nmessages.exportedChatInvites#bdc62dcc count:int invites:Vector<ExportedChatInvite> users:Vector<User> = messages.ExportedChatInvites;\n\nmessages.exportedChatInvite#1871be50 invite:ExportedChatInvite users:Vector<User> = messages.ExportedChatInvite;\nmessages.exportedChatInviteReplaced#222600ef invite:ExportedChatInvite new_invite:ExportedChatInvite users:Vector<User> = messages.ExportedChatInvite;\n\n\nchatInviteImporter#8c5adfd9 flags:# requested:flags.0?true via_chatlist:flags.3?true user_id:long date:int about:flags.2?string approved_by:flags.1?long = ChatInviteImporter;\n\nmessages.chatInviteImporters#81b6b00a count:int importers:Vector<ChatInviteImporter> users:Vector<User> = messages.ChatInviteImporters;\n\n\nchatAdminWithInvites#f2ecef23 admin_id:long invites_count:int revoked_invites_count:int = ChatAdminWithInvites;\n\nmessages.chatAdminsWithInvites#b69b72d7 admins:Vector<ChatAdminWithInvites> users:Vector<User> = messages.ChatAdminsWithInvites;\n\nchatInviteAlready#5a686d7c chat:Chat = ChatInvite;\nchatInvite#fe65389d flags:# channel:flags.0?true broadcast:flags.1?true public:flags.2?true megagroup:flags.3?true request_needed:flags.6?true verified:flags.7?true scam:flags.8?true fake:flags.9?true can_refulfill_subscription:flags.11?true title:string about:flags.5?string photo:Photo participants_count:int participants:flags.4?Vector<User> color:int subscription_pricing:flags.10?StarsSubscriptionPricing subscription_form_id:flags.12?long = ChatInvite;\nchatInvitePeek#61695cb0 chat:Chat expires:int = ChatInvite;\n\n---functions---\n\nmessages.exportChatInvite#a455de90 flags:# legacy_revoke_permanent:flags.2?true request_needed:flags.3?true peer:InputPeer expire_date:flags.0?int usage_limit:flags.1?int title:flags.4?string subscription_pricing:flags.5?StarsSubscriptionPricing = ExportedChatInvite;\n\nmessages.getExportedChatInvites#a2b5a3f6 flags:# revoked:flags.3?true peer:InputPeer admin_id:InputUser offset_date:flags.2?int offset_link:flags.2?string limit:int = messages.ExportedChatInvites;\nmessages.getExportedChatInvite#73746f5c peer:InputPeer link:string = messages.ExportedChatInvite;\n\nmessages.editExportedChatInvite#bdca2f75 flags:# revoked:flags.2?true peer:InputPeer link:string expire_date:flags.0?int usage_limit:flags.1?int request_needed:flags.3?Bool title:flags.4?string = messages.ExportedChatInvite;\n\nmessages.deleteRevokedExportedChatInvites#56987bd5 peer:InputPeer admin_id:InputUser = Bool;\nmessages.deleteExportedChatInvite#d464a42b peer:InputPeer link:string = Bool;\n\nmessages.getAdminsWithInvites#3920e6ef peer:InputPeer = messages.ChatAdminsWithInvites;\nmessages.getChatInviteImporters#df04dd4e flags:# requested:flags.0?true subscription_expired:flags.3?true peer:InputPeer link:flags.1?string q:flags.2?string offset_date:int offset_user:InputUser limit:int = messages.ChatInviteImporters;\n\nmessages.checkChatInvite#3eadb1bb hash:string = ChatInvite;\nmessages.importChatInvite#6c50051c hash:string = Updates;\n```\n\nPrivate invite links can optionally have an expiration date, a usage limit, and can even be set to only allow users into the channel, supergroup or group upon explicit approval of an admin: see [join requests\u00a0\u00bb](#join-requests) for more info.\n\nInvite links match the following regex: `@(?:t|telegram)\\.(?:me|dog)/(joinchat/|\\+)?([\\w-]+)@i`.  \nThe first matching group can be passed to the `hash` parameter of [messages.checkChatInvite](https://core.telegram.org/method/messages.checkChatInvite) to get info about the chat, and [messages.importChatInvite](https://core.telegram.org/method/messages.importChatInvite) to join the chat.  \n[messages.checkChatInvite](https://core.telegram.org/method/messages.checkChatInvite) may return [chatInvitePeek](https://core.telegram.org/constructor/chatInvitePeek) only for [supergroups and channels](https://core.telegram.org/api/channel), in which case the user may directly fetch chat messages using [updates](https://core.telegram.org/api/updates), [messages.getHistory](https://core.telegram.org/method/messages.getHistory) and [channels.getMessages](https://core.telegram.org/method/channels.getMessages) until the time indicated by the `expires` unixtime field.\n\nNewly created groups, supergroups and channel already have a default invite link.  \nTo generate a new one, use [messages.exportChatInvite](https://core.telegram.org/method/messages.exportChatInvite).  \nTo get info about existing chat invites, optionally filtering only links created by a given admin, use [messages.getExportedChatInvites](https://core.telegram.org/method/messages.getExportedChatInvites).  \n[messages.getExportedChatInvite](https://core.telegram.org/method/messages.getExportedChatInvite) can be used to obtain info about a specific invite link.\n\n[messages.editExportedChatInvite](https://core.telegram.org/method/messages.editExportedChatInvite) is used to edit or revoke existing invite links: revoked links cannot be used by users to join the group, but info about revoked links can still be fetched using [messages.getExportedChatInvites](https://core.telegram.org/method/messages.getExportedChatInvites) with the `revoked` flag set.  \nUse [messages.deleteExportedChatInvite](https://core.telegram.org/method/messages.deleteExportedChatInvite) to permanently remove an invite link, and [messages.deleteRevokedExportedChatInvites](https://core.telegram.org/method/messages.deleteRevokedExportedChatInvites) to permanently remove a revoked invite link.\n\n[messages.getChatInviteImporters](https://core.telegram.org/method/messages.getChatInviteImporters) can be used to fetch info about users that joined using a specific invite link.\n\nSome basic stats about the number of invite links generated by a given admin can be fetched using [messages.getAdminsWithInvites](https://core.telegram.org/method/messages.getAdminsWithInvites).\n\n#### [](#paid-invite-links)Paid invite links\n\nChannel administrators can now create special [invite links](https://core.telegram.org/api/invites#invite-links) that allow joining a channel in exchange for a monthly payment in Telegram Stars.\n\nSubscribing to a channel using a paid invite link will transfer Telegram Stars to the channel's balance.\n\nSee [here \u00bb](https://core.telegram.org/api/subscriptions#channel-subscriptions) for more info on the full flow.\n\n### [](#join-requests)Join requests\n\n```\nchannel#fe4478bd flags:# creator:flags.0?true left:flags.2?true broadcast:flags.5?true verified:flags.7?true megagroup:flags.8?true restricted:flags.9?true signatures:flags.11?true min:flags.12?true scam:flags.19?true has_link:flags.20?true has_geo:flags.21?true slowmode_enabled:flags.22?true call_active:flags.23?true call_not_empty:flags.24?true fake:flags.25?true gigagroup:flags.26?true noforwards:flags.27?true join_to_send:flags.28?true join_request:flags.29?true forum:flags.30?true flags2:# stories_hidden:flags2.1?true stories_hidden_min:flags2.2?true stories_unavailable:flags2.3?true signature_profiles:flags2.12?true id:long access_hash:flags.13?long title:string username:flags.6?string photo:ChatPhoto date:int restriction_reason:flags.9?Vector<RestrictionReason> admin_rights:flags.14?ChatAdminRights banned_rights:flags.15?ChatBannedRights default_banned_rights:flags.18?ChatBannedRights participants_count:flags.17?int usernames:flags2.0?Vector<Username> stories_max_id:flags2.4?int color:flags2.7?PeerColor profile_color:flags2.8?PeerColor emoji_status:flags2.9?EmojiStatus level:flags2.10?int subscription_until_date:flags2.11?int = Chat;\n\nchatInvite#fe65389d flags:# channel:flags.0?true broadcast:flags.1?true public:flags.2?true megagroup:flags.3?true request_needed:flags.6?true verified:flags.7?true scam:flags.8?true fake:flags.9?true can_refulfill_subscription:flags.11?true title:string about:flags.5?string photo:Photo participants_count:int participants:flags.4?Vector<User> color:int subscription_pricing:flags.10?StarsSubscriptionPricing subscription_form_id:flags.12?long = ChatInvite;\n\nupdatePendingJoinRequests#7063c3db peer:Peer requests_pending:int recent_requesters:Vector<long> = Update;\nupdateBotChatInviteRequester#11dfa986 peer:Peer date:int user_id:long about:string invite:ExportedChatInvite qts:int = Update;\n\nmessages.chatInviteImporters#81b6b00a count:int importers:Vector<ChatInviteImporter> users:Vector<User> = messages.ChatInviteImporters;\n\npeerSettings#acd66c5e flags:# report_spam:flags.0?true add_contact:flags.1?true block_contact:flags.2?true share_contact:flags.3?true need_contacts_exception:flags.4?true report_geo:flags.5?true autoarchived:flags.7?true invite_members:flags.8?true request_chat_broadcast:flags.10?true business_bot_paused:flags.11?true business_bot_can_reply:flags.12?true geo_distance:flags.6?int request_chat_title:flags.9?string request_chat_date:flags.9?int business_bot_id:flags.13?long business_bot_manage_url:flags.13?string = PeerSettings;\n\nmessageActionChatJoinedByRequest#ebbca3cb = MessageAction;\n\nchannelAdminLogEventActionParticipantJoinByRequest#afb6144a invite:ExportedChatInvite approved_by:long = ChannelAdminLogEventAction;\n\n---functions---\n\nmessages.checkChatInvite#3eadb1bb hash:string = ChatInvite;\nmessages.importChatInvite#6c50051c hash:string = Updates;\n\nmessages.getChatInviteImporters#df04dd4e flags:# requested:flags.0?true subscription_expired:flags.3?true peer:InputPeer link:flags.1?string q:flags.2?string offset_date:int offset_user:InputUser limit:int = messages.ChatInviteImporters;\n\nmessages.hideChatJoinRequest#7fe7e815 flags:# approved:flags.0?true peer:InputPeer user_id:InputUser = Updates;\nmessages.hideAllChatJoinRequests#e085f4ea flags:# approved:flags.0?true peer:InputPeer link:flags.1?string = Updates;\n\nchannels.toggleJoinRequest#4c2985b6 channel:InputChannel enabled:Bool = Updates;\n```\n\nIf the `request_needed` flag is set when [generating or editing an invite link](#invite-links), or if the appropriate option is toggled using [channels.toggleJoinRequest](https://core.telegram.org/method/channels.toggleJoinRequest), users importing the invite link using [messages.importChatInvite](https://core.telegram.org/method/messages.importChatInvite) will receive an `INVITE_REQUEST_SENT` RPC error, indicating that an join request was successfully sent to the chat admins.\n\nRelated supergroup information will also have the [`channel.join_request`](https://core.telegram.org/constructor/channel) flag set accordingly.\n\nBot administrators will receive a [updateBotChatInviteRequester](https://core.telegram.org/constructor/updateBotChatInviteRequester) update for each separate join request.  \nUser administrators will receive an [updatePendingJoinRequests](https://core.telegram.org/constructor/updatePendingJoinRequests), and should invoke [messages.getChatInviteImporters](https://core.telegram.org/method/messages.getChatInviteImporters) with the `requested` flag set to obtain a list of users waiting to be admitted into the group.\n\nAdministrators can then use [messages.hideChatJoinRequest](https://core.telegram.org/method/messages.hideChatJoinRequest) to approve or dismiss a join request, and [messages.hideAllChatJoinRequests](https://core.telegram.org/method/messages.hideAllChatJoinRequests) to approve or dismiss in bulk multiple join requests.\n\nAdministrators can also choose to send a message to the user before admitting them into the group: in this case, graphical clients _on the user side_ should display a message on the dialog bar of the chat with the admin, indicating that the chat was initiated by the admin of a chat/channel they have recently requested to join, see the [action bar documentation\u00a0\u00bb](https://core.telegram.org/api/action-bar#an-admin-from-a-recent-join-request-is-contacting-you) for more info.\n\n### [](#direct-invites)Direct invites\n\n```\nmissingInvitee#628c9224 flags:# premium_would_allow_invite:flags.0?true premium_required_for_pm:flags.1?true user_id:long = MissingInvitee;\n\nmessages.invitedUsers#7f5defa6 updates:Updates missing_invitees:Vector<MissingInvitee> = messages.InvitedUsers;\n\n---functions---\n\nmessages.addChatUser#cbc6d107 chat_id:long user_id:InputUser fwd_limit:int = messages.InvitedUsers;\nmessages.createChat#92ceddd4 flags:# users:Vector<InputUser> title:string ttl_period:flags.0?int = messages.InvitedUsers;\n\nchannels.inviteToChannel#c9e33d54 channel:InputChannel users:Vector<InputUser> = messages.InvitedUsers;\n```\n\nUsers may also be directly invited to groups and channels during their creation ([basic groups](https://core.telegram.org/api/channel) via [messages.createChat](https://core.telegram.org/method/messages.createChat)) or afterwards ([basic groups](https://core.telegram.org/api/channel) via [messages.addChatUser](https://core.telegram.org/method/messages.addChatUser), [supergroups and channels](https://core.telegram.org/api/channel) via [channels.inviteToChannel](https://core.telegram.org/method/channels.inviteToChannel)).\n\nThe methods will return a [messages.invitedUsers](https://core.telegram.org/constructor/messages.invitedUsers) constructor, containing a list of [updates](https://core.telegram.org/api/updates) about successfully invited users (and eventually info about the created group), and a list of [missingInvitee](https://core.telegram.org/constructor/missingInvitee), with a list of users that could not be invited for some reason.\n\nSpecifically:\n\n*   If none of the [missingInvitee](https://core.telegram.org/constructor/missingInvitee) flags are set, we could not add the user because of their privacy settings, and we can create and directly share an [invite link](#invite-links) with them using a normal message, instead.\n*   If the [missingInvitee](https://core.telegram.org/constructor/missingInvitee).`premium_would_allow_invite` flag is set, we could not add the user _only because_ the current account needs to purchase a [Telegram Premium](https://core.telegram.org/api/premium) subscription to complete the operation.\n*   If the [missingInvitee](https://core.telegram.org/constructor/missingInvitee).`premium_required_for_pm` flag is set, we could not add the user because of their privacy settings, and additionally, the current account needs to purchase a [Telegram Premium](https://core.telegram.org/api/premium) subscription to directly share an invite link with the user via a private message.",
    "url": "https://core.telegram.org/api/invites"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/discussion",
      "title": "Discussion groups",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Discussion groups"
        },
        {
          "property": "og:description",
          "content": "Groups can be associated to a channel as a discussion group, to allow users to discuss about posts."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:35 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "6119",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Discussion groups\n\n[Groups](https://core.telegram.org/api/channel) can be associated to a [channel](https://core.telegram.org/api/channel) as a [discussion group](https://telegram.org/blog/privacy-discussions-web-bots), to allow users to discuss about posts.\n\n### [](#channel-comments)Channel comments\n\n```\nboolFalse#bc799737 = Bool;\nboolTrue#997275b5 = Bool;\n\nchannelFull#bbab348d flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true can_set_location:flags.16?true has_scheduled:flags.19?true can_view_stats:flags.20?true blocked:flags.22?true flags2:# can_delete_channel:flags2.0?true antispam:flags2.1?true participants_hidden:flags2.2?true translations_disabled:flags2.3?true stories_pinned_available:flags2.5?true view_forum_as_messages:flags2.6?true restricted_sponsored:flags2.11?true can_view_revenue:flags2.12?true paid_media_allowed:flags2.14?true can_view_stars_revenue:flags2.15?true paid_reactions_available:flags2.16?true id:long about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int online_count:flags.13?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:flags.23?ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?long migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int folder_id:flags.11?int linked_chat_id:flags.14?long location:flags.15?ChannelLocation slowmode_seconds:flags.17?int slowmode_next_send_date:flags.18?int stats_dc:flags.12?int pts:int call:flags.21?InputGroupCall ttl_period:flags.24?int pending_suggestions:flags.25?Vector<string> groupcall_default_join_as:flags.26?Peer theme_emoticon:flags.27?string requests_pending:flags.28?int recent_requesters:flags.28?Vector<long> default_send_as:flags.29?Peer available_reactions:flags.30?ChatReactions reactions_limit:flags2.13?int stories:flags2.4?PeerStories wallpaper:flags2.7?WallPaper boosts_applied:flags2.8?int boosts_unrestrict:flags2.9?int emojiset:flags2.10?StickerSet = ChatFull;\n\nmessages.chats#64ff9fd5 chats:Vector<Chat> = messages.Chats;\n\nmessageReplies#83d60fc2 flags:# comments:flags.0?true replies:int replies_pts:int recent_repliers:flags.1?Vector<Peer> channel_id:flags.0?long max_id:flags.2?int read_max_id:flags.3?int = MessageReplies;\n\nmessages.discussionMessage#a6341782 flags:# messages:Vector<Message> max_id:flags.0?int read_inbox_max_id:flags.1?int read_outbox_max_id:flags.2?int unread_count:int chats:Vector<Chat> users:Vector<User> = messages.DiscussionMessage;\n\n---functions---\n\nchannels.setDiscussionGroup#40582bb2 broadcast:InputChannel group:InputChannel = Bool;\nchannels.getGroupsForDiscussion#f5dad378 = messages.Chats;\n\nmessages.getDiscussionMessage#446972fd peer:InputPeer msg_id:int = messages.DiscussionMessage;\n```\n\nA discussion group can be associated to a channel using [channels.setDiscussionGroup](https://core.telegram.org/method/channels.setDiscussionGroup).  \nThe discussion group can be accessed in the client by clicking on the discuss button of the channel, or by accessing the [comment section](https://core.telegram.org/api/threads) of a specific post; the discussion group ID is also present in the `linked_chat_id` field of the [channelFull](https://core.telegram.org/constructor/channelFull) constructor.\n\nAll messages sent to the channel will also be forwarded to the linked group (with sender peer `from_id` equal to the peer of the linked channel); those messages will also be automatically [pinned](https://core.telegram.org/api/pin) in the group.\n\nThe comment section of a channel post is simply the [message thread](https://core.telegram.org/api/threads) of the automatically forwarded channel message in the linked discussion supergroup.  \nThus, the comment section of a particular post can be disabled by removing the autoforwarded channel post message from the discussion group.\n\nA [messageReplies](https://core.telegram.org/constructor/messageReplies) constructor will be attached the channel post in the original channel, containing information about the comment section, specifically:\n\n*   `replies.channel_id` will contain the ID of the linked discussion supergroup\n*   `replies.recent_repliers` will contain information about the last few comment posters for a specific thread, to show a small list of commenter profile pictures in client previews.\n*   `replies.replies` will contains the total number of replies in the comment section.\n*   `replies.max_id` _may_ contain the ID of the latest message in the comment section, if any.\n*   `replies.replies_pts` _may_ contain the PTS of the autoforwarded channel message that started the comment section.\n\nThe same [messageReplies](https://core.telegram.org/constructor/messageReplies) constructor with the usual flags for a [thread](https://core.telegram.org/api/threads) (i.e. without `channel_id`, `recent_replies`) will also be present in the message automatically forwarded to the discussion group, as for all group messages that start a [thread](https://core.telegram.org/api/threads).\n\nUse [messages.getDiscussionMessage](https://core.telegram.org/method/messages.getDiscussionMessage) to obtain the initial messages of the [message thread](https://core.telegram.org/api/threads) of the autoforwaded channel message in the linked discussion supergroup.\n\nThe messages are returned in a reverse chronological order (i.e., in order of decreasing message ID); thus the last message returned by the method will be the autoforwarded channel message that started the comment section.\n\n#### [](#replies)@replies\n\n```\nmessageFwdHeader#4e4df4bb flags:# imported:flags.7?true saved_out:flags.11?true from_id:flags.0?Peer from_name:flags.5?string date:int channel_post:flags.2?int post_author:flags.3?string saved_from_peer:flags.4?Peer saved_from_msg_id:flags.4?int saved_from_id:flags.8?Peer saved_from_name:flags.9?string saved_date:flags.10?int psa_type:flags.6?string = MessageFwdHeader;\n\nmessageReplyHeader#afbc09db flags:# reply_to_scheduled:flags.2?true forum_topic:flags.3?true quote:flags.9?true reply_to_msg_id:flags.4?int reply_to_peer_id:flags.0?Peer reply_from:flags.5?MessageFwdHeader reply_media:flags.8?MessageMedia reply_to_top_id:flags.1?int quote_text:flags.6?string quote_entities:flags.7?Vector<MessageEntity> quote_offset:flags.10?int = MessageReplyHeader;\n\nmessage#94345242 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true from_scheduled:flags.18?true legacy:flags.19?true edit_hide:flags.21?true pinned:flags.24?true noforwards:flags.26?true invert_media:flags.27?true flags2:# offline:flags2.1?true video_processing_pending:flags2.4?true id:int from_id:flags.8?Peer from_boosts_applied:flags.29?int peer_id:Peer saved_peer_id:flags.28?Peer fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?long via_business_bot_id:flags2.0?long reply_to:flags.3?MessageReplyHeader date:int message:string media:flags.9?MessageMedia reply_markup:flags.6?ReplyMarkup entities:flags.7?Vector<MessageEntity> views:flags.10?int forwards:flags.10?int replies:flags.23?MessageReplies edit_date:flags.15?int post_author:flags.16?string grouped_id:flags.17?long reactions:flags.20?MessageReactions restriction_reason:flags.22?Vector<RestrictionReason> ttl_period:flags.25?int quick_reply_shortcut_id:flags.30?int effect:flags2.2?long factcheck:flags2.3?FactCheck = Message;\n\nupdateNewMessage#1f2b0afd message:Message pts:int pts_count:int = Update;\nupdateNewChannelMessage#62ba04d9 message:Message pts:int pts_count:int = Update;\n\n---functions---\n\ncontacts.blockFromReplies#29a8962c flags:# delete_message:flags.0?true delete_history:flags.1?true report_spam:flags.2?true msg_id:int = Updates;\n\ncontacts.resolveUsername#725afbbc flags:# username:string referer:flags.0?string = contacts.ResolvedPeer;\n```\n\nSince a user can comment in channel posts without joining the actual [discussion supergroup](https://core.telegram.org/api/discussion), there must be a way for them to receive notifications about replies in comment sections.  \nFor this reason, a special `@replies` username is provided. Its ID for main and testing endpoints can be seen in the [tdlib sources](https://github.com/tdlib/td/blob/34cf869c02583c23b023f725dca30cd18efc82a3/td/telegram/ContactsManager.cpp#L4418).\n\nWhen someone replies to one of our messages in the comment section of a channel post, and the user is not subscribed to the discussion group, the client will receive two updates:\n\n*   An [updateNewChannelMessage](https://core.telegram.org/constructor/updateNewChannelMessage) from the discussion group itself, structured just like any other update coming from a subscribed group, with:\n    *   `id` set to the ID of the reply\n    *   `from_id` set to the peer that replied to us\n    *   `peer_id` set to the peer of the [discussion group](https://core.telegram.org/api/discussion)\n    *   `reply_to.reply_to_msg_id` set to the ID of our message\n    *   `reply_to.reply_to_top_id` set to the [thread ID](https://core.telegram.org/api/threads).\n*   An [updateNewMessage](https://core.telegram.org/constructor/updateNewMessage)\n    *   `id` set to the common ID sequence for users\n    *   `from_id` set to the peer of `@replies`\n    *   `peer_id` set to our own peer\n    *   `fwd_from.saved_from_msg_id` set to the ID of the reply\n    *   `fwd_from.from_id` set to the peer that replied to us\n    *   `reply_to.reply_to_peer_id` set to the peer of the [discussion group](https://core.telegram.org/api/discussion)\n    *   `reply_to.reply_to_msg_id` set to the ID of our message\n    *   `reply_to.reply_to_top_id` set to the [thread ID](https://core.telegram.org/api/threads)\n\nClients should display messages coming from `@replies` as a read-only supergroup, with each reply displayed as a separate message from the author of the reply, with a \"View in chat\" button like for channel comments.\n\n[contacts.blockFromReplies](https://core.telegram.org/method/contacts.blockFromReplies) may be used to stop getting notifications about thread replies from a certain user in `@replies`.\n\n### [](#linking-a-discussion-group)Linking a discussion group\n\nTo obtain a list of admined supergroups that a channel admin can possibly associate to a channel, use [channels.getGroupsForDiscussion](https://core.telegram.org/method/channels.getGroupsForDiscussion).  \nReturned [basic group chats](https://core.telegram.org/api/channel#basic-groups) must be first [upgraded to supergroups](https://core.telegram.org/api/channel#migration) before they can be set as a discussion group.  \nBefore linking a supergroup to a channel, access to the supergroup's old messages must also be enabled using [channels.togglePreHistoryHidden](https://core.telegram.org/method/channels.togglePreHistoryHidden).\n\nTo set a returned supergroup as a discussion group use [channels.setDiscussionGroup](https://core.telegram.org/method/channels.setDiscussionGroup).\n\nSchema:\n\n```\nboolFalse#bc799737 = Bool;\nboolTrue#997275b5 = Bool;\n\nmessages.chats#64ff9fd5 chats:Vector<Chat> = messages.Chats;\n\n---functions---\n\nchannels.setDiscussionGroup#40582bb2 broadcast:InputChannel group:InputChannel = Bool;\nchannels.getGroupsForDiscussion#f5dad378 = messages.Chats;\n\nchannels.togglePreHistoryHidden#eabbb94c channel:InputChannel enabled:Bool = Updates;\n```\n\n### [](#requiring-users-to-join-the-group)Requiring users to join the group\n\n```\nchannel#fe4478bd flags:# creator:flags.0?true left:flags.2?true broadcast:flags.5?true verified:flags.7?true megagroup:flags.8?true restricted:flags.9?true signatures:flags.11?true min:flags.12?true scam:flags.19?true has_link:flags.20?true has_geo:flags.21?true slowmode_enabled:flags.22?true call_active:flags.23?true call_not_empty:flags.24?true fake:flags.25?true gigagroup:flags.26?true noforwards:flags.27?true join_to_send:flags.28?true join_request:flags.29?true forum:flags.30?true flags2:# stories_hidden:flags2.1?true stories_hidden_min:flags2.2?true stories_unavailable:flags2.3?true signature_profiles:flags2.12?true id:long access_hash:flags.13?long title:string username:flags.6?string photo:ChatPhoto date:int restriction_reason:flags.9?Vector<RestrictionReason> admin_rights:flags.14?ChatAdminRights banned_rights:flags.15?ChatBannedRights default_banned_rights:flags.18?ChatBannedRights participants_count:flags.17?int usernames:flags2.0?Vector<Username> stories_max_id:flags2.4?int color:flags2.7?PeerColor profile_color:flags2.8?PeerColor emoji_status:flags2.9?EmojiStatus level:flags2.10?int subscription_until_date:flags2.11?int = Chat;\n\n---functions---\n\nchannels.toggleJoinToSend#e4cb9580 channel:InputChannel enabled:Bool = Updates;\n```\n\nAdmins may use [channels.toggleJoinToSend](https://core.telegram.org/method/channels.toggleJoinToSend) to force users to join a discussion group before commenting.  \nThe [`channel.join_to_send`](https://core.telegram.org/constructor/channel) flag will be set accordingly, and all attempts by non-members to send a message to the group will return a `CHAT_GUEST_SEND_FORBIDDEN` RPC error.",
    "url": "https://core.telegram.org/api/discussion"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/rights",
      "title": "Admin, banned, default rights",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Admin, banned, default rights"
        },
        {
          "property": "og:image",
          "content": "d82fcde297bd0276c3"
        },
        {
          "property": "og:description",
          "content": "How to handle admin permissions, granular bans and global permissions in channels, groups and supergroups."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:34 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "2505",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Admin, banned, default rights\n\n[Channels and supergroups](https://core.telegram.org/api/channel) allow setting [granular permissions](https://telegram.org/blog/permissions-groups-undo) both for admins and specific users. [Channels, supergroups and basic groups](https://core.telegram.org/api/channel) also allow setting global granular permissions for users.\n\nThey can be modified as follows:\n\n### [](#admin-rights)Admin rights\n\n[channels.editAdmin](https://core.telegram.org/method/channels.editAdmin) can be used to modify the admin rights of a user in a channel or supergroup. [Basic groups](https://core.telegram.org/api/channel#basic-groups) do not allow setting granular admin permissions, [messages.editChatAdmin](https://core.telegram.org/method/messages.editChatAdmin) has to be used, instead.\n\nPermissions are defined by the [chatAdminRights](https://core.telegram.org/constructor/chatAdminRights) constructor, some admin rights can only be used for channels, others both for channels and supergroups (see the constructor page).\n\n### [](#banned-rights)Banned rights\n\n[channels.editBanned](https://core.telegram.org/method/channels.editBanned) can be used to modify the rights of a user in a channel or supergroup, to ban/kick a user from the group, or restrict the user from doing certain things. [Basic groups](https://core.telegram.org/api/channel#basic-groups) do not allow setting granular user permissions for single users, single users can only be removed from groups using [messages.deleteChatUser](https://core.telegram.org/method/messages.deleteChatUser): however, setting [global granular permissions with basic groups is supported](#default-rights).\n\nPermissions are defined by the [chatBannedRights](https://core.telegram.org/constructor/chatBannedRights) constructor, for more info see the constructor page.\n\n### [](#default-rights)Default rights\n\n[messages.editChatDefaultBannedRights](https://core.telegram.org/method/messages.editChatDefaultBannedRights) can be used to modify the rights of **all** users in a [channel](https://core.telegram.org/api/channel#channels), [supergroup](https://core.telegram.org/api/channel#supergroups) or [basic group](https://core.telegram.org/api/channel#basic-groups), to restrict them from doing certain things.\n\nPermissions are defined by the [chatBannedRights](https://core.telegram.org/constructor/chatBannedRights) constructor: all flags can be used except for `view_messages`, for more info see the constructor page.\n\n### [](#suggested-bot-rights)Suggested bot rights\n\n[Bots](https://core.telegram.org/api/bots) can suggest a set of admin rights when being added to groups and channels.\n\nBots can use [bots.setBotBroadcastDefaultAdminRights](https://core.telegram.org/method/bots.setBotBroadcastDefaultAdminRights) to indicate a suggested set of [admin rights\u00a0\u00bb](https://core.telegram.org/api/rights) to use when adding the bot to a [channel](https://core.telegram.org/api/channel), and [bots.setBotGroupDefaultAdminRights](https://core.telegram.org/method/bots.setBotGroupDefaultAdminRights) when adding the bot to a [group](https://core.telegram.org/api/channel).\n\nThese suggested admin rights are contained in the `bot_broadcast_admin_rights` and `bot_group_admin_rights` paremeters of [userFull](https://core.telegram.org/constructor/userFull), obtainable using [users.getFullUser](https://core.telegram.org/method/users.getFullUser).\n\nA client application trying to add a bot as admin should fetch the default rights and present them as editable defaults to the user: the rights can then be modified before [setting the bot as admin](#admin-rights).\n\nNote that admin rights suggested by a [bot deep link](https://core.telegram.org/api/links#group-channel-bot-links) take priority over the suggested rights specified by `bot_broadcast_admin_rights` and `bot_group_admin_rights`: they can still be modified by the user before setting the bot as admin.",
    "url": "https://core.telegram.org/api/rights"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/recent-actions",
      "title": "Admin log",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Admin log"
        },
        {
          "property": "og:description",
          "content": "Both supergroups and channels offer a so-called admin log, a log of recent relevant supergroup and channel actions, like the modification of group/channel settings or information on behalf of an admin, user kicks and bans, and more."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:37 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3417",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Admin log\n\nBoth supergroups and channels offer a so-called [admin log](https://telegram.org/blog/admin-revolution), a log of recent relevant supergroup and channel actions, like the modification of group/channel settings or information on behalf of an admin, user kicks and bans, and more.\n\n```\nchannelAdminLogEventActionChangeTitle#e6dfb825 prev_value:string new_value:string = ChannelAdminLogEventAction;\nchannelAdminLogEventActionChangeAbout#55188a2e prev_value:string new_value:string = ChannelAdminLogEventAction;\nchannelAdminLogEventActionChangeUsername#6a4afc38 prev_value:string new_value:string = ChannelAdminLogEventAction;\nchannelAdminLogEventActionChangePhoto#434bd2af prev_photo:Photo new_photo:Photo = ChannelAdminLogEventAction;\nchannelAdminLogEventActionToggleInvites#1b7907ae new_value:Bool = ChannelAdminLogEventAction;\nchannelAdminLogEventActionToggleSignatures#26ae0971 new_value:Bool = ChannelAdminLogEventAction;\nchannelAdminLogEventActionUpdatePinned#e9e82c18 message:Message = ChannelAdminLogEventAction;\nchannelAdminLogEventActionEditMessage#709b2405 prev_message:Message new_message:Message = ChannelAdminLogEventAction;\nchannelAdminLogEventActionDeleteMessage#42e047bb message:Message = ChannelAdminLogEventAction;\nchannelAdminLogEventActionParticipantJoin#183040d3 = ChannelAdminLogEventAction;\nchannelAdminLogEventActionParticipantLeave#f89777f2 = ChannelAdminLogEventAction;\nchannelAdminLogEventActionParticipantInvite#e31c34d8 participant:ChannelParticipant = ChannelAdminLogEventAction;\nchannelAdminLogEventActionParticipantToggleBan#e6d83d7e prev_participant:ChannelParticipant new_participant:ChannelParticipant = ChannelAdminLogEventAction;\nchannelAdminLogEventActionParticipantToggleAdmin#d5676710 prev_participant:ChannelParticipant new_participant:ChannelParticipant = ChannelAdminLogEventAction;\nchannelAdminLogEventActionChangeStickerSet#b1c3caa7 prev_stickerset:InputStickerSet new_stickerset:InputStickerSet = ChannelAdminLogEventAction;\nchannelAdminLogEventActionTogglePreHistoryHidden#5f5c95f1 new_value:Bool = ChannelAdminLogEventAction;\nchannelAdminLogEventActionDefaultBannedRights#2df5fc0a prev_banned_rights:ChatBannedRights new_banned_rights:ChatBannedRights = ChannelAdminLogEventAction;\nchannelAdminLogEventActionStopPoll#8f079643 message:Message = ChannelAdminLogEventAction;\nchannelAdminLogEventActionChangeLinkedChat#50c7ac8 prev_value:long new_value:long = ChannelAdminLogEventAction;\nchannelAdminLogEventActionChangeLocation#e6b76ae prev_value:ChannelLocation new_value:ChannelLocation = ChannelAdminLogEventAction;\nchannelAdminLogEventActionToggleSlowMode#53909779 prev_value:int new_value:int = ChannelAdminLogEventAction;\nchannelAdminLogEventActionStartGroupCall#23209745 call:InputGroupCall = ChannelAdminLogEventAction;\nchannelAdminLogEventActionDiscardGroupCall#db9f9140 call:InputGroupCall = ChannelAdminLogEventAction;\nchannelAdminLogEventActionParticipantMute#f92424d2 participant:GroupCallParticipant = ChannelAdminLogEventAction;\nchannelAdminLogEventActionParticipantUnmute#e64429c0 participant:GroupCallParticipant = ChannelAdminLogEventAction;\nchannelAdminLogEventActionToggleGroupCallSetting#56d6a247 join_muted:Bool = ChannelAdminLogEventAction;\nchannelAdminLogEventActionParticipantJoinByInvite#fe9fc158 flags:# via_chatlist:flags.0?true invite:ExportedChatInvite = ChannelAdminLogEventAction;\nchannelAdminLogEventActionExportedInviteDelete#5a50fca4 invite:ExportedChatInvite = ChannelAdminLogEventAction;\nchannelAdminLogEventActionExportedInviteRevoke#410a134e invite:ExportedChatInvite = ChannelAdminLogEventAction;\nchannelAdminLogEventActionExportedInviteEdit#e90ebb59 prev_invite:ExportedChatInvite new_invite:ExportedChatInvite = ChannelAdminLogEventAction;\nchannelAdminLogEventActionParticipantVolume#3e7f6847 participant:GroupCallParticipant = ChannelAdminLogEventAction;\nchannelAdminLogEventActionChangeHistoryTTL#6e941a38 prev_value:int new_value:int = ChannelAdminLogEventAction;\nchannelAdminLogEventActionParticipantJoinByRequest#afb6144a invite:ExportedChatInvite approved_by:long = ChannelAdminLogEventAction;\nchannelAdminLogEventActionToggleNoForwards#cb2ac766 new_value:Bool = ChannelAdminLogEventAction;\nchannelAdminLogEventActionSendMessage#278f2868 message:Message = ChannelAdminLogEventAction;\nchannelAdminLogEventActionChangeAvailableReactions#be4e0ef8 prev_value:ChatReactions new_value:ChatReactions = ChannelAdminLogEventAction;\nchannelAdminLogEventActionChangeUsernames#f04fb3a9 prev_value:Vector<string> new_value:Vector<string> = ChannelAdminLogEventAction;\nchannelAdminLogEventActionToggleForum#2cc6383 new_value:Bool = ChannelAdminLogEventAction;\nchannelAdminLogEventActionCreateTopic#58707d28 topic:ForumTopic = ChannelAdminLogEventAction;\nchannelAdminLogEventActionEditTopic#f06fe208 prev_topic:ForumTopic new_topic:ForumTopic = ChannelAdminLogEventAction;\nchannelAdminLogEventActionDeleteTopic#ae168909 topic:ForumTopic = ChannelAdminLogEventAction;\nchannelAdminLogEventActionPinTopic#5d8d353b flags:# prev_topic:flags.0?ForumTopic new_topic:flags.1?ForumTopic = ChannelAdminLogEventAction;\nchannelAdminLogEventActionToggleAntiSpam#64f36dfc new_value:Bool = ChannelAdminLogEventAction;\nchannelAdminLogEventActionChangeEmojiStickerSet#46d840ab prev_stickerset:InputStickerSet new_stickerset:InputStickerSet = ChannelAdminLogEventAction;\n\nchannelAdminLogEvent#1fad68cd id:long date:int user_id:long action:ChannelAdminLogEventAction = ChannelAdminLogEvent;\n\nchannels.adminLogResults#ed8af74d events:Vector<ChannelAdminLogEvent> chats:Vector<Chat> users:Vector<User> = channels.AdminLogResults;\n\nchannelAdminLogEventsFilter#ea107ae4 flags:# join:flags.0?true leave:flags.1?true invite:flags.2?true ban:flags.3?true unban:flags.4?true kick:flags.5?true unkick:flags.6?true promote:flags.7?true demote:flags.8?true info:flags.9?true settings:flags.10?true pinned:flags.11?true edit:flags.12?true delete:flags.13?true group_call:flags.14?true invites:flags.15?true send:flags.16?true forums:flags.17?true sub_extend:flags.18?true = ChannelAdminLogEventsFilter;\n\n---functions---\n\nchannels.getAdminLog#33ddf480 flags:# channel:InputChannel q:string events_filter:flags.0?ChannelAdminLogEventsFilter admins:flags.1?Vector<InputUser> max_id:long min_id:long limit:int = channels.AdminLogResults;\n```\n\n[channels.getAdminLog](https://core.telegram.org/method/channels.getAdminLog) can be used to list recent admin activity.  \nA [channelAdminLogEventsFilter](https://core.telegram.org/constructor/channelAdminLogEventsFilter) can be used to filter out actions of a certain type, and the `admins` field can be used to show only actions by certain admins.  \n`q` can also be used to filter only logs matching a query string.",
    "url": "https://core.telegram.org/api/recent-actions"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/threads",
      "title": "Threads",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Threads"
        },
        {
          "property": "og:description",
          "content": "Telegram allows commenting on a channel post or on a generic supergroup message, thanks to message threads."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:37 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3001",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Threads\n\nTelegram allows commenting on a [channel post](https://core.telegram.org/api/channel) or on a generic [supergroup message](https://core.telegram.org/api/channel), thanks to message threads.\n\n### [](#message-threads)Message threads\n\nSchema:\n\n```\nmessageReplyHeader#afbc09db flags:# reply_to_scheduled:flags.2?true forum_topic:flags.3?true quote:flags.9?true reply_to_msg_id:flags.4?int reply_to_peer_id:flags.0?Peer reply_from:flags.5?MessageFwdHeader reply_media:flags.8?MessageMedia reply_to_top_id:flags.1?int quote_text:flags.6?string quote_entities:flags.7?Vector<MessageEntity> quote_offset:flags.10?int = MessageReplyHeader;\n\nmessageReplies#83d60fc2 flags:# comments:flags.0?true replies:int replies_pts:int recent_repliers:flags.1?Vector<Peer> channel_id:flags.0?long max_id:flags.2?int read_max_id:flags.3?int = MessageReplies;\n\nmessage#94345242 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true from_scheduled:flags.18?true legacy:flags.19?true edit_hide:flags.21?true pinned:flags.24?true noforwards:flags.26?true invert_media:flags.27?true flags2:# offline:flags2.1?true video_processing_pending:flags2.4?true id:int from_id:flags.8?Peer from_boosts_applied:flags.29?int peer_id:Peer saved_peer_id:flags.28?Peer fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?long via_business_bot_id:flags2.0?long reply_to:flags.3?MessageReplyHeader date:int message:string media:flags.9?MessageMedia reply_markup:flags.6?ReplyMarkup entities:flags.7?Vector<MessageEntity> views:flags.10?int forwards:flags.10?int replies:flags.23?MessageReplies edit_date:flags.15?int post_author:flags.16?string grouped_id:flags.17?long reactions:flags.20?MessageReactions restriction_reason:flags.22?Vector<RestrictionReason> ttl_period:flags.25?int quick_reply_shortcut_id:flags.30?int effect:flags2.2?long factcheck:flags2.3?FactCheck = Message;\n\n---functions---\n\nmessages.search#29ee847a flags:# peer:InputPeer q:string from_id:flags.0?InputPeer saved_peer_id:flags.2?InputPeer saved_reaction:flags.3?Vector<Reaction> top_msg_id:flags.1?int filter:MessagesFilter min_date:int max_date:int offset_id:int add_offset:int limit:int max_id:int min_id:int hash:long = messages.Messages;\n```\n\nThreads are usually automatically created when replying to any message in a group.  \nFor example, all replies to a message with ID `420` are associated to thread with ID `420`, unique to this group; this thread ID is contained in the `reply_to_top_id` field of `reply_to` [messageReplyHeader](https://core.telegram.org/constructor/messageReplyHeader), along with an eventual `reply_to_msg_id`, for replies to messages within a thread.  \nReplies to messages in a thread are part of the same thread, and do not spawn new threads.\n\nWhen receiving a [message](https://core.telegram.org/constructor/message) from a group that is also the top of a thread (the message with ID `420`), the `replies` optional field will contain a [messageReplies](https://core.telegram.org/constructor/messageReplies) constructor, containing the message ID and [PTS](https://core.telegram.org/api/updates) of the latest reply in the thread, and the message ID of the latest read thread reply, along with the total number of replies in the thread.\n\nReplies to a thread can also be manually fetched using [messages.search](https://core.telegram.org/method/messages.search), providing to `top_msg_id` the thread ID.\n\n### [](#channel-comments)Channel comments\n\nThe same [messageReplies](https://core.telegram.org/constructor/messageReplies) constructor seen above will also be contained in channel posts, this time containing information about the comment section of a specific channel post, see [here\u00a0\u00bb](https://core.telegram.org/api/discussion) for more info.",
    "url": "https://core.telegram.org/api/threads"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/pin",
      "title": "Pinned messages",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Pinned messages"
        },
        {
          "property": "og:description",
          "content": "Telegram allows pinning multiple messages on top of a specific chat."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:38 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4410",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Pinned messages\n\nTelegram allows pinning multiple messages on top of a specific chat.\n\n```\nmessage#94345242 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true from_scheduled:flags.18?true legacy:flags.19?true edit_hide:flags.21?true pinned:flags.24?true noforwards:flags.26?true invert_media:flags.27?true flags2:# offline:flags2.1?true video_processing_pending:flags2.4?true id:int from_id:flags.8?Peer from_boosts_applied:flags.29?int peer_id:Peer saved_peer_id:flags.28?Peer fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?long via_business_bot_id:flags2.0?long reply_to:flags.3?MessageReplyHeader date:int message:string media:flags.9?MessageMedia reply_markup:flags.6?ReplyMarkup entities:flags.7?Vector<MessageEntity> views:flags.10?int forwards:flags.10?int replies:flags.23?MessageReplies edit_date:flags.15?int post_author:flags.16?string grouped_id:flags.17?long reactions:flags.20?MessageReactions restriction_reason:flags.22?Vector<RestrictionReason> ttl_period:flags.25?int quick_reply_shortcut_id:flags.30?int effect:flags2.2?long factcheck:flags2.3?FactCheck = Message;\n\nupdatePinnedMessages#ed85eab5 flags:# pinned:flags.0?true peer:Peer messages:Vector<int> pts:int pts_count:int = Update;\nupdatePinnedChannelMessages#5bb98608 flags:# pinned:flags.0?true channel_id:long messages:Vector<int> pts:int pts_count:int = Update;\n\n---functions---\n\nmessages.updatePinnedMessage#d2aaf7ec flags:# silent:flags.0?true unpin:flags.1?true pm_oneside:flags.2?true peer:InputPeer id:int = Updates;\nmessages.unpinAllMessages#ee22b9a8 flags:# peer:InputPeer top_msg_id:flags.0?int = messages.AffectedHistory;\n\nmessages.getMessages#63c66506 id:Vector<InputMessage> = messages.Messages;\nchannels.getMessages#ad8c9a23 channel:InputChannel id:Vector<InputMessage> = messages.Messages;\n```\n\nThe [messages.updatePinnedMessage](https://core.telegram.org/method/messages.updatePinnedMessage) method can be used to pin or unpin a specific message in an arbitrary chat.  \nThe `unpin` flags specifies whether to unpin or pin the message, and `pm_oneside` specifies whether the message should only be pinned on the local side of a one-to-one chat.\n\n[messages.unpinAllMessages](https://core.telegram.org/method/messages.unpinAllMessages) can be used to unpin all messages in a chat.\n\nWhen (un)pinning messages, a [updatePinnedMessages](https://core.telegram.org/constructor/updatePinnedMessages) or [updatePinnedChannelMessages](https://core.telegram.org/constructor/updatePinnedChannelMessages) update will be emitted, containing IDs of pinned or unpinned messages.\n\nPinned messages will also have the will also have the `pinned` flag of [message](https://core.telegram.org/constructor/message) set.\n\n### [](#getting-pinned-messages)Getting pinned messages\n\n```\nuserFull#979d2376 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true voice_messages_forbidden:flags.20?true translations_disabled:flags.23?true stories_pinned_available:flags.26?true blocked_my_stories_from:flags.27?true wallpaper_overridden:flags.28?true contact_require_premium:flags.29?true read_dates_private:flags.30?true flags2:# sponsored_enabled:flags2.7?true can_view_revenue:flags2.9?true bot_can_manage_emoji_status:flags2.10?true id:long about:flags.1?string settings:PeerSettings personal_photo:flags.21?Photo profile_photo:flags.2?Photo fallback_photo:flags.22?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int ttl_period:flags.14?int theme_emoticon:flags.15?string private_forward_name:flags.16?string bot_group_admin_rights:flags.17?ChatAdminRights bot_broadcast_admin_rights:flags.18?ChatAdminRights premium_gifts:flags.19?Vector<PremiumGiftOption> wallpaper:flags.24?WallPaper stories:flags.25?PeerStories business_work_hours:flags2.0?BusinessWorkHours business_location:flags2.1?BusinessLocation business_greeting_message:flags2.2?BusinessGreetingMessage business_away_message:flags2.3?BusinessAwayMessage business_intro:flags2.4?BusinessIntro birthday:flags2.5?Birthday personal_channel_id:flags2.6?long personal_channel_message:flags2.6?int stargifts_count:flags2.8?int starref_program:flags2.11?StarRefProgram = UserFull;\nchatFull#2633421b flags:# can_set_username:flags.7?true has_scheduled:flags.8?true translations_disabled:flags.19?true id:long about:string participants:ChatParticipants chat_photo:flags.2?Photo notify_settings:PeerNotifySettings exported_invite:flags.13?ExportedChatInvite bot_info:flags.3?Vector<BotInfo> pinned_msg_id:flags.6?int folder_id:flags.11?int call:flags.12?InputGroupCall ttl_period:flags.14?int groupcall_default_join_as:flags.15?Peer theme_emoticon:flags.16?string requests_pending:flags.17?int recent_requesters:flags.17?Vector<long> available_reactions:flags.18?ChatReactions reactions_limit:flags.20?int = ChatFull;\nchannelFull#bbab348d flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true can_set_location:flags.16?true has_scheduled:flags.19?true can_view_stats:flags.20?true blocked:flags.22?true flags2:# can_delete_channel:flags2.0?true antispam:flags2.1?true participants_hidden:flags2.2?true translations_disabled:flags2.3?true stories_pinned_available:flags2.5?true view_forum_as_messages:flags2.6?true restricted_sponsored:flags2.11?true can_view_revenue:flags2.12?true paid_media_allowed:flags2.14?true can_view_stars_revenue:flags2.15?true paid_reactions_available:flags2.16?true id:long about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int online_count:flags.13?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:flags.23?ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?long migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int folder_id:flags.11?int linked_chat_id:flags.14?long location:flags.15?ChannelLocation slowmode_seconds:flags.17?int slowmode_next_send_date:flags.18?int stats_dc:flags.12?int pts:int call:flags.21?InputGroupCall ttl_period:flags.24?int pending_suggestions:flags.25?Vector<string> groupcall_default_join_as:flags.26?Peer theme_emoticon:flags.27?string requests_pending:flags.28?int recent_requesters:flags.28?Vector<long> default_send_as:flags.29?Peer available_reactions:flags.30?ChatReactions reactions_limit:flags2.13?int stories:flags2.4?PeerStories wallpaper:flags2.7?WallPaper boosts_applied:flags2.8?int boosts_unrestrict:flags2.9?int emojiset:flags2.10?StickerSet = ChatFull;\n\ninputMessagesFilterPinned#1bb00451 = MessagesFilter;\n\n---functions---\n\nmessages.search#29ee847a flags:# peer:InputPeer q:string from_id:flags.0?InputPeer saved_peer_id:flags.2?InputPeer saved_reaction:flags.3?Vector<Reaction> top_msg_id:flags.1?int filter:MessagesFilter min_date:int max_date:int offset_id:int add_offset:int limit:int max_id:int min_id:int hash:long = messages.Messages;\n```\n\nThe `pinned_msg_id` of [userFull](https://core.telegram.org/constructor/userFull), [chatFull](https://core.telegram.org/constructor/chatFull), [channelFull](https://core.telegram.org/constructor/channelFull) contains the ID of only the latest pinned message.  \nTo obtain a full list, use [messages.search](https://core.telegram.org/method/messages.search) with [inputMessagesFilterPinned](https://core.telegram.org/constructor/inputMessagesFilterPinned) filter.",
    "url": "https://core.telegram.org/api/pin"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/scheduled-messages",
      "title": "Scheduled messages",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Scheduled messages"
        },
        {
          "property": "og:description",
          "content": "Telegram allows scheduling messages"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:40 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3603",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Scheduled messages\n\nTelegram allows scheduling messages.\n\n```\nmessage#94345242 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true from_scheduled:flags.18?true legacy:flags.19?true edit_hide:flags.21?true pinned:flags.24?true noforwards:flags.26?true invert_media:flags.27?true flags2:# offline:flags2.1?true video_processing_pending:flags2.4?true id:int from_id:flags.8?Peer from_boosts_applied:flags.29?int peer_id:Peer saved_peer_id:flags.28?Peer fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?long via_business_bot_id:flags2.0?long reply_to:flags.3?MessageReplyHeader date:int message:string media:flags.9?MessageMedia reply_markup:flags.6?ReplyMarkup entities:flags.7?Vector<MessageEntity> views:flags.10?int forwards:flags.10?int replies:flags.23?MessageReplies edit_date:flags.15?int post_author:flags.16?string grouped_id:flags.17?long reactions:flags.20?MessageReactions restriction_reason:flags.22?Vector<RestrictionReason> ttl_period:flags.25?int quick_reply_shortcut_id:flags.30?int effect:flags2.2?long factcheck:flags2.3?FactCheck = Message;\n\nupdateNewScheduledMessage#39a51dfb message:Message = Update;\nupdateDeleteScheduledMessages#f2a71983 flags:# peer:Peer messages:Vector<int> sent_messages:flags.0?Vector<int> = Update;\n\n---functions---\n\nmessages.sendMessage#983f9745 flags:# no_webpage:flags.1?true silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\n\nmessages.sendMedia#7852834e flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\n```\n\nTo schedule a message, simply provide a future unixtime in the `schedule_date` flag of [messages.sendMessage](https://core.telegram.org/method/messages.sendMessage) or [messages.sendMedia](https://core.telegram.org/method/messages.sendMedia).\n\nThe specified message or media will be added to a server-side schedule queue for the current chat, and will be automatically sent at the specified time.  \nThe method call generates the following updates:\n\n*   Immediately, an [updateNewScheduledMessage](https://core.telegram.org/constructor/updateNewScheduledMessage), containing a [message](https://core.telegram.org/constructor/message) with ID equal to the ID of the message in the schedule queue for the current chat (each PM, chat, supergroup and channel has its own schedule queue and ID sequence), and `date` equal to `schedule_date`.\n*   At `schedule_date`, an [updateNewMessage](https://core.telegram.org/constructor/updateNewMessage) or [updateNewChannelMessage](https://core.telegram.org/constructor/updateNewChannelMessage) with the `from_scheduled` flag set, indicating to the sender that the specified scheduled message was sent.\n*   At `schedule_date`, an [updateDeleteScheduledMessages](https://core.telegram.org/constructor/updateDeleteScheduledMessages), indicating that the message was flushed from the schedule queue.  \n    The `messages` field will contain the scheduled message IDs for the sent messages (initially returned in [updateNewScheduledMessage](https://core.telegram.org/constructor/updateNewScheduledMessage)), and `sent_messages` will contain the real message IDs for the sent messages.  \n    The scheduled and real message ID for a given message will be at the same vector index, in `messages` and `sent_messages` respectively.\n\nIf the `schedule_date` is less than 10 seconds in the future, the message will be sent immediately, generating a normal [updateNewMessage](https://core.telegram.org/constructor/updateNewMessage)/[updateNewChannelMessage](https://core.telegram.org/constructor/updateNewChannelMessage).\n\nNote: sending **even non-scheduled** videos to big channels will automatically trigger server-side processing (i.e. to generate alternative qualities, that will be contained in the final [messageMediaDocument](https://core.telegram.org/constructor/messageMediaDocument).`alt_document`).\n\nThese messages aren't sent immediately, and are instead added to the schedule queue similarly to scheduled messages, with a few differences:\n\n*   Immediately, an [updateNewScheduledMessage](https://core.telegram.org/constructor/updateNewScheduledMessage), containing a [message](https://core.telegram.org/constructor/message) with ID equal to the ID of the message in the schedule queue for the current chat (each PM, chat, supergroup and channel has its own schedule queue and ID sequence), **the `video_processing_pending` flag set** and `date` equal to the **estimated conversion date** (not the schedule date).\n*   Approximately at `date`, an [updateNewMessage](https://core.telegram.org/constructor/updateNewMessage) or [updateNewChannelMessage](https://core.telegram.org/constructor/updateNewChannelMessage) with the `from_scheduled` flag set, indicating to the sender that the specified message with pending video processing was sent.\n*   Approximately at `date`, an [updateDeleteScheduledMessages](https://core.telegram.org/constructor/updateDeleteScheduledMessages), indicating that the message was flushed from the schedule queue.  \n    The `messages` field will contain the scheduled message IDs for the sent messages (initially returned in [updateNewScheduledMessage](https://core.telegram.org/constructor/updateNewScheduledMessage)), and `sent_messages` will contain the real message IDs for the sent messages.  \n    The scheduled and real message ID for a given message will be at the same vector index, in `messages` and `sent_messages` respectively.\n\n### [](#manipulating-the-schedule-queue)Manipulating the schedule queue\n\n```\nupdateNewScheduledMessage#39a51dfb message:Message = Update;\nupdateDeleteScheduledMessages#f2a71983 flags:# peer:Peer messages:Vector<int> sent_messages:flags.0?Vector<int> = Update;\n\n---functions---\n\nmessages.getScheduledHistory#f516760b peer:InputPeer hash:long = messages.Messages;\nmessages.getScheduledMessages#bdbb0464 peer:InputPeer id:Vector<int> = messages.Messages;\nmessages.sendScheduledMessages#bd38850a peer:InputPeer id:Vector<int> = Updates;\nmessages.deleteScheduledMessages#59ae2b16 peer:InputPeer id:Vector<int> = Updates;\n\nmessages.editMessage#dfd14005 flags:# no_webpage:flags.1?true invert_media:flags.16?true peer:InputPeer id:int message:flags.11?string media:flags.14?InputMedia reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.15?int quick_reply_shortcut_id:flags.17?int = Updates;\n```\n\nClients can manually edit the schedule queue of a certain chat, providing the scheduled message ID obtained from [updateNewScheduledMessage](https://core.telegram.org/constructor/updateNewScheduledMessage).\n\n*   [messages.getScheduledHistory](https://core.telegram.org/method/messages.getScheduledHistory) obtains all messages in the schedule queue for the specified chat\n*   [messages.getScheduledMessages](https://core.telegram.org/method/messages.getScheduledMessages) obtains information about specific messages in the schedule queue for the specified chat\n*   [messages.sendScheduledMessages](https://core.telegram.org/method/messages.sendScheduledMessages) flushes messages from the schedule queue, sending them immediately\n*   [messages.deleteScheduledMessages](https://core.telegram.org/method/messages.deleteScheduledMessages) deletes messages from the schedule queue, without sending them\n*   [messages.editMessage](https://core.telegram.org/method/messages.editMessage) can be used to modify the scheduled date of a specific message in a schedule queue.\n\nModifying scheduled messages will generate an [updateNewScheduledMessage](https://core.telegram.org/constructor/updateNewScheduledMessage) with the same ID, and updated information.  \nDeleting scheduled messages will generate an [updateDeleteScheduledMessages](https://core.telegram.org/constructor/updateDeleteScheduledMessages).",
    "url": "https://core.telegram.org/api/scheduled-messages"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/live-location",
      "title": "Live geolocation",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Live geolocation"
        },
        {
          "property": "og:description",
          "content": "Telegram allows sending the live geolocation of a user in a chat, optionally setting a proximity alert."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:40 GMT",
        "content-type": "text/html; charset=utf-8",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "strict-transport-security": "max-age=35768000",
        "content-encoding": "gzip",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Live geolocation\n\nTelegram allows sending the live geolocation of a user in a chat, optionally setting a proximity alert.\n\n### [](#sending-live-locations)Sending live locations\n\n```\ninputGeoPointEmpty#e4c123d6 = InputGeoPoint;\n\ninputGeoPoint#48222faf flags:# lat:double long:double accuracy_radius:flags.0?int = InputGeoPoint;\n\ninputMediaGeoLive#971fa843 flags:# stopped:flags.0?true geo_point:InputGeoPoint heading:flags.2?int period:flags.1?int proximity_notification_radius:flags.3?int = InputMedia;\n\n---functions---\n\nmessages.sendMedia#7852834e flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\n\nmessages.editMessage#dfd14005 flags:# no_webpage:flags.1?true invert_media:flags.16?true peer:InputPeer id:int message:flags.11?string media:flags.14?InputMedia reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.15?int quick_reply_shortcut_id:flags.17?int = Updates;\n```\n\nTo send a live geolocation, use [messages.sendMedia](https://core.telegram.org/method/messages.sendMedia) with an [inputMediaGeoLive](https://core.telegram.org/constructor/inputMediaGeoLive) `media` .\n\nThe [inputMediaGeoLive](https://core.telegram.org/constructor/inputMediaGeoLive) allows sending the geolocation as an [inputGeoPoint](https://core.telegram.org/constructor/inputGeoPoint) with floating point latitude and longitude, with an optional `accuracy_radius` in meters.  \nClients can also provide a `heading`, a direction in degrees (1-360) that can be used to indicate the direction of the user, a validity `period` for the current location, and a `proximity_notification_radius` .\n\nThe sent geolocation should be updated periodically using [messages.editMessage](https://core.telegram.org/method/messages.editMessage) **at most** every `period` seconds, in order to implement the \"live\" part of live geolocations.\n\nTo stop sharing the location, pass [inputGeoPointEmpty](https://core.telegram.org/constructor/inputGeoPointEmpty) as location and set the `stopped` flag to true in a last [messages.editMessage](https://core.telegram.org/method/messages.editMessage) call.\n\n### [](#receiving-live-locations)Receiving live locations\n\n```\ngeoPoint#b2a2f663 flags:# long:double lat:double access_hash:long accuracy_radius:flags.0?int = GeoPoint;\nmessageMediaGeoLive#b940c666 flags:# geo:GeoPoint heading:flags.0?int period:int proximity_notification_radius:flags.1?int = MessageMedia;\n\nupdateGeoLiveViewed#871fb939 peer:Peer msg_id:int = Update;\n```\n\nClients will receive a message with a [messageMediaGeoLive](https://core.telegram.org/constructor/messageMediaGeoLive), containing the information passed by the sender; when the geolocation message is marked as read, an [updateGeoLiveViewed](https://core.telegram.org/constructor/updateGeoLiveViewed) is generated.\n\nPeriodically, the geolocation will be updated with [updateEditMessage](https://core.telegram.org/constructor/updateEditMessage)/[updateEditChannelMessage](https://core.telegram.org/constructor/updateEditChannelMessage) updates.\n\n#### [](#live-location-previews)Live location previews\n\n```\ninputWebFileGeoPointLocation#9f2221c9 geo_point:InputGeoPoint access_hash:long w:int h:int zoom:int scale:int = InputWebFileLocation;\n\ninputGeoPoint#48222faf flags:# lat:double long:double accuracy_radius:flags.0?int = InputGeoPoint;\n\n---functions---\n\nupload.getWebFile#24e6818d location:InputWebFileLocation offset:int limit:int = upload.WebFile;\n```\n\nA map preview can be generated by passing the received [geoPoint](https://core.telegram.org/constructor/geoPoint) to [upload.getWebFile](https://core.telegram.org/api/files#downloading-webfiles), to download an image preview of the map.\n\n*   `geo_point` is generated from the `lat` , `long` `accuracy_radius` parameters of the [geoPoint](https://core.telegram.org/constructor/geoPoint)\n*   `access_hash` is the access hash of the [geoPoint](https://core.telegram.org/constructor/geoPoint)\n*   `w` - Map width in pixels before applying scale; 16-1024\n*   `h` - Map height in pixels before applying scale; 16-1024\n*   `zoom` - Map zoom level; 13-20\n*   `scale` - Map scale; 1-3\n\nThe image is then downloaded as specified [here \u00bb](https://core.telegram.org/api/files)\n\n### [](#proximity-alert)Proximity alert\n\n```\nmessageActionGeoProximityReached#98e0d697 from_id:Peer to_id:Peer distance:int = MessageAction;\n\nmessageService#2b085862 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true legacy:flags.19?true id:int from_id:flags.8?Peer peer_id:Peer reply_to:flags.3?MessageReplyHeader date:int action:MessageAction ttl_period:flags.25?int = Message;\n```\n\nIf:\n\n*   A user sets a `proximity_notification_radius` when sending a location\n*   Multiple users share their location within the same chat\n*   One of the other users comes within `proximity_notification_radius` meters of the first user, and updates their location accordingly\n\nAn [updateNewMessage](https://core.telegram.org/constructor/updateNewMessage)/[updateNewChannelMessage](https://core.telegram.org/constructor/updateNewChannelMessage) is generated for all chat members, containing a [messageService](https://core.telegram.org/constructor/messageService) with action [messageActionGeoProximityReached](https://core.telegram.org/constructor/messageActionGeoProximityReached):\n\n*   `messageActionGeoProximityReached.to_id` is the peer that enabled proximity alerts\n*   `messageActionGeoProximityReached.from_id` is the peer that is now in proximity of `messageActionGeoProximityReached.to_id`\n*   `messageActionGeoProximityReached.distance` is the distance between them, in meters",
    "url": "https://core.telegram.org/api/live-location"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/mentions",
      "title": "Mentions",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Mentions"
        },
        {
          "property": "og:description",
          "content": "Telegram allows mentioning other users in case of urgent duckling matters, and quickly navigating to those mentions in order to read them as swiftly as possible."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:39 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3649",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Mentions\n\nTelegram allows mentioning other users in case of urgent duckling matters, and quickly navigating to those mentions in order to read them as swiftly as possible.\n\n```\nmessageEntityMention#fa04579d offset:int length:int = MessageEntity;\nmessageEntityMentionName#dc7b1140 offset:int length:int user_id:long = MessageEntity;\ninputMessageEntityMentionName#208e68c9 offset:int length:int user_id:InputUser = MessageEntity;\n\nmessage#94345242 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true from_scheduled:flags.18?true legacy:flags.19?true edit_hide:flags.21?true pinned:flags.24?true noforwards:flags.26?true invert_media:flags.27?true flags2:# offline:flags2.1?true video_processing_pending:flags2.4?true id:int from_id:flags.8?Peer from_boosts_applied:flags.29?int peer_id:Peer saved_peer_id:flags.28?Peer fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?long via_business_bot_id:flags2.0?long reply_to:flags.3?MessageReplyHeader date:int message:string media:flags.9?MessageMedia reply_markup:flags.6?ReplyMarkup entities:flags.7?Vector<MessageEntity> views:flags.10?int forwards:flags.10?int replies:flags.23?MessageReplies edit_date:flags.15?int post_author:flags.16?string grouped_id:flags.17?long reactions:flags.20?MessageReactions restriction_reason:flags.22?Vector<RestrictionReason> ttl_period:flags.25?int quick_reply_shortcut_id:flags.30?int effect:flags2.2?long factcheck:flags2.3?FactCheck = Message;\n\nchannelParticipantsMentions#e04b5ceb flags:# q:flags.0?string top_msg_id:flags.1?int = ChannelParticipantsFilter;\n\n---functions---\n\nmessages.sendMessage#983f9745 flags:# no_webpage:flags.1?true silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\n\nchannels.getParticipants#77ced9d0 channel:InputChannel filter:ChannelParticipantsFilter offset:int limit:int hash:long = channels.ChannelParticipants;\n```\n\nMentions are implemented as [message entities](https://core.telegram.org/api/entities), passed to the [messages.sendMessage](https://core.telegram.org/method/messages.sendMessage) method:\n\n*   [inputMessageEntityMentionName](https://core.telegram.org/constructor/inputMessageEntityMentionName) - Used when sending messages, allows mentioning a user [inline, even for users that don't have a @username](https://t.me/botfather)\n*   [messageEntityMentionName](https://core.telegram.org/constructor/messageEntityMentionName) - Incoming message counterpart of [inputMessageEntityMentionName](https://core.telegram.org/constructor/inputMessageEntityMentionName)\n*   [messageEntityMention](https://core.telegram.org/constructor/messageEntityMention) - [@botfather](https://t.me/botfather) (this entity is generated automatically server-side for @usernames in messages, no need to provide it manually)\n\nIncoming [messages](https://core.telegram.org/constructor/message) mentioning to the current user will have the `mentioned` flag set, and will contain one or more [messageEntityMention](https://core.telegram.org/constructor/messageEntityMention) and [messageEntityMentionName](https://core.telegram.org/constructor/messageEntityMentionName) constructors.\n\nGraphical clients can show a list of mentionable users when the user starts entering an `@` in the text bar; for this purpose, the [channelParticipantsMentions](https://core.telegram.org/constructor/channelParticipantsMentions) filter can be used in [channels.getParticipants](https://core.telegram.org/method/channels.getParticipants).  \nThis filter can be enhanced by providing an additional query string `q` (anything the user enters after `@`); it will also return non-participant users, in case of channel users commenting in [post comment sections](https://core.telegram.org/api/discussion).\n\n### [](#dialog-mentions)Dialog mentions\n\n```\ndialog#d58a08c6 flags:# pinned:flags.2?true unread_mark:flags.3?true view_forum_as_messages:flags.6?true peer:Peer top_message:int read_inbox_max_id:int read_outbox_max_id:int unread_count:int unread_mentions_count:int unread_reactions_count:int notify_settings:PeerNotifySettings pts:flags.0?int draft:flags.1?DraftMessage folder_id:flags.4?int ttl_period:flags.5?int = Dialog;\n\n---functions---\n\nmessages.getUnreadMentions#f107e790 flags:# peer:InputPeer top_msg_id:flags.0?int offset_id:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;\nmessages.readMentions#36e5bf4d flags:# peer:InputPeer top_msg_id:flags.0?int = messages.AffectedHistory;\n```\n\nGraphical clients are supposed to show a blue mention indicator next to the message counter of chats in the dialog list.  \nThe [dialog](https://core.telegram.org/constructor/dialog) constructor contains an `unread_mentions_count` field to isolate chats with unread mentions; the actual mention counter should be shown inside of the chat itself, above an `@` button that can be used, by clicking multiple times, to navigate back (using [messages.getUnreadMentions](https://core.telegram.org/method/messages.getUnreadMentions)) through the mention history.\n\nWhen the last unread mention is read, or when long-clicking on the `@` button, all mentions for a chat should marked as read using [messages.readMentions](https://core.telegram.org/method/messages.readMentions).",
    "url": "https://core.telegram.org/api/mentions"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/peers",
      "title": "Peer database",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Peer database"
        },
        {
          "property": "og:description",
          "content": "Many constructors in the API need to be stored in a local database upon reception and should only ever be updated reactively (passively) when received via updates or by other means (as specified in the documentation), to avoid overloading the server by continuously requesting changes for the same unchanged information."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:40 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "11067",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Peer database\n\nMany constructors in the API need to be stored in a local database upon reception and should only ever be updated reactively (passively) when received via updates or by other means (as specified in the documentation), to avoid overloading the server by continuously requesting changes for the same unchanged information.\n\n[user](https://core.telegram.org/constructor/user), [chat](https://core.telegram.org/constructor/chat), [channel](https://core.telegram.org/constructor/channel) constructors and their full counterparts [userFull](https://core.telegram.org/constructor/userFull), [chatFull](https://core.telegram.org/constructor/chatFull), [channelFull](https://core.telegram.org/constructor/channelFull) are especially important, because they contain important information about users, bots, chats and channels (from now on, _peers_), and most importantly the `access_hash` value, **required** to interact with peers in the API.\n\nThis page describes exactly how and when should the local databases of the constructors listed above be refreshed, and contains a more detailed description of basic peer-related concepts.\n\n> For simplicity, the documentation often uses the term \"cache\" instead of \"database\" when referring to the peer database, however note that it is recommended to persist received information (or at the very least the id+access hash) to a database, to call methods requiring the access hash and view other peer info without refetching the chat history and peer info after startup.\n\n### [](#peer-info-database)Peer info database\n\n```\nuserEmpty#d3bc4b7a id:long = User;\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\nchatEmpty#29562865 id:long = Chat;\nchat#41cbf256 flags:# creator:flags.0?true left:flags.2?true deactivated:flags.5?true call_active:flags.23?true call_not_empty:flags.24?true noforwards:flags.25?true id:long title:string photo:ChatPhoto participants_count:int date:int version:int migrated_to:flags.6?InputChannel admin_rights:flags.14?ChatAdminRights default_banned_rights:flags.18?ChatBannedRights = Chat;\nchatForbidden#6592a1a7 id:long title:string = Chat;\n\nchannel#fe4478bd flags:# creator:flags.0?true left:flags.2?true broadcast:flags.5?true verified:flags.7?true megagroup:flags.8?true restricted:flags.9?true signatures:flags.11?true min:flags.12?true scam:flags.19?true has_link:flags.20?true has_geo:flags.21?true slowmode_enabled:flags.22?true call_active:flags.23?true call_not_empty:flags.24?true fake:flags.25?true gigagroup:flags.26?true noforwards:flags.27?true join_to_send:flags.28?true join_request:flags.29?true forum:flags.30?true flags2:# stories_hidden:flags2.1?true stories_hidden_min:flags2.2?true stories_unavailable:flags2.3?true signature_profiles:flags2.12?true id:long access_hash:flags.13?long title:string username:flags.6?string photo:ChatPhoto date:int restriction_reason:flags.9?Vector<RestrictionReason> admin_rights:flags.14?ChatAdminRights banned_rights:flags.15?ChatBannedRights default_banned_rights:flags.18?ChatBannedRights participants_count:flags.17?int usernames:flags2.0?Vector<Username> stories_max_id:flags2.4?int color:flags2.7?PeerColor profile_color:flags2.8?PeerColor emoji_status:flags2.9?EmojiStatus level:flags2.10?int subscription_until_date:flags2.11?int = Chat;\nchannelForbidden#17d493d5 flags:# broadcast:flags.5?true megagroup:flags.8?true id:long access_hash:long title:string until_date:flags.16?int = Chat;\n\ninputUserEmpty#b98886cf = InputUser;\ninputUserSelf#f7c1b13f = InputUser;\ninputUser#f21158c6 user_id:long access_hash:long = InputUser;\ninputUserFromMessage#1da448e2 peer:InputPeer msg_id:int user_id:long = InputUser;\n\n// No inputChat, just a long is used (because basic chats don't have access hashes)\n\ninputChannelEmpty#ee8c1e86 = InputChannel;\ninputChannel#f35aec28 channel_id:long access_hash:long = InputChannel;\ninputChannelFromMessage#5b934f9d peer:InputPeer msg_id:int channel_id:long = InputChannel;\n\ninputPeerEmpty#7f3b18ea = InputPeer;\ninputPeerSelf#7da07ec9 = InputPeer;\ninputPeerChat#35a95cb9 chat_id:long = InputPeer;\ninputPeerUser#dde8a54c user_id:long access_hash:long = InputPeer;\ninputPeerChannel#27bcbbfc channel_id:long access_hash:long = InputPeer;\ninputPeerUserFromMessage#a87b0a1c peer:InputPeer msg_id:int user_id:long = InputPeer;\ninputPeerChannelFromMessage#bd2a0840 peer:InputPeer msg_id:int channel_id:long = InputPeer;\n\n---functions---\n\nusers.getUsers#d91a548 id:Vector<InputUser> = Vector<User>;\nmessages.getChats#49e9528f id:Vector<long> = messages.Chats;\nchannels.getChannels#a7f6bbb id:Vector<InputChannel> = messages.Chats;\n```\n\nThe peer info database contains the following information:\n\n*   The [peer ID\u00a0\u00bb](#peer-id)\n*   The [access hash\u00a0\u00bb](#access-hash)\n*   [Other info\u00a0\u00bb](#other-info)\n\nAnd it must be populated as follows:\n\n*   [By saving received user, chat, channel constructors\u00a0\u00bb](#saving-constructors)\n*   [By handling certain updates\u00a0\u00bb](#handling-certain-updates)\n*   [By manual refreshes\u00a0\u00bb](#manual-refreshes)\n\nExample implementation: [tdlib](https://github.com/tdlib/td/).\n\n#### [](#saving-constructors)Saving constructors\n\nThe peer info database needs to be updated every time a new constructor of type [user](https://core.telegram.org/constructor/user), [chat](https://core.telegram.org/constructor/chat) and [channel](https://core.telegram.org/constructor/channel) (and their `forbidden` counterparts, used for peers that the user can't access, but can view basic info about) is received.\n\nThese constructors are received when interacting with the API (i.e. in common chats, through the search function, [username resolution](https://core.telegram.org/api/invites#public-usernames), [temporary profile links](https://core.telegram.org/api/links#temporary-profile-links), and so on...).\n\nUnless specified otherwise (see the constructor pages for the special cases), when updating the local peer database, all fields from the newly received constructor take priority over the old constructor cached locally (including by removing fields that aren't set in the new constructor).\n\n#### [](#handling-certain-updates)Handling certain updates\n\nThe following updates should trigger an update of a small subset of the info contained in the peer database (both non-full and [full variants](#full-info-database)):\n\n*   [updateUserStatus](https://core.telegram.org/constructor/updateUserStatus) - Update [user](https://core.telegram.org/constructor/user).`status`\n*   [updateUserName](https://core.telegram.org/constructor/updateUserName)\\- Update [user](https://core.telegram.org/constructor/user).`first_name`/`last_name`/`username`/`usernames`\n*   [updatePeerBlocked](https://core.telegram.org/constructor/updatePeerBlocked) - Update [userFull](https://core.telegram.org/constructor/userFull).`blocked`, [channelFull](https://core.telegram.org/constructor/channelFull).`blocked`\n*   [updatePeerSettings](https://core.telegram.org/constructor/updatePeerSettings) - Update [userFull](https://core.telegram.org/constructor/userFull).`settings`\n*   [updatePeerWallpaper](https://core.telegram.org/constructor/updatePeerWallpaper) - Update [userFull](https://core.telegram.org/constructor/userFull).`wallpaper`, [channelFull](https://core.telegram.org/constructor/channelFull).`wallpaper`\n*   [updateUserEmojiStatus](https://core.telegram.org/constructor/updateUserEmojiStatus) - Update [user](https://core.telegram.org/constructor/user).`emoji_status`\n*   [updateChatParticipants](https://core.telegram.org/constructor/updateChatParticipants) - Update [chat](https://core.telegram.org/constructor/chat).`participants_count`, [chatFull](https://core.telegram.org/constructor/chatFull).`participants`.\n*   [updateChatParticipant](https://core.telegram.org/constructor/updateChatParticipant) - Update [chat](https://core.telegram.org/constructor/chat).`participants_count`, [chatFull](https://core.telegram.org/constructor/chatFull).`participants`.\n*   [updateChannelAvailableMessages](https://core.telegram.org/constructor/updateChannelAvailableMessages) - Update [channel](https://core.telegram.org/constructor/channel).`hidden_prehistory`\n\n#### [](#manual-refreshes)Manual refreshes\n\nFor performance reasons, the server will not always send updates containing updated information about all peers: for this reason, information about _already cached_ peers may be refreshed manually in certain conditions using the bulked [users.getUsers](https://core.telegram.org/method/users.getUsers), [messages.getChats](https://core.telegram.org/method/messages.getChats), [channels.getChannels](https://core.telegram.org/method/channels.getChannels) methods, all requiring the previously cached `access_hash`.\n\nThe following list is non-exhaustive, and clients may choose to refresh peer information in some other conditions as well (i.e. when opening the profile page, etc).\n\n*   When fetching info about one of the following internal user IDs, if the info isn't already cached or if the cached info is `min`: 777000 (service notifications user), 1271266957 (replies bot), 1087968824 (anonymous bot), 136817688 (channel bot), 5434988373 (antispam bot).  \n    Info about these IDs may be fetched with the zero access hash even by users.\n    \n*   After invoking [bots.setBotInfo](https://core.telegram.org/method/bots.setBotInfo) after changing `name` (but **not** the `about` or the `description`, as changing those fields already triggers a refresh of the full info database, and with it the peer database), for the bot whose info we changed\n    \n*   After receiving a `CHAT_FORWARDS_RESTRICTED` error when forwarding messages from a chat, to refresh info about the source chat (i.e. the fact that we received this error means that the client didn't locally prevent the user from forwarding a message from the protected chat, because the locally cached [channel](https://core.telegram.org/constructor/channel).`noforwards`/[chat](https://core.telegram.org/constructor/chat).`noforwards` flag is out of date).\n    \n*   After receiving a `CHAT_GUEST_SEND_FORBIDDEN` error when sending messages to a [discussion group](https://core.telegram.org/api/discussion), to refresh info about the discussion group (i.e. the fact that we received this error means that the client didn't locally prevent the non-member user from sending a message to a discussion group where only members can send messages, because the locally cached [channel](https://core.telegram.org/constructor/channel).`join_to_send` flag is out of date).\n    \n*   After receiving a `USER_NOT_PARTICIPANT` error when calling [channels.leaveChannel](https://core.telegram.org/method/channels.leaveChannel), to refresh info about the channel/supergroup (i.e. the fact that we received this error means that the client tried to leave a channel/supergroup they're not a member of, and the client didn't try to prevent this locally because its [channel](https://core.telegram.org/constructor/channel) constructor is out of date).\n    \n*   After invoking the following methods (both if the call succeds and after receiving a `USERNAME_NOT_MODIFIED` error, which is also a success):\n    \n    *   [account.toggleUsername](https://core.telegram.org/method/account.toggleUsername), [account.reorderUsernames](https://core.telegram.org/method/account.reorderUsernames) - For ourselves\n    *   [bots.toggleUsername](https://core.telegram.org/method/bots.toggleUsername), [bots.reorderUsernames](https://core.telegram.org/method/bots.reorderUsernames) - For the bot whose username we updated\n    *   [channels.toggleUsername](https://core.telegram.org/method/channels.toggleUsername), [channels.reorderUsernames](https://core.telegram.org/method/channels.reorderUsernames) - For the channel whose username we updated\n    \n    Info should **only** be manually refreshed with a call to [users.getUsers](https://core.telegram.org/method/users.getUsers), [channels.getChannels](https://core.telegram.org/method/channels.getChannels) if the new username order/active username cannot be applied locally (i.e. the method call successfully set as active some username that isn't associated to the peer in our local cache, and so on), otherwise the `username` and `usernames` fields of the peer info database should be updated locally, using the info that was passed to the toggle/reorder methods by the user.\n    \n*   After invoking the following methods, if the user for whom we set the profile photo is **not** returned in [photos.photo](https://core.telegram.org/constructor/photos.photo).`users`:\n    \n    *   [photos.updateProfilePhoto](https://core.telegram.org/method/photos.updateProfilePhoto)\n    *   [photos.uploadProfilePhoto](https://core.telegram.org/method/photos.uploadProfilePhoto)\n    *   [photos.uploadContactProfilePhoto](https://core.telegram.org/method/photos.uploadContactProfilePhoto) - Only if `suggest` is not set\n*   After invoking [photos.deletePhotos](https://core.telegram.org/method/photos.deletePhotos), if the local cache doesn't have any more photos left for the current user after removing the ones passed to the method.\n    \n*   After failing to download a peer photo.\n    \n*   [contacts.getStatuses](https://core.telegram.org/method/contacts.getStatuses) should be invoked by clients every `70000-100000` seconds to update the [user](https://core.telegram.org/constructor/user).`status` field of contacts.  \n    The exact contact status polling interval should be randomly chosen between `70000` and `100000`, and re-chosen every time [contacts.getStatuses](https://core.telegram.org/method/contacts.getStatuses) is invoked.  \n    If a [contacts.getStatuses](https://core.telegram.org/method/contacts.getStatuses) query fails, repeat the method call after `5` to `10` seconds.\n    \n\n#### [](#peer-id)Peer ID\n\nThe peer `id` is a unique 64-bit ID used to identify a specific user, chat or channel.\n\nThis field should be used as primary key in the channel, chat and user databases.\n\nNote that the ID sequences of users, chats and channels **overlap**, so you must either:\n\n*   Use separate tables/hashmaps for [user](https://core.telegram.org/constructor/user)s, [chat](https://core.telegram.org/constructor/chat)s and [channel](https://core.telegram.org/constructor/channel)s OR\n*   Transform the peer IDs to bot API IDs as specified [here\u00a0\u00bb](https://core.telegram.org/api/bots/ids), which will allow you to use a single ID sequence (and database) for all three peer types, maintaining uniqueness.  \n    In this case, a single table _can_ be used for all peer types, but since the structures of the constructors are different, to avoid useless typechecks it might be a good idea to use three tables, as with the first approach.\n\nIt's a good idea to transform peer IDs to [bot API IDs](https://core.telegram.org/api/bots/ids) even if you do decide to use separate databases, as it will make IDs more visually recognizable both for you and your users, as well as guarantee compatibility with the bot API.\n\n#### [](#access-hash)Access hash\n\nThe `access_hash` is the second most important field stored in the [peer database](#peer-info-database), used to generate [InputPeer](https://core.telegram.org/type/InputPeer), [inputUser](https://core.telegram.org/type/InputUser), [inputChannel](https://core.telegram.org/type/InputChannel) constructors used to interact with peers in the API.  \nNote that [chat](https://core.telegram.org/constructor/chat)s ([basic groups\u00a0\u00bb](https://core.telegram.org/api/channel)) do not have or need an access hash.  \n[user](https://core.telegram.org/constructor/user)s and [channel](https://core.telegram.org/constructor/channel)s ([supergroups and channels\u00a0\u00bb](https://core.telegram.org/api/channel)) have an access hash, and it can come in various flavors:\n\n*   Full access hash: can be used everywhere in the API.\n*   Min access hash: received from [min constructors\u00a0\u00bb](https://core.telegram.org/api/min), can only be used to fetch profile pictures using [`inputPeerPhotoFileLocation`\u00a0\u00bb](https://core.telegram.org/constructor/inputPeerPhotoFileLocation).\n*   From-message access hash: not a real access hash, constructed as specified [here\u00a0\u00bb](https://core.telegram.org/api/min), must be used when only a min access hash is available locally, but a full access hash is required.\n*   Zero access hash: equal to `0`, must be used by bots when only a min access hash (or no access hash) is available locally, but a full access hash is required.\n\nThe access hash versions listed above are listed in descending priority, and if a version with higher priority is currently cached, it must not be overwritten with a lower priority version.\n\nAccess hashes are received when interacting with the API (i.e. in common chats, through the search function, [username resolution](https://core.telegram.org/api/invites#public-usernames), [temporary profile links](https://core.telegram.org/api/links#temporary-profile-links), and so on...): if you have only a user/channel/supergroup ID without any kind of access hash, you **cannot** interact with that peer.  \nAccess hashes may not be reused across different accounts or different sessions of the same account.  \nThis is a core spam prevention feature of Telegram.\n\nClients and client APIs should avoid exposing access hashes to users, as they cannot be reused outside of the current session, and the user should not be burdened with storing them, when the client can perfectly do the job by itself.\n\nNote: some other, non-peer-related constructors (i.e. not [user](https://core.telegram.org/constructor/user), [chat](https://core.telegram.org/constructor/chat) or [channel](https://core.telegram.org/constructor/channel)) may also contain access hashes, which should be stored in a different database.\n\n#### [](#other-info)Other info\n\nVarious other fields commonly used by the client, as specified in the constructor pages ([user](https://core.telegram.org/constructor/user), [chat](https://core.telegram.org/constructor/chat) and [channel](https://core.telegram.org/constructor/channel)).  \nAs specified in the constructor docs, some of the fields must not be overwritten if a [min constructor](https://core.telegram.org/api/min) is received, and a change in some other fields must trigger invalidation of the [full info database\u00a0\u00bb](#full-info-database).\n\n### [](#full-info-database)Full info database\n\n```\nusers.userFull#3b6d152e full_user:UserFull chats:Vector<Chat> users:Vector<User> = users.UserFull;\nmessages.chatFull#e5d7d19c full_chat:ChatFull chats:Vector<Chat> users:Vector<User> = messages.ChatFull;\n\nuserFull#979d2376 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true voice_messages_forbidden:flags.20?true translations_disabled:flags.23?true stories_pinned_available:flags.26?true blocked_my_stories_from:flags.27?true wallpaper_overridden:flags.28?true contact_require_premium:flags.29?true read_dates_private:flags.30?true flags2:# sponsored_enabled:flags2.7?true can_view_revenue:flags2.9?true bot_can_manage_emoji_status:flags2.10?true id:long about:flags.1?string settings:PeerSettings personal_photo:flags.21?Photo profile_photo:flags.2?Photo fallback_photo:flags.22?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int ttl_period:flags.14?int theme_emoticon:flags.15?string private_forward_name:flags.16?string bot_group_admin_rights:flags.17?ChatAdminRights bot_broadcast_admin_rights:flags.18?ChatAdminRights premium_gifts:flags.19?Vector<PremiumGiftOption> wallpaper:flags.24?WallPaper stories:flags.25?PeerStories business_work_hours:flags2.0?BusinessWorkHours business_location:flags2.1?BusinessLocation business_greeting_message:flags2.2?BusinessGreetingMessage business_away_message:flags2.3?BusinessAwayMessage business_intro:flags2.4?BusinessIntro birthday:flags2.5?Birthday personal_channel_id:flags2.6?long personal_channel_message:flags2.6?int stargifts_count:flags2.8?int starref_program:flags2.11?StarRefProgram = UserFull;\nchatFull#2633421b flags:# can_set_username:flags.7?true has_scheduled:flags.8?true translations_disabled:flags.19?true id:long about:string participants:ChatParticipants chat_photo:flags.2?Photo notify_settings:PeerNotifySettings exported_invite:flags.13?ExportedChatInvite bot_info:flags.3?Vector<BotInfo> pinned_msg_id:flags.6?int folder_id:flags.11?int call:flags.12?InputGroupCall ttl_period:flags.14?int groupcall_default_join_as:flags.15?Peer theme_emoticon:flags.16?string requests_pending:flags.17?int recent_requesters:flags.17?Vector<long> available_reactions:flags.18?ChatReactions reactions_limit:flags.20?int = ChatFull;\nchannelFull#bbab348d flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true can_set_location:flags.16?true has_scheduled:flags.19?true can_view_stats:flags.20?true blocked:flags.22?true flags2:# can_delete_channel:flags2.0?true antispam:flags2.1?true participants_hidden:flags2.2?true translations_disabled:flags2.3?true stories_pinned_available:flags2.5?true view_forum_as_messages:flags2.6?true restricted_sponsored:flags2.11?true can_view_revenue:flags2.12?true paid_media_allowed:flags2.14?true can_view_stars_revenue:flags2.15?true paid_reactions_available:flags2.16?true id:long about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int online_count:flags.13?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:flags.23?ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?long migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int folder_id:flags.11?int linked_chat_id:flags.14?long location:flags.15?ChannelLocation slowmode_seconds:flags.17?int slowmode_next_send_date:flags.18?int stats_dc:flags.12?int pts:int call:flags.21?InputGroupCall ttl_period:flags.24?int pending_suggestions:flags.25?Vector<string> groupcall_default_join_as:flags.26?Peer theme_emoticon:flags.27?string requests_pending:flags.28?int recent_requesters:flags.28?Vector<long> default_send_as:flags.29?Peer available_reactions:flags.30?ChatReactions reactions_limit:flags2.13?int stories:flags2.4?PeerStories wallpaper:flags2.7?WallPaper boosts_applied:flags2.8?int boosts_unrestrict:flags2.9?int emojiset:flags2.10?StickerSet = ChatFull;\n\n---functions---\n\nusers.getFullUser#b60f5918 id:InputUser = users.UserFull;\nmessages.getFullChat#aeb00b34 chat_id:long = messages.ChatFull;\nchannels.getFullChannel#8736a09 channel:InputChannel = messages.ChatFull;\n```\n\nExample implementation: [tdlib](https://github.com/tdlib/td/).\n\nThe full info database contains info from the [userFull](https://core.telegram.org/constructor/userFull), [chatFull](https://core.telegram.org/constructor/chatFull) and [channelFull](https://core.telegram.org/constructor/channelFull) constructors.\n\nTo populate the full info database for a peer, invoke [users.getFullUser](https://core.telegram.org/method/users.getFullUser), [messages.getFullChat](https://core.telegram.org/method/messages.getFullChat), [channels.getFullChannel](https://core.telegram.org/method/channels.getFullChannel), all requiring the previously cached [access\\_hash\u00a0\u00bb](#access-hash).\n\nInvalidate only [userFull](https://core.telegram.org/constructor/userFull) and [channelFull](https://core.telegram.org/constructor/channelFull) entries 60 seconds after they are stored.\n\nRefresh the full info database when the client needs some data from a full constructor, **and** there is no entry already in the database, or the required entry was invalidated by the TTL, or if:\n\n*   Some event (specified [here\u00a0\u00bb](#peer-info-database)) changes the value of a very specific subset of fields of an entry in the (non-full!) [peer info database\u00a0\u00bb](#peer-info-database).  \n    See the documentation in the [user](https://core.telegram.org/constructor/user) and [channel](https://core.telegram.org/constructor/channel) constructor pages for more info (search for the keyword \"invalidate\").\n*   When receiving an [updateUser](https://core.telegram.org/constructor/updateUser), [updateChat](https://core.telegram.org/constructor/updateChat), [updateChannel](https://core.telegram.org/constructor/updateChannel), and some other updates, as specified [here\u00a0\u00bb](https://core.telegram.org/type/Update)\n*   After invoking [bots.setBotInfo](https://core.telegram.org/method/bots.setBotInfo) (even on error) after changing `about` or `description` (but **not** `name`), for the bot whose info we changed.\n*   After invoking [messages.setChatWallPaper](https://core.telegram.org/method/messages.setChatWallPaper) to _remove_ the wallpaper and receiving an error, for the peer whose wallpapers we tried to change, to fetch the correct and updated wallpaper settings.\n*   After invoking [messages.setChatAvailableReactions](https://core.telegram.org/method/messages.setChatAvailableReactions) and getting an error different from `CHAT_NOT_MODIFIED`, for the peer whose reaction settings we tried to change.\n*   After receiving a `SEND_AS_PEER_INVALID` error from any method that interacts with a group/supergroup: refresh info about the destination, to see which channel peers can be used to send messages to the group/supergroup through send\\_as.\n*   If [chat](https://core.telegram.org/constructor/chat).`photo` is not equal to [chatFull](https://core.telegram.org/constructor/chatFull).`chat_photo`\n*   The [channelFull](https://core.telegram.org/constructor/channelFull).`linked_chat_id` of channnel/supergroup A is updated to point to channel/supergroup B, but the [channelFull](https://core.telegram.org/constructor/channelFull).`linked_chat_id` of channel/supergroup B does not point to channel/supergroup A, refresh the [channelFull](https://core.telegram.org/constructor/channelFull) of channel/supergroup B.\n*   Info about a bot that is a participant to the channel/supergroup is fetched by other means, but the bot is not contained in [channelFull](https://core.telegram.org/constructor/channelFull).`bot_info`.\n*   If [channelFull](https://core.telegram.org/constructor/channelFull).`participants_count` is less than [channelFull](https://core.telegram.org/constructor/channelFull).`admins_count` after a local update of the admin list by other means.\n*   If the currently logged in user's [inputPrivacyKeyStatusTimestamp](https://core.telegram.org/constructor/inputPrivacyKeyStatusTimestamp) [privacy setting\u00a0\u00bb](https://core.telegram.org/api/privacy) was changed, refresh the entire [userFull](https://core.telegram.org/constructor/userFull) cache for all users.\n*   After receiving an error different from `USER_NOT_PARTICIPANT` when calling [channels.leaveChannel](https://core.telegram.org/method/channels.leaveChannel)\n*   If the profile picture is updated or removed\n*   After successfully invoking any of the following methods, for the bot in question:\n    *   [bots.deletePreviewMedia](https://core.telegram.org/method/bots.deletePreviewMedia)\n*   After invoking any of the following methods (successfully or not):\n    *   [bots.setBotGroupDefaultAdminRights](https://core.telegram.org/method/bots.setBotGroupDefaultAdminRights) - For the bot\n    *   [bots.setBotBroadcastDefaultAdminRights](https://core.telegram.org/method/bots.setBotBroadcastDefaultAdminRights) - For the bot\n    *   [channels.inviteToChannel](https://core.telegram.org/method/channels.inviteToChannel) - For the channel/supergroup\n    *   [channels.editAdmin](https://core.telegram.org/method/channels.editAdmin) - For the channel/supergroup\n    *   [channels.editCreator](https://core.telegram.org/method/channels.editCreator) - For the channel/supergroup\n*   When receiving a `CHANNEL_PRIVATE` or `CHANNEL_PUBLIC_GROUP_NA` RPC error.\n*   When a channel is made private/public (where previously it was public/private. public=has at least one username, private=has no usernames).\n*   If we banned a chat/supergroup participant specifying a [chatBannedRights](https://core.telegram.org/constructor/chatBannedRights).`until_date`, the full cache of the chat/supergroup should be refresh for the admin at `until_date`.\n\nThe above list is non-exhaustive, and clients may choose to refresh peer information in some other conditions as well (i.e. when opening the profile page, etc).\n\n### [](#quality-of-life-checks)Quality of life checks\n\nNote the following: peer information is also used for quality-of-life improvements, i.e. to directly prevent the user from doing an operation that is denied by the peer information, instead of allowing the operation and then showing an error.\n\nThese improvements should be implemented by all clients, however, the server will also always prevent the user from doing illegal operations, by emitting an appropriate [RPC error](https://core.telegram.org/api/errors), as sometimes it is still possible to make an illegal operation, even if a local check _is_ implemented (see below).\n\nInstead of (or along with) preventing users from doing illegal operations on the client side, clients should always provide localized versions of errors returned by the server (as listed in the JSON file downloadable from the [RPC error page](https://core.telegram.org/api/errors)), to inform the user as to why an attempted operation has failed.\n\nIn other words, if the client didn't prevent the failed method call locally because:\n\n*   It does not implement a local check for simplicity or\n*   It _does_ implement a local check, but:\n    *   Peer info is outdated or\n    *   An update was sent by the server for the peer info, but it wasn't applied in time due to an (unavoidable!) race condition between the server sending the update and the client sending the query.\n    *   Other unspecified reasons (a new check introduced in a future layer by a new feature, etc...)\n\n...it should still let the user know _why_ the query failed, based on the description of the RPC error (if available in the [JSON error database](https://core.telegram.org/api/errors), otherwise by showing the RPC error itself).",
    "url": "https://core.telegram.org/api/peers"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/min",
      "title": "Min constructors",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Min constructors"
        },
        {
          "property": "og:image",
          "content": "8440249ddd84efacd0"
        },
        {
          "property": "og:description",
          "content": "In some situations user and channel constructors have reduced set of fields present (although id is always there) and min flag set."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:41 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "2676",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Min constructors\n\nIn some situations [user](https://core.telegram.org/constructor/user) and [channel](https://core.telegram.org/constructor/channel) constructors have reduced set of fields present (although `id` is always there) and `min` flag set. This is done for performance and privacy reasons.\n\nWhen receiving said constructors, the client must first check if user or chat object without `min` flag is already present in the [local peer database\u00a0\u00bb](https://core.telegram.org/api/peers).  \nIf it is present, then the client should merge the remote and the local object, ignoring some specific fields of the remote object as specified by the [user](https://core.telegram.org/constructor/user) and [channel](https://core.telegram.org/constructor/channel) pages.\n\nAdditionally, the client must store the context (similar to [file references](https://core.telegram.org/api/file_reference)) in which the user/channel was seen. Later, when the client needs to pass the user/channel as input argument (e.g. passing the `access_hash` to fetch profile, mute, ban info etc), the context is used to generate the `input*FromMessage` constructor, instead of normal `inputUser`, `inputChannel` or `inputPeer`.\n\n*   [inputPeerUserFromMessage](https://core.telegram.org/constructor/inputPeerUserFromMessage)\n*   [inputPeerChannelFromMessage](https://core.telegram.org/constructor/inputPeerChannelFromMessage)\n*   [inputUserFromMessage](https://core.telegram.org/constructor/inputUserFromMessage)\n*   [inputChannelFromMessage](https://core.telegram.org/constructor/inputChannelFromMessage)\n\nThe `access_hash` value of a `min` constructor is only suitable to use in certain conditions as specified by the [user](https://core.telegram.org/constructor/user) and [channel](https://core.telegram.org/constructor/channel) pages.\n\nUsually `min` constructors are encountered in messages inside of groups or channels. When a message mentioning (sender, forwarder or forwardee, et cetera) such a user or channel is found, the constuctor must be associated with the message ID of the message and with the chat where the message was seen.\n\n#### [](#example)Example\n\nAssume a [message](https://core.telegram.org/constructor/message) with id `34` is received from supergroup ([actually channel](https://core.telegram.org/api/channel)) `123456789`. Said message was sent by `from_id` `102424212`. The [updates](https://core.telegram.org/api/updates) container that contained the message has a user with ID `102424212` in the `users` field, but it has the `min` flag set, and the provided `access_hash` may be absent, or otherwise can't be used to generate a typical [inputPeerUser](https://core.telegram.org/constructor/inputPeerUser) constructor to send messages or do other actions.\n\nWhat the client does is associate `102424212` with the channel `123456789` and message ID `34`. When and if the client will need to interact with user `102424212`, it will generate one of the `*FromMessage` constructors mentioned above, setting:\n\n*   `msg_id` to `34`\n*   `peer` to the [InputPeer](https://core.telegram.org/type/InputPeer) associated with channel `123456789`\n*   `user_id` to `102424212`\n\n`user_id` can also be set to the IDs of users met in the `fwd_header` (messages forwarded from a user can be used to interact with the original sender, if they don't have privacy settings for forwards enabled). Users mentioned via [messageEntityMentionName](https://core.telegram.org/constructor/messageEntityMentionName) in a message can also be used.\n\nThe same can be done with `min` [channels](https://core.telegram.org/api/channel).\n\nExample implementations: [Telegram for iOS](https://github.com/peter-iakovlev/Telegram-iOS), [tdlib](https://github.com/tdlib/td).",
    "url": "https://core.telegram.org/api/min"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/account-deletion",
      "title": "Account deletion",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Account deletion"
        },
        {
          "property": "og:image",
          "content": "c176ebb99487f059b0"
        },
        {
          "property": "og:description",
          "content": "How to reset an account if the 2FA password was forgotten."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:42 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "2615",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Account deletion\n\nA user can delete their Telegram account using [account.deleteAccount](https://core.telegram.org/method/account.deleteAccount).\n\n```\n---functions---\naccount.deleteAccount#a2c0cf74 flags:# reason:string password:flags.0?InputCheckPasswordSRP = Bool;\n\naccount.confirmPhone#5f2178c3 phone_code_hash:string phone_code:string = Bool;\naccount.sendConfirmPhoneCode#1b3faa88 hash:string settings:CodeSettings = auth.SentCode;\n```\n\nIf the account doesn't have a [2FA password](https://core.telegram.org/api/srp), calling this method will **immediately delete the Telegram account**.  \nIf the account has a [2FA password](https://core.telegram.org/api/srp) and it is provided to `account.deleteAccount:password`, calling this method will **immediately delete the Telegram account**.\n\nIf the account has a [2FA password](https://core.telegram.org/api/srp) but the user doesn't remember it, [password reset may be requested first\u00a0\u00bb](https://core.telegram.org/api/srp#password-reset), or otherwise, the `password` field may simply be left empty.\n\nIn this case, if the account's [2FA password](https://core.telegram.org/api/srp) was modified more than 7 days ago and was active in the last 7 days, **account deletion will be delayed for 7 days**. Otherwise, the account will be **immediately deleted**.  \nIn the first case, a [service message will be sent to the user](https://core.telegram.org/constructor/updateServiceNotification), containing a [phone number confirmation link\u00a0\u00bb](https://core.telegram.org/api/links#phone-confirmation-links).\n\nWhen such a link is clicked, [account.sendConfirmPhoneCode](https://core.telegram.org/method/account.sendConfirmPhoneCode) must be called with the specified `hash`, using the account with the specified `phone` number.  \nThis will send a phone number verification code to the phone number associated with the account.  \nThe phone code settings are the same as for the [login code](https://core.telegram.org/api/auth), and [auth.cancelCode](https://core.telegram.org/method/auth.cancelCode) with [auth.resendCode](https://core.telegram.org/method/auth.resendCode) can be used as well, to resend or cancel the phone code as for the [login code](https://core.telegram.org/api/auth).\n\nOnce the SMS code is received, the [account.confirmPhone](https://core.telegram.org/method/account.confirmPhone) method will have to be called with the SMS code and the phone hash received from the [account.sendConfirmPhoneCode](https://core.telegram.org/method/account.sendConfirmPhoneCode) method.\n\nThis will cancel deletion of the account and will log out the user that tried to reset it.  \nOtherwise, if the number isn't confirmed in 7 days, the **account will be deleted** and the user will be free to recreate it.\n\n## [](#related-articles)Related articles\n\n### [](#user-authorization)[User Authorization](https://core.telegram.org/api/auth)\n\nHow to register a user's phone to start using the API.\n\n### [](#two-factor-authentication)[Two-factor authentication](https://core.telegram.org/api/srp)\n\nHow to login to a user's account if they have enabled 2FA, how to change password.\n\n### [](#deep-links)[Deep links](https://core.telegram.org/api/links)\n\nTelegram clients must handle special `tg://` and `t.me` deep links encountered in messages, link entities and in other apps by registering OS handlers.",
    "url": "https://core.telegram.org/api/account-deletion"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/auth",
      "title": "User Authorization",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "User Authorization"
        },
        {
          "property": "og:image",
          "content": "9ebfef6d534b708d3a"
        },
        {
          "property": "og:description",
          "content": "How to register a user's phone to start using the API."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:44 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "9260",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# User Authorization\n\nAuthorization is associated with a client's encryption key identifier: **auth\\_key\\_id**. No additional parameters need to be passed into methods following authorization.\n\nTo log in as a [bot](https://core.telegram.org/bots), follow [these instructions\u00a0\u00bb](https://core.telegram.org/api/bots).\n\nAn alternative [QR code-based login flow is also available\u00a0\u00bb](https://core.telegram.org/api/qr-login).\n\n### [](#sending-a-verification-code)Sending a verification code\n\nExample implementations: [telegram for android](https://github.com/DrKLO/Telegram/blob/master/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java), [tdlib](https://github.com/tdlib/td/tree/master/td/telegram/SendCodeHelper.cpp).\n\nTo show a nicely formatted and validated phone number field, the [help.countriesList](https://core.telegram.org/constructor/help.countriesList) constructor can be obtained using the [help.getCountriesList](https://core.telegram.org/method/help.getCountriesList) method.  \nThe [help.countriesList](https://core.telegram.org/constructor/help.countriesList) config and other configuration values are then used as described [here\u00a0\u00bb](https://core.telegram.org/api/config#country-information-and-login-phone-patterns).\n\nThen, a text message containing an authorization code is sent to the user's phone using [auth.sendCode](https://core.telegram.org/method/auth.sendCode).  \nHowever, this is not always the case, if future auth tokens are used:\n\n#### [](#future-auth-tokens)Future auth tokens\n\nWhen invoking [auth.logOut](https://core.telegram.org/method/auth.logOut) on a previously authorized session, the server may return a `future_auth_token`, which should be stored in the local database.  \nA `future_auth_token` is also contained in the [auth.authorization](https://core.telegram.org/constructor/auth.authorization) returned when logging in.  \nAt all times, the future auth token database should contain at most 20 tokens: evict older tokens as new tokens are added to stay below this limit.  \nWhen invoking [auth.sendCode](https://core.telegram.org/method/auth.sendCode), all future auth tokens present in the database should be provided to `codeSettings.logout_tokens`.  \nIf any of the future auth tokens matches the account we're trying to login into and the token hasn't expired:\n\n*   If [2FA](https://core.telegram.org/api/srp) is not enabled, [auth.sendCode](https://core.telegram.org/method/auth.sendCode) will is directly return an [auth.sentCodeSuccess](https://core.telegram.org/constructor/auth.sentCodeSuccess) constructor with session info, indicating the session is authorized.\n*   If [2FA](https://core.telegram.org/api/srp) is enabled, [auth.sendCode](https://core.telegram.org/method/auth.sendCode) will return a `SESSION_PASSWORD_NEEDED` RPC error, asking the user to [enter the 2FA password](#2fa), without sending any authorization code.\n\nOtherwise, the system will send an authorization code using the following logic:\n\n#### [](#code-types)Code types\n\n```\ncodeSettings#ad253d78 flags:# allow_flashcall:flags.0?true current_number:flags.1?true allow_app_hash:flags.4?true allow_missed_call:flags.5?true allow_firebase:flags.7?true unknown_number:flags.9?true logout_tokens:flags.6?Vector<bytes> token:flags.8?string app_sandbox:flags.8?Bool = CodeSettings;\n\nauth.sentCodeTypeApp#3dbb5986 length:int = auth.SentCodeType;\nauth.sentCodeTypeSms#c000bba2 length:int = auth.SentCodeType;\nauth.sentCodeTypeCall#5353e5a7 length:int = auth.SentCodeType;\nauth.sentCodeTypeFlashCall#ab03c6d9 pattern:string = auth.SentCodeType;\nauth.sentCodeTypeMissedCall#82006484 prefix:string length:int = auth.SentCodeType;\nauth.sentCodeTypeEmailCode#f450f59b flags:# apple_signin_allowed:flags.0?true google_signin_allowed:flags.1?true email_pattern:string length:int reset_available_period:flags.3?int reset_pending_date:flags.4?int = auth.SentCodeType;\nauth.sentCodeTypeSetUpEmailRequired#a5491dea flags:# apple_signin_allowed:flags.0?true google_signin_allowed:flags.1?true = auth.SentCodeType;\nauth.sentCodeTypeFragmentSms#d9565c39 url:string length:int = auth.SentCodeType;\nauth.sentCodeTypeFirebaseSms#9fd736 flags:# nonce:flags.0?bytes play_integrity_project_id:flags.2?long play_integrity_nonce:flags.2?bytes receipt:flags.1?string push_timeout:flags.1?int length:int = auth.SentCodeType;\nauth.sentCodeTypeSmsWord#a416ac81 flags:# beginning:flags.0?string = auth.SentCodeType;\nauth.sentCodeTypeSmsPhrase#b37794af flags:# beginning:flags.0?string = auth.SentCodeType;\n\nauth.sentCode#5e002502 flags:# type:auth.SentCodeType phone_code_hash:string next_type:flags.1?auth.CodeType timeout:flags.2?int = auth.SentCode;\nauth.sentCodeSuccess#2390fe44 authorization:auth.Authorization = auth.SentCode;\n\n---functions---\n\nauth.sendCode#a677244f phone_number:string api_id:int api_hash:string settings:CodeSettings = auth.SentCode;\nauth.resendCode#cae47523 flags:# phone_number:string phone_code_hash:string reason:flags.0?string = auth.SentCode;\n\nauth.requestFirebaseSms#8e39261e flags:# phone_number:string phone_code_hash:string safety_net_token:flags.0?string play_integrity_token:flags.2?string ios_push_secret:flags.1?string = Bool;\n```\n\nThe [auth.sendCode](https://core.telegram.org/method/auth.sendCode) method has parameters for enabling/disabling use of flash calls and missed calls, and allows passing an SMS token that will be included in the sent SMS. For example, the latter is required in newer versions of android, to use the [android SMS receiver APIs](https://developers.google.com/identity/sms-retriever/overview).\n\nThe returned [auth.sentCode](https://core.telegram.org/constructor/auth.sentCode) object will contain multiple parameters:\n\n|     |     |     |\n| --- | --- | --- |\n| **flags** | [#](https://core.telegram.org/type/%23) | Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields) |\n| **type** | [auth.SentCodeType](https://core.telegram.org/type/auth.SentCodeType) | Phone code type |\n| **phone\\_code\\_hash** | [string](https://core.telegram.org/type/string) | Phone code hash, to be stored and re-used in later method calls |\n| **next\\_type** | [flags](https://core.telegram.org/mtproto/TL-combinators#conditional-fields).1?[auth.CodeType](https://core.telegram.org/type/auth.CodeType) | Phone code type that will be sent next, if the phone code is not received within `timeout` seconds: to send it use [auth.resendCode](https://core.telegram.org/method/auth.resendCode) |\n| **timeout** | [flags](https://core.telegram.org/mtproto/TL-combinators#conditional-fields).2?[int](https://core.telegram.org/type/int) | Timeout for reception of the phone code |\n\nThe system will automatically choose how to send the authorization code; there are multiple possible ways the code can arrive, signaled to the client via the `type` field of the [auth.SentCodeType](https://core.telegram.org/type/auth.SentCodeType) constructor.\n\nNote that in some conditions when signing up or logging in using an SMS code/call, only the [auth.sentCodeTypeFirebaseSms](https://core.telegram.org/constructor/auth.sentCodeTypeFirebaseSms) code type may be used.  \nCurrently, only official apps can make use of Firebase SMS authentication: this means that in some conditions, only the official applications can receive a login/signup code via SMS/call.  \nThird-party apps may log in using any of the other code delivery methods (Telegram codes, Fragment codes, email codes, future auth tokens, [QR codes](https://core.telegram.org/api/qr-login)).\n\n*   [auth.sentCodeTypeSetUpEmailRequired](https://core.telegram.org/constructor/auth.sentCodeTypeSetUpEmailRequired): if the user logins often enough, Telegram will ask the user to verify an email that will be used to send the login code.  \n    See [here\u00a0\u00bb](#email-verification) for more info on the verification process.\n*   [auth.sentCodeTypeEmailCode](https://core.telegram.org/constructor/auth.sentCodeTypeEmailCode): the code was sent to the configured login email.\n*   [auth.sentCodeTypeFragmentSms](https://core.telegram.org/constructor/auth.sentCodeTypeFragmentSms): the code was sent via [fragment.com](https://fragment.com/): open the specified `url` to log into the [Fragment](https://fragment.com/) platform with your wallet and view the code.\n*   [auth.sentCodeTypeApp](https://core.telegram.org/constructor/auth.sentCodeTypeApp): the code was sent as a Telegram service notification to all other logged-in sessions.\n*   [auth.sentCodeTypeFirebaseSms](https://core.telegram.org/constructor/auth.sentCodeTypeFirebaseSms): firebase login flow, only for official apps.\n    *   On Android, can only be received if the [codeSettings](https://core.telegram.org/constructor/codeSettings).`allow_firebase` flag is set.  \n        The client must pass the received [auth.sentCodeTypeFirebaseSms](https://core.telegram.org/constructor/auth.sentCodeTypeFirebaseSms).`nonce`/`play_integrity_nonce` to the [SafetyNet Attestation API](https://developer.android.com/training/safetynet/attestation)/[Google Play Integrity API](https://developer.android.com/google/play/integrity/overview), and then pass the obtained JWS object to [auth.requestFirebaseSms](https://core.telegram.org/method/auth.requestFirebaseSms).`safety_net_token`/`play_integrity_token`, along with the `phone_number` and the `phone_code_hash`.  \n        If the method returns [boolTrue](https://core.telegram.org/constructor/boolTrue), the code will be sent via SMS; otherwise, the `next_type` authentication method must be used, with [auth.resendCode](https://core.telegram.org/method/auth.resendCode).  \n        The `next_type` authentication method must also be used if the device integrity verification failed, and no token could be obtained to invoke [auth.requestFirebaseSms](https://core.telegram.org/method/auth.requestFirebaseSms): in this case, the device integrity verification failure reason must be passed to [auth.resendCode](https://core.telegram.org/method/auth.resendCode) in `reason`.\n    *   On iOS, can only be received if the device token for Apple Push was passed to [codeSettings](https://core.telegram.org/constructor/codeSettings).`token`.  \n        The client then waits for a new push notification for [auth.sentCodeTypeFirebaseSms](https://core.telegram.org/constructor/auth.sentCodeTypeFirebaseSms).`push_timeout` seconds.  \n        If a push notification isn't received within `push_timeout` seconds, the `next_type` authentication method must be used, with [auth.resendCode](https://core.telegram.org/method/auth.resendCode).  \n        If a push notification is received with `receipt` and `ios_push_secret` fields, and the value of the `receipt` field matches [codeSettings](https://core.telegram.org/constructor/codeSettings).`receipt`, the value of `ios_push_secret` is passed to [auth.requestFirebaseSms](https://core.telegram.org/method/auth.requestFirebaseSms).`ios_push_secret`, along with the `phone_number` and the `phone_code_hash`.  \n        If the method returns [boolTrue](https://core.telegram.org/constructor/boolTrue), the code will be sent via SMS; otherwise, the `next_type` authentication method must be used, with [auth.resendCode](https://core.telegram.org/method/auth.resendCode).  \n        The `next_type` authentication method must also be used if the device integrity verification failed, and no secret could be obtained to invoke [auth.requestFirebaseSms](https://core.telegram.org/method/auth.requestFirebaseSms): in this case, the device integrity verification failure reason must be passed to [auth.resendCode](https://core.telegram.org/method/auth.resendCode) in `reason`.\n*   [auth.sentCodeTypeSms](https://core.telegram.org/constructor/auth.sentCodeTypeSms): the code was sent via SMS.\n*   [auth.sentCodeTypeSmsWord](https://core.telegram.org/constructor/auth.sentCodeTypeSmsWord): the code was sent via SMS containing a single word, which is the SMS code to use.  \n    The `beginning` flag, if set, contains the first letter of the secret word.\n*   [auth.sentCodeTypeSmsPhrase](https://core.telegram.org/constructor/auth.sentCodeTypeSmsPhrase): the code was sent via SMS containing a phrase with multiple words, which are the SMS code to use.  \n    The `beginning` flag, if set, contains the first word of the secret phrase.\n*   [auth.sentCodeTypeCall](https://core.telegram.org/constructor/auth.sentCodeTypeCall): the user will receive a phone call and a synthesized voice will tell the user the verification code to input.\n*   [auth.sentCodeTypeFlashCall](https://core.telegram.org/constructor/auth.sentCodeTypeFlashCall): the code will be sent via a flash phone call, that will be closed immediately.  \n    In this case, the phone code will then be the phone number itself, just make sure that the phone number matches the specified pattern (see [auth.sentCodeTypeFlashCall](https://core.telegram.org/constructor/auth.sentCodeTypeFlashCall)).\n*   [auth.sentCodeTypeMissedCall](https://core.telegram.org/constructor/auth.sentCodeTypeMissedCall): the code will be sent via a flash phone call, that will be closed immediately.  \n    The last digits of the phone number that calls are the code that must be entered manually by the user.\n*   [Future auth tokens\u00a0\u00bb](#future-auth-tokens)\n\nIf the message takes too long (`timeout` seconds) to arrive at the phone, the [auth.resendCode](https://core.telegram.org/method/auth.resendCode) method may be invoked to resend a code of type `next_type`. If the same happens again, you can use [auth.resendCode](https://core.telegram.org/method/auth.resendCode) with the `next_type` returned by the previous call to [auth.resendCode](https://core.telegram.org/method/auth.resendCode). To cancel the verification code use [auth.cancelCode](https://core.telegram.org/method/auth.cancelCode).\n\n### [](#email-verification)Email verification\n\n```\nauth.sentCodeTypeSetUpEmailRequired#a5491dea flags:# apple_signin_allowed:flags.0?true google_signin_allowed:flags.1?true = auth.SentCodeType;\n\nemailVerifyPurposeLoginSetup#4345be73 phone_number:string phone_code_hash:string = EmailVerifyPurpose;\n\nemailVerificationCode#922e55a9 code:string = EmailVerification;\nemailVerificationGoogle#db909ec2 token:string = EmailVerification;\nemailVerificationApple#96d074fd token:string = EmailVerification;\n\naccount.sentEmailCode#811f854f email_pattern:string length:int = account.SentEmailCode;\n\naccount.emailVerifiedLogin#e1bb0d61 email:string sent_code:auth.SentCode = account.EmailVerified;\n\nemailVerifyPurposeLoginChange#527d22eb = EmailVerifyPurpose;\naccount.emailVerified#2b96cd1b email:string = account.EmailVerified;\n\n---functions---\n\naccount.sendVerifyEmailCode#98e037bb purpose:EmailVerifyPurpose email:string = account.SentEmailCode;\naccount.verifyEmail#32da4cf purpose:EmailVerifyPurpose verification:EmailVerification = account.EmailVerified;\nauth.resetLoginEmail#7e960193 phone_number:string phone_code_hash:string = auth.SentCode;\n```\n\nTelegram may return a [auth.sentCodeTypeSetUpEmailRequired](https://core.telegram.org/constructor/auth.sentCodeTypeSetUpEmailRequired) code type in the [auth.sentCode](https://core.telegram.org/constructor/auth.sentCode) constructor returned by [auth.sendCode](https://core.telegram.org/method/auth.sendCode).  \nIn this case, clients should ask the user to verify an email address that will be used to receive the login code as follows:\n\n*   If the `google_signin_allowed` or `apple_signin_allowed` flags are set, users can directly verify their email with Google/Apple ID as specified [here (Google ID)\u00a0\u00bb](https://developers.google.com/identity/sign-in/android/sign-in) and [here (Apple ID)\u00a0\u00bb](https://developer.apple.com/documentation/sign_in_with_apple).  \n    After obtaining the ID token, call [account.verifyEmail](https://core.telegram.org/method/account.verifyEmail), providing the following parameters:\n    \n    *   `purpose` - A [emailVerifyPurposeLoginSetup](https://core.telegram.org/constructor/emailVerifyPurposeLoginSetup) constructor\n    *   `purpose.phone_number` - The phone number used with [auth.sendCode](https://core.telegram.org/method/auth.sendCode)\n    *   `purpose.phone_code_hash` - The phone code hash contained in the [auth.sentCode](https://core.telegram.org/constructor/auth.sentCode) constructor returned by [auth.sendCode](https://core.telegram.org/method/auth.sendCode)\n    *   `verification` - [emailVerificationGoogle](https://core.telegram.org/constructor/emailVerificationGoogle) or [emailVerificationApple](https://core.telegram.org/constructor/emailVerificationApple)\n    *   `verification.token` - The ID token returned by the Google ID API.\n    \n    On success, the [account.verifyEmail](https://core.telegram.org/method/account.verifyEmail) method will return a [account.emailVerifiedLogin](https://core.telegram.org/constructor/account.emailVerifiedLogin) constructor with an [auth.sentCode](https://core.telegram.org/constructor/auth.sentCode) constructor that should be handled [as usual\u00a0\u00bb](#code-types).\n    \n*   Otherwise, ask the user to enter an email address and then call [account.sendVerifyEmailCode](https://core.telegram.org/method/account.sendVerifyEmailCode), providing the following parameters:\n    \n    *   `email` - The email address\n    *   `purpose` - A [emailVerifyPurposeLoginSetup](https://core.telegram.org/constructor/emailVerifyPurposeLoginSetup) constructor\n    *   `purpose.phone_number` - The phone number used with [auth.sendCode](https://core.telegram.org/method/auth.sendCode)\n    *   `purpose.phone_code_hash` - The phone code hash contained in the [auth.sentCode](https://core.telegram.org/constructor/auth.sentCode) constructor returned by [auth.sendCode](https://core.telegram.org/method/auth.sendCode)\n    \n    Once the user receives and inputs the verification code, call [account.verifyEmail](https://core.telegram.org/method/account.verifyEmail), providing the following parameters:\n    \n    *   `purpose` - A [emailVerifyPurposeLoginSetup](https://core.telegram.org/constructor/emailVerifyPurposeLoginSetup) constructor\n    *   `purpose.phone_number` - The phone number used with [auth.sendCode](https://core.telegram.org/method/auth.sendCode)\n    *   `purpose.phone_code_hash` - The phone code hash contained in the [auth.sentCode](https://core.telegram.org/constructor/auth.sentCode) constructor returned by [auth.sendCode](https://core.telegram.org/method/auth.sendCode)\n    *   `verification` - [emailVerificationCode](https://core.telegram.org/constructor/emailVerificationCode)\n    *   `verification.code` - The verification code received by the user.\n    \n    On success, the [account.verifyEmail](https://core.telegram.org/method/account.verifyEmail) method will return a [account.emailVerifiedLogin](https://core.telegram.org/constructor/account.emailVerifiedLogin) constructor with an [auth.sentCode](https://core.telegram.org/constructor/auth.sentCode) constructor that should be handled [as usual\u00a0\u00bb](#code-types).\n    \n\nIf the user cannot access their email address, an email reset may be requested using [auth.resetLoginEmail](https://core.telegram.org/method/auth.resetLoginEmail).\n\nTo change the login email after login, pass [emailVerifyPurposeLoginChange](https://core.telegram.org/constructor/emailVerifyPurposeLoginChange) as `purpose`, following the exact same Google ID/Apple ID/email code login flow as above: on success, the [account.verifyEmail](https://core.telegram.org/method/account.verifyEmail) method will return an [account.emailVerified](https://core.telegram.org/constructor/account.emailVerified) constructor.\n\n### [](#sign-in-sign-up)Sign in/sign up\n\nWhen user enters verification code, the [auth.signIn](https://core.telegram.org/method/auth.signIn) method must be used to validate it and possibly sign user in.\n\nIf the code was entered correctly, but the method returns [auth.authorizationSignUpRequired](https://core.telegram.org/constructor/auth.authorizationSignUpRequired), it means that account with this phone number doesn't exist yet: user needs to provide basic information, accept terms of service and then the new user registration method ([auth.signUp](https://core.telegram.org/method/auth.signUp)) must be invoked.\n\n### [](#2fa)2FA\n\nWhen trying to sign in using [auth.signIn](https://core.telegram.org/method/auth.signIn), an [error 400 SESSION\\_PASSWORD\\_NEEDED](https://core.telegram.org/method/auth.signIn#possible-errors) may be returned, if the user has two-factor authentication enabled. In this case, instructions for [SRP 2FA authentication](https://core.telegram.org/api/srp) must be followed.\n\nTo set up two-factor authorization on an already authorized account, follow the [SRP 2FA authentication docs](https://core.telegram.org/api/srp).\n\n### [](#confirming-login)Confirming login\n\n```\nauthorization#ad01d61d flags:# current:flags.0?true official_app:flags.1?true password_pending:flags.2?true encrypted_requests_disabled:flags.3?true call_requests_disabled:flags.4?true unconfirmed:flags.5?true hash:long device_model:string platform:string system_version:string api_id:int app_name:string app_version:string date_created:int date_active:int ip:string country:string region:string = Authorization;\n\naccount.authorizations#4bff8ea0 authorization_ttl_days:int authorizations:Vector<Authorization> = account.Authorizations;\n\nupdateNewAuthorization#8951abef flags:# unconfirmed:flags.0?true hash:long date:flags.0?int device:flags.0?string location:flags.0?string = Update;\n\n---functions---\n\naccount.getAuthorizations#e320c158 = account.Authorizations;\n\naccount.changeAuthorizationSettings#40f48462 flags:# confirmed:flags.3?true hash:long encrypted_requests_disabled:flags.0?Bool call_requests_disabled:flags.1?Bool = Bool;\n\naccount.resetAuthorization#df77f3bc hash:long = Bool;\n```\n\nWhen logging in, other logged-in sessions will receive an [updateNewAuthorization](https://core.telegram.org/constructor/updateNewAuthorization) update.  \nIf the `unconfirmed` flag is set, clients should display a notification, asking the user if they recognize the session.\n\nIf the user clicks on the Yes button, invoke [account.changeAuthorizationSettings](https://core.telegram.org/method/account.changeAuthorizationSettings) with the new session's `hash` and the `confirmed` flag set, confirming the specified session.\n\nIf the user clicks on the No button, invoke [account.resetAuthorization](https://core.telegram.org/method/account.resetAuthorization) with the new session's `hash`, logging out the specified session.\n\nIf no action is taken by the user, the session will be autoconfirmed `authorization_autoconfirm_period` seconds after login (see the associated [client configuration parameter\u00a0\u00bb](https://core.telegram.org/api/config#authorization-autoconfirm-period)).\n\n### [](#invalidating-login-codes)Invalidating login codes\n\nTelegram's servers will automatically invalidate login codes if they are sent by the user to another Telegram chat, either by forwarding them or by sending them inside of a message: however, clients should also manually and immediately invalidate login codes if the user attempts to screenshot or forward a message sent by the login notification service user (ID `777000`) containing login codes.\n\nIf an incoming message that is:\n\n*   Sent by the login notification service user (ID `777000`)\n*   AND is a text message (not a media)\n*   AND contains one or more login codes, defined as a sequence of 5 to 7 decimal digits, optionally interleaved with or followed by any number of `-` characters ([example implementation\u00a0\u00bb](https://github.com/tdlib/td/blob/07c1d53a6d3cb1fad58d2822e55eef6d57363581/td/telegram/MessagesManager.cpp#L6513))\n\nIs either:\n\n*   Screenshotted by the user\n*   OR forwarded by the user to any chat\n\n[account.invalidateSignInCodes](https://core.telegram.org/method/account.invalidateSignInCodes) should be invoked, passing the extracted login `codes` (excluding any `-` characters).\n\n```\n---functions---\n\naccount.invalidateSignInCodes#ca8ae8ba codes:Vector<string> = Bool;\n```\n\n### [](#test-accounts)Test Accounts\n\nEach phone number is limited to only a certain amount of logins per day (e.g. 5, but this is subject to change) after which the API will return a FLOOD error until the next day. This might not be enough for testing the implementation of User Authorization flows in client applications.\n\nThere are several reserved phone number prefixes for testing that your application handles redirects between DCs, sign up, sign in and 2FA flows correctly. These numbers are only available on **Test DCs** (their IP addresses for TCP transport are available in [API development tools](https://my.telegram.org/apps) panel after [api\\_id was obtained](https://core.telegram.org/api/obtaining_api_id#obtaining-api-id), [URI format](https://core.telegram.org/mtproto/transports#uri-format) for HTTPS/WebSocket transport).\n\nIf you wish to emulate an application of a user associated with DC number X, it is sufficient to specify the phone number as `99966XYYYY`, where YYYY are random numbers, when registering the user. A user like this would always get XXXXX as the login confirmation code (the DC number, repeated five times). Note that the value of X must be in the range of 1-3 because there are only 3 Test DCs. When the flood limit is reached for any particular test number, just choose another number (changing the YYYY random part).\n\nDo not store any important or private information in the messages of such test accounts; anyone can make use of the simplified authorization mechanism \u2013 and we periodically wipe all information stored there.\n\nProceed with User Authorization flows in **Production DCs** only after you make sure everything works correctly on **Test DCs** first to avoid reaching flood limits.\n\n> To help you with working on production DCs, logins with the same phone number with which the `api_id` was registered have more generous flood limits.\n\n### [](#we-are-authorized)We are authorized\n\nAs a result of authorization, the client key, **auth\\_key\\_id**, becomes associated with the user, and each subsequent API call with this key will be executed with that user's identity. The authorization method itself returns the relevant user. It is best to immediately store the User ID locally in a binding with the key.\n\nOnly a small portion of the API methods are available to **unauthorized** users:\n\n*   [auth.sendCode](https://core.telegram.org/method/auth.sendCode)\n*   [auth.resendCode](https://core.telegram.org/method/auth.resendCode)\n*   [account.getPassword](https://core.telegram.org/method/account.getPassword)\n*   [auth.checkPassword](https://core.telegram.org/method/auth.checkPassword)\n*   [auth.checkPhone](https://core.telegram.org/method/auth.checkPhone)\n*   [auth.signUp](https://core.telegram.org/method/auth.signUp)\n*   [auth.signIn](https://core.telegram.org/method/auth.signIn)\n*   [auth.importAuthorization](https://core.telegram.org/method/auth.importAuthorization)\n*   [help.getConfig](https://core.telegram.org/method/help.getConfig)\n*   [help.getNearestDc](https://core.telegram.org/method/help.getNearestDc)\n*   [help.getAppUpdate](https://core.telegram.org/method/help.getAppUpdate)\n*   [help.getCdnConfig](https://core.telegram.org/method/help.getCdnConfig)\n*   [langpack.getLangPack](https://core.telegram.org/method/langpack.getLangPack)\n*   [langpack.getStrings](https://core.telegram.org/method/langpack.getStrings)\n*   [langpack.getDifference](https://core.telegram.org/method/langpack.getDifference)\n*   [langpack.getLanguages](https://core.telegram.org/method/langpack.getLanguages)\n*   [langpack.getLanguage](https://core.telegram.org/method/langpack.getLanguage)\n\nOther methods will result in an error: [**401 UNAUTHORIZED**](https://core.telegram.org/api/errors#401-unauthorized).",
    "url": "https://core.telegram.org/api/auth"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/obtaining_api_id",
      "title": "Creating your Telegram Application",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Creating your Telegram Application"
        },
        {
          "property": "og:image",
          "content": "06c229ff662379138f"
        },
        {
          "property": "og:description",
          "content": "How to get your application identifier and create a new Telegram app."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:43 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "2582",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Creating your Telegram Application\n\nWe welcome all developers to use our [API](https://core.telegram.org/api#telegram-api) and source code to create Telegram-like messaging applications on our platform free of charge.\n\n> In order to ensure consistency and security across the Telegram ecosystem, **all third-party client apps** must comply with the [**API Terms of Service**](https://core.telegram.org/api/terms).\n\n### [](#obtaining-api-id)Obtaining api\\_id\n\nIn order to obtain an **API id** and develop your own application using the Telegram API you need to do the following:\n\n*   Sign up for Telegram using an official application.\n*   Log in to your Telegram core: [https://my.telegram.org](https://my.telegram.org/).\n*   Go to [\"API development tools\"](https://my.telegram.org/apps) and fill out the form.\n*   You will get basic addresses as well as the **api\\_id** and **api\\_hash** parameters required for user authorization.\n*   For the moment each number can only have one api\\_id connected to it.\n\nWe will be sending important developer notifications to the phone number that you use in this process, so please use an up-to-date number connected to your active Telegram account.\n\n### [](#using-the-api-id)Using the api\\_id\n\nBefore using the MTProto Telegram API, please note that all API client libraries are strictly monitored to prevent abuse.\n\nIf you use the Telegram API for flooding, spamming, faking subscriber and view counters of channels, you **will be banned forever**.\n\nDue to excessive abuse of the Telegram API, **all accounts** that log in using unofficial Telegram API clients are automatically put **under observation** to avoid violations of the [Terms of Service](https://core.telegram.org/api/terms).\n\nIf you didn't violate the Terms of Service but your account does get banned after using the API, write to [recover@telegram.org](mailto:recover@telegram.org) explaining what you intend to do with the API, asking to unban your account.  \nPlease note that emails are checked by a human, so automatically generated emails will be detected and banned.\n\n### [](#using-telegrams-open-source-code)Using Telegram's open source code\n\nEveryone is welcome to use our open source code. We have included a sample API id with the code. This API id is limited on the server side and is not suitable for apps released to end-users \u2014 using it for anything but testing purposes will result in the API\\_ID\\_PUBLISHED\\_FLOOD error for your users. It is necessary that you obtain your **own API id** before you publish your app.\n\n> Please remember to publish your code as well in order to comply with the GNU GPL licences.",
    "url": "https://core.telegram.org/api/obtaining_api_id"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/errors",
      "title": "Error handling ",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Error handling "
        },
        {
          "property": "og:image",
          "content": "80b44334eec2aec564"
        },
        {
          "property": "og:description",
          "content": "How to handle API return errors correctly."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:47 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5156",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Error handling\n\nThere will be errors when working with the API, and they must be correctly handled on the client.  \nAn error is characterized by several parameters:\n\n#### [](#error-code)Error Code\n\nNumerical value similar to HTTP status. Contains information on the type of error that occurred: for example, a data input error, privacy error, or server error. This is a required parameter.\n\n#### [](#error-type)Error Type\n\nA string literal in the form of `/[A-Z_0-9]+/`, which summarizes the problem. For example, `AUTH_KEY_UNREGISTERED`. This is an optional parameter.\n\n#### [](#error-database)Error Database\n\nA full human-readable JSON list of RPC errors that can be returned by all methods in the API can be found [here\u00a0\u00bb](https://core.telegram.org/file/400780400470/3/OY6JMkb69K4.143326.json/3c10f72ff9ce45e8a9), what follows is a description of its fields:\n\n*   `errors` - All error messages and codes for each method (object).\n    *   Keys: Error codes as strings (numeric strings)\n    *   Values: All error messages for each method (object)\n        *   Keys: Error messages (string)\n        *   Values: An array of methods which may emit this error (array of strings, may be empty for errors that can be emitted by any method)\n*   `descriptions` - Descriptions for every error mentioned in `errors` (and a few other errors not related to a specific method)\n    *   Keys: Error messages\n    *   Values: Error descriptions\n*   `user_only` - A list of methods that can only be used by users, **not** bots.\n*   `bot_only` - A list of methods that can only be used by bots, **not** users.\n\nError messages and error descriptions may contain `printf` placeholders in key positions, for now only `%d` is used to map durations contained in error messages to error descriptions.\n\nExample:\n\n```\n{\n    \"errors\": {\n        \"420\": {\n            \"2FA_CONFIRM_WAIT_%d\": [\n                \"account.deleteAccount\"\n            ],\n            \"SLOWMODE_WAIT_%d\": [\n                \"messages.forwardMessages\",\n                \"messages.sendInlineBotResult\",\n                \"messages.sendMedia\",\n                \"messages.sendMessage\",\n                \"messages.sendMultiMedia\"\n            ]\n        }\n    },\n    \"descriptions\": {\n        \"2FA_CONFIRM_WAIT_%d\": \"Since this account is active and protected by a 2FA password, we will delete it in 1 week for security purposes. You can cancel this process at any time, you'll be able to reset your account in %d seconds.\",\n        \"SLOWMODE_WAIT_%d\": \"Slowmode is enabled in this chat: wait %d seconds before sending another message to this chat.\",\n        \"FLOOD_WAIT_%d\": \"Please wait %d seconds before repeating the action.\"\n    },\n    \"user_only\": [\n        \"account.deleteAccount\"\n    ],\n    \"bot_only\": [\n        \"messages.setInlineBotResults\"\n    ]\n}\n```\n\n* * *\n\n#### [](#error-constructors)Error Constructors\n\nThere should be a way to handle errors that are returned in [rpc\\_error](https://core.telegram.org/mtproto/service_messages#rpc-error) constructors.\n\nBelow is a list of error codes and their meanings:\n\n### [](#303-see-other)303 SEE\\_OTHER\n\nThe request must be repeated, but directed to a different data center.\n\n#### [](#examples-of-errors)Examples of Errors:\n\n*   FILE\\_MIGRATE\\_X: the file to be accessed is currently stored in a different data center.\n*   PHONE\\_MIGRATE\\_X: the phone number a user is trying to use for authorization is associated with a different data center.\n*   NETWORK\\_MIGRATE\\_X: the source IP address is associated with a different data center (for registration)\n*   USER\\_MIGRATE\\_X: the user whose identity is being used to execute queries is associated with a different data center (for registration)\n\nIn all these cases, the error description's string literal contains the number of the data center (instead of the X) to which the repeated query must be sent. [More information about redirects between data centers \u00bb](https://core.telegram.org/api/datacenter)\n\n### [](#400-bad-request)400 BAD\\_REQUEST\n\nThe query contains errors. In the event that a request was created using a form and contains user generated data, the user should be notified that the data must be corrected before the query is repeated.\n\n#### [](#examples-of-errors)Examples of Errors:\n\n*   FIRSTNAME\\_INVALID: The first name is invalid\n*   LASTNAME\\_INVALID: The last name is invalid\n*   PHONE\\_NUMBER\\_INVALID: The phone number is invalid\n*   PHONE\\_CODE\\_HASH\\_EMPTY: phone\\_code\\_hash is missing\n*   PHONE\\_CODE\\_EMPTY: phone\\_code is missing\n*   PHONE\\_CODE\\_EXPIRED: The confirmation code has expired\n*   API\\_ID\\_INVALID: The api\\_id/api\\_hash combination is invalid\n*   PHONE\\_NUMBER\\_OCCUPIED: The phone number is already in use\n*   PHONE\\_NUMBER\\_UNOCCUPIED: The phone number is not yet being used\n*   USERS\\_TOO\\_FEW: Not enough users (to create a chat, for example)\n*   USERS\\_TOO\\_MUCH: The maximum number of users has been exceeded (to create a chat, for example)\n*   TYPE\\_CONSTRUCTOR\\_INVALID: The type constructor is invalid\n*   FILE\\_PART\\_INVALID: The file part number is invalid\n*   FILE\\_PARTS\\_INVALID: The number of file parts is invalid\n*   FILE\\_PART\\_X\\_MISSING: Part X (where X is a number) of the file is missing from storage\n*   MD5\\_CHECKSUM\\_INVALID: The MD5 checksums do not match\n*   PHOTO\\_INVALID\\_DIMENSIONS: The photo dimensions are invalid\n*   FIELD\\_NAME\\_INVALID: The field with the name FIELD\\_NAME is invalid\n*   FIELD\\_NAME\\_EMPTY: The field with the name FIELD\\_NAME is missing\n\n### [](#401-unauthorized)401 UNAUTHORIZED\n\nThere was an unauthorized attempt to use functionality available only to authorized users.\n\n#### [](#examples-of-errors)Examples of Errors:\n\n*   AUTH\\_KEY\\_UNREGISTERED: The key is not registered in the system\n*   AUTH\\_KEY\\_INVALID: The key is invalid\n*   USER\\_DEACTIVATED: The user has been deleted/deactivated\n*   SESSION\\_REVOKED: The authorization has been invalidated, because of the user terminating all sessions\n*   SESSION\\_EXPIRED: The authorization has expired\n*   AUTH\\_KEY\\_PERM\\_EMPTY: The method is unavailable for temporary authorization key, not bound to permanent\n\n### [](#403-forbidden)403 FORBIDDEN\n\nPrivacy violation. For example, an attempt to write a message to someone who has blacklisted the current user.\n\n### [](#404-not-found)404 NOT\\_FOUND\n\nAn attempt to invoke a non-existent object, such as a method.\n\n### [](#406-not-acceptable)406 NOT\\_ACCEPTABLE\n\nSimilar to [400 BAD\\_REQUEST](#400-bad-request), but the app must display the error to the user a bit differently.  \nDo not display any visible error to the user when receiving the `rpc_error` constructor: instead, wait for an [updateServiceNotification](https://core.telegram.org/constructor/updateServiceNotification) update, and handle it as usual.  \nBasically, an [updateServiceNotification](https://core.telegram.org/constructor/updateServiceNotification) `popup` update will be emitted independently (ie NOT as an [Updates](https://core.telegram.org/type/Updates) constructor inside `rpc_result` but as a normal update) immediately after emission of a 406 `rpc_error`: the update will contain the actual localized error message to show to the user with a UI popup.\n\nAn exception to this is the `AUTH_KEY_DUPLICATED` error, which is only emitted if any of the non-media DC detects that an authorized session is sending requests in parallel from two separate TCP connections, from the same or different IP addresses.  \nNote that parallel connections are still allowed and actually recommended for media DCs.  \nAlso note that by session we mean a logged-in session identified by an [authorization](https://core.telegram.org/constructor/authorization) constructor, fetchable using [account.getAuthorizations](https://core.telegram.org/method/account.getAuthorizations), not an MTProto session.\n\nIf the client receives an `AUTH_KEY_DUPLICATED` error, the session was already invalidated by the server and the user must generate a new auth key and login again.\n\n### [](#420-flood)420 FLOOD\n\nThe maximum allowed number of attempts to invoke the given method with the given input parameters has been exceeded. For example, in an attempt to request a large number of text messages (SMS) for the same phone number.\n\n#### [](#error-example)Error Example:\n\n*   FLOOD\\_WAIT\\_X: A wait of X seconds is required (where X is a number)\n*   FLOOD\\_PREMIUM\\_WAIT\\_X: A wait of X seconds is required (where X is a number); the user may also purchase a [Telegram Premium subscription](https://core.telegram.org/api/premium) to remove this limitation. See [here\u00a0\u00bb](https://core.telegram.org/api/files) for more info on how to handle this error.\n\n### [](#500-internal)500 INTERNAL\n\nAn internal server error occurred while a request was being processed; for example, there was a disruption while accessing a database or file storage.\n\nIf a client receives a 500 error, or you believe this error should not have occurred, please collect as much information as possible about the query and error and send it to the developers.\n\n### [](#other-error-codes)Other Error Codes\n\nIf a server returns an error with a code other than the ones listed above, it may be considered the same as a 500 error and treated as an [internal server error](#500-internal).",
    "url": "https://core.telegram.org/api/errors"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/datacenter",
      "title": "Working with Different Data Centers",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Working with Different Data Centers"
        },
        {
          "property": "og:image",
          "content": "5bb32ac46255f88a6c"
        },
        {
          "property": "og:description",
          "content": "How to connect to the closest DC access point for faster interaction with the API, and things to watch out for when developing a client."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:47 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4666",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Working with Different Data Centers\n\nThe servers are divided into several data centers (hereinafter \u201cDCs\u201d) in different parts of the world. A complete list of proxy access points for these DCs may be obtained using [help.getConfig](https://core.telegram.org/method/help.getConfig):\n\n```\ndcOption#18b7a10d flags:# ipv6:flags.0?true media_only:flags.1?true tcpo_only:flags.2?true cdn:flags.3?true static:flags.4?true this_port_only:flags.5?true id:int ip_address:string port:int secret:flags.10?bytes = DcOption;\nconfig#cc1a241e flags:# default_p2p_contacts:flags.3?true preload_featured_stickers:flags.4?true revoke_pm_inbox:flags.6?true blocked_mode:flags.8?true force_try_ipv6:flags.14?true date:int expires:int test_mode:Bool this_dc:int dc_options:Vector<DcOption> dc_txt_domain_name:string chat_size_max:int megagroup_size_max:int forwarded_count_max:int online_update_period_ms:int offline_blur_timeout_ms:int offline_idle_timeout_ms:int online_cloud_timeout_ms:int notify_cloud_delay_ms:int notify_default_delay_ms:int push_chat_period_ms:int push_chat_limit:int edit_time_limit:int revoke_time_limit:int revoke_pm_time_limit:int rating_e_decay:int stickers_recent_limit:int channels_read_media_period:int tmp_sessions:flags.0?int call_receive_timeout_ms:int call_ring_timeout_ms:int call_connect_timeout_ms:int call_packet_timeout_ms:int me_url_prefix:string autoupdate_url_prefix:flags.7?string gif_search_username:flags.9?string venue_search_username:flags.10?string img_search_username:flags.11?string static_maps_provider:flags.12?string caption_length_max:int message_length_max:int webfile_dc_id:int suggested_lang_code:flags.2?string lang_pack_version:flags.2?int base_lang_pack_version:flags.2?int reactions_default:flags.15?Reaction autologin_token:flags.16?string = Config;\n---functions---\nhelp.getConfig#c4f9186b = Config;\n```\n\nIn this context, **this\\_dc** is the number of the current DC, **dc\\_options** is a list of all DCs available at the moment, each of which has an **id**, **ip**, and **port** for establishing a connection. Please note that **ip** and **port** may change frequently, based on proxy server load and the user's current location.  \nTypically, each DC has at least one IPv4 and one IPv6 endpoint available.\n\nTo optimize client communication with the API, each client must use the connection to the closest access point for its main queries (sending messages, getting contacts, etc.). Therefore, knowing how to select a DC is required before communicating with the API.\n\n### [](#registrationauthorization)Registration/Authorization\n\nThe [auth.sendCode](https://core.telegram.org/method/auth.sendCode) method is the basic entry point when registering a new user or authorizing an existing user. 95% of all redirection cases to a different DC will occur when invoking this method.\n\nThe client does not yet know which DC it will be associated with; therefore, it establishes an encrypted connection to a random address and sends its query to that address. Having received a **phone\\_number** from a client, we can find out whether or not it is registered in the system. If it is, then, if necessary, instead of sending a text message, we request that it establish a connection with a different DC first (PHONE\\_MIGRATE\\_X error). If we do not yet have a user with this number, we examine its IP-address. We can use it to identify the closest DC. Again, if necessary, we redirect the user to a different DC (NETWORK\\_MIGRATE\\_X error).\n\n#### [](#testing-redirects)Testing Redirects\n\nThere are reserved phone number prefixes to test the correctness of the application's handling of redirects between DCs. Read more in [User Authorization](https://core.telegram.org/api/auth#test-phone-numbers) article.\n\n### [](#file-access)File Access\n\nA file saved by a user with [upload.saveFilePart](https://core.telegram.org/method/upload.saveFilePart) will be available for direct download only from the DC where the query was executed. That is why each file has a **dc\\_id** parameter:\n\n```\ndocument#8fd4c4d8 flags:# id:long access_hash:long file_reference:bytes date:int mime_type:string size:long thumbs:flags.0?Vector<PhotoSize> video_thumbs:flags.1?Vector<VideoSize> dc_id:int attributes:Vector<DocumentAttribute> = Document;\nphoto#fb197a65 flags:# has_stickers:flags.0?true id:long access_hash:long file_reference:bytes date:int sizes:Vector<PhotoSize> video_sizes:flags.1?Vector<VideoSize> dc_id:int = Photo;\n\nencryptedFile#a8008cd8 id:long access_hash:long size:long dc_id:int key_fingerprint:int = EncryptedFile;\n\nuserProfilePhoto#82d1f706 flags:# has_video:flags.0?true personal:flags.2?true photo_id:long stripped_thumb:flags.1?bytes dc_id:int = UserProfilePhoto;\nchatPhoto#1c6e1c11 flags:# has_video:flags.0?true photo_id:long stripped_thumb:flags.1?bytes dc_id:int = ChatPhoto;\n```\n\nTo download the file, an encrypted connection to DC **dc\\_id** must be established and used to execute the [upload.getFile](https://core.telegram.org/method/upload.getFile) query. If an attempt is made to download the file over a wrong connection, the FILE\\_MIGRATE\\_X error will be returned.\n\nPlease note that encryption keys are not copied between DCs; therefore, the process of establishing an encrypted connection is started from the very beginning for each new DC. An issued auth\\_key can be associated with the current authorized user by using an [authorization transfer](#authorization-transfer).\n\n### [](#user-migration)User Migration\n\nDuring the process of working with the API, user information is accumulated in the DC with which the user is associated. This is the reason a user cannot be associated with a different DC by means of the client. However, in the future, during prolonged communication from an unusual location, we may decide that the user's data must be moved to a different DC. After some time, the data will be copied and the association will be updated. Once this happens, when executing any query transmitted to the old DC, the API will return the USER\\_MIGRATE\\_X error. The client will then have to establish a connection with the new DC and repeat the query.\n\n### [](#authorization-transfer)Authorization Transfer\n\nThe following methods can be used to eliminate the need for users to enter the code from a text message every time:\n\n```\nauth.exportedAuthorization#b434e2b8 id:long bytes:bytes = auth.ExportedAuthorization;\nauth.authorization#2ea2c0d4 flags:# setup_password_required:flags.1?true otherwise_relogin_days:flags.1?int tmp_sessions:flags.0?int future_auth_token:flags.2?bytes user:User = auth.Authorization;\n---functions---\nauth.importAuthorization#a57a7dad id:long bytes:bytes = auth.Authorization;\nauth.exportAuthorization#e5bfffcd dc_id:int = auth.ExportedAuthorization;\n```\n\n[auth.exportAuthorization](https://core.telegram.org/method/auth.exportAuthorization) must be executed in the current DC (the DC with which a connection has already been established), passing in **dc\\_id** as the value for the new DC. The method should return the user identifier and a long string of random data. An import operation can be performed at the new DC by sending it what was received. Queries requiring authorization can then be successfully executed in the new DC.",
    "url": "https://core.telegram.org/api/datacenter"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/srp",
      "title": "Two-factor authentication",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Two-factor authentication"
        },
        {
          "property": "og:image",
          "content": "566f538655672c95c6"
        },
        {
          "property": "og:description",
          "content": "How to login to a user's account if they have enabled 2FA, how to change password."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:47 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "6565",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Two-factor authentication\n\nTelegram uses the [Secure Remote Password protocol](https://en.wikipedia.org/wiki/Secure_Remote_Password_protocol) version 6a to implement 2FA.\n\nExample implementation: [tdlib](https://github.com/tdlib/td/blob/56163c2460a65afc4db2c57ece576b8c38ea194b/td/telegram/PasswordManager.cpp).\n\n### [](#checking-the-password-with-srp)Checking the password with SRP\n\nTo login to an account protected by a 2FA password or to perform some other actions (like changing channel owner), you will need to verify the user's knowledge of the current 2FA account password.\n\nTo do this, first the client needs to obtain SRP parameters and the KDF algorithm to use to check the validity of the password via [account.getPassword](https://core.telegram.org/method/account.getPassword) method. For now, only the [passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow](https://core.telegram.org/constructor/passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow) algorithm is supported, so we'll only explain that.\n\nThen, after the user provides a password, the client should generate an [InputCheckPasswordSRP](https://core.telegram.org/type/InputCheckPasswordSRP) object using SRP and a specific KDF algorithm as shown below and pass it to appropriate method (e.g. [auth.checkPassword](https://core.telegram.org/method/auth.checkPassword) in case of authorization).\n\nThis extension of the [SRP protocol](https://en.wikipedia.org/wiki/Secure_Remote_Password_protocol) uses the password-based [PBKDF2](https://en.wikipedia.org/wiki/PBKDF2) with 100000 iterations using sha512 (`PBKDF2HMACSHA512iter100000`). PBKDF2 is used to additionally rehash the `x` parameter, obtained using a method similar to the one described in [RFC 2945](https://tools.ietf.org/html/rfc2945#section-3) (`H(s | H ( I | password | I) | s)` instead of `H(s | H ( I | \":\" | password)`) (see below).\n\nHere, `|` denotes concatenation and `+` denotes the arithmetical operator `+`. In all cases where concatenation of numbers passed to hashing functions is done, the numbers must be used in big-endian form, padded to 2048 bits; all math is modulo `p`. Instead of `I`, `salt1` will be used (see [SRP protocol](https://en.wikipedia.org/wiki/Secure_Remote_Password_protocol)). Instead of `s`, `salt2` will be used (see [SRP protocol](https://en.wikipedia.org/wiki/Secure_Remote_Password_protocol)).\n\nThe main hashing function `H` is sha256:\n\n*   `H(data) := sha256(data)`\n\nThe salting hashing function `SH` is defined as follows:\n\n*   `SH(data, salt) := H(salt | data | salt)`\n\nThe primary password hashing function is defined as follows:\n\n*   `PH1(password, salt1, salt2) := SH(SH(password, salt1), salt2)`\n\nThe secondary password hashing function is defined as follows:\n\n*   `PH2(password, salt1, salt2) := SH(pbkdf2(sha512, PH1(password, salt1, salt2), salt1, 100000), salt2)`\n\nClient-side, the following parameters are extracted from the [passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow](https://core.telegram.org/constructor/passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow) object, contained in the [account.password](https://core.telegram.org/constructor/account.password) object.\n\n*   `g := algo.g`\n    \n*   `p := algo.p` The client is expected to check whether **p** is a safe 2048-bit prime (meaning that both **p** and **(p-1)/2** are prime, and that `2^2047 < p < 2^2048`), and that **g** generates a cyclic subgroup of prime order **(p-1)/2**, i.e. is a quadratic residue **mod p**. Since **g** is always equal to 2, 3, 4, 5, 6 or 7, this is easily done using quadratic reciprocity law, yielding a simple condition on **p mod 4g** -- namely, **p mod 8 = 7** for **g = 2**; **p mod 3 = 2** for **g = 3**; no extra condition for **g = 4**; **p mod 5 = 1 or 4** for **g = 5**; **p mod 24 = 19 or 23** for **g = 6**; and **p mod 7 = 3, 5 or 6** for **g = 7**. After **g** and **p** have been checked by the client, it makes sense to cache the result, so as to avoid repeating lengthy computations in future. This cache might be shared with one used for [Authorization Key generation](https://core.telegram.org/mtproto/auth_key).\n    \n    If the client has an inadequate random number generator, it makes sense to use the **secure\\_random** of account.password as additional seed.\n    \n*   `password := (user-provided password)`\n    \n*   `salt1 := algo.salt1`\n    \n*   `salt2 := algo.salt2`\n    \n*   `g_b := srp_B` `srp_B` and `srp_id` are extracted from the [account.password](https://core.telegram.org/constructor/account.password) object.\n    \n\nThe `k` parameter is generated, both on client and server:\n\n*   `k := H(p | g)`\n\nThe shared param `u` is generated: the client does this, and the server does the same with the `g_a` we will send him later (see below)\n\n*   `u := H(g_a | g_b)`\n\nThe final parameters are generated client-side only:\n\n*   `x := PH2(password, salt1, salt2)`\n*   `v := pow(g, x) mod p`\n\nThe server already has `v`, from when we set the password.\n\nA final shared param is generated, for commodity:\n\n*   `k_v := (k * v) mod p`\n\nFinally, the [key exchange process](https://en.wikipedia.org/wiki/Secure_Remote_Password_protocol#Protocol) starts on both parties.\n\nThe client computes a 2048-bit number **a** (using sufficient entropy or the server's **random**; see above) and generates:\n\n*   `g_a := pow(g, a) mod p`.\n\nThe server computes a 2048-bit number **b** using sufficient entropy and generates the `g_b` parameter that was sent to us (see above).\n\n*   `g_b := (k_v + (pow(g, b) mod p)) mod p`\n\nFinally, the [SRP session keys](https://en.wikipedia.org/wiki/Secure_Remote_Password_protocol#Protocol) are generated:\n\nClient side:\n\n*   `t := (g_b - k_v) mod p` (positive modulo, if the result is negative increment by `p`)\n*   `s_a := pow(t, a + u * x) mod p`\n*   `k_a := H(s_a)`\n\nServer side:\n\n*   `s_b := pow(g_a * (pow(v, u) mod p), b) mod p`\n*   `k_b := H(s_b)`\n\nSince:\n\n*   `g_b := (k_v + (pow(g, b) mod p)) mod p`\n*   `t := (g_b - k_v) mod p`\n*   `t := ((k_v + (pow(g, b) mod p)) - k_v) mod p`\n*   `t := pow(g, b) mod p`\n*   `s_a := pow(t, a + u * x) mod p`\n*   `s_a := pow(pow(g, b) mod p, a + u * x) mod p`\n\nAnd:\n\n*   `g_a := pow(g, a) mod p`\n    \n*   `v := pow(g, x) mod p`\n    \n*   `s_b := pow(g_a * (pow(v, u) mod p), b) mod p`\n    \n*   `s_b := pow((pow(g, a) mod p) * (pow(pow(g, x) mod p, u) mod p), b) mod p`\n    \n*   `s_b := pow(pow(g, a + x * u) mod p, b) mod p`\n    \n*   `s_b := pow(pow(g, b) mod p, a + u * x) mod p`\n    \n*   `s_a := pow(pow(g, b) mod p, a + u * x) mod p`\n    \n\nThis means:\n\n*   `s_b === s_a`\n*   `k_b === k_a`\n\n**Finally, as per SRP**:\n\n*   `M1 := H(H(p) xor H(g) | H(salt1) | H(salt2) | g_a | g_b | k_a)`\n\n`M1` is passed to [inputCheckPasswordSRP](https://core.telegram.org/constructor/inputCheckPasswordSRP), along with `g_a` (as `A` parameter) and the `srp_id`, extracted from the [account.password](https://core.telegram.org/constructor/account.password) object.\n\nThe server then computes:\n\n*   `M2 := H(H(p) xor H(g) | H(salt1) | H(salt2) | g_a | g_b | k_b)`\n\nSince we said that:\n\n*   `s_b === s_a`\n*   `k_b === k_a`\n\nThis means, if everything was done correctly,\n\n*   `M1 === M2`\n\nIf the password isn't correct, [400 PASSWORD\\_HASH\\_INVALID](https://core.telegram.org/method/auth.checkPassword#possible-errors) will be returned.\n\n### [](#setting-a-new-2fa-password)Setting a new 2FA password\n\nTo set a new 2FA password use the [account.updatePasswordSettings](https://core.telegram.org/method/account.updatePasswordSettings) method.  \nIf a password is already set, generate an InputCheckPasswordSRP object as per [checking passwords with SRP](#checking-the-password-with-srp), and insert it in the `password` field of the [account.updatePasswordSettings](https://core.telegram.org/method/account.updatePasswordSettings) method.  \nTo remove the current password, pass an empty `new_password_hash` in the [account.PasswordInputSettings](https://core.telegram.org/type/account.PasswordInputSettings) object.\n\nTo set a new password, use the SRP parameters and the KDF algorithm obtained using [account.getPassword](https://core.telegram.org/method/account.getPassword) when generating the `password` field. Then generate a new `new_password_hash` using the KDF algorithm specified in the `new_settings`, just append 32 sufficiently random bytes to the `salt1`, first. Proceed as for [checking passwords with SRP](#checking-the-password-with-srp), just stop at the generation of the `v` parameter, and use it as `new_password_hash`:\n\n*   `v := pow(g, x) mod p`\n\nAs usual in big endian form, padded to 2048 bits.\n\n#### [](#email-verification)Email verification\n\nWhen setting up two-factor authorization, it is recommended to set up a **recovery email**, to allow recovery of the password through the user's email address, in case they forget it.\n\nTo set up a recovery email, it must first be verified. This can be done directly when setting the new password using [account.updatePasswordSettings](https://core.telegram.org/method/account.updatePasswordSettings) by setting the email parameter and flag in the [account.passwordInputSettings](https://core.telegram.org/constructor/account.passwordInputSettings) constructor. If the email isn't verified, an [EMAIL\\_UNCONFIRMED\\_X 400 error](https://core.telegram.org/method/account.updatePasswordSettings#possible-errors) will be returned, where X is the length of the verification code that was just sent to the email. Use [account.confirmPasswordEmail](https://core.telegram.org/method/account.confirmPasswordEmail) to enter the received verification code and enable the recovery email. Use [account.resendPasswordEmail](https://core.telegram.org/method/account.resendPasswordEmail) to resend the verification code. Use [account.cancelPasswordEmail](https://core.telegram.org/method/account.cancelPasswordEmail) to cancel the verification code.\n\nTo get the current recovery email, use [account.getPasswordSettings](https://core.telegram.org/method/account.getPasswordSettings).\n\n### [](#password-recovery)Password recovery\n\nIf the user has forgotten their 2FA password, the following recovery options are available:\n\n*   Logged-in sessions only: [password reset\u00a0\u00bb](#password-reset)\n*   Logged-in and not logged-in sessions: [email recovery\u00a0\u00bb](#email-recovery)\n*   Not logged-in sessions: [account deletion\u00a0\u00bb](#account-deletion)\n\n#### [](#password-reset)Password reset\n\nPassword reset can be requested from logged-in sessions only.\n\nThe following procedure can be used to reset the password without deleting the account:\n\n```\naccount.resetPasswordFailedWait#e3779861 retry_date:int = account.ResetPasswordResult;\naccount.resetPasswordRequestedWait#e9effc7d until_date:int = account.ResetPasswordResult;\naccount.resetPasswordOk#e926d63e = account.ResetPasswordResult;\n\n---functions---\n\naccount.resetPassword#9308ce1b = account.ResetPasswordResult;\naccount.declinePasswordReset#4c9409f6 = Bool;\n```\n\nIf the user is already logged in and has forgotten their 2FA password, [account.resetPassword](https://core.telegram.org/method/account.resetPassword) can be used to initiate a password reset.  \nOn success, the call will initially return a [account.resetPasswordRequestedWait](https://core.telegram.org/constructor/account.resetPasswordRequestedWait) constructor and start a 7-day server-side timer, during which the user can abort the reset process using a button sent by the Telegram service account or directly in-UI using [account.declinePasswordReset](https://core.telegram.org/method/account.declinePasswordReset).\n\nWhen the time comes, [account.resetPassword](https://core.telegram.org/method/account.resetPassword) is invoked once more, returning a [account.resetPasswordOk](https://core.telegram.org/constructor/account.resetPasswordOk) to indicate that the password was successfully reset.\n\nIf the user recently requested a password reset that was canceled, [account.resetPasswordFailedWait](https://core.telegram.org/constructor/account.resetPasswordFailedWait) will be returned by the initial [account.resetPassword](https://core.telegram.org/method/account.resetPassword) call, and they must wait until the specified date before requesting another reset.\n\nNote that if the user already knows their 2FA password and simply wants to disable 2FA, [the same process used to enable the password must also be used to disable it\u00a0\u00bb](#setting-a-new-2fa-password).\n\n#### [](#email-recovery)Email recovery\n\nEmail recovery can be requested from logged in sessions, and from non-logged in sessions if the user has successfully provided the login code.  \nIn both cases, the account must have an associated [recovery email\u00a0\u00bb](#email-verification).\n\nIn order to recover a forgotten 2FA password, an email must be sent to the [previously specified address](#email-verification) using the [auth.requestPasswordRecovery](https://core.telegram.org/method/auth.requestPasswordRecovery) method.  \nUse [auth.checkRecoveryPassword](https://core.telegram.org/method/auth.checkRecoveryPassword) to make sure that the user provided a valid code.  \nThen use [auth.recoverPassword](https://core.telegram.org/method/auth.recoverPassword) with the received code to delete the current 2FA password, to set a new one follow [these instructions\u00a0\u00bb](https://core.telegram.org/api/srp).\n\n#### [](#account-deletion)Account deletion\n\nIf the user has successfully provided the login code, but they forgot their [2FA](https://core.telegram.org/api/srp) password and they don't have access to any other logged-in session, the account can be deleted following [these instructions\u00a0\u00bb](https://core.telegram.org/api/account-deletion).\n\n### [](#using-the-2fa-password)Using the 2FA password\n\nMultiple methods in the API such as those used to make [payments](https://core.telegram.org/api/payments), [transfer channel ownership](https://core.telegram.org/method/channels.editCreator) and others require the user to authenticate using the 2FA password passed as an [InputCheckPasswordSRP](https://core.telegram.org/type/InputCheckPasswordSRP) constructor, generated as specified [above](#checking-the-password-with-srp).\n\nAll such methods where a password verification is required _after login_ may emit the following RPC errors:\n\n*   `PASSWORD_MISSING` - No 2FA password is configured, but one is **required** in order to invoke the method. [Set a 2FA password](#setting-a-new-2fa-password) and then repeat the method call.\n*   `PASSWORD_TOO_FRESH_%d` - The 2FA password was modified less than 24 hours ago, try again in `%d` seconds.\n*   `SESSION_TOO_FRESH_%d` - This session was created less than 24 hours ago, try again in `%d` seconds.\n*   `PASSWORD_HASH_INVALID` - The specified password is invalid (or an [inputCheckPasswordEmpty](https://core.telegram.org/constructor/inputCheckPasswordEmpty) was provided, but a 2FA password is required).\n\nThe usual flow for invoking such methods is to first invoke the method passing an [inputCheckPasswordEmpty](https://core.telegram.org/constructor/inputCheckPasswordEmpty) (as if no password is configured, even if one is actually configured); then, according to the returned RPC error, proceed to:\n\n*   `PASSWORD_HASH_INVALID` - The 2FA password insertion flow, the re-invoke the method with the user-provided password\n*   `PASSWORD_MISSING` - The 2FA password setup flow, then re-invoke the method with the newly provided password\n*   All other RPC errors - Show an error message with a description of the error\n\nThis flow is useful to avoid race conditions with other currently logged-in sessions that may change the password.\n\n### [](#related-pages)Related pages\n\n#### [](#srp-design)[SRP design](http://srp.stanford.edu/design.html)",
    "url": "https://core.telegram.org/api/srp"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/updates",
      "title": "Working with Updates",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Working with Updates"
        },
        {
          "property": "og:image",
          "content": "9c2ddd579d3d7cedba"
        },
        {
          "property": "og:description",
          "content": "How to subscribe to updates and handle them properly."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:47 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "8089",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Working with Updates\n\nWhen a client is being actively used, events will occur that affect the current user and that they must learn about as soon as possible, e.g. when a new message is received. To eliminate the need for the client itself to periodically download these events, there is an update delivery mechanism in which the server sends the user notifications over one of its available connections with the client.\n\n### [](#subscribing-to-updates)Subscribing to Updates\n\nUpdate events are sent to an authorized user into the last active connection (except for connections needed for downloading / uploading files).\n\nSo to start receiving updates the client needs to init connection and call API method, e.g. to [fetch current state](#fetching-state).\n\nMake sure to **always ignore updates received from unencrypted connections** (i.e. before the handshake is completed).\n\nIf the connection is encrypted, but the session isn't logged in yet or was logged out, only the following updates may be handled:\n\n*   [updateLoginToken](https://core.telegram.org/constructor/updateLoginToken) - For [QR code logins](https://core.telegram.org/api/qr-login)\n*   [updateDcOptions](https://core.telegram.org/constructor/updateDcOptions) - Changes in the data center connection options that must be applied\n*   [updateConfig](https://core.telegram.org/constructor/updateConfig) - The server-side configuration has changed; the client should re-fetch the config using [help.getConfig](https://core.telegram.org/method/help.getConfig) and [help.getAppConfig](https://core.telegram.org/method/help.getAppConfig).\n*   [updateLangPackTooLong](https://core.telegram.org/constructor/updateLangPackTooLong), [updateLangPack](https://core.telegram.org/constructor/updateLangPack) - Localization pack updates\n\n### [](#event-sequences)Event sequences\n\nAll events are received from the socket as a sequence of TL-serialized [Updates](https://core.telegram.org/type/Updates) objects, which might be optionally gzip-compressed in the same way as [responses to queries](https://core.telegram.org/api/invoking#decompressing-data).\n\nEach [Updates](https://core.telegram.org/type/Updates) object may contain single or multiple [Update](https://core.telegram.org/type/Update) objects, representing different events happening.\n\nIn order to apply all updates in precise order and to guarantee that no update is missed or applied twice there is `seq` attribute in [Updates](https://core.telegram.org/type/Updates) constructors, and `pts` (with `pts_count`) or `qts` attributes in [Update](https://core.telegram.org/type/Update) constructors. The client must use those attributes values in combination with locally stored state to correctly apply incoming updates.\n\nWhen a gap in updates sequence occurs, it must be filled via calling one of the API methods. [More below\u00a0\u00bb](#recovering-gaps)\n\n### [](#updates-sequence)[Updates](https://core.telegram.org/type/Updates) sequence\n\nAs said earlier, each payload with updates has a TL-type [Updates](https://core.telegram.org/type/Updates). It can be seen from the schema below that this type has several constructors.\n\n```\nupdatesTooLong#e317af7e = Updates;\nupdateShort#78d4dec1 update:Update date:int = Updates;\nupdateShortMessage#313bc7f8 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true id:int user_id:long message:string pts:int pts_count:int date:int fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?long reply_to:flags.3?MessageReplyHeader entities:flags.7?Vector<MessageEntity> ttl_period:flags.25?int = Updates;\nupdateShortChatMessage#4d6deea5 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true id:int from_id:long chat_id:long message:string pts:int pts_count:int date:int fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?long reply_to:flags.3?MessageReplyHeader entities:flags.7?Vector<MessageEntity> ttl_period:flags.25?int = Updates;\nupdateShortSentMessage#9015e101 flags:# out:flags.1?true id:int pts:int pts_count:int date:int media:flags.9?MessageMedia entities:flags.7?Vector<MessageEntity> ttl_period:flags.25?int = Updates;\nupdatesCombined#725b04c3 updates:Vector<Update> users:Vector<User> chats:Vector<Chat> date:int seq_start:int seq:int = Updates;\nupdates#74ae4240 updates:Vector<Update> users:Vector<User> chats:Vector<Chat> date:int seq:int = Updates;\n```\n\n[updatesTooLong](https://core.telegram.org/constructor/updatesTooLong) indicates that there are too many events pending to be pushed to the client, so one needs to [fetch them manually](#recovering-gaps).\n\nEvents inside [updateShort](https://core.telegram.org/constructor/updateShort) constructors, normally, have lower priority and are broadcast to a large number of users, i.e. one of the chat participants started entering text in a big conversation ([updateChatUserTyping](https://core.telegram.org/constructor/updateChatUserTyping)).\n\nThe [updateShortMessage](https://core.telegram.org/constructor/updateShortMessage), [updateShortSentMessage](https://core.telegram.org/constructor/updateShortMessage) and [updateShortChatMessage](https://core.telegram.org/constructor/updateShortChatMessage) constructors are redundant but help significantly reduce the transmitted message size for 90% of the updates. They should be transformed to [updateShort](https://core.telegram.org/constructor/updateShort) upon receival.\n\nTwo remaining constructors [updates](https://core.telegram.org/constructor/updates) and [updatesCombined](https://core.telegram.org/constructor/updatesCombined) are part of the Updates sequence. Both of them have the `seq` attribute, which indicates the remote Updates state after the generation of the Updates, and `seq_start` indicates the remote Updates state after the _first_ of the Updates in the packet is generated. For [updates](https://core.telegram.org/constructor/updates), the `seq_start` attribute is omitted, because it is assumed that it is always equal to `seq`.\n\n### [](#message-related-event-sequences)Message-related event sequences\n\nEach _event_ related to a message box (message created, message edited, message deleted, etc) is identified by a unique autoincremented `pts`, or `qts` in case of secret chat updates, certain bot updates, etc.\n\nEach message box can be considered as some server-side DB table that stores messages and events associated with them. All boxes are completely independent, and each pts sequence is tied to just one box (see below).\n\nThe [Update](https://core.telegram.org/type/Update) object may contain info about _multiple events_ (for example, [updateDeleteMessages](https://core.telegram.org/constructor/updateDeleteMessages)). That's why all single updates might have `pts_count` parameter indicating the _number of events_ contained in the received _update_ (with some exceptions, in this case, the `pts_count` is considered to be `0`).\n\nEach [channel](https://core.telegram.org/api/channel#channels) and [supergroup](https://core.telegram.org/api/channel#supergroups) has its message box and _its event sequence_ as a result; private chats and [basic groups](https://core.telegram.org/api/channel#basic-groups) of one user have another _common event sequence_.  \nSecret chats, certain bot events and other kinds of updates have yet another _common secondary event sequence_.\n\nTo recap, the client has to take care of the integrity of the following sequences to properly handle updates:\n\n*   Updates sequence (seq)\n    *   Common message box sequence (pts)\n    *   Secondary event sequence (qts)\n    *   Channel message box sequence 1 (pts)\n    *   Channel message box sequence 2 (pts)\n    *   Channel message box sequence 3 (pts)\n    *   and so on...\n\n### [](#fetching-state)Fetching state\n\nThe _common_ update state is represented by the [updates.State](https://core.telegram.org/type/updates.State) constructor. When the user logs in for the first time, a call to [updates.getState](https://core.telegram.org/method/updates.getState) has to be made to store the latest update state (which will not be the absolute initial state, just the latest state at the current time). The common update state can also be fetched from [updates.differenceTooLong](https://core.telegram.org/constructor/updates.differenceTooLong).\n\nThe _channel update state_ is represented simply by the `pts` of the event sequence: when first logging in, the initial channel state can be obtained from the [dialog](https://core.telegram.org/constructor/dialog) constructor when fetching dialogs, from [the full channel info](https://core.telegram.org/constructor/channelFull), or it can be received [as an updateChannelTooLong update](https://core.telegram.org/constructor/updateChannelTooLong).\n\nThe _secondary update state_ is represented by the `qts` of the secret event sequence, it is contained in the [updates.State](https://core.telegram.org/type/updates.State) of the _common update state_.\n\nThe _Updates sequence state_ is represented by the `date` and `seq` of the _Updates sequence_, it is contained in the [updates.State](https://core.telegram.org/type/updates.State) of the _common_ update state.\n\n### [](#update-handling)Update handling\n\nUpdate handling in Telegram clients consists of receiving events, making sure there were no gaps and no events were missed based on the locally stored state of the correspondent event sequence, and then updating the locally stored state based on the parameters received.\n\nWhen the client receives payload with serialized updates, first of all, it needs to walk through all of the nested [Update](https://core.telegram.org/type/Update) objects and check if they belong to any of message box sequences (have `pts` or `qts` parameters). Those updates need to be handled separately according to corresponding local state and new `pts`/`qts` values. [Details below\u00a0\u00bb](#pts-checking-and-applying)\n\nAfter message box updates are handled, if there are any other updates remaining the client needs to handle them with respect to `seq`. [Details below\u00a0\u00bb](#seq-checking-and-applying)\n\n#### [](#pts-checking-and-applying)`pts`: checking and applying\n\nHere, `local_pts` will be the local state, `pts` will be the remote state, `pts_count` will be the number of events in the update.\n\n*   If `local_pts + pts_count === pts`, the update can be applied.\n*   If `local_pts + pts_count > pts`, the update was already applied, and must be ignored.\n*   If `local_pts + pts_count < pts`, there's an update gap that must be [filled](#recovering-gaps).\n\nFor example, let's assume the client has the following local state for the channel `123456789`:\n\n```\nlocal_pts = 131\n```\n\nNow let's assume an [updateNewChannelMessage](https://core.telegram.org/constructor/updateNewChannelMessage) from channel `123456789` is received with `pts = 132` and `pts_count=1`. Since `local_pts + pts_count === pts`, the total number of events since the last stored state is, in fact, equal to `pts_count`: this means the update can be safely accepted and the remote `pts` applied:\n\n```\nlocal_pts = 132\n```\n\nSince:\n\n*   `pts` indicates the server state **after** the new channel message events are generated\n*   `pts_count` indicates the number of events in the new channel update\n*   The server state **before the new channel message event was generated** has to be: `pts_before = pts - pts_count = 131`, which is, in fact, equal to our local state.\n\nNow let's assume an [updateNewChannelMessage](https://core.telegram.org/constructor/updateNewChannelMessage) from channel `123456789` is received with `pts = 132` and `pts_count=1`. Since `local_pts + pts_count > pts` (`133 > 132`), the update is skipped because we've already handled this update (in fact, our current `local_pts` was set by this same update, and it was resent twice due to network issues or other issues).\n\nNow let's assume an [updateDeleteChannelMessages](https://core.telegram.org/constructor/updateDeleteChannelMessages) from channel `123456789` is received with `pts = 140` and `pts_count=5`. Since `local_pts + pts_count < pts` (`137 < 140`), this means that updates were missed, and the gap must be recovered.\n\n##### [](#secret-chats-amp-bots)Secret chats & bots\n\nThe whole process is very similar for secret chats and certain bot updates, but there is a `qts` instead of `pts`, and events are never grouped, so it's assumed that `qts_count` is always equal to 1.\n\n#### [](#seq-checking-and-applying)`seq`: checking and applying\n\nOn the top level when handling received [updates](https://core.telegram.org/constructor/updates) and [updatesCombined](https://core.telegram.org/constructor/updatesCombined) there are four possible cases:\n\n*   If `seq_start === 0`, the updates can be applied: this is a special case for updates that aren't ordered and should just be applied immediately.\n*   If `local_seq + 1 === seq_start`, the updates can be applied.\n*   If `local_seq + 1 > seq_start`, the updates were already applied, and must be ignored.\n*   If `local_seq + 1 < seq_start`, there's an updates gap that must be [filled](#recovering-gaps) (updates.getDifference must be used as with common and secret event sequences).\n\nIf the updates were applied, local _Updates state_ must be updated with `seq` (unless it's 0) and `date` from the constructor.\n\nFor all the other [Updates](https://core.telegram.org/type/Updates) type constructors there is no need to check `seq` or change a local state.\n\n### [](#recovering-gaps)Recovering gaps\n\nTo do this, [updates.getDifference](https://core.telegram.org/method/updates.getDifference) (common/secret state) or [updates.getChannelDifference](https://core.telegram.org/method/updates.getChannelDifference) (channel state) with the respective local states must be called.\n\nManually obtaining updates through the above methods is required in the following situations:\n\n*   On startup, _only_ [updates.getDifference](https://core.telegram.org/method/updates.getDifference) should be called, to fetch updates received while the client was offline (preferably with some flags to reduce server load, see the method's docs).  \n    [updates.getChannelDifference](https://core.telegram.org/method/updates.getChannelDifference) does _not_ have to be manually called for all channels on startup.  \n    Instead, [updates.getChannelDifference](https://core.telegram.org/method/updates.getChannelDifference) will be automatically triggered (only for channels that need catching up) by a set of [updateChannelTooLong](https://core.telegram.org/constructor/updateChannelTooLong) updates that will be returned by the [updates.getDifference](https://core.telegram.org/method/updates.getDifference) call.\n*   Loss of sync: a gap was found in **seq** / **pts** / **qts** (as described above). It may be useful to wait up to 0.5 seconds in this situation and abort the sync in case a new update arrives, that fills the gap.\n*   Session loss on the server: the client receives a [new session created notification](https://core.telegram.org/mtproto/service_messages#new-session-creation-notification). This can be caused by garbage collection on the MTProto server or a server reboot.\n*   Incorrect update: the client cannot deserialize the received data.\n*   Incomplete update: the client is missing data about a chat/user from one of the shortened constructors, such as [updateShortChatMessage](https://core.telegram.org/constructor/updateShortChatMessage), etc.\n*   Long period without updates: no updates for 15 minutes or longer.\n*   The server requests the client to fetch the difference using [updateChannelTooLong](https://core.telegram.org/constructor/updateChannelTooLong) or [updatesTooLong](https://core.telegram.org/constructor/updatesTooLong).\n\nWhen calling [updates.getDifference](https://core.telegram.org/method/updates.getDifference) if the [updates.differenceSlice](https://core.telegram.org/constructor/updates.differenceSlice) constructor is returned in response, the full difference was too large to be received in one request. The intermediate status, **intermediate\\_state**, must be saved on the client and the query must be repeated, using the intermediate status as the current status.\n\nTo fetch the updates difference of a channel, [updates.getChannelDifference](https://core.telegram.org/method/updates.getChannelDifference) is used.  \nIf the difference is too large to be received in one request, the `final` flag of the result is **not** set (see [docs](https://core.telegram.org/type/updates.ChannelDifference)).  \nThe intermediate status, represented by the **pts**, must be saved on the client and the query must be repeated, using the intermediate status as the current status.\n\nFor performance reasons and for better user experience, client can set maximum gap size to be filled: `pts_total_limit` parameter of [updates.getDifference](https://core.telegram.org/method/updates.getDifference) and `limit` parameter for [updates.getChannelDifference](https://core.telegram.org/method/updates.getChannelDifference) can be used.\n\nIf the gap is too large and there are too many updates to fetch, a `*TooLong` constructor will be returned. In this case, the client must [re-fetch the state](#fetching-state), re-start fetching updates from that state and follow the instructions that can be found [here](https://core.telegram.org/constructor/updates.channelDifferenceTooLong).\n\nIt is recommended to use limit `10-100` for channels and `1000-10000` otherwise.\n\nDo not re-invoke [updates.getChannelDifference](https://core.telegram.org/method/updates.getChannelDifference) if the returned difference is `final`, unless [the user has opened the channel/supergroup\u00a0\u00bb](#subscribing-to-updates-of-channels-supergroups).\n\n### [](#subscribing-to-updates-of-channels-supergroups)Subscribing to updates of channels/supergroups\n\nThe API will automatically send passive updates (i.e. as standalone [Updates](https://core.telegram.org/type/Updates) constructors in the socket) for channels/supergroups the user/bot is a member of.\n\nHowever, clients (user accounts only) should also additionally invoke [updates.getChannelDifference](https://core.telegram.org/method/updates.getChannelDifference) periodically for channels and supergroups the user is currently viewing (i.e. explicitly opened channels/supergroups in one or more tabs/windows).\n\nIf the returned difference is non-`final`, the method should be called immediately with the new parameters [as usual](#recovering-gaps).\n\nIf the returned difference is `final`, and the user is still viewing the messages of the supergroup/channel (i.e. via distinct tabs/windows), [updates.getChannelDifference](https://core.telegram.org/method/updates.getChannelDifference) should be re-invoked after `timeout` seconds (if the flag is specified, otherwise after 1 second).\n\nThis mechanism may also be used to enable _passive_ reception of updates from channels or supergroups we're _not_ a member of: if the specified channel or supergroup is public, or is private but temporarily available for a limited time thanks to a [chatInvitePeek](https://core.telegram.org/constructor/chatInvitePeek), the API will start passively sending updates (i.e. as standalone [Updates](https://core.telegram.org/type/Updates) constructors in the socket, as is already the case for normal channels/supergroups we've already joined) to all logged-in sessions, as long as any of the sessions continues to periodically invoke [updates.getChannelDifference](https://core.telegram.org/method/updates.getChannelDifference) every `timeout` seconds (returned by the method, or every second if the `timeout` flag is absent from the return value of the method, or immediately with the new parameters if the returned difference is non-`final`).\n\nClients should stop [updates.getChannelDifference](https://core.telegram.org/method/updates.getChannelDifference) polling once the user closes the channel/supergroup: the API will continue emitting passive updates **only** if the user is a member of the channel/supergroup.\n\nClients should also limit to 10 the maximum number of channels/supergroups shortpolled using the above mechanism (i.e. if the user opens 11 windows on 11 different channels, shortpoll with [updates.getChannelDifference](https://core.telegram.org/method/updates.getChannelDifference) only the first 10).\n\n### [](#example-implementations)Example implementations\n\nImplementations also have to take care to postpone updates received via the socket while filling gaps in the event and Update sequences, as well as avoid filling gaps in the same sequence.\n\nExample implementations: [tdlib](https://github.com/tdlib/td), [MadelineProto](https://github.com/danog/MadelineProto).\n\nAn interesting and easy way this can be implemented, instead of using various locks, is by running background loops, like in [MadelineProto\u00a0\u00bb](https://docs.madelineproto.xyz/docs/UPDATES_INTERNAL.html).\n\n### [](#push-notifications-about-updates)[PUSH Notifications about Updates](https://core.telegram.org/api/push-updates)\n\nIf a client does not have an active connection at the time of an event, [PUSH Notifications](https://core.telegram.org/api/push-updates) will also be useful.",
    "url": "https://core.telegram.org/api/updates"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/forum",
      "title": "Forums",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Forums"
        },
        {
          "property": "og:description",
          "content": "Telegram allows creating forums with multiple distinct topics."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:48 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5024",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Forums\n\nTelegram allows creating forums with multiple distinct topics.\n\n```\nchannel#fe4478bd flags:# creator:flags.0?true left:flags.2?true broadcast:flags.5?true verified:flags.7?true megagroup:flags.8?true restricted:flags.9?true signatures:flags.11?true min:flags.12?true scam:flags.19?true has_link:flags.20?true has_geo:flags.21?true slowmode_enabled:flags.22?true call_active:flags.23?true call_not_empty:flags.24?true fake:flags.25?true gigagroup:flags.26?true noforwards:flags.27?true join_to_send:flags.28?true join_request:flags.29?true forum:flags.30?true flags2:# stories_hidden:flags2.1?true stories_hidden_min:flags2.2?true stories_unavailable:flags2.3?true signature_profiles:flags2.12?true id:long access_hash:flags.13?long title:string username:flags.6?string photo:ChatPhoto date:int restriction_reason:flags.9?Vector<RestrictionReason> admin_rights:flags.14?ChatAdminRights banned_rights:flags.15?ChatBannedRights default_banned_rights:flags.18?ChatBannedRights participants_count:flags.17?int usernames:flags2.0?Vector<Username> stories_max_id:flags2.4?int color:flags2.7?PeerColor profile_color:flags2.8?PeerColor emoji_status:flags2.9?EmojiStatus level:flags2.10?int subscription_until_date:flags2.11?int = Chat;\n\n---functions---\n\nchannels.createChannel#91006707 flags:# broadcast:flags.0?true megagroup:flags.1?true for_import:flags.3?true forum:flags.5?true title:string about:string geo_point:flags.2?InputGeoPoint address:flags.2?string ttl_period:flags.4?int = Updates;\n\nchannels.toggleForum#a4298b29 channel:InputChannel enabled:Bool = Updates;\n```\n\nForums may be created either by invoking [channels.createChannel](https://core.telegram.org/method/channels.createChannel) with the `forum` flag set, or by converting an existing [supergroup](https://core.telegram.org/api/channel) into a forum using [channels.toggleForum](https://core.telegram.org/method/channels.toggleForum) with `enabled=true`.  \nIf the group is a [basic group](https://core.telegram.org/api/channel#basic-groups), it should be [upgraded to a supergroup](https://core.telegram.org/api/channel#migration) before converting it into a forum.\n\nForums can also be converted back to [supergroups](https://core.telegram.org/api/channel) using [channels.toggleForum](https://core.telegram.org/method/channels.toggleForum) with `enabled=false`.\n\nNote that the [channels.toggleForum](https://core.telegram.org/method/channels.toggleForum) method can only be invoked by admins with owner rights.\n\nForums have the [channel](https://core.telegram.org/constructor/channel).`forum` flag set, and conversation happens in distinct [forum topics](#forum-topics).\n\n#### [](#forum-topics)Forum topics\n\n```\nforumTopic#71701da9 flags:# my:flags.1?true closed:flags.2?true pinned:flags.3?true short:flags.5?true hidden:flags.6?true id:int date:int title:string icon_color:int icon_emoji_id:flags.0?long top_message:int read_inbox_max_id:int read_outbox_max_id:int unread_count:int unread_mentions_count:int unread_reactions_count:int from_id:Peer notify_settings:PeerNotifySettings draft:flags.4?DraftMessage = ForumTopic;\nforumTopicDeleted#023f109b id:int = ForumTopic;\n\nmessages.forumTopics#367617d3 flags:# order_by_create_date:flags.0?true count:int topics:Vector<ForumTopic> messages:Vector<Message> chats:Vector<Chat> users:Vector<User> pts:int = messages.ForumTopics;\n\ninputStickerSetEmojiDefaultTopicIcons#44c1f8e9 = InputStickerSet;\n\nmessageActionTopicCreate#0d999256 flags:# title:string icon_color:int icon_emoji_id:flags.0?long = MessageAction;\nmessageActionTopicEdit#c0944820 flags:# title:flags.0?string icon_emoji_id:flags.1?long closed:flags.2?Bool hidden:flags.3?Bool = MessageAction;\n\nupdateChannelPinnedTopic#192efbe3 flags:# pinned:flags.0?true channel_id:long topic_id:int = Update;\nupdateChannelPinnedTopics#fe198602 flags:# channel_id:long order:flags.0?Vector<int> = Update;\n\ninputReplyToMessage#22c0f6d5 flags:# reply_to_msg_id:int top_msg_id:flags.0?int reply_to_peer_id:flags.1?InputPeer quote_text:flags.2?string quote_entities:flags.3?Vector<MessageEntity> quote_offset:flags.4?int = InputReplyTo;\n\n---functions---\n\nchannels.getForumTopics#0de560d1 flags:# channel:InputChannel q:flags.0?string offset_date:int offset_id:int offset_topic:int limit:int = messages.ForumTopics;\nchannels.getForumTopicsByID#b0831eb9 channel:InputChannel topics:Vector<int> = messages.ForumTopics;\n\nchannels.deleteTopicHistory#34435f2d channel:InputChannel top_msg_id:int = messages.AffectedHistory;\n\nchannels.createForumTopic#f40c0224 flags:# channel:InputChannel title:string icon_color:flags.0?int icon_emoji_id:flags.3?long random_id:long send_as:flags.2?InputPeer = Updates;\nchannels.editForumTopic#f4dfa185 flags:# channel:InputChannel topic_id:int title:flags.0?string icon_emoji_id:flags.1?long closed:flags.2?Bool hidden:flags.3?Bool = Updates;\n\nchannels.updatePinnedForumTopic#6c2d9026 channel:InputChannel topic_id:int pinned:Bool = Updates;\nchannels.reorderPinnedForumTopics#2950a18f flags:# force:flags.0?true channel:InputChannel order:Vector<int> = Updates;\n\nchannels.toggleViewForumAsMessages#9738bb15 channel:InputChannel enabled:Bool = Updates;\n```\n\nForums can have multiple topics where users may interact.\n\nTo fetch the topic list of a forum, use [channels.getForumTopics](https://core.telegram.org/method/channels.getForumTopics); the same method can be used to search topics by their name.  \nTo fetch information about one or more topics by their ID, use [channels.getForumTopicsByID](https://core.telegram.org/method/channels.getForumTopicsByID).\n\nEvery forum has a non-deletable \"General\" topic, with `id=1`; other topics will have other IDs, equal to the [messageActionTopicCreate](https://core.telegram.org/constructor/messageActionTopicCreate) service message that created the topic.\n\nTo send messages to the \"General\" topic, just use [messages.sendMessage](https://core.telegram.org/method/messages.sendMessage) as usual, as if you were writing to a normal supergroup.  \nOn the other hand, topics with `id != 1` are just the [message thread](https://core.telegram.org/api/threads) of the [messageActionTopicCreate](https://core.telegram.org/constructor/messageActionTopicCreate) service message that created that topic.  \nThis means that topics should be treated similarly to [message threads](https://core.telegram.org/api/threads) by the client.  \nTo send messages to these topics, pass the topic ID to the `reply_to_msg_id` parameter of [inputReplyToMessage](https://core.telegram.org/constructor/inputReplyToMessage), passed to `reply_to` when invoking [messages.sendMessage](https://core.telegram.org/method/messages.sendMessage), [messages.sendMedia](https://core.telegram.org/method/messages.sendMedia) et cetera.\n\nTo reply to messages within a topic, pass the ID of the message to reply to [inputReplyToMessage](https://core.telegram.org/constructor/inputReplyToMessage).`reply_to_msg_id`, and, unless we're replying to a message in the \"General\" topic, pass the topic ID to [inputReplyToMessage](https://core.telegram.org/constructor/inputReplyToMessage).`top_msg_id`.  \nNote that when replying to messages in a topic, the [inputReplyToMessage](https://core.telegram.org/constructor/inputReplyToMessage).`top_msg_id` field must contain the topic ID **if and only if** we're replying to messages in [forum topics](https://core.telegram.org/api/forum#forum-topics) different from the \"General\" topic (i.e. `reply_to_msg_id` is set and `reply_to_msg_id != topicID` and `topicID != 1`): this way, if the replied-to message is deleted before the method finishes execution, the value in this field will be used to send the message to the correct topic, instead of the \"General\" topic.  \nAlso note that since [message threads](https://core.telegram.org/api/threads) can't have nested message threads, topics (except for the \"General\" topic) also can't have message threads (so replies to messages within topics won't generate further message threads).\n\nTopics have a name (`title`) and an icon: the icon can be a [custom emoji](https://core.telegram.org/api/custom-emoji) specified by the `icon_emoji_id`, or a default chat icon if `icon_emoji_id` is not set, filled with the color specified in `icon_color`.  \nTopics can be temporarily `closed`, preventing further messages from being sent to the topic.  \nAdditionally, (only) the \"General\" topic may also be `hidden`.  \nAll topics except for the \"General\" topic can be deleted by invoking [channels.deleteTopicHistory](https://core.telegram.org/method/channels.deleteTopicHistory), with the topic ID.\n\nTopics can be created by using the [channels.createForumTopic](https://core.telegram.org/method/channels.createForumTopic) method, and may be modified with the [channels.editForumTopic](https://core.telegram.org/method/channels.editForumTopic) method: these actions require [`manage_topics` rights](https://core.telegram.org/api/rights), and will generate [messageActionTopicCreate](https://core.telegram.org/constructor/messageActionTopicCreate)/[messageActionTopicEdit](https://core.telegram.org/constructor/messageActionTopicEdit) service messages.\n\nNote that [Telegram Premium](https://core.telegram.org/api/premium) users can pass any custom emoji to `icon_emoji_id`, while other users can only use the custom emojis contained in the [inputStickerSetEmojiDefaultTopicIcons](https://core.telegram.org/constructor/inputStickerSetEmojiDefaultTopicIcons) emoji pack.  \nIf the default chat icon is used, its color cannot be modified after creating the topic.\n\nTopics may be pinned or unpinned using [channels.updatePinnedForumTopic](https://core.telegram.org/method/channels.updatePinnedForumTopic); use [channels.reorderPinnedForumTopics](https://core.telegram.org/method/channels.reorderPinnedForumTopics) to reorder pinned topics.  \nYou can pin at most `topics_pinned_limit` topics per forum, as specified by the [client configuration parameters\u00a0\u00bb](https://core.telegram.org/api/config#client-configuration).\n\nUsers may also choose to display messages from all topics as if they were sent to a normal group, using a \"View as messages\" setting in the local client.  \nThis setting only affects the current account, and is synced to other logged in sessions using the [channels.toggleViewForumAsMessages](https://core.telegram.org/method/channels.toggleViewForumAsMessages) method; invoking this method will update the value of the `view_forum_as_messages` flag of [channelFull](https://core.telegram.org/constructor/channelFull) or [dialog](https://core.telegram.org/constructor/dialog) and emit an [updateChannelViewForumAsMessages](https://core.telegram.org/constructor/updateChannelViewForumAsMessages).",
    "url": "https://core.telegram.org/api/forum"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/channel",
      "title": "Channels, supergroups, gigagroups and basic groups",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Channels, supergroups, gigagroups and basic groups"
        },
        {
          "property": "og:image",
          "content": "2831d0518f782d1977"
        },
        {
          "property": "og:description",
          "content": "How to handle channels, supergroups, gigagroups, basic groups, and what's the difference between them."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:48 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4029",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Channels, supergroups, gigagroups and basic groups\n\n### [](#channels)Channels\n\n[Channels](https://telegram.org/tour/channels) are a tool for broadcasting your messages to large audiences. They can have an unlimited number of subscribers, they can be public with a permanent URL and each post in a channel has its own view counter.  \nTechnically, they are represented by [channel](https://core.telegram.org/constructor/channel) constructors.\n\nChannels can be created using the [channels.createChannel](https://core.telegram.org/method/channels.createChannel) method, by setting the `broadcast` flag.\n\nMessages posted on channels can be:\n\n*   Anonymous (default)\n*   Have a non-hyperlinked text signature: to toggle this feature, invoke [channels.toggleSignatures](https://core.telegram.org/method/channels.toggleSignatures) with `signatures_enabled` set.\n*   Look exactly like group messages, with full information about the sender (and the same UI used for messages in groups): to toggle this feature, invoke [channels.toggleSignatures](https://core.telegram.org/method/channels.toggleSignatures) with `signatures_enabled` and `profiles_enabled` set.  \n    Enabling this mode will allow admins to post messages to the channel as any of the profiles they control (including other channels, and the channel itself for anonymous messages like the default mode) with the `send_as` flag of [messages.sendMessage](https://core.telegram.org/method/messages.sendMessage) and other message sending methods.\n\n### [](#supergroups)Supergroups\n\n[Supergroups](https://telegram.org/tour/groups) are a powerful tool for building communities and can support up to 200,000 members each.  \nTechnically, supergroups are actually channels: they are represented by [channel](https://core.telegram.org/constructor/channel) constructors, with the `megagroup` flag set to true.\n\nChannels can be created using the [channels.createChannel](https://core.telegram.org/method/channels.createChannel) method, by setting the `megagroup` flag.  \nSupergroups can also be assigned a `geo_point` to become [geochats\u00a0\u00bb](https://core.telegram.org/api/nearby).\n\n#### [](#forums)Forums\n\nSupergroups can be converted into [forums](https://core.telegram.org/api/forum), splitting conversion into distinct [forum topics](https://core.telegram.org/api/forum#forum-topics), see the [forum documentation for more info\u00a0\u00bb](https://core.telegram.org/api/forum).\n\n### [](#gigagroups)Gigagroups\n\nGigagroups are something between a channel and a supergroup.  \nAn admin, [when prompted by the API using suggestions\u00a0\u00bb](https://core.telegram.org/api/config#channel-suggestions), can convert a megagroup into a gigagroup using [channels.convertToGigagroup](https://core.telegram.org/method/channels.convertToGigagroup) (one way only).  \nAfter that, only admins will be able to write in the group (like when [`send_messages` rights are disabled for all group participants by default](#rights)), but the participant limit is removed and the group can become much bigger than a supergroup (e.g. >200,000 currently).  \nAlso, one can't invite people into gigagroups and participants of voice chats in gigagroups are muted by default.\n\n### [](#basic-groups)Basic groups\n\nIn previous versions of telegram, only basic groups (represented by [chat](https://core.telegram.org/constructor/chat) constructors) could be created using [messages.createChat](https://core.telegram.org/method/messages.createChat): these groups have fewer features, and can only have 200 members at max.  \nMessages from all basic groups are stored in the [user's message box\u00a0\u00bb](https://core.telegram.org/api/updates#message-related-event-sequences): this means that all basic groups and all private chats share the same, single message ID and [PTS](https://core.telegram.org/api/updates) sequence.\n\n#### [](#migration)Migration\n\nTo upgrade a basic group to a supergroup, [messages.migrateChat](https://core.telegram.org/method/messages.migrateChat) can be used.\n\nClients should automatically migrate basic groups to supergroups if an admin tries to execute an action that is only supported by supergroups.\n\nThe `chats` field of the result will have two objects:\n\n*   A [chat](https://core.telegram.org/constructor/chat) constructor with a `migrated_to` field, indicating the address of the new supergroup\n*   The new [channel](https://core.telegram.org/constructor/channel) megagroup constructor\n\nWhen [getting full info](https://core.telegram.org/method/channels.getFullChannel) about the migrated channel, the [channelFull](https://core.telegram.org/constructor/channelFull) object will have `migrated_from_chat_id` and `migrated_from_max_id` fields indicating the original ID of the chat, and the message ID in the original chat at which the group was migrated.\n\nAll users of the chat will receive an [updateNewMessage](https://core.telegram.org/constructor/updateNewMessage) from the old chat with a [messageService](https://core.telegram.org/constructor/messageService) containing a [messageActionChatMigrateTo](https://core.telegram.org/constructor/messageActionChatMigrateTo) constructor.\n\nAll new messages have to be sent to the new supergroup.\n\nWhen working with migrated groups clients need to handle loading of the message history (as well as search results et cetera) from both the basic group and the new supergroup. This is done by merging the two messages lists (requested with different [Peer](https://core.telegram.org/type/Peer) values) client side.\n\n### [](#invite-links-and-join-requests)Invite links and join requests\n\nChannels, basic groups and supergroups may have a public username or a private invite link: private invite links may be further enhanced with per-user join requests.\n\nFor more info on how to work with public usernames, invite links and join requests, see [here\u00a0\u00bb](https://core.telegram.org/api/invites).\n\n### [](#rights)Rights\n\nChannels, basic groups and supergroups allow setting [granular permissions](https://telegram.org/blog/permissions-groups-undo) both for admins and specific users; channels, supergroups and basic groups also allow setting global granular permissions for users.\n\nFor more info on how to set and modify rights, see [here\u00a0\u00bb](https://core.telegram.org/api/rights).\n\n### [](#pinned-messages)Pinned messages\n\nTelegram allows pinning multiple messages on top in a chat, group, supergroup or channel.\n\nSee [here\u00a0\u00bb](https://core.telegram.org/api/pin) for more info on pinning and unpinning messages.\n\n### [](#discussion)Discussion\n\nGroups can be associated to a channel as a [discussion group](https://telegram.org/blog/privacy-discussions-web-bots), to allow users to discuss about posts.\n\nFor more info on how to set a discussion group in channel, see [here\u00a0\u00bb](https://core.telegram.org/api/discussion)\n\n### [](#recent-actions)Recent actions\n\nBoth supergroups and channels offer a so-called [admin log](https://telegram.org/blog/admin-revolution), a log of recent relevant supergroup and channel actions, like the modification of group/channel settings or information on behalf of an admin, user kicks and bans, and more.\n\nSee [here\u00a0\u00bb](https://core.telegram.org/api/recent-actions) for more info.\n\n### [](#global-search)Global search\n\nThe [search view\u00a0\u00bb](https://core.telegram.org/api/search#global-search) has a separate Channel tab for channel-related global searches, see [here\u00a0\u00bb](https://core.telegram.org/api/search#global-search) for more info.",
    "url": "https://core.telegram.org/api/channel"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/qr-login",
      "title": "Login via QR code",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Login via QR code"
        },
        {
          "property": "og:description",
          "content": "QR code login flow"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:47 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "2963",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Login via QR code\n\n[QR code](https://en.wikipedia.org/wiki/QR_code) login flow.\n\nRelated TL schema:\n\n```\nauth.loginToken#629f1980 expires:int token:bytes = auth.LoginToken;\nauth.loginTokenMigrateTo#68e9916 dc_id:int token:bytes = auth.LoginToken;\nauth.loginTokenSuccess#390d5c5e authorization:auth.Authorization = auth.LoginToken;\n\nupdateLoginToken#564fe691 = Update;\n\nauthorization#ad01d61d flags:# current:flags.0?true official_app:flags.1?true password_pending:flags.2?true encrypted_requests_disabled:flags.3?true call_requests_disabled:flags.4?true unconfirmed:flags.5?true hash:long device_model:string platform:string system_version:string api_id:int app_name:string app_version:string date_created:int date_active:int ip:string country:string region:string = Authorization;\n\n---functions---\n\nauth.exportLoginToken#b7e085fe api_id:int api_hash:string except_ids:Vector<long> = auth.LoginToken;\nauth.acceptLoginToken#e894ad4d token:bytes = Authorization;\nauth.importLoginToken#95ac5ce4 token:bytes = auth.LoginToken;\n```\n\n### [](#exporting-a-login-token)Exporting a login token\n\nFirst of all, [auth.exportLoginToken](https://core.telegram.org/method/auth.exportLoginToken) must be called by the app that wants to log in to an existing Telegram account.  \nThe method will return an [auth.loginToken](https://core.telegram.org/constructor/auth.loginToken) constructor, containing a binary login `token` and an expiration date (usually 30 seconds).\n\nThe login `token` must be encoded using [base64url](https://tools.ietf.org/html/rfc4648#section-5), embedded in a `tg://login?token=base64encodedtoken` URL and shown in the form of a [QR code](https://en.wikipedia.org/wiki/QR_code) to the user.  \nAfter the expiration of the current QR code, the [auth.exportLoginToken](https://core.telegram.org/method/auth.exportLoginToken) method must be recalled and a new QR code must be generated automatically.\n\n### [](#accepting-a-login-token)Accepting a login token\n\nIn order to log in, the QR code must be scanned and accepted by an already logged-in Telegram app using [auth.acceptLoginToken](https://core.telegram.org/method/auth.acceptLoginToken).  \nThe token must be extracted from the `tg://login` URI and [base64url-decoded](https://tools.ietf.org/html/rfc4648#section-5) before using it in the method.\n\nPossible [errors](https://core.telegram.org/api/errors) returned by the method are:\n\n*   400 - `AUTH_TOKEN_INVALID`, `AUTH_TOKEN_INVALID1`, an invalid authorization token was provided\n*   400 - `AUTH_TOKEN_EXPIRED`, the provided authorization token has expired and the updated QR-code must be re-scanned\n*   400 - `AUTH_TOKEN_ALREADY_ACCEPTED`, the authorization token was already used\n\nThe method will return an [authorization](https://core.telegram.org/constructor/authorization) object, containing info about the app and session that we just authorized.\n\n### [](#confirming-importing-the-login-token)Confirming (importing) the login token\n\nAfter the logged-in app calls [auth.acceptLoginToken](https://core.telegram.org/method/auth.acceptLoginToken) and accepts the login token, the app that is trying to login will receive an [updateLoginToken](https://core.telegram.org/constructor/updateLoginToken) update, which should trigger a **second** call to the [auth.exportLoginToken](https://core.telegram.org/method/auth.exportLoginToken) method.\n\nThis second call should then return an [auth.loginTokenSuccess](https://core.telegram.org/constructor/auth.loginTokenSuccess) constructor, indicating **successful login**, essentially allowing further authorized interaction with the API.\n\nIf, however, there is a DC mismatch between the two apps, [auth.loginTokenMigrateTo](https://core.telegram.org/constructor/auth.loginTokenMigrateTo) is returned instead, to which the app that is trying to login should respond by calling [auth.importLoginToken](https://core.telegram.org/method/auth.importLoginToken) with the specified `token`, to the specified DC.\n\nThis call should then finally return a [auth.loginTokenSuccess](https://core.telegram.org/constructor/auth.loginTokenSuccess) constructor.",
    "url": "https://core.telegram.org/api/qr-login"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/push-updates",
      "title": "Handling PUSH-notifications",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Handling PUSH-notifications"
        },
        {
          "property": "og:image",
          "content": "f171b7d56879c20c22"
        },
        {
          "property": "og:description",
          "content": "How to subscribe to and handle PUSH notifications"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:48 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "8250",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Handling PUSH-notifications\n\n### [](#configuring-the-application)Configuring the application\n\nTo be able to send APNS notifications to Apple servers or GCM notifications to Google servers, application certificates (APNS) or an application key (GCM) must be specified in the [application settings](https://core.telegram.org/myapp).\n\n### [](#subscribing-to-notifications)Subscribing to notifications\n\nTo subscribe to notifications, the client must invoke the [account.registerDevice](https://core.telegram.org/method/account.registerDevice) query, passing in **token\\_type** and **token** as parameters that identify the current device. It is useful to repeat this query at least once every 24 hours or when restarting the application. Use [account.unregisterDevice](https://core.telegram.org/method/account.unregisterDevice) to unsubscribe.\n\nThe following **token\\_type**s are supported:\n\n*   `1` - APNS (device token for apple push)\n*   `2` - FCM (firebase token for google firebase)\n*   `3` - MPNS (channel URI for microsoft push)\n*   `4` - Simple push (endpoint for firefox's deprecated simple push API): note that this push type can also be used by an open source push notification spec like [UnifiedPush \u00bb](https://unifiedpush.org/).  \n    Simple push works by sending a simple PUT request with a `version=number` payload to the specified HTTPS endpoint every time a relevant message is received: upon receiving such a notification, clients should connect to the MTProto API and fetch [updates](https://core.telegram.org/api/updates).  \n    (Note that the `number` won't necessarily be incremental in Telegram's implementation, just treat each distinct request as a signal that a new message is waiting to be fetched via MTProto).\n*   `5` - Ubuntu phone (token for ubuntu push)\n*   `6` - Blackberry (token for blackberry push)\n*   `7` - MTProto separate session\n*   `8` - WNS (windows push)\n*   `9` - APNS VoIP (token for apple push VoIP)\n*   `10` - Web push (web push, see below)\n*   `11` - MPNS VoIP (token for microsoft push VoIP)\n*   `12` - Tizen (token for tizen push)\n*   `13` - Huawei push\n\nFor `10` web push, the token must be a JSON-encoded object with the following keys:\n\n*   `endpoint`: Absolute URL exposed by the push service where the application server can send push messages\n*   `keys`: P-256 elliptic curve Diffie-Hellman parameters in the following object\n    *   `p256dh`: Base64url-encoded P-256 elliptic curve Diffie-Hellman public key\n    *   `auth`: Base64url-encoded authentication secret\n\n### [](#notification-encryption)Notification encryption\n\nFor FCM and APNS VoIP, an optional encryption key used to encrypt push notifications can be passed to [account.registerDevice](https://core.telegram.org/method/account.registerDevice) (`secret`). This key (`auth_key`) is used to encrypt the payloads using [MTProto v2](https://core.telegram.org/mtproto/description).\n\nThe FCM payload will be a JSON payload, containing a `p` field with the base64url-encoded encrypted [MTProto payload](https://core.telegram.org/mtproto/description). After decryption, the result will be a JSON object, prefixed by a 32-bit little-endian integer with the length of the JSON payload. As usual, make sure to follow all security checks as described in the [MTProto docs](https://core.telegram.org/mtproto/description#important-checks).\n\n[Example implementation](https://github.com/DrKLO/Telegram/blob/3708e9847a96ed681ff811d391749cc4535b03f2/TMessagesProj/src/main/java/org/telegram/messenger/GcmPushListenerService.java#L56).\n\nAs mentioned [above](#subscribing-to-notifications), payloads can also be encrypted using [P-256 Elliptic Curve Diffie-Hellman when using web push](https://tools.ietf.org/html/rfc8291).\n\n### [](#notification-structure)Notification structure\n\nAn ([optionally encrypted](#notification-encryption)) notification is provided as a JSON object in the following format:\n\n```\n{\n  \"data\": {\n    \"loc_key\": \"CHAT_MESSAGE_CONTACT\",\n    \"loc_args\": [\"John Doe\", \"My magical group\", \"Contact Exchange\"],\n    \"user_id\": 14124122,\n    \"custom\": {\n      \"chat_id\": 241233,\n      \"msg_id\": 123\n    },\n    \"sound\": \"sound1.mp3\",\n  }\n}\n```\n\nEach notification has several parameters that describe it.\n\n*   loc\\_key - Notification type: a string literal in the form `/[A-Z_0-9]+/`, which summarizes the notification. For example, `CHAT_MESSAGE_TEXT`.\n*   loc\\_args - Notification placeholder arguments: a list or arguments which, when inserted into a template, produce a readable notification.\n*   custom - Custom parameters to be passed into the application when a notification is opened. Possible fields:\n    *   attachb64 - For notifications about media, base64url-encoded TL-serialization of the corresponding [Photo](https://core.telegram.org/type/Photo) / [Document](https://core.telegram.org/type/Document) object\n    *   updates - base64url-encoded TL-serialization of the [Updates](https://core.telegram.org/type/Updates) object, currently sent only for PHONE\\_CALL\\_REQUEST (with [updatePhoneCall](https://core.telegram.org/constructor/updatePhoneCall) inside)\n    *   call\\_id - Call ID, used in PHONE\\_CALL\\_REQUEST\n    *   call\\_ah - Call access hash, used in PHONE\\_CALL\\_REQUEST\n    *   encryption\\_id - Secret chat id for ENCRYPTION\\_REQUEST, ENCRYPTION\\_ACCEPT, ENCRYPTED\\_MESSAGE\n    *   random\\_id - Random id for message in ENCRYPTED\\_MESSAGE\n    *   contact\\_id - Telegram user identifier of contact that joined Telegram in CONTACT\\_JOINED\n    *   msg\\_id - Message ID for new message event or reaction event\n    *   channel\\_id - Identifier of the [channel/supergroup](https://core.telegram.org/api/channel) where the event occurred\n    *   chat\\_id - Identifier of the [basic group](https://core.telegram.org/api/channel#basic-groups) where the event occurred\n    *   from\\_id - User ID where the event occurred\n    *   chat\\_from\\_broadcast\\_id - If the group message was sent as a channel, this field will contain the sender channel ID\n    *   chat\\_from\\_group\\_id - If the group message was sent as a supergroup, this field will contain the sender supergroup ID\n    *   chat\\_from\\_id - Groups only, message author identifier (ignore if any of chat\\_from\\_broadcast\\_id / chat\\_from\\_group\\_id was present)\n    *   mention - Whether the current user was mentioned/replied to in this new message\n    *   silent - Whether the message was posted silently (no sound should be played for this notification)\n    *   schedule - Whether the message is outgoing and was sent via [scheduled messages](https://core.telegram.org/api/scheduled-messages)\n    *   edit\\_date - When was the message last edited\n    *   top\\_msg\\_id - thread\\_id for new mentions/replies in [threads](https://core.telegram.org/api/threads)\n*   sound - The name of an audio file to be played.\n*   user\\_id - ID of the account to which the PUSH notification should be delivered, in case of clients with multiple accounts active and running.\n*   announcement - Roughly equivalent to a message received from the service notifications (Telegram Notifications, id `777000`) user, but must be delivered via push notifications, without contacting the API.\n\n### [](#processing-notifications)Processing notifications\n\nIn principle, **data.loc\\_key**, **data.custom**, and an Internet connection are sufficient to generate a notification. Obviously, if possible, when generating a visual notification you need not use all of the transmitted data and may rely on the information already stored on the client. But if a user or a chat is not cached locally, the values passed in loc\\_args may also be used. **data.user\\_id** is the ID of the account to which the PUSH notification should be delivered, in case of clients with multiple accounts active and running.\n\n### [](#service-notifications)Service notifications\n\nThe following notifications can be used to update app settings.\n\n| Type | Extra custom arguments | Description |\n| --- | --- | --- |\n| DC\\_UPDATE | **data.custom.dc** - number of the data-center  <br>**data.custom.addr** - server address with port number in the format `111.112.113.114:443` | In case the client gets this notification, it is necessary to add the received server address to the list of possible addresses. In case the address of the first DC was passed (`dc=1`), it is recommended to call it immediately using [help.getConfig](https://core.telegram.org/method/help.getConfig) to update dc-configuration. |\n| MESSAGE\\_DELETED | **data.custom.channel\\_id**: For [channels and supergroups](https://core.telegram.org/api/channel), [Channel/supergroup](https://core.telegram.org/api/channel) identifier  <br>**data.custom.chat\\_id**: For [chats](https://core.telegram.org/api/channel), [Chat](https://core.telegram.org/api/channel) identifier  <br>**data.custom.from\\_id**: For PMs, Author identifier  <br>**data.custom.messages**: Comma-separated IDs of messages that were deleted | Messages were deleted, remove multiple notifications for this chat |\n| READ\\_REACTION | **data.custom.channel\\_id**: For [channels and supergroups](https://core.telegram.org/api/channel), [Channel/supergroup](https://core.telegram.org/api/channel) identifier  <br>**data.custom.chat\\_id**: For [chats](https://core.telegram.org/api/channel), [Chat](https://core.telegram.org/api/channel) identifier  <br>**data.custom.from\\_id**: For PMs, Author identifier  <br>**data.custom.messages**: Comma-separated IDs of messages whose reactions were read | Reactions were read on messages, remove reaction-related notifications for those messages |\n| READ\\_HISTORY | **data.custom.channel\\_id**: For [channels and supergroups](https://core.telegram.org/api/channel), [Channel/supergroup](https://core.telegram.org/api/channel) identifier  <br>**data.custom.chat\\_id**: For [chats](https://core.telegram.org/api/channel), [Chat](https://core.telegram.org/api/channel) identifier  <br>**data.custom.from\\_id**: For PMs, Author identifier  <br>**data.custom.max\\_id**: Maximum ID of read messages | Message history was read, remove multiple notifications for this chat |\n| READ\\_STORIES | **data.custom.channel\\_id**: For [channels and supergroups](https://core.telegram.org/api/channel), [Channel/supergroup](https://core.telegram.org/api/channel) identifier  <br>**data.custom.from\\_id**: For user-sent stories, Author identifier  <br>**data.custom.max\\_id**: Maximum ID of read story | Notifications from stories were read, remove story-related notifications for this chat |\n| STORY\\_DELETED | **data.custom.channel\\_id**: For [channels and supergroups](https://core.telegram.org/api/channel), [Channel/supergroup](https://core.telegram.org/api/channel) identifier  <br>**data.custom.from\\_id**: For user-sent stories, Author identifier  <br>**data.custom.story\\_id**: ID of deleted story | A story was deleted, remove notifications for this story |\n| GEO\\_LIVE\\_PENDING |     | Any of the live locations currently being shared should be updated |\n| SESSION\\_REVOKE |     | Logout and remove DB for specified session by **data.user\\_id**, only apply if coming from an [MTProto-encrypted payload](#notification-encryption) |\n| MESSAGE\\_MUTED |     | Sent rarely, every 10th message in chats or once per 15 sec in PM, to update badge or download messages |\n| MESSAGE\\_ANNOUNCEMENT | **data.announcement**: Announcement | Roughly equivalent to a message received from the service notifications (Telegram Notifications, id `777000`) user, but must be delivered via push notifications, without contacting the API. |\n\n### [](#possible-notifications)Possible Notifications\n\n| Type | Template example | Arguments |\n| --- | --- | --- |\n| AUTH\\_REGION | New login from unrecognized device {1}, location: {2} | 1\\. Device name  <br>2\\. Location |\n| AUTH\\_UNKNOWN | New login from unrecognized device {1} | 1\\. Device name |\n| CHANNEL\\_MESSAGES | {1} posted an album | 1\\. Message author |\n| CHANNEL\\_MESSAGE\\_AUDIO | {1} posted a voice message | 1\\. Message author |\n| CHANNEL\\_MESSAGE\\_CONTACT | {1} posted a contact {2} | 1\\. Message author  <br>2\\. Contact name |\n| CHANNEL\\_MESSAGE\\_DOC | {1} posted a file | 1\\. Message author |\n| CHANNEL\\_MESSAGE\\_DOCS | {1} posted {2} files | 1\\. Channel name  <br>2\\. Number of documents that were posted |\n| CHANNEL\\_MESSAGE\\_FWDS | {1} posted {2} forwarded messages | 1\\. Message author  <br>2\\. Number of forwarded messages |\n| CHANNEL\\_MESSAGE\\_GAME | {1} invited you to play {2} | 1\\. Message author  <br>2\\. Game name |\n| CHANNEL\\_MESSAGE\\_GAME\\_SCORE | {1} scored {3} in game {2} | 1\\. User  <br>2\\. Game name  <br>3\\. Score |\n| CHANNEL\\_MESSAGE\\_GEO | {1} posted a location | 1\\. Channel name |\n| CHANNEL\\_MESSAGE\\_GEOLIVE | {1} posted a live location | 1\\. Channel name |\n| CHANNEL\\_MESSAGE\\_GIF | {1} posted a GIF | 1\\. Channel name |\n| CHANNEL\\_MESSAGE\\_GIVEAWAY | {1} posted a giveaway of {2}x {3}m Premium subscriptions | 1\\. Channel name  <br>2\\. Number of Telegram Premium subscriptions in the giveaway  <br>3\\. Duration in months of each Telegram Premium subscription in the giveaway |\n| CHANNEL\\_MESSAGE\\_GIVEAWAY\\_STARS | {1} posted a giveaway of {3} stars {2} | 1\\. Channel name  <br>2\\. Number of winners in the giveaway  <br>3\\. Number of Telegram Stars being given away |\n| CHANNEL\\_MESSAGE\\_NOTEXT | {1} posted a message | 1\\. Channel name |\n| CHANNEL\\_MESSAGE\\_PAID\\_MEDIA | {1} posted a paid post for {2} star | 1\\. Channel name  <br>2\\. [Stars](https://core.telegram.org/api/stars) |\n| CHANNEL\\_MESSAGE\\_PHOTO | {1} posted a photo | 1\\. Channel name |\n| CHANNEL\\_MESSAGE\\_PHOTOS | {1} posted {2} photos | 1\\. Channel name  <br>2\\. Number of photos that was sent |\n| CHANNEL\\_MESSAGE\\_PLAYLIST | {1} posted {2} music files | 1\\. Channel name  <br>2\\. Number of audio files that were posted |\n| CHANNEL\\_MESSAGE\\_POLL | {1} posted a poll {2} | 1\\. Channel name  <br>2\\. Poll name |\n| CHANNEL\\_MESSAGE\\_QUIZ | {1} posted a quiz {2} | 1\\. Channel name  <br>2\\. Quiz name |\n| CHANNEL\\_MESSAGE\\_ROUND | {1} posted a video message | 1\\. Channel name |\n| CHANNEL\\_MESSAGE\\_STICKER | {1} posted a {2} sticker | 1\\. Channel name  <br>2\\. Sticker emoji |\n| CHANNEL\\_MESSAGE\\_STORY | {1} shared a story | 1\\. Channel name |\n| CHANNEL\\_MESSAGE\\_TEXT | {1}: {2} | 1\\. Channel name  <br>2\\. Message body |\n| CHANNEL\\_MESSAGE\\_VIDEO | {1} posted a video | 1\\. Channel name |\n| CHANNEL\\_MESSAGE\\_VIDEOS | {1} posted {2} videos | 1\\. Channel name  <br>2\\. Number of videos that were posted |\n| CHAT\\_ADD\\_MEMBER | {1} invited {3} to the group {2} | 1\\. Message author  <br>2\\. Chat name  <br>3\\. New participant name |\n| CHAT\\_ADD\\_YOU | {1} invited you to the group {2} | 1\\. User name  <br>2\\. Group name |\n| CHAT\\_CREATED | {1} invited you to the group {2} | 1\\. Message author  <br>2\\. Chat name |\n| CHAT\\_DELETE\\_MEMBER | {1} removed {3} from the group {2} | 1\\. Message author  <br>2\\. Chat name  <br>3\\. Dropped participant name |\n| CHAT\\_DELETE\\_YOU | {1} removed you from the group {2} | 1\\. Message author  <br>2\\. Chat name |\n| CHAT\\_JOINED | {1} joined the group {2} | 1\\. User name  <br>2\\. Group name |\n| CHAT\\_LEFT | {1} left the group {2} | 1\\. Message author  <br>2\\. Chat name |\n| CHAT\\_MESSAGES | {1} sent an album to the group {2} | 1\\. User name  <br>2\\. Group name |\n| CHAT\\_MESSAGE\\_AUDIO | {1} sent a voice message to the group {2} | 1\\. Message author  <br>2\\. Chat name |\n| CHAT\\_MESSAGE\\_CONTACT | {1} shared a contact {3} in the group {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Contact name |\n| CHAT\\_MESSAGE\\_DOC | {1} sent a file to the group {2} | 1\\. User name  <br>2\\. Group name |\n| CHAT\\_MESSAGE\\_DOCS | {1} sent {3} files to the group {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Number of documents that were sent |\n| CHAT\\_MESSAGE\\_FWDS | {1} forwarded {3} messages to the group {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Number of messages that were forwarded |\n| CHAT\\_MESSAGE\\_GAME | {1} invited the group {2} to play {3} | 1\\. User name  <br>2\\. Group name  <br>3\\. Game name |\n| CHAT\\_MESSAGE\\_GAME\\_SCORE | {1} scored {4} in game {3} in the group {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Game name  <br>4\\. Score |\n| CHAT\\_MESSAGE\\_GEO | {1} sent a location to the group {2} | 1\\. Message author  <br>2\\. Chat name |\n| CHAT\\_MESSAGE\\_GEOLIVE | {1} shared a live location with the group {2} | 1\\. User name  <br>2\\. Group name |\n| CHAT\\_MESSAGE\\_GIF | {1} sent a GIF to the group {2} | 1\\. User name  <br>2\\. Group name |\n| CHAT\\_MESSAGE\\_GIVEAWAY | {1} sent a giveaway of {3}x {4}m Premium subscriptions to the group {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Number of Telegram Premium subscriptions in the giveaway  <br>4\\. Duration in months of each Telegram Premium subscription in the giveaway |\n| CHAT\\_MESSAGE\\_GIVEAWAY\\_STARS | {1} sent a giveaway of {4} stars {3} to the group {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Number of winners in the giveaway  <br>4\\. Number of Telegram Stars being given away |\n| CHAT\\_MESSAGE\\_INVOICE | {1} sent an invoice to the group {2} for {3} | 1\\. User name  <br>2\\. Group name  <br>3\\. Product name |\n| CHAT\\_MESSAGE\\_NOTEXT | {1} sent a message to the group {2} | 1\\. Message author  <br>2\\. Chat name |\n| CHAT\\_MESSAGE\\_PAID\\_MEDIA | {1} posted a paid post in {2} group for {3} star | 1\\. Message author  <br>2\\. Chat name  <br>3\\. [Stars](https://core.telegram.org/api/stars) |\n| CHAT\\_MESSAGE\\_PHOTO | {1} sent a photo to the group {2} | 1\\. Message author  <br>2\\. Chat name |\n| CHAT\\_MESSAGE\\_PHOTOS | {1} sent {3} photos to the group {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Number of photos that were sent |\n| CHAT\\_MESSAGE\\_PLAYLIST | {1} sent {3} music files to the group {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Number of audio files that were sent |\n| CHAT\\_MESSAGE\\_POLL | {1} sent a poll {3} to the group {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Poll name |\n| CHAT\\_MESSAGE\\_QUIZ | {1} sent a quiz {3} to the group {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Quiz name |\n| CHAT\\_MESSAGE\\_ROUND | {1} sent a video message to the group {2} | 1\\. User name  <br>2\\. Group name |\n| CHAT\\_MESSAGE\\_STICKER | {1} sent a {3} sticker to the group {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Sticker emoji |\n| CHAT\\_MESSAGE\\_STORY | {1} shared a story to the group | 1\\. Group name |\n| CHAT\\_MESSAGE\\_TEXT | {1} @ {2}: {3} | 1\\. Message author  <br>2\\. Chat name  <br>3\\. Message body |\n| CHAT\\_MESSAGE\\_VIDEO | {1} sent a video to the group {2} | 1\\. Message author  <br>2\\. Chat name |\n| CHAT\\_MESSAGE\\_VIDEOS | {1} sent {3} videos to the group {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Number of videos that were sent |\n| CHAT\\_PHOTO\\_EDITED | {1} changed the group photo for {2} | 1\\. Message author  <br>2\\. Chat name |\n| CHAT\\_REACT\\_AUDIO | {1}: {3} to your voice message in {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Reaction |\n| CHAT\\_REACT\\_CONTACT | {1}: {3} to your contact {4} in {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Reaction  <br>4\\. Contact name |\n| CHAT\\_REACT\\_DOC | {1}: {3} to your file in {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Reaction |\n| CHAT\\_REACT\\_GAME | {1}: {3} to your game in {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Reaction |\n| CHAT\\_REACT\\_GEO | {1}: {3} to your map in {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Reaction |\n| CHAT\\_REACT\\_GEOLIVE | {1}: {3} to your live location in {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Reaction |\n| CHAT\\_REACT\\_GIF | {1}: {3} to your GIF in {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Reaction |\n| CHAT\\_REACT\\_GIVEAWAY | {1} reacted {3} in group {2} to your giveaway | 1\\. User name  <br>2\\. Group name  <br>3\\. Reaction |\n| CHAT\\_REACT\\_INVOICE | {1}: {3} to your invoice in {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Reaction |\n| CHAT\\_REACT\\_NOTEXT | {1}: {3} to your message in {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Reaction |\n| CHAT\\_REACT\\_PAID\\_MEDIA | {1} reacted {3} in group {2} to your paid post for {4} star | 1\\. User name  <br>2\\. Group name  <br>3\\. Reaction  <br>4\\. [Stars](https://core.telegram.org/api/stars) |\n| CHAT\\_REACT\\_PHOTO | {1}: {3} to your photo in {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Reaction |\n| CHAT\\_REACT\\_POLL | {1}: {3} to your poll {4} in {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Reaction  <br>4\\. Poll name |\n| CHAT\\_REACT\\_QUIZ | {1}: {3} to your quiz {4} in {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Reaction  <br>4\\. Quiz name |\n| CHAT\\_REACT\\_ROUND | {1}: {3} to your video message in {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Reaction |\n| CHAT\\_REACT\\_STICKER | {1}: {3} to your {4} sticker in {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Reaction  <br>4\\. Sticker emoji |\n| CHAT\\_REACT\\_TEXT | {1}: {3} in {2} to your \"{4}\" | 1\\. User name  <br>2\\. Group name  <br>3\\. Reaction  <br>4\\. Message body |\n| CHAT\\_REACT\\_VIDEO | {1}: {3} to your video in {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Reaction |\n| CHAT\\_REQ\\_JOINED | {2}\\|{1} was accepted into the group | 1\\. User name  <br>2\\. Chat name |\n| CHAT\\_RETURNED | {1} returned to the group {2} | 1\\. Message author  <br>2\\. Chat name |\n| CHAT\\_TITLE\\_EDITED | {1} renamed the group {2} | 1\\. User name  <br>2\\. Group name |\n| CHAT\\_VOICECHAT\\_END | {1} ended a voice chat in the group {2} | 1\\. User name  <br>2\\. Chat name |\n| CHAT\\_VOICECHAT\\_INVITE | {1} invited {3} to a voice chat in the group {2} | 1\\. User name  <br>2\\. Chat name  <br>3\\. Invited users |\n| CHAT\\_VOICECHAT\\_INVITE\\_YOU | {1} invited you to a voice chat in the group {2} | 1\\. User name  <br>2\\. Chat name |\n| CHAT\\_VOICECHAT\\_START | {1} started a voice chat in the group {2} | 1\\. User name  <br>2\\. Chat name |\n| CONTACT\\_JOINED | {1} joined Telegram! | 1\\. Contact name |\n| ENCRYPTED\\_MESSAGE | You have a new message |     |\n| ENCRYPTION\\_ACCEPT | You have a new message |     |\n| ENCRYPTION\\_REQUEST | You have a new message |     |\n| LOCKED\\_MESSAGE | You have a new message |     |\n| MESSAGES | {1} sent you an album | 1\\. User name |\n| MESSAGE\\_AUDIO | {1} sent you a voice message | 1\\. Message author |\n| MESSAGE\\_CONTACT | {1} shared a contact {2} with you | 1\\. User name  <br>2\\. Contact name |\n| MESSAGE\\_DOC | {1} sent you a file | 1\\. User name |\n| MESSAGE\\_DOCS | {1} sent you {2} files | 1\\. User name  <br>2\\. Number of documents that were sent |\n| MESSAGE\\_FWDS | {1} forwarded you {2} messages | 1\\. User name  <br>2\\. Number of messages that were forwarded |\n| MESSAGE\\_GAME | {1} invited you to play {2} | 1\\. User name  <br>2\\. Game name |\n| MESSAGE\\_GAME\\_SCORE | {1} scored {3} in game {2} | 1\\. User name  <br>2\\. Game name  <br>3\\. Score |\n| MESSAGE\\_GEO | {1} sent you a location | 1\\. Message author |\n| MESSAGE\\_GEOLIVE | {1} sent you a live location | 1\\. User name |\n| MESSAGE\\_GIF | {1} sent you a GIF | 1\\. User name |\n| MESSAGE\\_GIFTCODE | {1} sent you a Gift Code for {2} of Telegram Premium | 1\\. User name  <br>2\\. Duration of Telegram Premium subscription |\n| MESSAGE\\_GIVEAWAY | {1} sent you a giveaway of {2}x {3}m Premium subscriptions | 1\\. User name  <br>2\\. Number of Telegram Premium subscriptions in the giveaway  <br>3\\. Duration in months of each Telegram Premium subscription in the giveaway |\n| MESSAGE\\_GIVEAWAY\\_STARS | {1} sent you a giveaway of {3} stars {2} | 1\\. User name  <br>2\\. Number of winners in the giveaway  <br>3\\. Number of Telegram Stars being given away |\n| MESSAGE\\_INVOICE | {1} sent you an invoice for {2} | 1\\. User name  <br>2\\. Product |\n| MESSAGE\\_NOTEXT | {1} sent you a message | 1\\. Message author |\n| MESSAGE\\_PAID\\_MEDIA | {1} sent you a paid post for {2} star | 1\\. Message author  <br>2\\. [Stars](https://core.telegram.org/api/stars) |\n| MESSAGE\\_PHOTO | {1} sent you a photo | 1\\. Message author |\n| MESSAGE\\_PHOTOS | {1} sent you {2} photos | 1\\. User name  <br>2\\. Number of photos that were sent |\n| MESSAGE\\_PHOTO\\_SECRET | {1} sent you a self-destructing photo | 1\\. User name |\n| MESSAGE\\_PLAYLIST | {1} sent you {2} music files | 1\\. User name  <br>2\\. Number of audio files that were sent |\n| MESSAGE\\_POLL | {1} sent you a poll {2} | 1\\. User name  <br>2\\. Poll name |\n| MESSAGE\\_QUIZ | {1} sent you a quiz {2} | 1\\. User name  <br>2\\. Quiz name |\n| MESSAGE\\_RECURRING\\_PAY | You were charged {2} by {1} | 1\\. The entity to which money was sent for a recurring subscription  <br>2\\. The amount of money charged for a recurring subscription |\n| MESSAGE\\_ROUND | {1} sent you a video message | 1\\. User name |\n| MESSAGE\\_SAME\\_WALLPAPER | {1} set a same wallpaper for this chat | 1\\. User name |\n| MESSAGE\\_SCREENSHOT | {1} took a screenshot | 1\\. User name |\n| MESSAGE\\_STARGIFT | {1} sent you a Gift worth {2} Stars | 1\\. User name  <br>2\\. Number of Telegram Stars |\n| MESSAGE\\_STICKER | {1} sent you a {2} sticker | 1\\. User name  <br>2\\. Sticker emoji |\n| MESSAGE\\_STORY | {1} shared a story with you | 1\\. User name |\n| MESSAGE\\_STORY\\_MENTION | {1} mentioned you in a story | 1\\. User name |\n| MESSAGE\\_TEXT | {1}: {2} | 1\\. Message author  <br>2\\. Message body |\n| MESSAGE\\_VIDEO | {1} sent you a video | 1\\. Message author |\n| MESSAGE\\_VIDEOS | {1} sent you {2} videos | 1\\. User name  <br>2\\. Number of videos that were sent |\n| MESSAGE\\_VIDEO\\_SECRET | {1} sent you a self-destructing video | 1\\. User name |\n| MESSAGE\\_WALLPAPER | {1} set a new wallpaper for this chat | 1\\. User name |\n| PHONE\\_CALL\\_MISSED | You missed a call from {1} | 1\\. User name |\n| PHONE\\_CALL\\_REQUEST | {1} is calling you! | 1\\. User name |\n| PINNED\\_AUDIO | {1} pinned a voice message | 1\\. User name |\n| PINNED\\_AUDIO | {1} pinned a voice message in the group {2} | 1\\. User name  <br>2\\. Group name |\n| PINNED\\_CONTACT | {1} pinned a contact {2} | 1\\. User name  <br>2\\. Contact name |\n| PINNED\\_CONTACT | {1} pinned a contact {3} in the group {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Contact name |\n| PINNED\\_DOC | {1} pinned a file | 1\\. User name |\n| PINNED\\_DOC | {1} pinned a file in the group {2} | 1\\. User name  <br>2\\. Group name |\n| PINNED\\_GAME | {1} pinned a game | 1\\. User name |\n| PINNED\\_GAME | {1} pinned a game in the group {2} | 1\\. User name  <br>2\\. Group name |\n| PINNED\\_GAME\\_SCORE | {1} pinned a game score | 1\\. User name |\n| PINNED\\_GAME\\_SCORE | {1} pinned a game score in the group {2} | 1\\. User name  <br>2\\. Group name |\n| PINNED\\_GEO | {1} pinned a map | 1\\. User name |\n| PINNED\\_GEO | {1} pinned a map in the group {2} | 1\\. User name  <br>2\\. Group name |\n| PINNED\\_GEOLIVE | {1} pinned a live location | 1\\. User name |\n| PINNED\\_GEOLIVE | {1} pinned a live location in the group {2} | 1\\. User name  <br>2\\. Group name |\n| PINNED\\_GIF | {1} pinned a GIF | 1\\. User name |\n| PINNED\\_GIF | {1} pinned a GIF in the group {2} | 1\\. User name  <br>2\\. Group name |\n| PINNED\\_GIVEAWAY | {1} pinned a giveaway | 1\\. User name |\n| PINNED\\_GIVEAWAY | {1} pinned a giveaway in the group {2} | 1\\. User name  <br>2\\. Group name |\n| PINNED\\_INVOICE | {1} pinned an invoice | 1\\. User name |\n| PINNED\\_INVOICE | {1} pinned an invoice in the group {2} | 1\\. User name  <br>2\\. Group name |\n| PINNED\\_NOTEXT | {1} pinned a message | 1\\. User name |\n| PINNED\\_NOTEXT | {1} pinned a message in the group {2} | 1\\. User name  <br>2\\. Group name |\n| PINNED\\_PAID\\_MEDIA | {1} pinned a paid post for {2} star | 1\\. User name  <br>2\\. [Stars](https://core.telegram.org/api/stars) |\n| PINNED\\_PAID\\_MEDIA | {1} pinned a paid post for {3} star in the group {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. [Stars](https://core.telegram.org/api/stars) |\n| PINNED\\_PHOTO | {1} pinned a photo | 1\\. User name |\n| PINNED\\_PHOTO | {1} pinned a photo in the group {2} | 1\\. User name  <br>2\\. Group name |\n| PINNED\\_POLL | {1} pinned a poll {2} | 1\\. User name  <br>2\\. Poll name |\n| PINNED\\_POLL | {1} pinned a poll {3} in the group {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Poll name |\n| PINNED\\_QUIZ | {1} pinned a quiz {2} | 1\\. User name  <br>2\\. Quiz name |\n| PINNED\\_QUIZ | {1} pinned a quiz {3} in the group {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Quiz name |\n| PINNED\\_ROUND | {1} pinned a video message | 1\\. User name |\n| PINNED\\_ROUND | {1} pinned a video message in the group {2} | 1\\. User name  <br>2\\. Group name |\n| PINNED\\_STICKER | {1} pinned a {2} sticker | 1\\. User name  <br>2\\. Sticker emoji |\n| PINNED\\_STICKER | {1} pinned a {3} sticker in the group {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Sticker emoji |\n| PINNED\\_TEXT | {1} pinned \"{2}\" | 1\\. User name  <br>2\\. Message body |\n| PINNED\\_TEXT | {1} pinned \"{3}\" in the group {2} | 1\\. User name  <br>2\\. Group name  <br>3\\. Message body |\n| PINNED\\_VIDEO | {1} pinned a video | 1\\. User name |\n| PINNED\\_VIDEO | {1} pinned a video in the group {2} | 1\\. User name  <br>2\\. Group name |\n| REACT\\_AUDIO | {1}: {2} to your voice message | 1\\. User name  <br>2\\. Reaction |\n| REACT\\_CONTACT | {1}: {2} to your contact {3} | 1\\. User name  <br>2\\. Reaction  <br>3\\. Contact name |\n| REACT\\_DOC | {1}: {2} to your file | 1\\. User name  <br>2\\. Reaction |\n| REACT\\_GAME | {1}: {2} to your game | 1\\. User name  <br>2\\. Reaction |\n| REACT\\_GEO | {1}: {2} to your map | 1\\. User name  <br>2\\. Reaction |\n| REACT\\_GEOLIVE | {1}: {2} to your live location | 1\\. User name  <br>2\\. Reaction |\n| REACT\\_GIF | {1}: {2} to your GIF | 1\\. User name  <br>2\\. Reaction |\n| REACT\\_GIVEAWAY | {1} reacted {2} to your giveaway | 1\\. User name  <br>2\\. Reaction |\n| REACT\\_HIDDEN | New reaction to your message |     |\n| REACT\\_INVOICE | {1}: {2} to your invoice | 1\\. User name  <br>2\\. Reaction |\n| REACT\\_NOTEXT | {1}: {2} to your message | 1\\. User name  <br>2\\. Reaction |\n| REACT\\_PHOTO | {1}: {2} to your photo | 1\\. User name  <br>2\\. Reaction |\n| REACT\\_POLL | {1}: {2} to your poll {3} | 1\\. User name  <br>2\\. Reaction  <br>3\\. Poll name |\n| REACT\\_QUIZ | {1}: {2} to your quiz {3} | 1\\. User name  <br>2\\. Reaction  <br>3\\. Quiz name |\n| REACT\\_ROUND | {1}: {2} to your video message | 1\\. User name  <br>2\\. Reaction |\n| REACT\\_STICKER | {1}: {2} to your {3} sticker | 1\\. User name  <br>2\\. Reaction  <br>3\\. Sticker emoji |\n| REACT\\_STORY | {1}: {2} to your story | 1\\. Peer where the story was posted  <br>2\\. Reaction |\n| REACT\\_STORY\\_HIDDEN | New reaction to your story |     |\n| REACT\\_TEXT | {1}: {2} to your \"{3}\" | 1\\. User name  <br>2\\. Reaction  <br>3\\. Message body |\n| REACT\\_VIDEO | {1}: {2} to your video | 1\\. User name  <br>2\\. Reaction |\n| STORY\\_HIDDEN\\_AUTHOR | A new story was posted |     |\n| STORY\\_NOTEXT | {1} posted a story | 1\\. Peer name |",
    "url": "https://core.telegram.org/api/push-updates"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/stats",
      "title": "Channel statistics",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Channel statistics"
        },
        {
          "property": "og:description",
          "content": "Telegram offers detailed channel statistics for channels and supergroups."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:49 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "7135",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Channel statistics\n\nTelegram offers detailed channel statistics for channels and supergroups.\n\n### [](#channel-statistics)Channel statistics\n\nSchema:\n\n```\nstatsDateRangeDays#b637edaf min_date:int max_date:int = StatsDateRangeDays;\n\nstatsAbsValueAndPrev#cb43acde current:double previous:double = StatsAbsValueAndPrev;\n\nstatsPercentValue#cbce2fe0 part:double total:double = StatsPercentValue;\n\nstatsGraphAsync#4a27eb2d token:string = StatsGraph;\nstatsGraphError#bedc9822 error:string = StatsGraph;\nstatsGraph#8ea464b6 flags:# json:DataJSON zoom_token:flags.0?string = StatsGraph;\n\npostInteractionCountersMessage#e7058e7f msg_id:int views:int forwards:int reactions:int = PostInteractionCounters;\npostInteractionCountersStory#8a480e27 story_id:int views:int forwards:int reactions:int = PostInteractionCounters;\n\nstats.broadcastStats#396ca5fc period:StatsDateRangeDays followers:StatsAbsValueAndPrev views_per_post:StatsAbsValueAndPrev shares_per_post:StatsAbsValueAndPrev reactions_per_post:StatsAbsValueAndPrev views_per_story:StatsAbsValueAndPrev shares_per_story:StatsAbsValueAndPrev reactions_per_story:StatsAbsValueAndPrev enabled_notifications:StatsPercentValue growth_graph:StatsGraph followers_graph:StatsGraph mute_graph:StatsGraph top_hours_graph:StatsGraph interactions_graph:StatsGraph iv_interactions_graph:StatsGraph views_by_source_graph:StatsGraph new_followers_by_source_graph:StatsGraph languages_graph:StatsGraph reactions_by_emotion_graph:StatsGraph story_interactions_graph:StatsGraph story_reactions_by_emotion_graph:StatsGraph recent_posts_interactions:Vector<PostInteractionCounters> = stats.BroadcastStats;\n\nmessages.chatFull#e5d7d19c full_chat:ChatFull chats:Vector<Chat> users:Vector<User> = messages.ChatFull;\nchannelFull#bbab348d flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true can_set_location:flags.16?true has_scheduled:flags.19?true can_view_stats:flags.20?true blocked:flags.22?true flags2:# can_delete_channel:flags2.0?true antispam:flags2.1?true participants_hidden:flags2.2?true translations_disabled:flags2.3?true stories_pinned_available:flags2.5?true view_forum_as_messages:flags2.6?true restricted_sponsored:flags2.11?true can_view_revenue:flags2.12?true paid_media_allowed:flags2.14?true can_view_stars_revenue:flags2.15?true paid_reactions_available:flags2.16?true id:long about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int online_count:flags.13?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:flags.23?ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?long migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int folder_id:flags.11?int linked_chat_id:flags.14?long location:flags.15?ChannelLocation slowmode_seconds:flags.17?int slowmode_next_send_date:flags.18?int stats_dc:flags.12?int pts:int call:flags.21?InputGroupCall ttl_period:flags.24?int pending_suggestions:flags.25?Vector<string> groupcall_default_join_as:flags.26?Peer theme_emoticon:flags.27?string requests_pending:flags.28?int recent_requesters:flags.28?Vector<long> default_send_as:flags.29?Peer available_reactions:flags.30?ChatReactions reactions_limit:flags2.13?int stories:flags2.4?PeerStories wallpaper:flags2.7?WallPaper boosts_applied:flags2.8?int boosts_unrestrict:flags2.9?int emojiset:flags2.10?StickerSet = ChatFull;\n\n---functions---\n\nstats.getBroadcastStats#ab42441a flags:# dark:flags.0?true channel:InputChannel = stats.BroadcastStats;\nstats.loadAsyncGraph#621d5fa0 flags:# token:string x:flags.0?long = StatsGraph;\n\nchannels.getFullChannel#8736a09 channel:InputChannel = messages.ChatFull;\n```\n\nAdministrators of [channels](https://core.telegram.org/api/channel) of a certain size (the exact limit is a server-side config, returned in the `can_view_stats` flag of [channelFull](https://core.telegram.org/constructor/channelFull)) can invoke [stats.getBroadcastStats](https://core.telegram.org/method/stats.getBroadcastStats) to get detailed channel statistics.  \nThe query must be sent to the datacenter with ID `channelFull.stats_dc`, obtainable using [channels.getFullChannel](https://core.telegram.org/method/channels.getFullChannel).  \nThe returned [stats.broadcastStats](https://core.telegram.org/constructor/stats.broadcastStats) contains multiple statistics:\n\n*   Period-related statistics: a pair of values, one at the beginning and one at the end of the period in consideration (`period`).  \n    The `period` typically depends on channel activity.\n    *   Absolute follower count (`followers`)\n    *   `total_viewcount/postcount`, for posts posted during the period in consideration (`views_per_post`).  \n        Note that in this case, `current` refers to the `period` in consideration (`min_date` till `max_date`), and `prev` refers to the previous period (`(min_date - (max_date - min_date))` till `min_date`).\n    *   `total_sharecount/postcount`, for posts posted during the period in consideration (`shares_per_post`).  \n        Note that in this case, `current` refers to the `period` in consideration (`min_date` till `max_date`), and `prev` refers to the previous period (`(min_date - (max_date - min_date))` till `min_date`).\n*   Percentage statistics\n    *   Percentage of subscribers with enabled notifications (`enabled_notifications`)\n*   Graphs: [graphs are described below\u00a0\u00bb](#graph-visualization).\n\n### [](#supergroup-statistics)Supergroup statistics\n\nSchema:\n\n```\nstatsGroupTopPoster#9d04af9b user_id:long messages:int avg_chars:int = StatsGroupTopPoster;\nstatsGroupTopInviter#535f779d user_id:long invitations:int = StatsGroupTopInviter;\nstatsGroupTopAdmin#d7584c87 user_id:long deleted:int kicked:int banned:int = StatsGroupTopAdmin;\n\nstats.megagroupStats#ef7ff916 period:StatsDateRangeDays members:StatsAbsValueAndPrev messages:StatsAbsValueAndPrev viewers:StatsAbsValueAndPrev posters:StatsAbsValueAndPrev growth_graph:StatsGraph members_graph:StatsGraph new_members_by_source_graph:StatsGraph languages_graph:StatsGraph messages_graph:StatsGraph actions_graph:StatsGraph top_hours_graph:StatsGraph weekdays_graph:StatsGraph top_posters:Vector<StatsGroupTopPoster> top_admins:Vector<StatsGroupTopAdmin> top_inviters:Vector<StatsGroupTopInviter> users:Vector<User> = stats.MegagroupStats;\n\nmessages.chatFull#e5d7d19c full_chat:ChatFull chats:Vector<Chat> users:Vector<User> = messages.ChatFull;\nchannelFull#bbab348d flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true can_set_location:flags.16?true has_scheduled:flags.19?true can_view_stats:flags.20?true blocked:flags.22?true flags2:# can_delete_channel:flags2.0?true antispam:flags2.1?true participants_hidden:flags2.2?true translations_disabled:flags2.3?true stories_pinned_available:flags2.5?true view_forum_as_messages:flags2.6?true restricted_sponsored:flags2.11?true can_view_revenue:flags2.12?true paid_media_allowed:flags2.14?true can_view_stars_revenue:flags2.15?true paid_reactions_available:flags2.16?true id:long about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int online_count:flags.13?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:flags.23?ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?long migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int folder_id:flags.11?int linked_chat_id:flags.14?long location:flags.15?ChannelLocation slowmode_seconds:flags.17?int slowmode_next_send_date:flags.18?int stats_dc:flags.12?int pts:int call:flags.21?InputGroupCall ttl_period:flags.24?int pending_suggestions:flags.25?Vector<string> groupcall_default_join_as:flags.26?Peer theme_emoticon:flags.27?string requests_pending:flags.28?int recent_requesters:flags.28?Vector<long> default_send_as:flags.29?Peer available_reactions:flags.30?ChatReactions reactions_limit:flags2.13?int stories:flags2.4?PeerStories wallpaper:flags2.7?WallPaper boosts_applied:flags2.8?int boosts_unrestrict:flags2.9?int emojiset:flags2.10?StickerSet = ChatFull;\n\n---functions---\n\nstats.getMegagroupStats#dcdf8607 flags:# dark:flags.0?true channel:InputChannel = stats.MegagroupStats;\n\nchannels.getFullChannel#8736a09 channel:InputChannel = messages.ChatFull;\n```\n\nAdministrators of [supergroups](https://core.telegram.org/api/channel) of a certain size (the exact limit is a server-side config, returned in the `can_view_stats` flag of [channelFull](https://core.telegram.org/constructor/channelFull)) can call [stats.getMegagroupStats](https://core.telegram.org/method/stats.getMegagroupStats) to get detailed supergroup statistics.  \nThe query must be sent to the datacenter with ID `channelFull.stats_dc`, obtainable using [channels.getFullChannel](https://core.telegram.org/method/channels.getFullChannel).  \nThe returned [stats.broadcastStats](https://core.telegram.org/constructor/stats.broadcastStats) contains multiple statistics, see the [constructor page for more info\u00a0\u00bb](https://core.telegram.org/constructor/stats.broadcastStats).\n\n### [](#message-statistics)Message statistics\n\n```\nstats.messageStats#7fe91c14 views_graph:StatsGraph reactions_by_emotion_graph:StatsGraph = stats.MessageStats;\n\nmessages.chatFull#e5d7d19c full_chat:ChatFull chats:Vector<Chat> users:Vector<User> = messages.ChatFull;\nchannelFull#bbab348d flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true can_set_location:flags.16?true has_scheduled:flags.19?true can_view_stats:flags.20?true blocked:flags.22?true flags2:# can_delete_channel:flags2.0?true antispam:flags2.1?true participants_hidden:flags2.2?true translations_disabled:flags2.3?true stories_pinned_available:flags2.5?true view_forum_as_messages:flags2.6?true restricted_sponsored:flags2.11?true can_view_revenue:flags2.12?true paid_media_allowed:flags2.14?true can_view_stars_revenue:flags2.15?true paid_reactions_available:flags2.16?true id:long about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int online_count:flags.13?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:flags.23?ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?long migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int folder_id:flags.11?int linked_chat_id:flags.14?long location:flags.15?ChannelLocation slowmode_seconds:flags.17?int slowmode_next_send_date:flags.18?int stats_dc:flags.12?int pts:int call:flags.21?InputGroupCall ttl_period:flags.24?int pending_suggestions:flags.25?Vector<string> groupcall_default_join_as:flags.26?Peer theme_emoticon:flags.27?string requests_pending:flags.28?int recent_requesters:flags.28?Vector<long> default_send_as:flags.29?Peer available_reactions:flags.30?ChatReactions reactions_limit:flags2.13?int stories:flags2.4?PeerStories wallpaper:flags2.7?WallPaper boosts_applied:flags2.8?int boosts_unrestrict:flags2.9?int emojiset:flags2.10?StickerSet = ChatFull;\n\n---functions---\n\nstats.getMessageStats#b6e0a3f5 flags:# dark:flags.0?true channel:InputChannel msg_id:int = stats.MessageStats;\n\nchannels.getFullChannel#8736a09 channel:InputChannel = messages.ChatFull;\n\nstats.getMessagePublicForwards#5f150144 channel:InputChannel msg_id:int offset:string limit:int = stats.PublicForwards;\n```\n\nAdministrators of [channels](https://core.telegram.org/api/channel) of a certain size (the exact limit is a server-side config, returned in the `can_view_stats` flag of [channelFull](https://core.telegram.org/constructor/channelFull)) can invoke [stats.getMessageStats](https://core.telegram.org/method/stats.getMessageStats) to get statistics of a specific message.  \nThe query must be sent to the datacenter with ID `channelFull.stats_dc`, obtainable using [channels.getFullChannel](https://core.telegram.org/method/channels.getFullChannel).  \nThe returned [stats.messageStats](https://core.telegram.org/constructor/stats.messageStats) contains the view graph of the message.\n\n[stats.getMessagePublicForwards](https://core.telegram.org/method/stats.getMessagePublicForwards) may also be used to obtain a list of messages, indicating to which other public channels was a channel message forwarded: it will return a list of [messages](https://core.telegram.org/constructor/message) with `peer_id` equal to the public channel to which this message was forwarded.\n\n### [](#story-statistics)Story statistics\n\n```\nstats.storyStats#50cd067c views_graph:StatsGraph reactions_by_emotion_graph:StatsGraph = stats.StoryStats;\n\npublicForwardMessage#1f2bf4a message:Message = PublicForward;\npublicForwardStory#edf3add0 peer:Peer story:StoryItem = PublicForward;\n\nstats.publicForwards#93037e20 flags:# count:int forwards:Vector<PublicForward> next_offset:flags.0?string chats:Vector<Chat> users:Vector<User> = stats.PublicForwards;\n\n---functions---\n\nstats.getStoryStats#374fef40 flags:# dark:flags.0?true peer:InputPeer id:int = stats.StoryStats;\n\nstats.getStoryPublicForwards#a6437ef6 peer:InputPeer id:int offset:string limit:int = stats.PublicForwards;\n```\n\nUse [stats.getStoryStats](https://core.telegram.org/method/stats.getStoryStats) to obtain statistics about a story.\n\nUse [stats.getStoryPublicForwards](https://core.telegram.org/method/stats.getStoryPublicForwards) to obtain forwards of a story as a message to public chats and reposts by public channels.\n\n## [](#graph-visualization)Graph visualization\n\nThere are four available visualizations for graph types:\n\n*   [Line graph](#line-graph)\n*   [Step graph](#step-graph)\n*   [Bar graph](#bar-graph)\n*   [Area graph](#area-graph)\n\nGraph modifiers (see [various graphs](#graph-examples) for examples):\n\n*   `y_scaled` - Indicates that each of the two (!) lines in a step graph must be visualized on its own scale, with two different tick axes on the left and right parts of the graph\n*   `percentage` - Indicates whether value percentages should be shown in labels\n*   `stacked` - Depending on the graph type, indicates stacking of multiple columns in the same graph\n\n### [](#graph-syntax)Graph syntax\n\n```\nstatsGraphAsync#4a27eb2d token:string = StatsGraph;\nstatsGraphError#bedc9822 error:string = StatsGraph;\nstatsGraph#8ea464b6 flags:# json:DataJSON zoom_token:flags.0?string = StatsGraph;\n\ndataJSON#7d748d04 data:string = DataJSON;\n\n---functions---\n\nstats.loadAsyncGraph#621d5fa0 flags:# token:string x:flags.0?long = StatsGraph;\n```\n\nCertain graphs are not directly sent in the [stats.broadcastStats](https://core.telegram.org/constructor/stats.broadcastStats) constructor to reduce server load: instead, those graphs will be sent as a [statsGraphAsync](https://core.telegram.org/constructor/statsGraphAsync) constructor, and should be fetched separately using [stats.loadAsyncGraph](https://core.telegram.org/method/stats.loadAsyncGraph).\n\nAfter obtaining the full [statsGraph](https://core.telegram.org/constructor/statsGraph) constructor, clients should parse the JSON graph object in the `json` field.\n\nObject structure:\n\n| Key | Graph title |\n| --- | --- |\n| columns | Array of all data column arrays in the chart. Each column array has its **label** at position 0, followed by values. |\n| types | [Graphs types](#graph-visualization) for each of the column arrays (object, `\"label\": \"type\"`):  <br>\\- `line` - [line graph](#line-graph)  <br>\\- `area` - [area graph](#area-graph)  <br>\\- `step` - [step graph](#step-graph)  <br>\\- `bar` - [bar graph](#bar-graph)  <br>\\- `x` - x axis values for each of the charts at the corresponding positions, UNIX timestamps in milliseconds. |\n| colors | Color for each type (object, `\"label\": \"colorKey#AAAAAA\"`; see [chart colors](#chart-colors)). |\n| names | Localized name for each variable (object, `\"label\": \"Name\"`) |\n| subchart | Object indicating the default zoom range for the graph, this is object's structure:  <br>\\- `show` - Whether to use the specified zoom range (boolean)  <br>\\- `defaultZoom` - An array with two `x` values, indicating the two ends of the default zoom range |\n| y\\_scaled | Indicates that each of the two (!) lines in a step graph must be visualized on its own scale, with two different tick axes on the left and right parts of the graph (boolean, see [various graphs](#graph-examples) for examples) |\n| percentage | Indicates whether value percentages should be shown in labels (boolean, see [various graphs](#graph-examples) for examples) |\n| stacked | Depending on the graph type, indicates stacking of multiple columns in the same graph (boolean, see [various graphs](#graph-examples) for examples) |\n\nThe following chart restrictions apply:\n\n*   Up to 50 columns on one graph must be supported.\n*   Chart types are always the same for every column in the graph.\n*   The `bar` chart type and `stacked` option are always used together.\n*   `percentage` is always used with the `area` graph.\n\n### [](#chart-zooming)Chart zooming\n\n```\nstatsGraphError#bedc9822 error:string = StatsGraph;\nstatsGraph#8ea464b6 flags:# json:DataJSON zoom_token:flags.0?string = StatsGraph;\n\ndataJSON#7d748d04 data:string = DataJSON;\n\n---functions---\n\nstats.loadAsyncGraph#621d5fa0 flags:# token:string x:flags.0?long = StatsGraph;\n```\n\nGraphs that support zooming will contain a `zoom_token` in the [statsGraph](https://core.telegram.org/constructor/statsGraph) constructor.  \nSaid token should be then used as `token` in a new [stats.loadAsyncGraph](https://core.telegram.org/method/stats.loadAsyncGraph) call triggered when the user clicks on the label, related to a certain x axis in the graph (see [graph examples](#graph-examples)).  \nThe `x` coordinate of the label should be provided to the `x` parameter; the method will then return (if available) a more detailed subgraph.  \nIf not enough data is available, a localized [statsGraphError](https://core.telegram.org/constructor/statsGraphError) will be returned.\n\nTypical zoom _visualization_ rules:\n\n*   Any `percentage` graph (even if a `zoom_token` is not available) => [pie chart](#piechart)\n*   [line graph](#line-graph) => [line graph](#line-graph)\n*   [step graph](#step-graph) => [step graph](#step-graph)\n*   [bar graph](#bar-graph) => [bar graph](#bar-graph)\n*   [area graph](#area-graph) => [area graph](#area-graph)\n\n### [](#chart-colors)Chart colors\n\nChart colors can be provided as a color key, followed by the primary color value in hex format:\n\n```\nred#e05356\n```\n\nThe color key can be one of `red`, `lightblue`, `lightgreen`, `golden`, `green`, `orange`, `blue`, `indigo`.  \nApps can choose to use a color value specified by the currently loaded theme: for example, the [android app](https://github.com/DrKLO/Telegram/blob/dceccae0b74576d092fb3b2accaffded2c0b5f63/TMessagesProj/src/main/java/org/telegram/ui/Charts/data/ChartData.java#L81) uses `statisticChartLine_*` themekeys for each of the color keys, check out the [assets directory](https://github.com/DrKLO/Telegram/tree/master/TMessagesProj/src/main/assets) for a bunch of default themes with various colors for channel statistics.\n\nHowever, the server may also choose to return just a plain color value in hex format:\n\n```\n#e05356\n```\n\nIn this case, the `dark` flag of the [stats.getBroadcastStats](https://core.telegram.org/method/stats.getBroadcastStats) method can be used to choose the palette of returned colors.\n\n## [](#graph-examples)Graph examples\n\n### [](#line-graph)Line graph\n\nSimple single line graph\n\n### [](#step-graph)Step graph\n\nStep graph, always \"stacked\" (to indicate multiple lines)\n\n### [](#bar-graph)Bar graph\n\nBar graph with multiple lines, always \"stacked\" (to indicate actual stacked bars, biggest bars first)\n\n### [](#area-graph)Area graph\n\nMixed bar/line graph, always \"stacked\" (to indicate actual stacked bars, biggest bars first)\n\n### [](#piechart)Piechart\n\nPie chart, typically obtained only when zooming into percentage graphs",
    "url": "https://core.telegram.org/api/stats"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/invoking",
      "title": "Calling API Methods",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Calling API Methods"
        },
        {
          "property": "og:image",
          "content": "5901cb4c908e540453"
        },
        {
          "property": "og:description",
          "content": "Additional options for calling methods."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:50 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5067",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Calling API Methods\n\n### [](#layers)Layers\n\nVersioning in the API is supported by so-called TL layers.\n\nThe need to add a new object constructor or to add/remove a field in a constructor creates a backwards compatibility problem for previous versions of API clients. After all, simply changing a constructor in a schema also changes its number. To address this problem, each schema update is separated into a layer.\n\nA layer is a collection of updated methods or constructors in a TL schema. Each layer is numbered with sequentially increasing numbers starting with 2. The first layer is the base layer -- the TL schema without any changes.\n\nThere is a helper method to let the API know that a client supports the Layer `layer`:\n\n```\ninvokeWithLayer#da9b0d0d {X:Type} layer:int query:!X = X;\n```\n\nThe helper method **[invokeWithLayer](https://core.telegram.org/method/invokeWithLayer)** can be used only together with [initConnection](https://core.telegram.org/method/initConnection): the present layer will be saved with all other parameters of the client and any future requests will be using this saved value. [See more below](#saving-client-info).\n\n#### [](#list-of-available-layers)[List of Available Layers](https://core.telegram.org/api/layers)\n\n### [](#saving-client-info)Saving Client Info\n\nIt is possible to save information about the current client on the server in conjunction with an authorization key. This may help eliminate client-side problems with certain releases on certain devices or with certain localizations, as well as eliminate the need for sending layer information in each request.\n\nThe helper method **[initConnection](https://core.telegram.org/method/initConnection)** accepts client parameters. This method must be called when first calling the API after the application has restarted or in case the value of one of the parameters could have changed.\n\n**initConnection** must also be called after each [auth.bindTempAuthKey](https://core.telegram.org/method/auth.bindTempAuthKey).\n\nWhen calling this method, the current layer used by the client is also saved (the layer in which [initConnection](https://core.telegram.org/method/initConnection) was wrapped is used). After a successful call to [initConnection](https://core.telegram.org/method/initConnection) it is no longer necessary to wrap each API call in **invokeWithLayerN**.\n\n### [](#disabling-updates)Disabling updates\n\n```\ninvokeWithoutUpdates#bf9459b7 {X:Type} query:!X = X;\n```\n\n[invokeWithoutUpdates](https://core.telegram.org/method/invokeWithoutUpdates) can be used to invoke a request without subscribing the used connection for [updates](https://core.telegram.org/api/updates) (this is enabled by default for [file queries](https://core.telegram.org/api/files)).\n\n### [](#sequential-requests)Sequential Requests\n\nBy default, the server processes parallel requests in arbitrary order. Two helper methods exist for cases when the client needs certain requests to be processed in a certain order and intends to send a new request before the previous one is completed.  \nThese methods allow reducing the latency for calls which require strict ordering, since the client doesn't have to wait for the result of the previous method call before sending the next one in the queue, and can just send them all together, (for example) each wrapped in an `invokeAfterMsg` with the `msg_id` of the previous request.\n\n[invokeAfterMsg](https://core.telegram.org/method/invokeAfterMsg)#cb9f372d {X:Type} msg\\_id:long query:!X = X;  \n[invokeAfterMsgs](https://core.telegram.org/method/invokeAfterMsgs)#3dc4b4f0 {X:Type} msg\\_ids:Vector query:!X = X;\n\nThey may be used, for example, when a client attempts to send messages that accumulated while waiting for the Internet connection to be restored for a long time. In this case, the 32-bit number `0xcb9f372d` must be added before the method number in each request, followed by a 64-bit message identifier, msg\\_id, which contains the previous request in the queue.\n\nThe second method is similar, except it takes several messages that must be successfully processed before the current one.\n\nIf the waiting period exceeds 0.5 seconds (this value may change in the future) and no result has appeared, the method will return the `MSG_WAIT_TIMEOUT` error: handle this error by resending the request, still wrapped in the same `invokeAfterMsg`/`invokeAfterMsgs` constructor with the same `id`/`ids`.\n\nIf any of the previous queries mentioned in `msg_ids` or `msg_id` fails (i.e. an RPC error is emitted by a query, including `FLOOD_WAIT_` errors), a `MSG_WAIT_FAILED` error will be returned for the current request: the simplest way to handle it is to simply enforce local synchronization, by waiting for a response from all previous `msg_ids`/`msg_id` before resending the request.\n\nIf and only if any of the previous requests also failed with `MSG_WAIT_FAILED`/`MSG_WAIT_TIMEOUT` errors and require resending, wrap the current request in another `invokeAfterMsg`/`invokeAfterMsgs` constructor with the new IDs of the previous requests, resent along with the current one.\n\n#### [](#scenario-1)Scenario 1\n\nTo clarify, assume the following sequence of queries:\n\n1.  msg\\_id=1; `messages.sendMessage message=a`\n2.  msg\\_id=2; `invokeAfterMsg msg_id=1 (messages.sendMessage message=b)`\n3.  msg\\_id=3; `invokeAfterMsg msg_id=2 (messages.sendMessage message=c)`\n\n##### [](#scenario-11)Scenario 1.1\n\nIf the first messages.sendMessage query with `msg_id=1` fails, both queries with `msg_id=2` and `msg_id=3` will fail with a `MSG_WAIT_FAILED` and will have to be resent as follows.  \nTo recover the call queue, send the following new sequence of queries:\n\n1.  msg\\_id=4; `messages.sendMessage message=b` (resending the old query with `msg_id=2`)\n2.  msg\\_id=5; `invokeAfterMsg msg_id=4 (messages.sendMessage message=c)` (resending the old query with `msg_id=3`)\n\n##### [](#scenario-12)Scenario 1.2\n\nIf the first messages.sendMessage query with `msg_id=1` succeeds but the second with `msg_id=2` fails, the query with `msg_id=3` will fail with a `MSG_WAIT_FAILED` and will have to be resent as follows.  \nTo recover the call queue, send the following new sequence of queries:\n\n1.  msg\\_id=4; `messages.sendMessage message=c` (resending the old query with `msg_id=3`)\n\n#### [](#scenario-2)Scenario 2\n\nNow assume the following, different sequence of queries:\n\n1.  msg\\_id=1; `messages.sendMessage message=a`\n2.  msg\\_id=2; `messages.sendMessage message=b`\n3.  msg\\_id=3; `invokeAfterMsgs msg_ids=[1, 2] (messages.sendMessage message=c)`\n\nIf either or both of the messages.sendMessage queries with `msg_id=1` and/or `msg_id=2` fail, the query with `msg_id=3` will also fail with a `MSG_WAIT_FAILED` and will have to be resent as follows.\n\nTo recover the call queue, first of all wait for a response from the queries with `msg_id=1` and `msg_id=2`.\n\nNote how this is different from scenario 1, where we don't have to wait for a response from the previous queries: this is because in scenario 1, each `invokeAfterMsg` query was directly waiting for just one previous query, and any new query in the queue is chained to the previous `invokeAfterMsg`, thus any failure of any query with `msg_id=N` in the chain immediately blocked execution of all queries with `msg_id <= N`.  \nIn this case, however, we're waiting for two messages at the same time, and the failure of the query with `msg_id=1` does not prevent execution of the query with `msg_id=2`, and vice versa; thus when resending the query with `msg_id=3` we have to either:\n\n*   Wait for replies (errors or successes) for **all** of the queries mentioned in `msg_ids`, and then send the following new query:\n    \n    *   msg\\_id=4; `messages.sendMessage message=c` (resending the old query with `msg_id=3`)\n*   OR Wait for the receival of an RPC error for any of the queries mentioned in `msg_ids`, and then send the following new query:\n    \n    *   msg\\_id=4; `invokeAfterMsgs msg_ids=([1, 2] - [$errId]) (messages.sendMessage message=c)` (resending the old query with `msg_id=3`)\n    \n    I.e. resend the `invokeAfterMsgs` with all the initial `msg_ids` except for the one that failed.  \n    It may be required to repeat the process if the newly sent `invokeAfterMsgs` also fails because the remaining query mentioned in `msg_ids` also failed (i.e. if queries `1` and `2` both fail at slightly different times).\n    \n    Obviously the first option (waiting for replies (errors or successes) for **all** of the queries mentioned before proceeding) is the simplest.\n    \n\nAn even simpler option is to always follow [Scenario 1](#scenario-1), never using `invokeAfterMsgs` and only using chained `invokeAfterMsg` calls, thus avoiding the use of this slightly more complicated recovery logic.\n\n#### [](#helper-method-sequence)Helper Method Sequence\n\n**Important:** if the helper methods **invokeAfterMsg** / **invokeAfterMsgs** are used together with **invokeWithLayerN** or other helper methods, **invokeAfterMsg** / **invokeAfterMsgs** must always be the outermost wrapper.\n\n### [](#data-compression)Data Compression\n\nWe recommend using gzip compression when calling methods to reduce the amount of network traffic.\n\nThe schema and constructor information are given in the [protocol documentation](https://core.telegram.org/mtproto/service_messages#packed-object).\n\n#### [](#data-compression-when-making-a-request)Data Compression when Making a Request\n\nBefore transmitting a query, the string containing the entire body of the serialized high-level query (starting with the method number) must be compressed using gzip. If the resulting string is smaller than the original, it makes sense to transmit the [gzip\\_packed](https://core.telegram.org/mtproto/service_messages#packed-object) constructor.\n\nThere is no point in doing the above when transmitting binary multimedia data (photos, videos) or small messages (up to 255 bytes).\n\n#### [](#decompressing-data)Decompressing Data\n\nBy default, the server compresses the response to any request as well as [updates](https://core.telegram.org/api/updates), in accordance with the rules stated above. If the [gzip\\_packed](https://core.telegram.org/mtproto/service_messages#packed-object) constructor is received as a response in rpc\\_result, then the string that follows must be extracted and uncompressed. Processing then continues on the resulting new string.",
    "url": "https://core.telegram.org/api/invoking"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/offsets",
      "title": "Pagination in the API",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Pagination in the API"
        },
        {
          "property": "og:image",
          "content": "4dd378cd0f58b0b820"
        },
        {
          "property": "og:description",
          "content": "How to fetch results from large lists of objects."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:55 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3139",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Pagination in the API\n\nLots of Telegram API methods provide access to potentially large lists of objects, which requires pagination.\n\nIn order to fetch only relevant subset of results for each request there is a number of available input parameters. Here is a list in order how they are applied in API.\n\nTypically, results are returned in reverse chronological order with descending object ID values.\n\n### [](#limit-parameter)`limit` parameter\n\nA limit on the number of objects to be returned, typically between 1 and 100. When 0 is provided the limit will often default to an intermediate value like ~20.\n\n### [](#offset-based-pagination)`offset`\\-based pagination\n\nFor a few methods with mostly static data this parameter allows to skip `offset` elements from the beginning of list; negative values are allowed in some cases.\n\n### [](#offset-id-based-pagination)`offset_id`\\-based pagination\n\nFor most methods where results are real-time data (e.g. any chat history) `offset` value is not passed directly. Instead it is calculated from the passed `offset_id` and `add_offset` parameter values as `offsetFromID(offset_id) + add_offset`, where `offsetFromID(offset_id)` is a number of results from the beginning of list up to the result with ID `offset_id`, inclusive.\n\nSample use cases:\n\n*   Loading 20 messages, older than message with ID `MSGID`:\n    \n    messages.getHistory({offset\\_id: MSGID, add\\_offset: 0, limit: 20})\n    \n*   Loading 20 messages, newer than message with ID `MSGID`:\n    \n    messages.getHistory({offset\\_id: MSGID, add\\_offset: -20, limit: 20})\n    \n*   Loading 20 messages around message with ID `MSGID`:\n    \n    messages.getHistory({offset\\_id: MSGID, add\\_offset: -10, limit: 20})\n    \n\n### [](#additional-filtering)Additional filtering\n\nThere is a number of parameters, which are applied to the list after slicing with offset and limit, to reduce the result subset even more:\n\n*   **max\\_id**: Can be used to only return results with ID strictly smaller than `max_id` (e.g. message ID)\n*   **min\\_id**: Can be used to only return results with ID strictly greater than `min_id`(e.g. message ID)\n*   **max\\_date**: Can be used to only return results that are older than `max_date`:\n*   **min\\_date**: Can be used to only return results with are newer than `min_date`:\n*   **hash**: See below.\n\n### [](#hash-generation)Hash generation\n\nTo further reduce the result subset, there is a mechanism to avoid fetching data if the resulting list hasn't changed from the one stored on client, similar to [ETag](https://en.wikipedia.org/wiki/HTTP_ETag).\n\nWhen the client has cached results for API request, it can calculate the `hash` value for it by taking the result IDs (message IDs or other fields with name `id`, or some extra fields in some cases) and using them to compute a 64-bit hash with the following algorithm:\n\n```\n# Here, ^ indicates a bitwise XOR\n\nhash = 0\nfor id in ids:\n    hash = hash ^ (hash >> 21)\n    hash = hash ^ (hash << 35)\n    hash = hash ^ (hash >> 4)\n    hash = hash + id\n```\n\nThe `>>` operator is the unsigned right shift operator.\n\nNote: in some cases, the `ids` array passed to the algorithm must contain strings (i.e. the shortcut name in business shortcuts, and so on...), in which case they must be transformed to longs by taking the first 8 bytes of the MD5 hash of the string (**not** in hex form) and treating it as a big-endian 64-bit long.\n\nIn some cases, if the result container already has a `hash` field, that can be used instead.\n\nWhen the client passes a correct value, the API will return one of `*NotModified` constructors, e.g. [messages.messagesNotModified](https://core.telegram.org/constructor/messages.messagesNotModified) instead of the actual results.\n\n### [](#example-methods)Example methods\n\n*   [messages.getHistory](https://core.telegram.org/method/messages.getHistory) supports all result navigation parameters including message ID hashes and except filters\n*   [channels.getParticipants](https://core.telegram.org/method/channels.getParticipants) supports simple navigation using **limit** and **offset**, along with filtering and `hash` reducing using the user IDs of returned participants",
    "url": "https://core.telegram.org/api/offsets"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/files",
      "title": "Uploading and Downloading Files",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Uploading and Downloading Files"
        },
        {
          "property": "og:image",
          "content": "1937a1be855ea8fce8"
        },
        {
          "property": "og:description",
          "content": "How to transfer large data batches correctly."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:54 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "16583",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Uploading and Downloading Files\n\nWhen working with the API, it is sometimes necessary to send a relatively large file to the server. For example, when sending a message with a photo/video attachment or when setting the current user's profile picture.\n\n### [](#uploading-files)Uploading files\n\nThere are a number of API methods to save files. The schema of the types and methods used is presented below:\n\n```\ninputFile#f52ff27f id:long parts:int name:string md5_checksum:string = InputFile;\ninputFileBig#fa4f0bb5 id:long parts:int name:string = InputFile;\n\n\ninputEncryptedFileUploaded#64bd0306 id:long parts:int md5_checksum:string key_fingerprint:int = InputEncryptedFile;\ninputEncryptedFileBigUploaded#2dc173c8 id:long parts:int key_fingerprint:int = InputEncryptedFile;\n\ninputSecureFileUploaded#3334b0f0 id:long parts:int md5_checksum:string file_hash:bytes secret:bytes = InputSecureFile;\ninputSecureFile#5367e5be id:long access_hash:long = InputSecureFile;\n\ninputMediaUploadedPhoto#1e287d04 flags:# spoiler:flags.2?true file:InputFile stickers:flags.0?Vector<InputDocument> ttl_seconds:flags.1?int = InputMedia;\ninputMediaUploadedDocument#5b38c6c1 flags:# nosound_video:flags.3?true force_file:flags.4?true spoiler:flags.5?true file:InputFile thumb:flags.2?InputFile mime_type:string attributes:Vector<DocumentAttribute> stickers:flags.0?Vector<InputDocument> ttl_seconds:flags.1?int = InputMedia;\n\ninputChatUploadedPhoto#bdcdaec0 flags:# file:flags.0?InputFile video:flags.1?InputFile video_start_ts:flags.2?double video_emoji_markup:flags.3?VideoSize = InputChatPhoto;\n\n\n---functions---\n\nmessages.sendMedia#7852834e flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\nmessages.uploadMedia#14967978 flags:# business_connection_id:flags.0?string peer:InputPeer media:InputMedia = MessageMedia;\nmessages.sendEncryptedFile#5559481d flags:# silent:flags.0?true peer:InputEncryptedChat random_id:long data:bytes file:InputEncryptedFile = messages.SentEncryptedMessage;\n\nphotos.uploadProfilePhoto#388a3b5 flags:# fallback:flags.3?true bot:flags.5?InputUser file:flags.0?InputFile video:flags.1?InputFile video_start_ts:flags.2?double video_emoji_markup:flags.4?VideoSize = photos.Photo;    \n\nupload.saveFilePart#b304a621 file_id:long file_part:int bytes:bytes = Bool;\nupload.saveBigFilePart#de7b673d file_id:long file_part:int file_total_parts:int bytes:bytes = Bool;\n```\n\nBefore transmitting the contents of the file itself, the file has to be assigned a unique 64-bit client identifier: **file\\_id**.\n\nThe file's binary content is then split into parts. All parts must have the same size (**part\\_size**) and the following conditions must be met:\n\n*   `part_size % 1024 = 0` (divisible by 1KB)\n*   `524288 % part_size = 0` (512KB must be evenly divisible by **part\\_size**)\n\nThe last part does not have to satisfy these conditions, provided its size is less than **part\\_size**.\n\nThe following [appConfig fields](https://core.telegram.org/api/config#client-configuration) specify the maximum number of uploadable file parts:\n\n*   [upload\\_max\\_fileparts\\_default \u00bb](https://core.telegram.org/api/config#upload-max-fileparts-default) - Maximum number of file parts uploadable by non-Premium users.\n*   [upload\\_max\\_fileparts\\_premium \u00bb](https://core.telegram.org/api/config#upload-max-fileparts-premium) - Maximum number of file parts uploadable by Premium users.\n\nNote that the limit of uploadable file parts does not account for the **part\\_size**: thus the total file size limit can only be reached with the biggest possible **part\\_size** of 512KB, which is actually the recommended **part\\_size** to avoid excessive protocol overhead.\n\nEach part should have a sequence number, **file\\_part**, with a value ranging from 0 to the value of the appropriate config parameter minus 1.\n\nAfter the file has been partitioned you need to choose a method for saving it on the server. Use [upload.saveBigFilePart](https://core.telegram.org/method/upload.saveBigFilePart) in case the full size of the file is more than **10 MB** and [upload.saveFilePart](https://core.telegram.org/method/upload.saveFilePart) for smaller files.\n\nEach call saves a portion of the data in a temporary location on the server to be used later. The storage life of each portion of data is between several minutes and several hours (depending on how busy the storage area is). After this time, the file part will become unavailable.\n\nTo increase the time efficiency of a file save operation, we recommend using a (local, i.e. **not** with invokeAfterMsgs) call queue, so X pieces of the file are being saved at any given moment in time. Each successful operation to save a part invokes the method call to save the next part. The value of X can be tuned to achieve maximum performance.\n\nTo further increase performance, multiple parallel call queues (i.e. a tunable number Y of queues) linked to separate TCP connections to the datacenters can be used to upload multiple chunks in parallel.\n\nWhen using one of the methods mentioned above to save file parts, one of the following [data input errors](https://core.telegram.org/api/errors#400-bad-request) may be returned:\n\n*   FILE\\_PARTS\\_INVALID - Invalid number of parts. The value is not between `1..upload_max_fileparts_*`\n*   FILE\\_PART\\_INVALID: The file part number is invalid. The value is not between `0` and `upload_max_fileparts_*-1`.\n*   FILE\\_PART\\_TOO\\_BIG: The size limit (512 KB) for the content of the file part has been exceeded\n*   FILE\\_PART\\_EMPTY: The file part sent is empty\n*   FILE\\_PART\\_SIZE\\_INVALID - 512KB cannot be evenly divided by **part\\_size**\n*   FILE\\_PART\\_SIZE\\_CHANGED - The part size is different from the size of one of the previous parts in the same file\n*   FLOOD\\_PREMIUM\\_WAIT\\_X: Indicates that upload speed is limited because the current account does not have a [Premium](https://core.telegram.org/api/premium) subscription, and that the query must be automatically repeated by the client after X seconds.  \n    When receiving this error, clients should display the [Telegram Premium subscription modal](https://core.telegram.org/api/premium), offering the user to purchase a Premium subscription to increase upload speed [upload\\_premium\\_speedup\\_upload\u00a0\u00bb](https://core.telegram.org/api/config#upload-premium-speedup-upload) times.  \n    Note that this modal should only be displayed if the file that is being uploaded is currently visible to the user; if it isn't, the modal should be displayed once the loading/already loaded media becomes visible.  \n    Also, this modal should only be shown **at most** every [upload\\_premium\\_speedup\\_notify\\_period\u00a0\u00bb](https://core.telegram.org/api/config#upload-premium-speedup-notify-period), to avoid bombarding the user with this popup for every file whose upload is slowed down.  \n    This error can only be received when the user has uploaded tens of gigabytes or more.\n\nWhile the parts are being uploaded, an [MD5 hash](https://en.wikipedia.org/wiki/MD5) of the file contents can also be computed to be used later as the **md5\\_checksum** parameter in the [inputFile](https://core.telegram.org/constructor/inputFile) constructor (since it is checked only by the server, for encrypted secret chat files it must be generated from the encrypted file).  \nAfter the entire file is successfully saved, the final method may be called and passed the generated [inputFile](https://core.telegram.org/type/InputFile) object. In case the [upload.saveBigFilePart](https://core.telegram.org/method/upload.saveBigFilePart) method is used, the [inputFileBig](https://core.telegram.org/constructor/inputFileBig) constructor must be passed, in other cases use [inputFile](https://core.telegram.org/constructor/inputFile).\n\n*   [messages.sendMedia](https://core.telegram.org/method/messages.sendMedia) - Sends a media file to a chat\n*   [messages.uploadMedia](https://core.telegram.org/method/messages.uploadMedia) - Uploads a media file to a chat, without sending it, returning only a [MessageMedia](https://core.telegram.org/type/MessageMedia) constructor that can be used to later send the file to multiple chats, without reuploading it every time.\n*   [photos.uploadProfilePhoto](https://core.telegram.org/method/photos.uploadProfilePhoto) - Used to set a [profile or chat picture or video](#uploading-profile-or-chat-pictures)\n\nThe file save operation may return one of the following [data input errors](https://core.telegram.org/api/errors#400-bad-request):\n\n*   FILE\\_PARTS\\_INVALID: The number of file parts is invalid The value is not between 1 and `upload_max_fileparts_*`.\n*   FILE\\_PART\\_X\\_MISSING: Part X (where X is a number) of the file is missing from storage. Try repeating the method call to resave the part.\n*   MD5\\_CHECKSUM\\_INVALID: The file's MD5 checksum did not match the **md5\\_checksum** parameter\n\n#### [](#editing-uploaded-files)Editing uploaded files\n\n```\ninputMediaPhoto#b3ba0635 flags:# spoiler:flags.1?true id:InputPhoto ttl_seconds:flags.0?int = InputMedia;\ninputMediaDocument#33473058 flags:# spoiler:flags.2?true id:InputDocument ttl_seconds:flags.0?int query:flags.1?string = InputMedia;\n\n\ninputMediaUploadedPhoto#1e287d04 flags:# spoiler:flags.2?true file:InputFile stickers:flags.0?Vector<InputDocument> ttl_seconds:flags.1?int = InputMedia;\ninputMediaUploadedDocument#5b38c6c1 flags:# nosound_video:flags.3?true force_file:flags.4?true spoiler:flags.5?true file:InputFile thumb:flags.2?InputFile mime_type:string attributes:Vector<DocumentAttribute> stickers:flags.0?Vector<InputDocument> ttl_seconds:flags.1?int = InputMedia;\n\n---functions---\n\nmessages.editMessage#dfd14005 flags:# no_webpage:flags.1?true invert_media:flags.16?true peer:InputPeer id:int message:flags.11?string media:flags.14?InputMedia reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.15?int quick_reply_shortcut_id:flags.17?int = Updates;\n```\n\nUse [messages.editMessage](https://core.telegram.org/method/messages.editMessage) to edit or replace a media file sent using [messages.sendMedia](https://core.telegram.org/method/messages.sendMedia) and [messages.sendMultiMedia](https://core.telegram.org/method/messages.sendMultiMedia).\n\nIf one wishes to edit only the `spoiler`, `ttl_seconds` or `query` attributes of the media, this may be done without reuploading the entire media file, by simply passing the old media to the `id` parameter of [inputMediaPhoto](https://core.telegram.org/constructor/inputMediaPhoto), [inputMediaDocument](https://core.telegram.org/constructor/inputMediaDocument) and updating the values of the `spoiler`/`ttl_seconds`/`query` attributes as needed.\n\nIf one wishes to edit any other attribute (for example, the file name specified in [documentAttributeFilename](https://core.telegram.org/constructor/documentAttributeFilename), any other [DocumentAttribute](https://core.telegram.org/type/DocumentAttribute) or any flag different from `spoiler`/`ttl_seconds`/`query`) **a full reupload of the file is required**, in order to be able to specify the new attributes in [inputMediaUploadedPhoto](https://core.telegram.org/constructor/inputMediaUploadedPhoto)/[inputMediaUploadedDocument](https://core.telegram.org/constructor/inputMediaUploadedDocument).\n\nThe only exception to this rule is when editing the [documentAttributeVideo](https://core.telegram.org/constructor/documentAttributeVideo).`video_start_ts` attribute of video [stories](https://core.telegram.org/api/stories), in which case [inputMediaDocument](https://core.telegram.org/constructor/inputMediaDocument) may still be used with [inputFileStoryDocument](https://core.telegram.org/constructor/inputFileStoryDocument) instead of [inputFile](https://core.telegram.org/constructor/inputFile) without reuploading the entire story video, see [here\u00a0\u00bb](https://core.telegram.org/api/stories#editing-stories) for more info on the full flow.\n\n#### [](#streamed-uploads)Streamed uploads\n\nThe API also supports streamed uploads, in cases where the length of the file is not known before starting the upload.\n\nThis is useful for example when converting a video, to avoid buffering the entire converted video on the filesystem, each part is uploaded immediately as soon as it is produced by the encoder.\n\nEverything works similarly to [normal uploads](#uploading-files), with a few key differences:\n\n*   The client buffers `part_size` bytes (or less if the stream ends) before immediately uploading the part as described [in the previous section](#uploading-files).\n*   A `total_stream_size` variable must be used to keep track of the total number of bytes read from the stream.\n*   [upload.saveBigFilePart](https://core.telegram.org/method/upload.saveBigFilePart) must always be used, even if the stream turns out to be smaller than 10MB.\n*   The `file_total_parts` field must be set to `-1` for all parts except for the last one, using the following logic:\n    *   If the stream ends and the length of the buffered part is bigger than 0, upload it, setting `file_total_parts=ceil(total_stream_size/part_size)` (like for normal uploads)\n    *   If the stream ends and the length of the buffered part is equal to 0, upload it anyway (upload one last empty part), setting `file_total_parts=ceil(total_stream_size/part_size)` (like for normal uploads)\n\nNote that streamed uploads cannot be used when uploading photos with [inputMediaUploadedPhoto](https://core.telegram.org/constructor/inputMediaUploadedPhoto).\n\n#### [](#video-qualities)Video qualities\n\n```\nmessageMediaDocument#dd570bd5 flags:# nopremium:flags.3?true spoiler:flags.4?true video:flags.6?true round:flags.7?true voice:flags.8?true document:flags.0?Document alt_documents:flags.5?Vector<Document> ttl_seconds:flags.2?int = MessageMedia;\n\nupdateNewScheduledMessage#39a51dfb message:Message = Update;\nupdateDeleteScheduledMessages#f2a71983 flags:# peer:Peer messages:Vector<int> sent_messages:flags.0?Vector<int> = Update;\n```\n\nWhen sending videos to big channels, Telegram will automatically convert them, generating multiple versions in multiple qualities and formats, available to users in the `alt_documents` vector of the sent [messageMediaDocument](https://core.telegram.org/constructor/messageMediaDocument).\n\nNote that if the [video\\_ignore\\_alt\\_documents client configuration flag \u00bb](https://core.telegram.org/api/config#video-ignore-alt-documents) set and equal to true, the [messageMediaDocument](https://core.telegram.org/constructor/messageMediaDocument).`alt_documents` field must be ignored by clients.\n\nSince server-side processing takes some time, videos sent to big channels will not be sent immediately after invoking sendMedia/sendMultiMedia: instead, they will be added to the schedule queue similarly to [scheduled messages \u00bb](https://core.telegram.org/api/scheduled-messages), with schedule date equal to the approximated server-side conversion date:\n\n*   Immediately after invoking sendMedia an [updateNewScheduledMessage](https://core.telegram.org/constructor/updateNewScheduledMessage) will be returned, containing a [message](https://core.telegram.org/constructor/message) with ID equal to the ID of the message in the schedule queue for the current chat (each PM, chat, supergroup and channel has its own schedule queue and ID sequence), **the `video_processing_pending` flag set** and `date` equal to the **estimated conversion date** (not the schedule date).\n*   Approximately at `date`, an [updateNewMessage](https://core.telegram.org/constructor/updateNewMessage) or [updateNewChannelMessage](https://core.telegram.org/constructor/updateNewChannelMessage) with the `from_scheduled` flag set, indicating to the sender that the specified message with pending video processing was sent.\n*   Approximately at `date`, an [updateDeleteScheduledMessages](https://core.telegram.org/constructor/updateDeleteScheduledMessages), indicating that the message was flushed from the schedule queue.  \n    The `messages` field will contain the scheduled message IDs for the sent messages (initially returned in [updateNewScheduledMessage](https://core.telegram.org/constructor/updateNewScheduledMessage)), and `sent_messages` will contain the real message IDs for the sent messages.  \n    The scheduled and real message ID for a given message will be at the same vector index, in `messages` and `sent_messages` respectively.\n\nIn other words, these messages should be treated similarly to [scheduled messages \u00bb](https://core.telegram.org/api/scheduled-messages).\n\n#### [](#albums-grouped-media)Albums, grouped media\n\n```\ninputMediaUploadedPhoto#1e287d04 flags:# spoiler:flags.2?true file:InputFile stickers:flags.0?Vector<InputDocument> ttl_seconds:flags.1?int = InputMedia;\ninputMediaUploadedDocument#5b38c6c1 flags:# nosound_video:flags.3?true force_file:flags.4?true spoiler:flags.5?true file:InputFile thumb:flags.2?InputFile mime_type:string attributes:Vector<DocumentAttribute> stickers:flags.0?Vector<InputDocument> ttl_seconds:flags.1?int = InputMedia;\n\ninputSingleMedia#1cc6e91f flags:# media:InputMedia random_id:long message:string entities:flags.0?Vector<MessageEntity> = InputSingleMedia;\n\n---functions---\n\nmessages.sendMultiMedia#37b74355 flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo multi_media:Vector<InputSingleMedia> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\n```\n\nTelegram allows grouping photos into [albums](https://telegram.org/blog/albums-saved-messages) and generic files (audio, docuemnts) into media groups.\n\nTo do this, [messages.sendMultiMedia](https://core.telegram.org/method/messages.sendMultiMedia) is used, wrapping each [InputMedia](https://core.telegram.org/type/InputMedia) constructor (uploaded or pre-existing, maximum 10 per media group) into an [inputSingleMedia](https://core.telegram.org/constructor/inputSingleMedia) constructor, optionally providing a custom per-file caption in `message`.\n\nFor photo albums, clients should display an album caption only if exactly one photo in the group has a caption, otherwise no album caption should be displayed, and only when viewing in detail a specific photo of the group the caption should be shown.  \nOther grouped media can display a caption under each file.\n\n#### [](#uploading-by-hash)Uploading by hash\n\n```\ndocument#8fd4c4d8 flags:# id:long access_hash:long file_reference:bytes date:int mime_type:string size:long thumbs:flags.0?Vector<PhotoSize> video_thumbs:flags.1?Vector<VideoSize> dc_id:int attributes:Vector<DocumentAttribute> = Document;\n\n---functions---\n\nmessages.getDocumentByHash#b1f2061f sha256:bytes size:long mime_type:string = Document;\n```\n\nFor some types of documents like GIFs, [messages.getDocumentByHash](https://core.telegram.org/method/messages.getDocumentByHash) can be used to search for the document on Telegram servers. The SHA256 hash of the file is computed, and it is passed along with the file's mime type and size to the method: if the file type is correct and the file is found, a [document](https://core.telegram.org/constructor/document) is returned.\n\n### [](#uploading-profile-or-chat-pictures)Uploading profile or chat pictures\n\n```\nphoto#fb197a65 flags:# has_stickers:flags.0?true id:long access_hash:long file_reference:bytes date:int sizes:Vector<PhotoSize> video_sizes:flags.1?Vector<VideoSize> dc_id:int = Photo;\n\nphotos.photo#20212ca8 photo:Photo users:Vector<User> = photos.Photo;\n\ninputPhoto#3bb3b94a id:long access_hash:long file_reference:bytes = InputPhoto;\n\ninputFile#f52ff27f id:long parts:int name:string md5_checksum:string = InputFile;\n\nvideoSizeEmojiMarkup#f85c413c emoji_id:long background_colors:Vector<int> = VideoSize;\nvideoSizeStickerMarkup#da082fe stickerset:InputStickerSet sticker_id:long background_colors:Vector<int> = VideoSize;\n\ninputChatUploadedPhoto#bdcdaec0 flags:# file:flags.0?InputFile video:flags.1?InputFile video_start_ts:flags.2?double video_emoji_markup:flags.3?VideoSize = InputChatPhoto;\ninputChatPhoto#8953ad37 id:InputPhoto = InputChatPhoto;\n\nemojiListNotModified#481eadfa = EmojiList;\nemojiList#7a1e11d1 hash:long document_id:Vector<long> = EmojiList;\n\n---functions---\n\nphotos.updateProfilePhoto#9e82039 flags:# fallback:flags.0?true bot:flags.1?InputUser id:InputPhoto = photos.Photo;\nphotos.uploadProfilePhoto#388a3b5 flags:# fallback:flags.3?true bot:flags.5?InputUser file:flags.0?InputFile video:flags.1?InputFile video_start_ts:flags.2?double video_emoji_markup:flags.4?VideoSize = photos.Photo;\n\nmessages.editChatPhoto#35ddd674 chat_id:long photo:InputChatPhoto = Updates;\n\nchannels.editPhoto#f12e57c9 channel:InputChannel photo:InputChatPhoto = Updates;\n\naccount.getDefaultProfilePhotoEmojis#e2750328 hash:long = EmojiList;\naccount.getDefaultGroupPhotoEmojis#915860ae hash:long = EmojiList;\n```\n\nUser profile pictures can be uploaded using the [photos.uploadProfilePhoto](https://core.telegram.org/method/photos.updateProfilePhoto) method: the actual profile picture has to be [uploaded as for normal files](#uploading-files).  \n[photos.uploadProfilePhoto](https://core.telegram.org/method/photos.updateProfilePhoto) can also be used to reupload previously uploaded profile pictures.\n\nThe optional `bot` flag can contain info of a [bot](https://core.telegram.org/api/bots) we own, to change the profile photo of that bot, instead of the current user.\n\n#### [](#animated-profile-pictures)Animated profile pictures\n\nAnimated profile pictures are also supported, by populating the `video` flag: square MPEG4 videos up to `1080x1080` are supported, `800x800` is the recommended resolution.  \nThe `video_start_ts` is a floating point UNIX timestamp in seconds, indicating the frame of the video that should be used as static preview.\n\n[Chat, channel and supergroup](https://core.telegram.org/api/channel) profile photos and videos can be uploaded using [messages.editChatPhoto](https://core.telegram.org/method/messages.editChatPhoto) ([basic groups](https://core.telegram.org/api/channel#basic-groups)) or [channels.editPhoto](https://core.telegram.org/method/channels.editPhoto) ([channels, supergroups](https://core.telegram.org/api/channel)).  \nUse the [inputChatPhoto](https://core.telegram.org/constructor/inputChatPhoto) to reuse previously uploaded profile pictures.\n\n#### [](#sticker-profile-pictures)Sticker profile pictures\n\n[Sticker](https://core.telegram.org/api/stickers) and [custom emoji sticker](https://core.telegram.org/api/custom-emoji)\\-based profile pictures are also supported, by populating the `video_emoji_markup` flag with either a [videoSizeStickerMarkup](https://core.telegram.org/constructor/videoSizeStickerMarkup) or a [videoSizeEmojiMarkup](https://core.telegram.org/constructor/videoSizeEmojiMarkup) constructor.\n\nThe profile picture should be rendered by placing the sticker at the center of a square canvas, in such a way that it occupies at most 67% of it. The background of the canvas is generated from `background_colors`, which contains a vector of 1, 2, 3 or 4 RBG-24 colors used to generate a solid (1), gradient (2) or freeform gradient (3, 4) background, similar to how [fill wallpapers](https://core.telegram.org/api/wallpapers#fill-types) are generated. The rotation angle for gradient backgrounds is 0.  \nIf animated or video stickers/custom emojis are used, the `video_start_ts` flag can contain a floating point UNIX timestamp in seconds, indicating the frame of the profile picture that should be used as static preview.\n\n[account.getDefaultProfilePhotoEmojis](https://core.telegram.org/method/account.getDefaultProfilePhotoEmojis) may be used to fetch a list of suggested [custom emojis](https://core.telegram.org/api/custom-emoji) that can be used as profile pictures even by non-premium accounts; [account.getDefaultGroupPhotoEmojis](https://core.telegram.org/method/account.getDefaultGroupPhotoEmojis) is the counterpart for group profile pictures.\n\nThe custom emoji selection UI should offer a list of categories to quickly filter results by a (list of) emojis, or by some other criteria, see [here\u00a0\u00bb](https://core.telegram.org/api/emoji-categories) for more info.\n\n### [](#downloading-files)Downloading files\n\nThere are methods available to download files which have been successfully uploaded. The schema of the types and methods used is presented below:\n\n```\nupload.file#96a18d5 type:storage.FileType mtime:int bytes:bytes = upload.File;\nupload.fileCdnRedirect#f18cda44 dc_id:int file_token:bytes encryption_key:bytes encryption_iv:bytes file_hashes:Vector<FileHash> = upload.File;\n\nstorage.fileUnknown#aa963b05 = storage.FileType;\nstorage.fileJpeg#7efe0e = storage.FileType;\nstorage.fileGif#cae1aadf = storage.FileType;\nstorage.filePng#a4f63c0 = storage.FileType;\nstorage.fileMp3#528a0677 = storage.FileType;\nstorage.fileMov#4b09ebbc = storage.FileType;\nstorage.filePartial#40bc6f52 = storage.FileType;\nstorage.fileMp4#b3cea0e4 = storage.FileType;\nstorage.fileWebp#1081464c = storage.FileType;\n\n---functions---\n\nupload.getFile#be5335be flags:# precise:flags.0?true cdn_supported:flags.1?true location:InputFileLocation offset:long limit:int = upload.File;\n```\n\nAny file can be downloaded by calling [upload.getFile](https://core.telegram.org/method/upload.getFile). The data for the input parameter of the [InputFileLocation](https://core.telegram.org/type/InputFileLocation) type is generated as follows:\n\n```\ninputFileLocation#dfdaabe1 volume_id:long local_id:int secret:long file_reference:bytes = InputFileLocation;\ninputEncryptedFileLocation#f5235d55 id:long access_hash:long = InputFileLocation;\ninputDocumentFileLocation#bad07584 id:long access_hash:long file_reference:bytes thumb_size:string = InputFileLocation;\ninputSecureFileLocation#cbc7ee28 id:long access_hash:long = InputFileLocation;\ninputTakeoutFileLocation#29be5899 = InputFileLocation;\ninputPhotoFileLocation#40181ffe id:long access_hash:long file_reference:bytes thumb_size:string = InputFileLocation;\ninputPhotoLegacyFileLocation#d83466f3 id:long access_hash:long file_reference:bytes volume_id:long local_id:int secret:long = InputFileLocation;\ninputPeerPhotoFileLocation#37257e99 flags:# big:flags.0?true peer:InputPeer photo_id:long = InputFileLocation;\ninputStickerSetThumb#9d84f3db stickerset:InputStickerSet thumb_version:int = InputFileLocation;\ninputGroupCallStream#598a92a flags:# call:InputGroupCall time_ms:long scale:int video_channel:flags.0?int video_quality:flags.0?int = InputFileLocation;\n\ninputStickerSetEmpty#ffb62b95 = InputStickerSet;\ninputStickerSetID#9de7a269 id:long access_hash:long = InputStickerSet;\ninputStickerSetShortName#861cc8a0 short_name:string = InputStickerSet;\ninputStickerSetAnimatedEmoji#28703c8 = InputStickerSet;\ninputStickerSetDice#e67f520e emoticon:string = InputStickerSet;\ninputStickerSetAnimatedEmojiAnimations#cde3739 = InputStickerSet;\n\ninputPeerSelf#7da07ec9 = InputPeer;\ninputPeerChat#35a95cb9 chat_id:long = InputPeer;\ninputPeerUser#dde8a54c user_id:long access_hash:long = InputPeer;\ninputPeerChannel#27bcbbfc channel_id:long access_hash:long = InputPeer;\n\nphoto#fb197a65 flags:# has_stickers:flags.0?true id:long access_hash:long file_reference:bytes date:int sizes:Vector<PhotoSize> video_sizes:flags.1?Vector<VideoSize> dc_id:int = Photo;\ndocument#8fd4c4d8 flags:# id:long access_hash:long file_reference:bytes date:int mime_type:string size:long thumbs:flags.0?Vector<PhotoSize> video_thumbs:flags.1?Vector<VideoSize> dc_id:int attributes:Vector<DocumentAttribute> = Document;\n\nphotoSize#75c78e60 type:string w:int h:int size:int = PhotoSize;\nphotoCachedSize#21e1ad6 type:string w:int h:int bytes:bytes = PhotoSize;\n\nchatPhoto#1c6e1c11 flags:# has_video:flags.0?true photo_id:long stripped_thumb:flags.1?bytes dc_id:int = ChatPhoto;\nuserProfilePhoto#82d1f706 flags:# has_video:flags.0?true personal:flags.2?true photo_id:long stripped_thumb:flags.1?bytes dc_id:int = UserProfilePhoto;\n```\n\n*   For photos, [inputPhotoFileLocation](https://core.telegram.org/constructor/inputPhotoFileLocation) is used:\n    \n    *   `id`, `file_reference` and `access_hash` taken from the [photo](https://core.telegram.org/constructor/photo) constructor\n    *   `thumb_size` taken from the `type` field of the desired [PhotoSize](https://core.telegram.org/type/PhotoSize)/[VideoSize](https://core.telegram.org/type/VideoSize) of the [photo](https://core.telegram.org/constructor/photo)\n*   For profile pictures of users, channels, supergroups and groups, [inputPeerPhotoFileLocation](https://core.telegram.org/constructor/inputPeerPhotoFileLocation) has to be used:\n    \n    *   `peer` is the identifier of the peer whose photo we want to download\n    *   `big` is used to choose whether to download the full-resolution picture, or just the thumbnail\n    *   `photo_id` is extracted from the [chatPhoto](https://core.telegram.org/constructor/chatPhoto) or [userProfilePhoto](https://core.telegram.org/constructor/userProfilePhoto) of the desired profile photo\n*   For documents, [inputDocumentFileLocation](https://core.telegram.org/constructor/inputDocumentFileLocation) is used:\n    \n    *   `id`, `file_reference` and `access_hash` taken from the [document](https://core.telegram.org/constructor/document) constructor\n    *   If downloading the thumbnail of a document or a [premium sticker effect](https://core.telegram.org/api/stickers#premium-animated-sticker-effects), `thumb_size` should be taken from the `type` field of the desired [PhotoSize](https://core.telegram.org/type/PhotoSize)/[VideoSize](https://core.telegram.org/type/VideoSize) of the [photo](https://core.telegram.org/constructor/photo); otherwise, provide an empty string.\n*   For previews of sticker sets, [inputStickerSetThumb](https://core.telegram.org/constructor/inputStickerSetThumb) is used (note: to download stickers and previews of stickers use the document method described above for documents):\n    \n    *   `stickerset` is set to the [InputStickerSet](https://core.telegram.org/type/InputStickerSet) constructor generated from [stickerSet](https://core.telegram.org/constructor/stickerSet)\n    *   `thumb_version` is copied from the same field in [stickerSet](https://core.telegram.org/constructor/stickerSet)\n*   For encrypted secret chat and telegram passport documents, respectively [inputEncryptedFileLocation](https://core.telegram.org/constructor/inputEncryptedFileLocation) and [inputSecureFileLocation](https://core.telegram.org/constructor/inputSecureFileLocation) have to be used, with parameters extracted from [encryptedFile](https://core.telegram.org/constructor/encryptedFile) and [secureFile](https://core.telegram.org/constructor/secureFile) ([passport docs](https://core.telegram.org/passport)).\n    \n*   For livestream chunks, [inputGroupCallStream](https://core.telegram.org/constructor/inputGroupCallStream) is used:\n    \n    *   `call` contains the related group call ID+access hash, taken from the [groupCall](https://core.telegram.org/constructor/groupCall) constructor.\n    *   `time_ms` specifies the timestamp to fetch\n    *   `scale` specifies the duration of the video segment to fetch in milliseconds, by bitshifting `1000` to the right `scale` times: `duration_ms := 1000 >> scale`\n    *   `video_channel` specifies the video channel to fetch\n    *   `video_quality` specifies the selected video quality (0 = lowest, 1 = medium, 2 = best)\n*   For old **deprecated** photos, if the client has cached some old fileLocations with the **deprecated** `secret` identifier, [inputFileLocation](https://core.telegram.org/constructor/inputFileLocation) or [inputPhotoLegacyFileLocation](https://core.telegram.org/constructor/inputPhotoLegacyFileLocation) is used (this is mainly used for backwards compatibility with bot API file IDs, all user clients must use the modern [inputPhotoFileLocation](https://core.telegram.org/constructor/inputPhotoFileLocation) file IDs):\n    \n    *   All fields are taken from the previously cached fileLocation except for `file_reference`, `access_hash` and `id`, which are taken from the [photo](https://core.telegram.org/constructor/photo) constructor (the last two fields are used only if available, in which case [inputPhotoLegacyFileLocation](https://core.telegram.org/constructor/inputPhotoLegacyFileLocation) is used instead of [inputFileLocation](https://core.telegram.org/constructor/inputFileLocation)).\n\nThe size of each file in bytes is available, which makes it possible to download the file in parts using the parameters **offset** and **limit**, similar to the way files are uploaded.\n\nIf **precise** flag is not specified, then\n\n*   The parameter **offset** must be divisible by 4 KB.\n*   The parameter **limit** must be divisible by 4 KB.\n*   1048576 (1 MB) must be divisible by **limit**.\n\nIf **precise** is specified, then\n\n*   The parameter **offset** must be divisible by 1 KB.\n*   The parameter **limit** must be divisible by 1 KB.\n*   **limit** must not exceed 1048576 (1 MB).\n\nIn any case the requested part should be within one 1 MB chunk from the beginning of the file, i. e.\n\n*   **offset** / (1024 \\* 1024) == (**offset** + **limit** - 1) / (1024 \\* 1024).\n\nWhen downloading multiple files in parallel from the same DC, clients should limit the parallelism to download at most `small_queue_max_active_operations_count`/`large_queue_max_active_operations_count` files in parallel when downloading files smaller/bigger than 20MB ([client configuration parameters\u00a0\u00bb](https://core.telegram.org/api/config#client-configuration)).\n\nThe file download operation may return a `FILE_REFERENCE_EXPIRED` error (or another error starting with `FILE_REFERENCE_`): in this case, the `file_reference` field of the input location must be [refreshed](https://core.telegram.org/api/file_reference). The file download operation may return an [upload.fileCdnRedirect](https://core.telegram.org/constructor/upload.fileCdnRedirect) constructor: in this case, [these](https://core.telegram.org/cdn) instructions must be followed for downloading CDN files. The file download operation may also return one of the following [data input errors](https://core.telegram.org/api/errors#400-bad-request):\n\n*   FILE\\_ID\\_INVALID: The file address is invalid\n*   OFFSET\\_INVALID: The **offset** value is invalid\n*   LIMIT\\_INVALID: The **limit** value is invalid\n*   FILE\\_MIGRATE\\_X: The file is in the datacenter No. X\n*   FLOOD\\_WAIT\\_X: Repeat the query after X seconds\n*   FLOOD\\_PREMIUM\\_WAIT\\_X: Indicates that download speed is limited because the current account does not have a [Premium](https://core.telegram.org/api/premium) subscription, and that the query must be automatically repeated by the client after X seconds.  \n    When receiving this error, clients should display the [Telegram Premium subscription modal](https://core.telegram.org/api/premium), offering the user to purchase a Premium subscription to increase download speed [upload\\_premium\\_speedup\\_download\u00a0\u00bb](https://core.telegram.org/api/config#upload-premium-speedup-download) times.  \n    Note that this modal should only be displayed if the file that is being downloaded is currently visible to the user; if it isn't, the modal should be displayed once the loading/already loaded media becomes visible.  \n    Also, this modal should only be shown **at most** every [upload\\_premium\\_speedup\\_notify\\_period\u00a0\u00bb](https://core.telegram.org/api/config#upload-premium-speedup-notify-period), to avoid bombarding the user with this popup for every file whose download is slowed down.  \n    This error can only be received when the user has uploaded tens of gigabytes or more.\n\n#### [](#verifying-downloaded-chunks)Verifying downloaded chunks\n\n```\nfileHash#f39b035c offset:long limit:int hash:bytes = FileHash;\n\n---functions---\n\nupload.getFileHashes#9156982a location:InputFileLocation offset:long = Vector<FileHash>;\n```\n\nIn order to confirm the integrity of the downloaded file, clients are recommended to verify hashes for each downloaded part, as for [CDN DCs](https://core.telegram.org/cdn). [upload.getFileHashes](https://core.telegram.org/method/upload.getFileHashes) contain [FileHash](https://core.telegram.org/type/FileHash) constructors. Each of these constructors contains the SHA-256 hash of a part of the file that starts with `offset` and takes `limit` bytes.\n\nBefore saving each portion of the data received from the DC into the file, the client can confirm that its hash matches the hash that was received from the master DC. If missing a hash for any file part, client developers must use the [upload.getFileHashes](https://core.telegram.org/method/upload.getFileHashes) method to obtain the missing hash.\n\n#### [](#handling-audio-video-and-vector-previews)Handling audio, video and vector previews\n\nSchema:\n\n```\nphotoSizeEmpty#e17e23c type:string = PhotoSize;\nphotoSize#75c78e60 type:string w:int h:int size:int = PhotoSize;\nphotoCachedSize#21e1ad6 type:string w:int h:int bytes:bytes = PhotoSize;\nphotoStrippedSize#e0b0bc2e type:string bytes:bytes = PhotoSize;\nphotoSizeProgressive#fa3efb95 type:string w:int h:int sizes:Vector<int> = PhotoSize;\nphotoPathSize#d8214d41 type:string bytes:bytes = PhotoSize;\n\nvideoSize#de33b094 flags:# type:string w:int h:int size:int video_start_ts:flags.0?double = VideoSize;\n\ndocument#8fd4c4d8 flags:# id:long access_hash:long file_reference:bytes date:int mime_type:string size:long thumbs:flags.0?Vector<PhotoSize> video_thumbs:flags.1?Vector<VideoSize> dc_id:int attributes:Vector<DocumentAttribute> = Document;\nphoto#fb197a65 flags:# has_stickers:flags.0?true id:long access_hash:long file_reference:bytes date:int sizes:Vector<PhotoSize> video_sizes:flags.1?Vector<VideoSize> dc_id:int = Photo;\n\nphoto#fb197a65 flags:# has_stickers:flags.0?true id:long access_hash:long file_reference:bytes date:int sizes:Vector<PhotoSize> video_sizes:flags.1?Vector<VideoSize> dc_id:int = Photo;\n```\n\nTelegram attaches a vector of thumbnails with reduced resolution to all uploaded media.  \nThe server also generates a trimmed and scaled down video preview for videos, GIFs and animated profile pictures.\n\n#### [](#image-thumbnail-types)Image thumbnail types\n\nEach photo preview has a specific `type`, indicating the resolution and image transform that was applied server-side.\n\n| Type | Image filter | Size |\n| --- | --- | --- |\n| `s` | box | 100x100 |\n| `m` | box | 320x320 |\n| `x` | box | 800x800 |\n| `y` | box | 1280x1280 |\n| `w` | box | 2560x2560 |\n| `a` | crop | 160x160 |\n| `b` | crop | 320x320 |\n| `c` | crop | 640x640 |\n| `d` | crop | 1280x1280 |\n\nSpecial types:\n\n| Type | Image filter |\n| --- | --- |\n| `i` | strip |\n| `j` | outline |\n\n#### [](#stripped-thumbnails)Stripped thumbnails\n\n```\nphotoStrippedSize#e0b0bc2e type:string bytes:bytes = PhotoSize;\n```\n\nA [photoStrippedSize](https://core.telegram.org/constructor/photoStrippedSize) (with type `i`) is an extremely low-res thumbnail, embedded directly inside media location objects.  \nIt should be shown to the user in chat message previews, or while still downloading the most appropriately sized [photoSize](https://core.telegram.org/constructor/photoSize) through the media DCs as [described above](#downloading-files).\n\nThe stripped `bytes` payload should be inflated to a JPG payload as seen [here\u00a0\u00bb](https://github.com/telegramdesktop/tdesktop/blob/1757dd856b84d23f83d4e562c94dde825f6eb40c/Telegram/SourceFiles/ui/image/image.cpp#L43).\n\n#### [](#vector-thumbnails)Vector thumbnails\n\n```\nphotoPathSize#d8214d41 type:string bytes:bytes = PhotoSize;\n```\n\nMessages with [animated](https://core.telegram.org/api/stickers#animated-stickers), [video](https://core.telegram.org/api/stickers#video-stickers), [static](https://core.telegram.org/api/stickers#static-stickers) stickers can have a compressed svg (< 300 bytes) to show the outline of the sticker before fetching the actual sticker. Sticker outlines will have a `j` type [photoPathSize](https://core.telegram.org/constructor/photoPathSize) thumbnail.\n\nThis specific vector thumbnail consists of an [SVG path](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths), specially encoded to save space.  \nThis path will be the outline of the animated sticker, and should be shown to the user while downloading the actual sticker.\n\nThe payload should be inflated using the following algorithm:\n\n```\nencoded := photoPathSize.bytes\n\nlookup := \"AACAAAAHAAALMAAAQASTAVAAAZaacaaaahaaalmaaaqastava.az0123456789-,\"\n\npath := \"M\"\n\nlen := strlen(encoded)\nfor (i = 0; i < len; i++) {\n  num := ord(encoded[i])\n  if (num >= 128 + 64) {\n    path += lookup[num - 128 - 64]\n  } else {\n    if (num >= 128) {\n      path += ','\n    } else if (num >= 64) {\n      path += '-'\n    }\n    path += itoa(num & 63)\n  }\n}\npath += \"z\"\n```\n\n`path` will contain the actual SVG path that can be directly inserted in the `d` attribute of an [svg <path> element](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/path):\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n   viewBox=\"0 0 512 512\" xml:space=\"preserve\">\n<path d=\"{$path}\"/>\n</svg>\n```\n\n#### [](#video-types)Video types\n\n```\nvideoSize#de33b094 flags:# type:string w:int h:int size:int video_start_ts:flags.0?double = VideoSize;\n```\n\nA [videoSize](https://core.telegram.org/constructor/videoSize) constructor is typically used for [animated profile pictures](#animated-profile-pictures), video previews and [premium sticker effects\u00a0\u00bb](https://core.telegram.org/api/stickers#premium-animated-sticker-effects).\n\n| Type | Description | Format |\n| --- | --- | --- |\n| `u` | Animated profile picture | MPEG4 |\n| `v` | Video preview | MPEG4 |\n| `f` | [Premium sticker effect\u00a0\u00bb](https://core.telegram.org/api/stickers#premium-animated-sticker-effects) | [TGS\u00a0\u00bb](https://core.telegram.org/api/stickers#animated-stickers) |\n\n### [](#downloading-webfiles)Downloading webfiles\n\nRemote HTTP files sent by inline bots [in response to inline queries](https://core.telegram.org/type/BotInlineResult) and in other places are represented by [WebDocument](https://core.telegram.org/type/WebDocument) constructors. When forwarding such remote HTTP files, they should be sent using [external InputMedia constructors](https://core.telegram.org/type/InputMedia). Remote HTTP files can only be downloaded directly by the client if contained in a [webDocumentNoProxy](https://core.telegram.org/constructor/webDocumentNoProxy) constructor: in this case, the file is deemed safe to download (this is the case for HTTPS files from certain trusted domains).\n\nHowever, if the remote file is contained in a [webDocument](https://core.telegram.org/constructor/webDocument), to avoid leaking sensitive information the file must be downloaded through telegram's servers. This can be done in a manner similar to [normal files](#downloading-files), with the difference that [upload.getWebFile](https://core.telegram.org/method/upload.getWebFile) must be used, instead.\n\nThe [upload.getWebFile](https://core.telegram.org/method/upload.getWebFile) method is also used to generate preview pictures for maps and download music file covers, as follows.\n\n**Note**: the [upload.getWebFile](https://core.telegram.org/method/upload.getWebFile) query must be sent to the DC specified in the `webfile_dc_id` [MTProto configuration field](https://core.telegram.org/api/config#mtproto-configuration).\n\n```\nupload.webFile#21e753bc size:int mime_type:string file_type:storage.FileType mtime:int bytes:bytes = upload.WebFile;\n\nstorage.fileUnknown#aa963b05 = storage.FileType;\nstorage.fileJpeg#7efe0e = storage.FileType;\nstorage.fileGif#cae1aadf = storage.FileType;\nstorage.filePng#a4f63c0 = storage.FileType;\nstorage.fileMp3#528a0677 = storage.FileType;\nstorage.fileMov#4b09ebbc = storage.FileType;\nstorage.filePartial#40bc6f52 = storage.FileType;\nstorage.fileMp4#b3cea0e4 = storage.FileType;\nstorage.fileWebp#1081464c = storage.FileType;\n\n ---functions---\n\nupload.getWebFile#24e6818d location:InputWebFileLocation offset:int limit:int = upload.WebFile;\n```\n\nThe [InputWebFileLocation](https://core.telegram.org/type/InputWebFileLocation) constructor is generated as follows.\n\n```\ninputWebFileLocation#c239d686 url:string access_hash:long = InputWebFileLocation;\ninputWebFileGeoPointLocation#9f2221c9 geo_point:InputGeoPoint access_hash:long w:int h:int zoom:int scale:int = InputWebFileLocation;\ninputWebFileAudioAlbumThumbLocation#f46fe924 flags:# small:flags.2?true document:flags.0?InputDocument title:flags.1?string performer:flags.1?string = InputWebFileLocation;\n\nwebDocument#1c570ed1 url:string access_hash:long size:int mime_type:string attributes:Vector<DocumentAttribute> = WebDocument;\n\ninputGeoPoint#48222faf flags:# lat:double long:double accuracy_radius:flags.0?int = InputGeoPoint;\n\ngeoPoint#b2a2f663 flags:# long:double lat:double access_hash:long accuracy_radius:flags.0?int = GeoPoint;\n```\n\n*   [inputWebFileLocation](https://core.telegram.org/constructor/inputWebFileLocation) is simply generated by taking the `url` and `access_hash` fields of the [webDocument](https://core.telegram.org/constructor/webDocument) constructor.\n*   [inputWebFileGeoPointLocation](https://core.telegram.org/constructor/inputWebFileGeoPointLocation) is used to download a server-generated image with the map preview from a [geoPoint](https://core.telegram.org/constructor/geoPoint).\n    *   `geo_point` is generated from the `lat`, `long` `accuracy_radius` parameters of the [geoPoint](https://core.telegram.org/constructor/geoPoint)\n    *   `access_hash` is the access hash of the [geoPoint](https://core.telegram.org/constructor/geoPoint)\n    *   `w` - Map width in pixels before applying scale; 16-1024\n    *   `h` - Map height in pixels before applying scale; 16-1024\n    *   `zoom` - Map zoom level; 13-20\n    *   `scale` - Map scale; 1-3\n*   [inputWebFileAudioAlbumThumbLocation](https://core.telegram.org/constructor/inputWebFileAudioAlbumThumbLocation) is used to download an album cover with `600x600` resolution for any music file missing embedded album art. Note that the `document` field containing the music file must NOT be provided in secret chats: the locally extracted `title` and `performer` fields should be provided, instead.  \n    In normal chats `document` should always be provided instead of `title` and `performer`, as it has more lax flood limits.\n    *   `small` if set, downloads a `100x100` thumbnail instead.\n    *   `document` contains the music file: MUST NOT be provided in secret chats.\n    *   `title` contains the song title: should only be provided in secret chats.\n    *   `performer` contains the song performer: should only be provided in secret chats.\n\n### [](#general-considerations)General Considerations\n\n```\ndcOption#18b7a10d flags:# ipv6:flags.0?true media_only:flags.1?true tcpo_only:flags.2?true cdn:flags.3?true static:flags.4?true this_port_only:flags.5?true id:int ip_address:string port:int secret:flags.10?bytes = DcOption;\n```\n\nIt is recommended that large queries ([upload.getFile](https://core.telegram.org/method/upload.getFile), [upload.saveFilePart](https://core.telegram.org/method/upload.saveFilePart), [upload.getWebFile](https://core.telegram.org/method/upload.getWebFile)) be handled through one or more separate sessions and separate connections, in which no methods other than these should be executed.  \nThis way, data transfer will cause less interference with [getting updates](https://core.telegram.org/api/updates) and other method calls.  \nIf a media DC with the required DC ID is available ([dcOption](https://core.telegram.org/constructor/dcOption) will have the `media` flag set), queries must be sent to that DC.\n\n### [](#related-articles)Related articles\n\n#### [](#handling-file-references)[Handling file references](https://core.telegram.org/api/file_reference)\n\nHow to handle file references.",
    "url": "https://core.telegram.org/api/files"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/optimisation",
      "title": "Client-Side Optimization",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Client-Side Optimization"
        },
        {
          "property": "og:image",
          "content": "cc8d9aa19196b9a2dd"
        },
        {
          "property": "og:description",
          "content": "Ways to boost API interactions."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:55 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4025",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Client-Side Optimization\n\n### [](#simplified-acknowledgment-of-message-delivery)Simplified Acknowledgment of Message Delivery\n\nAn outgoing message may be considered sent once the server has assigned it an identifier. Normally, a client would learn of this from the result of the [messages.sendMessage](https://core.telegram.org/method/messages.sendMessage) method. The MTProto server provides a mechanism for [\u201cquick acknowledgments\"](https://core.telegram.org/mtproto/mtproto-transports#quick-ack). Upon receiving such an acknowledgment, the client may be certain that the call to the send message method has at least been fully received by the server and placed in a processing queue, and can inform the user that the delivery was successful. It is possible that the server's actual response will never be received by the client (an interrupted connection; or the app restarts at exactly the wrong time). To correctly handle these situations, you can use a special type of notification generated by the server when [updates.getDifference](https://core.telegram.org/method/updates.getDifference) is called: [updateMessageID](https://core.telegram.org/constructor/updateMessageID). When processing this notification, the client can use the **random\\_id** identifier to associate the previously transmitted message with the one delivered to the server. If such a notification is not issued when [updates.getDifference](https://core.telegram.org/method/updates.getDifference) is called for one of the previously sent messages, the message must be marked as undelivered.\n\n### [](#server-salt)Server Salt\n\nServer salt is a 64-bit number added to every outgoing and incoming message. At present, a single salt's lifespan is 1 hour, following which it is considered invalid and the server will return an error for all the messages that contain it. The error message will contain the correct salt, which may be immediately used for sending. Given this approach, there will always be a period of waiting before the client receives a new salt if it connects to the server less frequently than once an hour. For improved performance, there is a special [get\\_future\\_salts](https://core.telegram.org/mtproto/service_messages#request-for-several-future-salts) method, which fetches in advance a list of the salts that will be valid during the course of a specified period of time following the call (1 day, for example). A start time and an end time are specified for each salt. The salts overlap one another by half an hour. We recommend always using the record with the longest remaining lifespan.\n\n### [](#downloading-files-and-uploading-data-to-the-server)Downloading Files and Uploading Data to the Server\n\nWe recommend that separate connections and sessions be created for these tasks. Remember that the extra sessions must be deleted when no longer needed. It makes sense to download files over several connections (optimally to have a pool). When uploading data to a server one connection is enough to achieve the best results.\n\nThe file handling API is designed to perform data operations in parts. In its simplest implementation, the process of uploading files to a server looks like this: send a query, wait for a response, send the next query, etc. This approach does not optimize the use of network resources and the ping time has a huge effect. The upload and download process is optimal when two or more queries are continuously being executed through one connection. In this arrangement, uploading to the server would look like this:\n\n1.  Send Query 1\n2.  Send Query 2\n3.  Wait for a response to Query 1\n4.  Send Query 3\n5.  Wait for a response to Query 2\n6.  Send Query 4\n7.  etc.\n\nThis will help reduce the effect of ping latency and maximize the channel workload.\n\n### [](#sending-messages-in-bulk)Sending Messages in Bulk\n\nSometimes a client needs to transmit several send message method calls to the server all at once in a single message or in several consecutive messages. However, the server may execute these requests out of order (queries are handled by different servers to improve performance, which introduces a degree of randomness to the process). This requires that dependencies be explicitly stated when processing queries by using the function\n\n```\ninvokeAfterMsg#cb9f372d {X:Type} msg_id:long query:!X = X;\n```\n\nActually, this means padding the beginning of the query with the 32-bit number `0xcb9f372d` and the 64-bit message identifier of the query on which the current query is dependent.\n\n### [](#grouping-updates)Grouping Updates\n\nGenerating updates (notifications about various server events) and delivering them to the client form two different parts of the system (respectively, the messenger API and MTProto). By itself, MTProto cannot modify in any way the data transmitted to the client, and the server API cannot respond to client-MTProto connection events. Imagine the situation where a client loses its connection (or is intentionally disconnected from the network) for some time. If lots of different events occur before a new connection is established (contacts come online, typing event messages are sent), then when a connection is established the client will receive lots of data containing all of the intervening events, despite the fact that most of the data is obsolete. The grouping of messages has been introduced to optimize such situations. If new events occur and the client has not managed to \u201ccollect\u201d the previously generated updates, then the server API can combine them into a single package.\n\nA client is able to control when the MTProto server begins to consider that the connection has been lost and grouping can begin (the earlier this occurs when there is no connection, the better for the client). This functionality is implemented through a special type of Ping message, [ping\\_delay\\_disconnect](https://core.telegram.org/mtproto/service_messages#deferred-connection-closure-ping), which specifies a time delay following which the server will close the current connection and start grouping messages.\n\nIt makes sense to combine the transmission of [ping\\_delay\\_disconnect](https://core.telegram.org/mtproto/service_messages#deferred-connection-closure-ping) with that of other recurring tasks, such as updating the user status ([account.updateStatus](https://core.telegram.org/method/account.updateStatus)).\n\n### [](#setting-the-typing-status)Setting the Typing Status\n\nIf a contact is not online, there is no need to invoke [messages.setTyping](https://core.telegram.org/method/messages.setTyping).",
    "url": "https://core.telegram.org/api/optimisation"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/config",
      "title": "Client configuration",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Client configuration"
        },
        {
          "property": "og:description",
          "content": "The MTProto API has multiple configuration parameters that can be fetched with the appropriate methods."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:55 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "23389",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Client configuration\n\nThe MTProto API has multiple configuration parameters that can be fetched with the appropriate methods.\n\n### [](#mtproto-configuration)MTProto configuration\n\n```\nconfig#cc1a241e flags:# default_p2p_contacts:flags.3?true preload_featured_stickers:flags.4?true revoke_pm_inbox:flags.6?true blocked_mode:flags.8?true force_try_ipv6:flags.14?true date:int expires:int test_mode:Bool this_dc:int dc_options:Vector<DcOption> dc_txt_domain_name:string chat_size_max:int megagroup_size_max:int forwarded_count_max:int online_update_period_ms:int offline_blur_timeout_ms:int offline_idle_timeout_ms:int online_cloud_timeout_ms:int notify_cloud_delay_ms:int notify_default_delay_ms:int push_chat_period_ms:int push_chat_limit:int edit_time_limit:int revoke_time_limit:int revoke_pm_time_limit:int rating_e_decay:int stickers_recent_limit:int channels_read_media_period:int tmp_sessions:flags.0?int call_receive_timeout_ms:int call_ring_timeout_ms:int call_connect_timeout_ms:int call_packet_timeout_ms:int me_url_prefix:string autoupdate_url_prefix:flags.7?string gif_search_username:flags.9?string venue_search_username:flags.10?string img_search_username:flags.11?string static_maps_provider:flags.12?string caption_length_max:int message_length_max:int webfile_dc_id:int suggested_lang_code:flags.2?string lang_pack_version:flags.2?int base_lang_pack_version:flags.2?int reactions_default:flags.15?Reaction autologin_token:flags.16?string = Config;\nnearestDc#8e1a1775 country:string this_dc:int nearest_dc:int = NearestDc;\n\nupdateConfig#a229dd06 = Update;\n\n---functions---\n\nhelp.getConfig#c4f9186b = Config;\nhelp.getNearestDc#1fb33026 = NearestDc;\n```\n\nThe huge [config](https://core.telegram.org/constructor/config) constructor contains lots of useful information, from chat and message size limitations, to privacy settings, online status refresh interval and timeout, VoIP configuration, default inline bot usernames for GIF, image and venue lookup, and lots of other global and user-specific information, check out the [constructor page](https://core.telegram.org/constructor/config) for more information.\n\nThe configuration should be manually refreshed immediately upon receival of an [updateConfig](https://core.telegram.org/constructor/updateConfig) update.\n\n### [](#client-configuration)Client configuration\n\n```\njsonObjectValue#c0de1bd9 key:string value:JSONValue = JSONObjectValue;\n\njsonNull#3f6d7b68 = JSONValue;\njsonBool#c7345e6a value:Bool = JSONValue;\njsonNumber#2be0dfa4 value:double = JSONValue;\njsonString#b71e767a value:string = JSONValue;\njsonArray#f7444763 value:Vector<JSONValue> = JSONValue;\njsonObject#99c1d49d value:Vector<JSONObjectValue> = JSONValue;\n\nhelp.appConfigNotModified#7cde641d = help.AppConfig;\nhelp.appConfig#dd18782e hash:int config:JSONValue = help.AppConfig;\n\nupdateConfig#a229dd06 = Update;\n\n---functions---\n\nhelp.getAppConfig#61e3f854 hash:int = help.AppConfig;\n```\n\nThe [help.getAppConfig](https://core.telegram.org/method/help.getAppConfig) method returns a JSON object containing rapidly evolving, client-specific configuration parameters.  \nWhile [help.getConfig](https://core.telegram.org/method/help.getConfig) returns MTProto-specific configuration with information about server-side limitations and other MTProto-related information, [help.getAppConfig](https://core.telegram.org/method/help.getAppConfig) returns configuration parameters useful for graphical Telegram clients.\n\nWhen first invoking [help.getAppConfig](https://core.telegram.org/method/help.getAppConfig), pass `0` to hash; in future calls, use the `hash` contained in the previously returned [help.appConfig](https://core.telegram.org/constructor/help.appConfig); if the configuration hasn't changed, a [help.appConfigNotModified](https://core.telegram.org/constructor/help.appConfigNotModified) will be returned instead of [help.appConfig](https://core.telegram.org/constructor/help.appConfig).\n\nThe configuration should be manually refreshed immediately upon receival of an [updateConfig](https://core.telegram.org/constructor/updateConfig) update.\n\nIf any of the configuration keys are not available at runtime, a default value must be used.  \nSpecifically, the relative value from the default object must be used if [help.getAppConfig](https://core.telegram.org/method/help.getAppConfig) was invoked successfully but the desired key is not available in [help.appConfig](https://core.telegram.org/constructor/help.appConfig).`config`, or if the invocation of [help.getAppConfig](https://core.telegram.org/method/help.getAppConfig) returned an RPC error and there is no cached value.\n\nHere's the full list of defaults that must be used:\n\n```\n{\n    \"about_length_limit_default\": 70,\n    \"about_length_limit_premium\": 140,\n    \"authorization_autoconfirm_period\": 604800,\n    \"autoarchive_setting_available\": true,\n    \"autologin_domains\": [\n        \"instantview.telegram.org\",\n        \"translations.telegram.org\",\n        \"contest.dev\",\n        \"contest.com\",\n        \"bugs.telegram.org\",\n        \"suggestions.telegram.org\",\n        \"themes.telegram.org\",\n        \"promote.telegram.org\",\n        \"ads.telegram.org\"\n    ],\n    \"background_connection\": true,\n    \"boosts_channel_level_max\": 100,\n    \"boosts_per_sent_gift\": 3,\n    \"bot_preview_medias_max\": 12,\n    \"business_chat_links_limit\": 100,\n    \"business_promo_order\": [\n        \"business_location\",\n        \"business_hours\",\n        \"quick_replies\",\n        \"greeting_message\",\n        \"away_message\",\n        \"business_links\",\n        \"business_intro\",\n        \"business_bots\",\n        \"emoji_status\",\n        \"folder_tags\",\n        \"stories\"\n    ],\n    \"can_edit_factcheck\": false,\n    \"caption_length_limit_default\": 1024,\n    \"caption_length_limit_premium\": 4096,\n    \"channel_bg_icon_level_min\": 4,\n    \"channel_custom_wallpaper_level_min\": 10,\n    \"channel_emoji_status_level_min\": 8,\n    \"channel_profile_bg_icon_level_min\": 7,\n    \"channel_restrict_sponsored_level_min\": 50,\n    \"channel_revenue_withdrawal_enabled\": true,\n    \"channel_wallpaper_level_min\": 9,\n    \"channels_limit_default\": 500,\n    \"channels_limit_premium\": 1000,\n    \"channels_public_limit_default\": 10,\n    \"channels_public_limit_premium\": 20,\n    \"chat_read_mark_expire_period\": 604800,\n    \"chat_read_mark_size_threshold\": 100,\n    \"chatlist_invites_limit_default\": 3,\n    \"chatlist_invites_limit_premium\": 100,\n    \"chatlist_update_period\": 300,\n    \"chatlists_joined_limit_default\": 2,\n    \"chatlists_joined_limit_premium\": 20,\n    \"default_emoji_statuses_stickerset_id\": \"773947703670341676\",\n    \"dialog_filters_chats_limit_default\": 100,\n    \"dialog_filters_chats_limit_premium\": 200,\n    \"dialog_filters_enabled\": true,\n    \"dialog_filters_limit_default\": 10,\n    \"dialog_filters_limit_premium\": 30,\n    \"dialog_filters_tooltip\": false,\n    \"dialogs_folder_pinned_limit_default\": 100,\n    \"dialogs_folder_pinned_limit_premium\": 200,\n    \"dialogs_pinned_limit_default\": 5,\n    \"dialogs_pinned_limit_premium\": 10,\n    \"dismissed_suggestions\": [],\n    \"emojies_animated_zoom\": 0.625,\n    \"emojies_send_dice\": [\n        \"\\ud83c\\udfb2\",\n        \"\\ud83c\\udfaf\",\n        \"\\ud83c\\udfc0\",\n        \"\\u26bd\",\n        \"\\u26bd\\ufe0f\",\n        \"\\ud83c\\udfb0\",\n        \"\\ud83c\\udfb3\"\n    ],\n    \"emojies_send_dice_success\": {\n        \"\\ud83c\\udfaf\": {\n            \"value\": 6,\n            \"frame_start\": 62\n        },\n        \"\\ud83c\\udfc0\": {\n            \"value\": 5,\n            \"frame_start\": 110\n        },\n        \"\\u26bd\": {\n            \"value\": 5,\n            \"frame_start\": 110\n        },\n        \"\\u26bd\\ufe0f\": {\n            \"value\": 5,\n            \"frame_start\": 110\n        },\n        \"\\ud83c\\udfb0\": {\n            \"value\": 64,\n            \"frame_start\": 110\n        },\n        \"\\ud83c\\udfb3\": {\n            \"value\": 6,\n            \"frame_start\": 110\n        }\n    },\n    \"emojies_sounds\": [],\n    \"factcheck_length_limit\": 1024,\n    \"fragment_prefixes\": [\n        \"888\"\n    ],\n    \"gif_search_branding\": \"tenor\",\n    \"gif_search_emojies\": [\n        \"\\ud83d\\udc4d\",\n        \"\\ud83d\\ude18\",\n        \"\\ud83d\\ude0d\",\n        \"\\ud83d\\ude21\",\n        \"\\ud83e\\udd73\",\n        \"\\ud83d\\ude02\",\n        \"\\ud83d\\ude2e\",\n        \"\\ud83d\\ude44\",\n        \"\\ud83d\\ude0e\",\n        \"\\ud83d\\udc4e\"\n    ],\n    \"giveaway_add_peers_max\": 10,\n    \"giveaway_boosts_per_premium\": 4,\n    \"giveaway_countries_max\": 10,\n    \"giveaway_gifts_purchase_available\": false,\n    \"giveaway_period_max\": 2678400,\n    \"group_custom_wallpaper_level_min\": 10,\n    \"group_emoji_status_level_min\": 8,\n    \"group_emoji_stickers_level_min\": 4,\n    \"group_profile_bg_icon_level_min\": 5,\n    \"group_transcribe_level_min\": 6,\n    \"group_wallpaper_level_min\": 9,\n    \"groupcall_video_participants_max\": 1000,\n    \"hidden_members_group_size_min\": 100,\n    \"ignore_restriction_reasons\": [],\n    \"inapp_update_check_delay\": 86400,\n    \"intro_description_length_limit\": 70,\n    \"intro_title_length_limit\": 32,\n    \"keep_alive_service\": true,\n    \"large_queue_max_active_operations_count\": 2,\n    \"message_animated_emoji_max\": 100,\n    \"new_noncontact_peers_require_premium_without_ownpremium\": false,\n    \"pending_suggestions\": [],\n    \"pm_read_date_expire_period\": 604800,\n    \"premium_bot_username\": \"PremiumBot\",\n    \"premium_gift_attach_menu_icon\": true,\n    \"premium_gift_text_field_icon\": false,\n    \"premium_invoice_slug\": \"abc\",\n    \"premium_manage_subscription_url\": \"https://t.me/premiumbot?start=status\",\n    \"premium_promo_order\": [\n        \"stories\",\n        \"more_upload\",\n        \"double_limits\",\n        \"business\",\n        \"last_seen\",\n        \"voice_to_text\",\n        \"faster_download\",\n        \"translations\",\n        \"animated_emoji\",\n        \"emoji_status\",\n        \"saved_tags\",\n        \"peer_colors\",\n        \"wallpapers\",\n        \"profile_badge\",\n        \"message_privacy\",\n        \"advanced_chat_management\",\n        \"no_ads\",\n        \"app_icons\",\n        \"infinite_reactions\",\n        \"animated_userpics\",\n        \"premium_stickers\",\n        \"effects\"\n    ],\n    \"premium_purchase_blocked\": false,\n    \"qr_login_camera\": true,\n    \"qr_login_code\": \"primary\",\n    \"quick_replies_limit\": 100,\n    \"quick_reply_messages_limit\": 20,\n    \"quote_length_max\": 1024,\n    \"reactions_in_chat_max\": 100,\n    \"reactions_uniq_max\": 11,\n    \"reactions_user_max_default\": 1,\n    \"reactions_user_max_premium\": 3,\n    \"recommended_channels_limit_default\": 10,\n    \"recommended_channels_limit_premium\": 100,\n    \"restriction_add_platforms\": [],\n    \"ringtone_duration_max\": 5,\n    \"ringtone_saved_count_max\": 100,\n    \"ringtone_size_max\": 307200,\n    \"round_video_encoding\": {\n        \"diameter\": 384,\n        \"video_bitrate\": 1000,\n        \"audio_bitrate\": 64,\n        \"max_size\": 12582912\n    },\n    \"saved_dialogs_pinned_limit_default\": 5,\n    \"saved_dialogs_pinned_limit_premium\": 100,\n    \"saved_gifs_limit_default\": 200,\n    \"saved_gifs_limit_premium\": 400,\n    \"small_queue_max_active_operations_count\": 5,\n    \"sponsored_links_inapp_allow\": false,\n    \"stargifts_blocked\": true,\n    \"stargifts_convert_period_max\": 7776000,\n    \"stargifts_message_length_max\": 255,\n    \"starref_connect_allowed\": false,\n    \"starref_max_commission_permille\": 800,\n    \"starref_min_commission_permille\": 1,\n    \"starref_program_allowed\": false,\n    \"starref_start_param_prefixes\": [\n        \"_tgr_\"\n    ],\n    \"stars_gifts_enabled\": true,\n    \"stars_paid_post_amount_max\": 2500,\n    \"stars_paid_reaction_amount_max\": 2500,\n    \"stars_purchase_blocked\": true,\n    \"stars_revenue_withdrawal_min\": 1000,\n    \"stars_subscription_amount_max\": 2500,\n    \"stars_usd_sell_rate_x1000\": 1410,\n    \"stars_usd_withdraw_rate_x1000\": 1300,\n    \"stickers_emoji_cache_time\": 86400,\n    \"stickers_emoji_suggest_only_api\": false,\n    \"stickers_faved_limit_default\": 5,\n    \"stickers_faved_limit_premium\": 10,\n    \"stickers_normal_by_emoji_per_premium_num\": 3,\n    \"stickers_premium_by_emoji_num\": 0,\n    \"stories_area_url_max\": 3,\n    \"stories_changelog_user_id\": 777000,\n    \"stories_entities\": \"premium\",\n    \"stories_pinned_to_top_count_max\": 3,\n    \"stories_posting\": \"enabled\",\n    \"stories_sent_monthly_limit_default\": 30,\n    \"stories_sent_monthly_limit_premium\": 3000,\n    \"stories_sent_weekly_limit_default\": 7,\n    \"stories_sent_weekly_limit_premium\": 700,\n    \"stories_stealth_cooldown_period\": 10800,\n    \"stories_stealth_future_period\": 1500,\n    \"stories_stealth_past_period\": 300,\n    \"stories_suggested_reactions_limit_default\": 1,\n    \"stories_suggested_reactions_limit_premium\": 5,\n    \"stories_venue_search_username\": \"foursquare\",\n    \"story_caption_length_limit_default\": 200,\n    \"story_caption_length_limit_premium\": 2048,\n    \"story_expiring_limit_default\": 3,\n    \"story_expiring_limit_premium\": 100,\n    \"story_viewers_expire_period\": 86400,\n    \"story_weather_preload\": false,\n    \"telegram_antispam_group_size_min\": 200,\n    \"telegram_antispam_user_id\": \"5434988373\",\n    \"ton_proxy_address\": \"magic.org\",\n    \"topics_pinned_limit\": 5,\n    \"transcribe_audio_trial_duration_max\": 300,\n    \"transcribe_audio_trial_weekly_number\": 0,\n    \"upload_max_fileparts_default\": 4000,\n    \"upload_max_fileparts_premium\": 8000,\n    \"upload_premium_speedup_download\": 10,\n    \"upload_premium_speedup_notify_period\": 3600,\n    \"upload_premium_speedup_upload\": 10,\n    \"url_auth_domains\": [\n        \"web.telegram.org\",\n        \"web.t.me\",\n        \"k.t.me\",\n        \"z.t.me\",\n        \"a.t.me\"\n    ],\n    \"video_ignore_alt_documents\": false,\n    \"weather_search_username\": \"StoryWeatherBot\",\n    \"web_app_allowed_protocols\": [\n        \"http\",\n        \"https\"\n    ],\n    \"whitelisted_domains\": [\n        \"telegram.dog\",\n        \"telegram.me\",\n        \"telegram.org\",\n        \"t.me\",\n        \"telesco.pe\",\n        \"fragment.com\",\n        \"translations.telegram.org\"\n    ]\n}\n```\n\nThe fields included in the resulting JSON object are:\n\n#### [](#weather-search-username)`weather_search_username`\n\nContains the username of the bot used to query the current weather, to use in [weather media areas as specified here\u00a0\u00bb](https://core.telegram.org/api/stories#weather). (string)\n\n#### [](#story-weather-preload)`story_weather_preload`\n\nIf true, clients should preload the current weather on startup (as opposed to only when creating a [weather media area](https://core.telegram.org/api/stories#weather)) by querying the bot specified in [weather\\_search\\_username](#weather-search-username). (boolean)\n\n#### [](#emojies-animated-zoom)`emojies_animated_zoom`\n\n[Animated emojis](https://core.telegram.org/api/animated-emojis) and [animated dice](https://core.telegram.org/api/dice) should be scaled by this factor before being shown to the user (float)\n\n#### [](#keep-alive-service)`keep_alive_service`\n\nWhether app clients should start a keepalive service to keep the app running and fetch updates even when the app is closed (boolean)\n\n#### [](#background-connection)`background_connection`\n\nWhether app clients should start a background TCP connection for MTProto update fetching (boolean)\n\n#### [](#emojies-send-dice)`emojies_send_dice`\n\nA list of supported [animated dice](https://core.telegram.org/api/dice) stickers (array of strings).\n\n#### [](#emojies-send-dice-success)`emojies_send_dice_success`\n\nFor [animated dice](https://core.telegram.org/api/dice) emojis other than the basic ![\ud83c\udfb2](https://telegram.org/img/emoji/40/F09F8EB2.png), indicates the winning dice value and the final frame of the animated sticker, at which to show the fireworks ![\ud83c\udf86](https://telegram.org/img/emoji/40/F09F8E86.png) (object with emoji keys and object values, containing `value` and `frame_start` float values)\n\n#### [](#emojies-sounds)`emojies_sounds`\n\nA map of soundbites to be played when the user clicks on the specified [animated emoji](https://core.telegram.org/api/animated-emojis); the [file reference field](https://core.telegram.org/api/file_reference) should be base64-decoded before [downloading the file](https://core.telegram.org/api/files) (map of [file IDs](https://core.telegram.org/api/files) ([inputDocument](https://core.telegram.org/constructor/inputDocument).id), with emoji string keys)\n\nExample:\n\n```\n{\n    \"\\ud83c\\udf83\": {\n        \"id\": \"4956223179606458539\",\n        \"access_hash\": \"-2107001400913062971\",\n        \"file_reference_base64\": \"\"\n    },\n    \"\\u26b0\": {\n        \"id\": \"4956223179606458540\",\n        \"access_hash\": \"-1498869544183595185\",\n        \"file_reference_base64\": \"\"\n    }\n}\n```\n\n#### [](#gif-search-branding)`gif_search_branding`\n\nSpecifies the name of the service providing GIF search through [gif\\_search\\_username](#mtproto-configuration) (string)\n\n#### [](#gif-search-emojies)`gif_search_emojies`\n\nSpecifies a list of emojis that should be suggested as search term in a bar above the GIF search box (array of string emojis)\n\n#### [](#stickers-emoji-suggest-only-api)`stickers_emoji_suggest_only_api`\n\nSpecifies that the app should not display [local sticker suggestions\u00a0\u00bb](https://core.telegram.org/api/stickers#sticker-suggestions) for emojis at all and just use the result of [messages.getStickers](https://core.telegram.org/method/messages.getStickers) (bool)\n\n#### [](#stickers-emoji-cache-time)`stickers_emoji_cache_time`\n\nSpecifies the validity period of the local cache of [messages.getStickers](https://core.telegram.org/method/messages.getStickers), also relevant when generating the [pagination hash](https://core.telegram.org/api/offsets#hash-generation) when invoking the method. (integer)\n\n#### [](#qr-login-camera)`qr_login_camera`\n\nWhether the Settings->Devices menu should show an option to scan a [QR login code](https://core.telegram.org/api/qr-login) (boolean)\n\n#### [](#qr-login-code)`qr_login_code`\n\nWhether the login screen should show a [QR code login option](https://core.telegram.org/api/qr-login), possibly as default login method (string, \"disabled\", \"primary\" or \"secondary\")\n\n#### [](#dialog-filters-enabled)`dialog_filters_enabled`\n\nWhether clients should show an option for managing [dialog filters AKA folders](https://core.telegram.org/api/folders) (boolean)\n\n#### [](#dialog-filters-tooltip)`dialog_filters_tooltip`\n\nWhether clients should actively show a tooltip, inviting the user to configure [dialog filters AKA folders](https://core.telegram.org/api/folders); typically this happens when the chat list is long enough to start getting cluttered. (boolean)\n\n#### [](#autoarchive-setting-available)`autoarchive_setting_available`\n\nWhether clients _can_ invoke [account.setGlobalPrivacySettings](https://core.telegram.org/method/account.setGlobalPrivacySettings) with [`globalPrivacySettings.archive_and_mute_new_noncontact_peers = boolTrue`](https://core.telegram.org/constructor/globalPrivacySettings), to automatically archive and mute new incoming chats from non-contacts. (boolean)\n\n#### [](#pending-suggestions)`pending_suggestions`\n\nContains a list of suggestions that should be actively shown as a tooltip to the user. (Array of strings, possible values shown [in the suggestions section\u00a0\u00bb](#suggestions)).\n\n#### [](#dismissed-suggestions)`dismissed_suggestions`\n\nContains a list of [inverted suggestions](#inverted-suggestions) that were [dismissed](https://core.telegram.org/api/config#dismissing-suggestions) by the user. (Array of strings, possible values shown [in the inverted suggestions section\u00a0\u00bb](#inverted-suggestions)).\n\n#### [](#topics-pinned-limit)`topics_pinned_limit`\n\nMaximum number of [topics](https://core.telegram.org/api/forum#forum-topics) that can be pinned in a single [forum](https://core.telegram.org/api/forum). (integer)\n\n#### [](#telegram-antispam-user-id)`telegram_antispam_user_id`\n\nThe ID of the official [native antispam bot](https://core.telegram.org/api/antispam), that will automatically delete spam messages if enabled as specified in the [native antispam documentation\u00a0\u00bb](https://core.telegram.org/api/antispam).  \nWhen fetching the admin list of a supergroup using [channels.getParticipants](https://core.telegram.org/method/channels.getParticipants), if native antispam functionality in the specified supergroup, the bot should be manually added to the admin list displayed to the user. (numeric string that represents a Telegram user/bot ID, should be casted to an int64)\n\n#### [](#telegram-antispam-group-size-min)`telegram_antispam_group_size_min`\n\nMinimum number of group members required to enable [native antispam functionality](https://core.telegram.org/api/antispam). (integer)\n\n#### [](#fragment-prefixes)`fragment_prefixes`\n\nList of phone number prefixes for anonymous [Fragment](https://fragment.com/) phone numbers. (array of strings).\n\n#### [](#hidden-members-group-size-min)`hidden_members_group_size_min`\n\nMinimum number of participants required to hide the participants list of a supergroup using [channels.toggleParticipantsHidden](https://core.telegram.org/method/channels.toggleParticipantsHidden). (integer)\n\n#### [](#url-auth-domains)`url_auth_domains`\n\nA list of domains that support automatic login with manual user confirmation, [click here for more info on URL authorization\u00a0\u00bb](https://core.telegram.org/api/url-authorization#link-url-authorization). (array of strings)\n\n#### [](#autologin-domains)`autologin_domains`\n\nA list of Telegram domains that support automatic login with no user confirmation, [click here for more info on URL authorization\u00a0\u00bb](https://core.telegram.org/api/url-authorization#link-url-authorization). (array of strings)\n\n#### [](#whitelisted-domains)`whitelisted_domains`\n\nA list of Telegram domains that can always be opened without additional user confirmation, when clicking on in-app links where the URL is not fully displayed (i.e. [messageEntityTextUrl](https://core.telegram.org/constructor/messageEntityTextUrl) entities). (array of strings)\n\nNote that when opening [direct Mini App links](https://core.telegram.org/api/links#direct-mini-app-links) for the first time, confirmation should still be requested from the user, even if the domain of the containing deep link is whitelisted (i.e. `t.me/<bot_username>/<short_name>?startapp=<start_parameter>`, where `t.me` is whitelisted).\n\nConfirmation should **always** be asked, even if we already opened the [direct Mini App](https://core.telegram.org/api/links#direct-mini-app-links) before, if the link is not visible (i.e. [messageEntityTextUrl](https://core.telegram.org/constructor/messageEntityTextUrl) text links, inline buttons etc.).\n\n#### [](#round-video-encoding)`round_video_encoding`\n\nContains a set of recommended codec parameters for round videos. (object, as described in the example)\n\n#### [](#chat-read-mark-size-threshold)`chat_read_mark_size_threshold`\n\nPer-user read receipts, fetchable using [messages.getMessageReadParticipants](https://core.telegram.org/method/messages.getMessageReadParticipants), will be available in groups with an amount of participants less or equal to `chat_read_mark_size_threshold`. (integer)\n\n#### [](#chat-read-mark-expire-period)`chat_read_mark_expire_period`\n\nTo protect user privacy, read receipts for chats are only stored for `chat_read_mark_expire_period` seconds after the message was sent. (integer)\n\n#### [](#pm-read-date-expire-period)`pm_read_date_expire_period`\n\nTo protect user privacy, read receipts for private chats are only stored for `pm_read_date_expire_period` seconds after the message was sent. (integer)\n\n#### [](#groupcall-video-participants-max)`groupcall_video_participants_max`\n\nMaximum number of participants in a group call (livestreams allow \u221e participants) (integer)\n\n#### [](#reactions-uniq-max)`reactions_uniq_max`\n\nMaximum number of unique reactions for any given message: for example, if there are 2000 ![\ud83d\udc4d](https://telegram.org/img/emoji/40/F09F918D.png) and 1000 custom emoji ![\ud83d\ude01](https://telegram.org/img/emoji/40/F09F9881.png) reactions and reactions\\_uniq\\_max = 2, you can't add a ![\ud83d\udc4e](https://telegram.org/img/emoji/40/F09F918E.png) reaction, because that would raise the number of unique reactions to 3 > 2. (integer)\n\n#### [](#reactions-in-chat-max)`reactions_in_chat_max`\n\nMaximum number of reactions that can be marked as allowed in a chat using [chatReactionsSome](https://core.telegram.org/constructor/chatReactionsSome). (integer)\n\n#### [](#reactions-user-max-default)`reactions_user_max_default`\n\nMaximum number of reactions that can be added to a single message by a non-Premium user. (integer)\n\n#### [](#reactions-user-max-premium)`reactions_user_max_premium`\n\nMaximum number of reactions that can be added to a single message by a Premium user. (integer)\n\n#### [](#default-emoji-statuses-stickerset-id)`default_emoji_statuses_stickerset_id`\n\nDefault emoji status stickerset ID. (integer)  \nNote that the stickerset can be fetched using [inputStickerSetEmojiDefaultStatuses](https://core.telegram.org/constructor/inputStickerSetEmojiDefaultStatuses).\n\n#### [](#ringtone-duration-max)`ringtone_duration_max`\n\nThe maximum duration in seconds of [uploadable notification sounds\u00a0\u00bb](https://core.telegram.org/api/ringtones) (integer)\n\n#### [](#ringtone-size-max)`ringtone_size_max`\n\nThe maximum post-conversion size in bytes of [uploadable notification sounds\u00a0\u00bb](https://core.telegram.org/api/ringtones)\n\n#### [](#ringtone-saved-count-max)`ringtone_saved_count_max`\n\nThe maximum number of [saveable notification sounds\u00a0\u00bb](https://core.telegram.org/api/ringtones)\n\n#### [](#message-animated-emoji-max)`message_animated_emoji_max`\n\nThe maximum number of [custom emojis](https://core.telegram.org/api/custom-emoji) that may be present in a message. (integer)\n\n#### [](#stickers-premium-by-emoji-num)`stickers_premium_by_emoji_num`\n\nDefines how many [Premium stickers](https://core.telegram.org/api/premium) to show in the sticker suggestion popup when entering an emoji into the text field, see the [sticker docs for more info](https://core.telegram.org/api/stickers#sticker-suggestions) (integer)\n\n#### [](#stickers-normal-by-emoji-per-premium-num)`stickers_normal_by_emoji_per_premium_num`\n\nFor [Premium users](https://core.telegram.org/api/premium), used to define the suggested sticker list, see the [sticker docs for more info](https://core.telegram.org/api/stickers#sticker-suggestions) (integer)\n\n#### [](#premium-purchase-blocked)`premium_purchase_blocked`\n\nThe user can't purchase [Telegram Premium](https://core.telegram.org/api/premium). The app must also hide all Premium features, including stars for other users, et cetera. (boolean)\n\n#### [](#channels-limit-default)`channels_limit_default`\n\nThe maximum number of [channels and supergroups](https://core.telegram.org/api/channel) a non-[Premium](https://core.telegram.org/api/premium) user may join (integer)\n\n#### [](#channels-limit-premium)`channels_limit_premium`\n\nThe maximum number of [channels and supergroups](https://core.telegram.org/api/channel) a [Premium](https://core.telegram.org/api/premium) user may join (integer)\n\n#### [](#saved-gifs-limit-default)`saved_gifs_limit_default`\n\nThe maximum number of GIFs a non-[Premium](https://core.telegram.org/api/premium) user may save (integer)\n\n#### [](#saved-gifs-limit-premium)`saved_gifs_limit_premium`\n\nThe maximum number of GIFs a [Premium](https://core.telegram.org/api/premium) user may save (integer)\n\n#### [](#stickers-faved-limit-default)`stickers_faved_limit_default`\n\nThe maximum number of stickers a non-[Premium](https://core.telegram.org/api/premium) user may [add to Favorites\u00a0\u00bb](https://core.telegram.org/api/stickers#favorite-stickersets) (integer)\n\n#### [](#stickers-faved-limit-premium)`stickers_faved_limit_premium`\n\nThe maximum number of stickers a [Premium](https://core.telegram.org/api/premium) user may [add to Favorites\u00a0\u00bb](https://core.telegram.org/api/stickers#favorite-stickersets) (integer)\n\n#### [](#dialog-filters-limit-default)`dialog_filters_limit_default`\n\nThe maximum number of [folders](https://core.telegram.org/api/folders) a non-[Premium](https://core.telegram.org/api/premium) user may create (integer)\n\n#### [](#dialog-filters-limit-premium)`dialog_filters_limit_premium`\n\nThe maximum number of [folders](https://core.telegram.org/api/folders) a [Premium](https://core.telegram.org/api/premium) user may create (integer)\n\n#### [](#dialog-filters-chats-limit-default)`dialog_filters_chats_limit_default`\n\nThe maximum number of chats a non-[Premium](https://core.telegram.org/api/premium) user may add to a [folder](https://core.telegram.org/api/folders) (integer)\n\n#### [](#dialog-filters-chats-limit-premium)`dialog_filters_chats_limit_premium`\n\nThe maximum number of chats a [Premium](https://core.telegram.org/api/premium) user may add to a [folder](https://core.telegram.org/api/folders) (integer)\n\n#### [](#dialogs-pinned-limit-default)`dialogs_pinned_limit_default`\n\nThe maximum number of chats a non-[Premium](https://core.telegram.org/api/premium) user may pin (integer)\n\n#### [](#dialogs-pinned-limit-premium)`dialogs_pinned_limit_premium`\n\nThe maximum number of chats a [Premium](https://core.telegram.org/api/premium) user may pin (integer)\n\n#### [](#dialogs-folder-pinned-limit-default)`dialogs_folder_pinned_limit_default`\n\nThe maximum number of chats a non-[Premium](https://core.telegram.org/api/premium) user may pin in a folder (integer)\n\n#### [](#dialogs-folder-pinned-limit-premium)`dialogs_folder_pinned_limit_premium`\n\nThe maximum number of chats a [Premium](https://core.telegram.org/api/premium) user may pin in a folder (integer)\n\n#### [](#channels-public-limit-default)`channels_public_limit_default`\n\nThe maximum number of public [channels or supergroups](https://core.telegram.org/api/channel) a non-[Premium](https://core.telegram.org/api/premium) user may create (integer)\n\n#### [](#channels-public-limit-premium)`channels_public_limit_premium`\n\nThe maximum number of public [channels or supergroups](https://core.telegram.org/api/channel) a [Premium](https://core.telegram.org/api/premium) user may create (integer)\n\n#### [](#caption-length-limit-default)`caption_length_limit_default`\n\nThe maximum UTF-8 length of media captions sendable by non-[Premium](https://core.telegram.org/api/premium) users (integer)\n\n#### [](#caption-length-limit-premium)`caption_length_limit_premium`\n\nThe maximum UTF-8 length of media captions sendable by [Premium](https://core.telegram.org/api/premium) users (integer)\n\n#### [](#upload-max-fileparts-default)`upload_max_fileparts_default`\n\nThe maximum number of file parts uploadable by non-[Premium](https://core.telegram.org/api/premium) users (integer, the maximum file size can be extrapolated by multiplying this value by `524288`, the biggest possible chunk size)\n\n#### [](#upload-max-fileparts-premium)`upload_max_fileparts_premium`\n\nThe maximum number of file parts uploadable by [Premium](https://core.telegram.org/api/premium) users (integer, the maximum file size can be extrapolated by multiplying this value by `524288`, the biggest possible chunk size)\n\n#### [](#about-length-limit-default)`about_length_limit_default`\n\nThe maximum UTF-8 length of bios of non-[Premium](https://core.telegram.org/api/premium) users (integer)\n\n#### [](#about-length-limit-premium)`about_length_limit_premium`\n\nThe maximum UTF-8 length of bios of [Premium](https://core.telegram.org/api/premium) users (integer)\n\n#### [](#premium-promo-order)`premium_promo_order`\n\nArray of string identifiers, indicating the order of [Telegram Premium](https://core.telegram.org/api/premium) features in the Telegram Premium promotion popup, [see here for the possible values\u00a0\u00bb](https://core.telegram.org/api/premium#telegram-premium-features)\n\n#### [](#business-promo-order)`business_promo_order`\n\nArray of string identifiers, indicating the order of [Telegram Business](https://core.telegram.org/api/business) features in the Telegram Business promotion popup, [see here for the possible values\u00a0\u00bb](https://core.telegram.org/api/business#business-features-promo-page)\n\n#### [](#premium-bot-username)`premium_bot_username`\n\nContains the username of the official [Telegram Premium](https://core.telegram.org/api/premium) bot that may be used to buy a [Telegram Premium](https://core.telegram.org/api/premium) subscription, see [here for detailed instructions\u00a0\u00bb](https://core.telegram.org/api/premium) (string)\n\n#### [](#premium-invoice-slug)`premium_invoice_slug`\n\nContains an [invoice slug](https://core.telegram.org/api/payments) that may be used to buy a [Telegram Premium](https://core.telegram.org/api/premium) subscription, see [here for detailed instructions\u00a0\u00bb](https://core.telegram.org/api/premium) (string)\n\n#### [](#premium-gift-attach-menu-icon)`premium_gift_attach_menu_icon`\n\nWhether a gift icon should be shown in the attachment menu in private chats with users, offering the current user to gift a [Telegram Premium](https://core.telegram.org/api/premium) subscription to the other user in the chat. (boolean)\n\n#### [](#premium-gift-text-field-icon)`premium_gift_text_field_icon`\n\nWhether a gift icon should be shown in the text bar in private chats with users (ie like the `/` icon in chats with bots), offering the current user to gift a [Telegram Premium](https://core.telegram.org/api/premium) subscription to the other user in the chat. Can only be true if `premium_gift_attach_menu_icon` is also true. (boolean)\n\n#### [](#chatlist-update-period)`chatlist_update_period`\n\nUsers that import a folder using a [chat folder deep link \u00bb](https://core.telegram.org/api/links#chat-folder-links) should retrieve additions made to the folder by invoking [chatlists.getChatlistUpdates](https://core.telegram.org/method/chatlists.getChatlistUpdates) at most every `chatlist_update_period` seconds. (integer)\n\n#### [](#chatlist-invites-limit-default)`chatlist_invites_limit_default`\n\nMaximum number of per-folder [chat folder deep links \u00bb](https://core.telegram.org/api/links#chat-folder-links) that can be created by non-[Premium](https://core.telegram.org/api/premium) users. (integer)\n\n#### [](#chatlist-invites-limit-premium)`chatlist_invites_limit_premium`\n\nMaximum number of per-folder [chat folder deep links \u00bb](https://core.telegram.org/api/links#chat-folder-links) that can be created by [Premium](https://core.telegram.org/api/premium) users. (integer)\n\n#### [](#chatlists-joined-limit-default)`chatlists_joined_limit_default`\n\nMaximum number of [shareable folders](https://core.telegram.org/api/links#chat-folder-links) non-[Premium](https://core.telegram.org/api/premium) users may have. (integer)\n\n#### [](#chatlists-joined-limit-premium)`chatlists_joined_limit_premium`\n\nMaximum number of [shareable folders](https://core.telegram.org/api/links#chat-folder-links) [Premium](https://core.telegram.org/api/premium) users may have. (integer)\n\n#### [](#small-queue-max-active-operations-count)`small_queue_max_active_operations_count`\n\nA soft limit, specifying the maximum number of files that should be downloaded in parallel from the same DC, for files smaller than 20MB. (integer)\n\n#### [](#large-queue-max-active-operations-count)`large_queue_max_active_operations_count`\n\nA soft limit, specifying the maximum number of files that should be downloaded in parallel from the same DC, for files bigger than 20MB. (integer)\n\n#### [](#authorization-autoconfirm-period)`authorization_autoconfirm_period`\n\nAn [unconfirmed session\u00a0\u00bb](https://core.telegram.org/api/auth#confirming-login) will be autoconfirmed this many seconds after login. (integer)\n\n#### [](#story-viewers-expire-period)`story_viewers_expire_period`\n\nThe exact list of users that viewed the story will be hidden from the poster this many seconds after the story expires. (integer)\n\nThis limit applies **only** to non-[Premium](https://core.telegram.org/api/premium) users, [Premium](https://core.telegram.org/api/premium) users can **always** access the viewer list.\n\n#### [](#story-expiring-limit-default)`story_expiring_limit_default`\n\nThe maximum number of active [stories](https://core.telegram.org/api/stories) for non-[Premium](https://core.telegram.org/api/premium) users (integer).\n\n#### [](#story-expiring-limit-premium)`story_expiring_limit_premium`\n\nThe maximum number of active [stories](https://core.telegram.org/api/stories) for [Premium](https://core.telegram.org/api/premium) users (integer).\n\n#### [](#story-caption-length-limit-premium)`story_caption_length_limit_premium`\n\nThe maximum UTF-8 length of story captions for [Premium](https://core.telegram.org/api/premium) users. (integer)\n\n#### [](#story-caption-length-limit-default)`story_caption_length_limit_default`\n\nThe maximum UTF-8 length of story captions for non-[Premium](https://core.telegram.org/api/premium) users. (integer)\n\n#### [](#stories-posting)`stories_posting`\n\nIndicates whether users can post stories. (string)\n\nOne of:\n\n*   `enabled` - Any user can post stories.\n*   `premium` - Only users with a [Premium](https://core.telegram.org/api/premium) subscription can post stories.\n*   `disabled` - Users can't post stories.\n\n#### [](#stories-stealth-past-period)`stories_stealth_past_period`\n\nEnabling [stories stealth mode](https://core.telegram.org/api/stories#stealth-mode) with the `past` flag will erase views of any story opened in the past `stories_stealth_past_period` seconds. (integer)\n\n#### [](#stories-stealth-future-period)`stories_stealth_future_period`\n\nEnabling [stories stealth mode](https://core.telegram.org/api/stories#stealth-mode) with the `future` flag will hide views of any story opened in the next `stories_stealth_future_period` seconds. (integer)\n\n#### [](#stories-stealth-cooldown-period)`stories_stealth_cooldown_period`\n\nAfter enabling [stories stealth mode](https://core.telegram.org/api/stories#stealth-mode), this many seconds must elapse before the user is allowed to enable it again. (integer)\n\n#### [](#stories-sent-weekly-limit-default)`stories_sent_weekly_limit_default`\n\nMaximum number of stories that can be sent in a week by non-[Premium](https://core.telegram.org/api/premium) users. (integer)\n\n#### [](#stories-sent-weekly-limit-premium)`stories_sent_weekly_limit_premium`\n\nMaximum number of stories that can be sent in a week by [Premium](https://core.telegram.org/api/premium) users. (integer)\n\n#### [](#stories-sent-monthly-limit-default)`stories_sent_monthly_limit_default`\n\nMaximum number of stories that can be sent in a month by non-[Premium](https://core.telegram.org/api/premium) users. (integer)\n\n#### [](#stories-sent-monthly-limit-premium)`stories_sent_monthly_limit_premium`\n\nMaximum number of stories that can be sent in a month by [Premium](https://core.telegram.org/api/premium) users. (integer)\n\n#### [](#stories-suggested-reactions-limit-default)`stories_suggested_reactions_limit_default`\n\nMaximum number of [story reaction media areas\u00a0\u00bb](https://core.telegram.org/api/stories#media-areas) that can be added to a story by non-[Premium](https://core.telegram.org/api/premium) users. (integer)\n\n#### [](#stories-suggested-reactions-limit-premium)`stories_suggested_reactions_limit_premium`\n\nMaximum number of [story reaction media areas\u00a0\u00bb](https://core.telegram.org/api/stories#media-areas) that can be added to a story by [Premium](https://core.telegram.org/api/premium) users. (integer)\n\n#### [](#stories-venue-search-username)`stories_venue_search_username`\n\nUsername of the inline bot to use to generate venue location tags for stories, see [here\u00a0\u00bb](https://core.telegram.org/api/stories#location-tags) for more info. (string)\n\n#### [](#stories-changelog-user-id)`stories_changelog_user_id`\n\nID of the official Telegram user that will post stories about new Telegram features: stories posted by this user should be shown on the [active or active and hidden stories bar](https://core.telegram.org/api/stories#watching-stories) just like for contacts, even if the user was removed from the contact list. (integer)\n\n#### [](#stories-entities)`stories_entities`\n\nWhether [styled text entities](https://core.telegram.org/api/entities) and links in story text captions can be used by all users (`enabled`), only [Premium](https://core.telegram.org/api/premium) users) (`premium`), or no one (`disabled`). (string)\n\nThis field is used both when posting stories, to indicate to the user whether they can use entities, and when viewing stories, to hide entities (client-side) on stories posted by users whose [Premium](https://core.telegram.org/api/premium) subscription has expired (if `stories_entities == \"premium\"` and [user](https://core.telegram.org/constructor/user).`premium` is not set, or if `stories_entities == \"disabled\"`).\n\n#### [](#stories-area-url-max)`stories_area_url_max`\n\nMaximum number of [URL media areas\u00a0\u00bb](https://core.telegram.org/api/stories#media-areas) that can be added to a posted story. (integer)\n\n#### [](#giveaway-gifts-purchase-available)`giveaway_gifts_purchase_available`\n\nWhether [giveaways](https://core.telegram.org/api/giveaways) can be started by the current user. (boolean)\n\n#### [](#giveaway-add-peers-max)`giveaway_add_peers_max`\n\nThe maximum number of users that can be specified when making a [direct giveaway](https://core.telegram.org/api/giveaways). (integer)\n\n#### [](#giveaway-countries-max)`giveaway_countries_max`\n\nThe maximum number of countries that can be specified when restricting the set of participating countries in a [giveaway](https://core.telegram.org/api/giveaways). (itneger)\n\n#### [](#giveaway-boosts-per-premium)`giveaway_boosts_per_premium`\n\nThe number of [boosts](https://core.telegram.org/api/boost) that will be gained by a channel for each winner of a [giveaway](https://core.telegram.org/api/giveaways). (integer)\n\n#### [](#giveaway-period-max)`giveaway_period_max`\n\nThe maximum duration in seconds of a [giveaway](https://core.telegram.org/api/giveaways). (integer)\n\n#### [](#boosts-channel-level-max)`boosts_channel_level_max`\n\nMaximum [boost level](https://core.telegram.org/api/boost) for channels. (integer)\n\n#### [](#boosts-per-sent-gift)`boosts_per_sent_gift`\n\nThe number of additional [boost slots](https://core.telegram.org/api/boost) that the current user will receive when [gifting a Telegram Premium subscription](https://core.telegram.org/api/premium#gifting-telegram-premium).\n\n#### [](#transcribe-audio-trial-weekly-number)`transcribe_audio_trial_weekly_number`\n\nThe maximum number of [speech recognition\u00a0\u00bb](https://core.telegram.org/api/transcribe) calls per week for non-[Premium](https://core.telegram.org/api/premium) users. (integer)\n\n#### [](#transcribe-audio-trial-duration-max)`transcribe_audio_trial_duration_max`\n\nThe maximum allowed duration of media in seconds for [speech recognition\u00a0\u00bb](https://core.telegram.org/api/transcribe) for non-[Premium](https://core.telegram.org/api/premium) users. (integer)\n\n#### [](#recommended-channels-limit-default)`recommended_channels_limit_default`\n\nThe maximum number of similar channels that can be recommended by [channels.getChannelRecommendations\u00bb](https://core.telegram.org/method/channels.getChannelRecommendations) to non-[Premium](https://core.telegram.org/api/premium) users. (integer)\n\n#### [](#recommended-channels-limit-premium)`recommended_channels_limit_premium`\n\nThe maximum number of similar channels that can be recommended by [channels.getChannelRecommendations\u00bb](https://core.telegram.org/method/channels.getChannelRecommendations) to [Premium](https://core.telegram.org/api/premium) users. (integer)\n\n#### [](#quote-length-max)`quote_length_max`\n\nMaximum UTF-8 length of [quoted text](https://core.telegram.org/constructor/inputReplyToMessage). (integer)\n\n#### [](#channel-bg-icon-level-min)`channel_bg_icon_level_min`\n\nAfter reaching at least this [boost level\u00a0\u00bb](https://core.telegram.org/api/boost), channels gain the ability to change their [message accent palette emoji\u00a0\u00bb](https://core.telegram.org/api/colors). (integer)\n\n#### [](#channel-profile-bg-icon-level-min)`channel_profile_bg_icon_level_min`\n\nAfter reaching at least this [boost level\u00a0\u00bb](https://core.telegram.org/api/boost) and the boost level specified in the `channel_min_level` field of the [help.peerColorOption](https://core.telegram.org/constructor/help.peerColorOption) constructor for the chosen palette, channels gain the ability to change the emoji and color used in the [profile accent palette\u00a0\u00bb](https://core.telegram.org/api/colors). (integer)\n\n#### [](#group-profile-bg-icon-level-min)`group_profile_bg_icon_level_min`\n\nAfter reaching at least this [boost level](https://core.telegram.org/api/boost) and the boost level specified in the `group_min_level` field of the [help.peerColorOption](https://core.telegram.org/constructor/help.peerColorOption) constructor for the chosen palette, supergroups gain the ability to change the emoji and color used in the [profile accent palette\u00a0\u00bb](https://core.telegram.org/api/colors). (integer)\n\n#### [](#channel-emoji-status-level-min)`channel_emoji_status_level_min`\n\nAfter reaching at least this [boost level\u00a0\u00bb](https://core.telegram.org/api/boost), channels gain the ability to change their [status emoji\u00a0\u00bb](https://core.telegram.org/api/emoji-status). (integer)\n\n#### [](#group-emoji-status-level-min)`group_emoji_status_level_min`\n\nAfter reaching at least this [boost level\u00a0\u00bb](https://core.telegram.org/api/boost), supergroups gain the ability to change their [status emoji\u00a0\u00bb](https://core.telegram.org/api/emoji-status). (integer)\n\n#### [](#channel-wallpaper-level-min)`channel_wallpaper_level_min`\n\nAfter reaching at least this [boost level\u00a0\u00bb](https://core.telegram.org/api/boost), channels gain the ability to set a [fill channel wallpaper, see here \u00bb for more info](https://core.telegram.org/api/wallpapers#channel-and-supergroup-wallpapers). (integer)\n\n#### [](#group-wallpaper-level-min)`group_wallpaper_level_min`\n\nAfter reaching at least this [boost level\u00a0\u00bb](https://core.telegram.org/api/boost), supergroups gain the ability to set a [fill supergroup wallpaper, see here \u00bb for more info](https://core.telegram.org/api/wallpapers#channel-and-supergroup-wallpapers). (integer)\n\n#### [](#channel-custom-wallpaper-level-min)`channel_custom_wallpaper_level_min`\n\nAfter reaching at least this [boost level\u00a0\u00bb](https://core.telegram.org/api/boost), channels gain the ability to set any custom [wallpaper](https://core.telegram.org/api/wallpapers), not just [fill channel wallpapers, see here \u00bb for more info](https://core.telegram.org/api/wallpapers). (integer)\n\n#### [](#group-custom-wallpaper-level-min)`group_custom_wallpaper_level_min`\n\nAfter reaching at least this [boost level\u00a0\u00bb](https://core.telegram.org/api/boost), supergroups gain the ability to set any custom [wallpaper](https://core.telegram.org/api/wallpapers), not just [fill supergroup wallpapers, see here \u00bb for more info](https://core.telegram.org/api/wallpapers). (integer)\n\n#### [](#group-transcribe-level-min)`group_transcribe_level_min`\n\nAfter reaching at least this [boost level\u00a0\u00bb](https://core.telegram.org/api/boost), non-[Premium](https://core.telegram.org/api/premium) users in the supergroup gain the ability to [transcribe any voice message](https://core.telegram.org/api/transcribe), without using up their free transcription quota. (integer)\n\n#### [](#group-emoji-stickers-level-min)`group_emoji_stickers_level_min`\n\nAfter reaching at least this [boost level\u00a0\u00bb](https://core.telegram.org/api/boost), supergroups gain the ability to associate a [custom emoji stickerset\u00a0\u00bb](https://core.telegram.org/api/custom-emoji), which can be used by all users of the group (including non-[Premium](https://core.telegram.org/api/premium) users!), for messages sent within the group. (integer)\n\n#### [](#channel-restrict-sponsored-level-min)`channel_restrict_sponsored_level_min`\n\nAfter reaching at least this [boost level](https://core.telegram.org/api/boost), channel owners may disable ads on the channel for all users using [channels.restrictSponsoredMessages](https://core.telegram.org/method/channels.restrictSponsoredMessages). (integer)\n\n#### [](#saved-dialogs-pinned-limit-default)`saved_dialogs_pinned_limit_default`\n\nMaximum number of pinned dialogs in [saved messages](https://core.telegram.org/api/saved-messages) for non-[Premium](https://core.telegram.org/api/premium) users. (integer)\n\n#### [](#saved-dialogs-pinned-limit-premium)`saved_dialogs_pinned_limit_premium`\n\nMaximum number of pinned dialogs in [saved messages](https://core.telegram.org/api/saved-messages) for [Premium](https://core.telegram.org/api/premium) users. (integer)\n\n#### [](#can-edit-factcheck)`can_edit_factcheck`\n\nIf true, the current user is an independent fact-checker and [may edit fact-checks\u00a0\u00bb](https://core.telegram.org/api/factcheck). (boolean)\n\n#### [](#factcheck-length-limit)`factcheck_length_limit`\n\nMaximum UTF-8 length [of fact-checks\u00a0\u00bb](https://core.telegram.org/api/factcheck). (integer)\n\n#### [](#quick-replies-limit)`quick_replies_limit`\n\nMaximum number of [quick reply shortcuts\u00a0\u00bb](https://core.telegram.org/api/business#quick-reply-shortcuts) that may be created. (integer)\n\n#### [](#quick-reply-messages-limit)`quick_reply_messages_limit`\n\nMaximum number of messages that may be added to a [quick reply shortcut\u00a0\u00bb](https://core.telegram.org/api/business#quick-reply-shortcuts). (integer)\n\n#### [](#intro-title-length-limit)`intro_title_length_limit`\n\nMaximum UTF-8 length of the [business introduction title\u00a0\u00bb](https://core.telegram.org/constructor/businessIntro). (integer)\n\n#### [](#intro-description-length-limit)`intro_description_length_limit`\n\nMaximum UTF-8 length of the [business introduction description\u00a0\u00bb](https://core.telegram.org/constructor/businessIntro). (integer)\n\n#### [](#business-chat-links-limit)`business_chat_links_limit`\n\nMaximum number of active [business chat links](https://core.telegram.org/api/business#business-chat-links). (integer)\n\n#### [](#upload-premium-speedup-upload)`upload_premium_speedup_upload`\n\nIndicates the file upload speedup enjoyed by [Premium subscribers](https://core.telegram.org/api/premium), used [as specified here\u00a0\u00bb](https://core.telegram.org/api/files#uploading-files) in the Premium modal shown when receiving `FLOOD_WAIT_PREMIUM_X` errors during file uploads. (integer)\n\n#### [](#upload-premium-speedup-download)`upload_premium_speedup_download`\n\nIndicates the file download speedup enjoyed by [Premium subscribers](https://core.telegram.org/api/premium), used [as specified here\u00a0\u00bb](https://core.telegram.org/api/files#downloading-files) in the Premium modal shown when receiving `FLOOD_WAIT_PREMIUM_X` errors during file downloads. (integer)\n\n#### [](#upload-premium-speedup-notify-period)`upload_premium_speedup_notify_period`\n\nThe Premium modal shown when receiving `FLOOD_WAIT_PREMIUM_X` errors during file uploads/downloads should be shown at most every `upload_premium_speedup_notify_period` seconds. (integer)\n\n#### [](#stories-pinned-to-top-count-max)`stories_pinned_to_top_count_max`\n\nThe maximum number of [stories that can be pinned on top of the profile\u00a0\u00bb](https://core.telegram.org/api/stories#pinned-or-archived-stories). (integer)\n\n#### [](#channel-revenue-withdrawal-enabled)`channel_revenue_withdrawal_enabled`\n\nIf true, indicates that [channel ad revenue withdrawal is enabled in the current region](https://core.telegram.org/api/revenue); otherwise, all ad revenue-related UI options should be hidden from the user. (boolean)\n\n#### [](#stars-purchase-blocked)`stars_purchase_blocked`\n\nIf false, indicates that [Telegram Stars may be used in the current region](https://core.telegram.org/api/stars); otherwise, all Star-related UI options should be hidden from the user. (boolean)\n\n#### [](#stars-revenue-withdrawal-min)`stars_revenue_withdrawal_min`\n\nMinimum required amount of [Telegram Stars](https://core.telegram.org/api/stars) on a channel or bot's balance to allow [withdrawal\u00a0\u00bb](https://core.telegram.org/api/stars#withdrawing-stars). (integer)\n\n#### [](#stars-paid-post-amount-max)`stars_paid_post_amount_max`\n\nMaximum price in [Telegram Stars](https://core.telegram.org/api/stars) for posted [paid media](https://core.telegram.org/api/paid-media). (integer)\n\n#### [](#stars-gifts-enabled)`stars_gifts_enabled`\n\n[Star gifting functionality](https://core.telegram.org/api/stars#buying-or-gifting-stars) should only be enabled if this flag is equal to true. (boolean)\n\n#### [](#bot-preview-medias-max)`bot_preview_medias_max`\n\nMaximum number of [main mini app previews\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#main-mini-app-previews) that can be added for a localization. (integer)\n\n#### [](#web-app-allowed-protocols)`web_app_allowed_protocols`\n\nSpecifies a list of allowed schemes for URLs received in [web\\_app\\_open\\_link events](https://core.telegram.org/api/web-events#web-app-open-link). (array of strings)\n\n#### [](#ton-proxy-address)`ton_proxy_address`\n\nSpecifies the domain name to be used to securely open [TON sites\u00a0\u00bb](https://core.telegram.org/api/links#ton-sites). (string)\n\n#### [](#stars-subscription-amount-max)`stars_subscription_amount_max`\n\nSpecifies the maximum allowed price in Stars of a [Telegram Star subscription \u00bb](https://core.telegram.org/api/stars#star-subscriptions). (int)\n\n#### [](#stars-usd-sell-rate-x1000)`stars_usd_sell_rate_x1000`\n\nSpecifies the number of US dollars required to buy one thousand [Telegram Stars](https://core.telegram.org/api/stars). (float)\n\n#### [](#stars-usd-withdraw-rate-x1000)`stars_usd_withdraw_rate_x1000`\n\nSpecifies the number of US dollars that will be received by [withdrawing \u00bb](https://core.telegram.org/api/stars#withdrawing-stars) one thousand [Telegram Stars](https://core.telegram.org/api/stars). (float)\n\n#### [](#stars-paid-reaction-amount-max)`stars_paid_reaction_amount_max`\n\nMaximum number of [paid reactions](https://core.telegram.org/api/reactions#paid-reactions) that may be sent on a post. (integer)\n\n#### [](#stargifts-message-length-max)`stargifts_message_length_max`\n\nThe maximum length of [gift messages, see here \u00bb](https://core.telegram.org/api/gifts) for more info. (integer)\n\n#### [](#stargifts-blocked)`stargifts_blocked`\n\nIf true, [gifts \u00bb](https://core.telegram.org/api/gifts) must be disabled. (boolean)\n\n#### [](#stargifts-convert-period-max)`stargifts_convert_period_max`\n\nA [Gift \u00bb](https://core.telegram.org/api/gifts) can be converted back into [Telegram Stars](https://core.telegram.org/api/stars) only if it was received less than `stargifts_convert_period_max` seconds ago. (integer)\n\n#### [](#video-ignore-alt-documents)`video_ignore_alt_documents`\n\nIf true, indicates that the [messageMediaDocument](https://core.telegram.org/constructor/messageMediaDocument).`alt_documents` field must be ignored. (boolean)\n\n#### [](#starref-start-param-prefixes)`starref_start_param_prefixes`\n\nStart parameter [referral program prefixes for referral links \u00bb](https://core.telegram.org/api/links#referral-links). (array of strings)\n\n#### [](#starref-program-allowed)`starref_program_allowed`\n\nIf false, the current user [cannot create referral programs \u00bb](https://core.telegram.org/api/bots/referrals#creating-an-affiliate-program) for bots they own. (boolean)\n\n#### [](#starref-connect-allowed)`starref_connect_allowed`\n\nIf false, the current user [cannot join referral programs, becoming an affiliate \u00bb](https://core.telegram.org/api/bots/referrals#becoming-an-affiliate). (boolean)\n\n#### [](#starref-min-commission-permille)`starref_min_commission_permille`\n\nMinimum allowed permille affiliate commission for [referral programs \u00bb](https://core.telegram.org/api/bots/referrals). (integer)\n\n#### [](#starref-max-commission-permille)`starref_max_commission_permille`\n\nMaximum allowed permille affiliate commission for [referral programs \u00bb](https://core.telegram.org/api/bots/referrals). (integer)\n\n#### [](#inapp-update-check-delay)`inapp_update_check_delay`\n\n[help.getAppUpdate](https://core.telegram.org/method/help.getAppUpdate) should be invoked every `inapp_update_check_delay` update seconds to check for app updates. (integer)\n\n#### [](#premium-manage-subscription-url)`premium_manage_subscription_url`\n\nURL/deep link that can be opened to manage the premium subscription. (string)\n\n#### [](#sponsored-links-inapp-allow)`sponsored_links_inapp_allow`\n\nIf true, non-[deep/TON links](https://core.telegram.org/api/links) opened from [sponsored messages](https://core.telegram.org/api/sponsored-messages) must be opened in the in-app browser (if present); otherwise they must be opened in the standard, external browser. (boolean)\n\n#### [](#ignore-restriction-reasons)`ignore_restriction_reasons`\n\nArray of strings, containing restriction reasons that must be ignored if encountered in [restrictionReason](https://core.telegram.org/constructor/restrictionReason).`reason`.\n\n#### [](#restriction-add-platforms)`restriction_add_platforms`\n\nArray of strings, containing additional platform identifiers that must be used when parsing [restrictionReason](https://core.telegram.org/constructor/restrictionReason).\n\n#### [](#new-noncontact-peers-require-premium-without-ownpremium)`new_noncontact_peers_require_premium_without_ownpremium`\n\nIf true, the [globalPrivacySettings](https://core.telegram.org/constructor/globalPrivacySettings).`new_noncontact_peers_require_premium` setting may be enabled even if we don't have a [Premium](https://core.telegram.org/api/premium) account, see [here \u00bb](https://core.telegram.org/api/privacy#global-privacy-settings) for more info. (boolean)\n\n### [](#suggestions)Suggestions\n\nThe API can return a set of useful suggestions for users of graphical clients.\n\n#### [](#basic-suggestions)Basic suggestions\n\nThe [help.getAppConfig](https://core.telegram.org/method/help.getAppConfig) method returns a JSON object containing rapidly evolving, client-specific configuration parameters.  \nA full list of these parameters can be seen in the [Client Configuration section\u00a0\u00bb](#client-configuration), but we're mostly interested in the `pending_suggestions` and `autoarchive_setting_available` fields of the returned JSON object:\n\nThe `autoarchive_setting_available` flag indicates whether clients _can_ invoke [account.setGlobalPrivacySettings](https://core.telegram.org/method/account.setGlobalPrivacySettings) with [`globalPrivacySettings.archive_and_mute_new_noncontact_peers = boolTrue`](https://core.telegram.org/constructor/globalPrivacySettings), to automatically archive and mute new incoming chats from non-contacts. (boolean)\n\nThe `pending_suggestions` field contains a list of suggestions that should be actively shown as a tooltip to the user as an array of strings, possible values shown below:\n\n##### [](#autoarchive-popular)`AUTOARCHIVE_POPULAR`\n\nUsers _should_ invoke [account.setGlobalPrivacySettings](https://core.telegram.org/method/account.setGlobalPrivacySettings) with [`globalPrivacySettings.archive_and_mute_new_noncontact_peers = boolTrue`](https://core.telegram.org/constructor/globalPrivacySettings), to automatically archive and mute new incoming chats from non-contacts.\n\n##### [](#validate-password)`VALIDATE_PASSWORD`\n\nUsers should make sure they still remember their [2-step verification password](https://core.telegram.org/api/srp).\n\n##### [](#validate-phone-number)`VALIDATE_PHONE_NUMBER`\n\nUsers should check whether their [authorization phone number](https://core.telegram.org/api/auth) is correct and change the phone number if it is inaccessible.\n\n##### [](#newcomer-ticks)`NEWCOMER_TICKS`\n\nShow the user a hint about the meaning of one and two ticks on sent messages.\n\n##### [](#setup-password)`SETUP_PASSWORD`\n\nShow the user a hint, asking them to check whether they still remember their [2FA password](https://core.telegram.org/api/srp)\n\n##### [](#premium-annual)`PREMIUM_ANNUAL`\n\nSuggests the user to subscribe to Telegram Premium (with annual payments)\n\n##### [](#premium-upgrade)`PREMIUM_UPGRADE`\n\nSuggests the user to upgrade their existing Premium subscription from monthly payments to annual payments\n\n##### [](#premium-restore)`PREMIUM_RESTORE`\n\nSuggests the user to restore a recently expired Premium subscription\n\n##### [](#premium-christmas)`PREMIUM_CHRISTMAS`\n\nSuggests the user to [gift Telegram Premium](https://core.telegram.org/api/premium#gifting-telegram-premium) subscriptions to friends for Christmas.\n\n##### [](#premium-grace)`PREMIUM_GRACE`\n\nSuggests the user to extend their expiring Telegram Premium subscription\n\n##### [](#birthday-setup)`BIRTHDAY_SETUP`\n\nSuggests the user to set a [birthday\u00a0\u00bb](https://core.telegram.org/api/profile#birthday).\n\n##### [](#stars-subscription-low-balance)`STARS_SUBSCRIPTION_LOW_BALANCE`\n\nWhen we get close to the end of the subscription period of one or more active subscriptions, and the current [Telegram Star balance](https://core.telegram.org/api/stars) is not high enough to autorenew at least one of them, this suggestion will be activated: when the user clicks on the suggestion, the client should fetch and display the list of expiring subscriptions by invoking [payments.getStarsSubscriptions](https://core.telegram.org/method/payments.getStarsSubscriptions), passing [inputPeerSelf](https://core.telegram.org/constructor/inputPeerSelf) to `peer` and setting the `missing_balance` flag: the returned subscriptions may be renewed by [filling up the current Telegram Star balance](https://core.telegram.org/api/stars) with at least [payments.starsStatus](https://core.telegram.org/constructor/payments.starsStatus).`subscriptions_missing_balance` stars.\n\n##### [](#userpic-setup)`USERPIC_SETUP`\n\nSuggests the user to set a [profile picture \u00bb](https://core.telegram.org/api/files#uploading-profile-or-chat-pictures).\n\n#### [](#inverted-suggestions)Inverted suggestions\n\nThese suggestions are _enabled by default_, and are never returned in the `pending_suggestions` field of the [client configuration object](#client-configuration).\n\nThey can be dismissed by invoking [help.dismissSuggestion](https://core.telegram.org/method/help.dismissSuggestion) as usual, but unlike [basic suggestions](#basic-suggestions), once dismissed they will appear in the `dismissed_suggestions` field of the [client configuration object](#client-configuration).\n\n*   `\"BIRTHDAY_CONTACTS_TODAY\"` - If not dismissed, indicates that the client should display the tooltip that recommends to gift a Telegram Premium subscription to contacts on their [birthday\u00a0\u00bb](https://core.telegram.org/api/profile#birthday).  \n    This suggestion can be dismissed by invoking [help.dismissSuggestion](https://core.telegram.org/method/help.dismissSuggestion) when the user hides the tooltip, but it is also automatically dismissed by the server if the user gifts one or more Telegram Premium subscriptions to friends with birthdays falling within the next/previous 24 hours.\n\n#### [](#channel-suggestions)Channel suggestions\n\n```\nmessages.chatFull#e5d7d19c full_chat:ChatFull chats:Vector<Chat> users:Vector<User> = messages.ChatFull;\n\nchannelFull#bbab348d flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true can_set_location:flags.16?true has_scheduled:flags.19?true can_view_stats:flags.20?true blocked:flags.22?true flags2:# can_delete_channel:flags2.0?true antispam:flags2.1?true participants_hidden:flags2.2?true translations_disabled:flags2.3?true stories_pinned_available:flags2.5?true view_forum_as_messages:flags2.6?true restricted_sponsored:flags2.11?true can_view_revenue:flags2.12?true paid_media_allowed:flags2.14?true can_view_stars_revenue:flags2.15?true paid_reactions_available:flags2.16?true id:long about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int online_count:flags.13?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:flags.23?ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?long migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int folder_id:flags.11?int linked_chat_id:flags.14?long location:flags.15?ChannelLocation slowmode_seconds:flags.17?int slowmode_next_send_date:flags.18?int stats_dc:flags.12?int pts:int call:flags.21?InputGroupCall ttl_period:flags.24?int pending_suggestions:flags.25?Vector<string> groupcall_default_join_as:flags.26?Peer theme_emoticon:flags.27?string requests_pending:flags.28?int recent_requesters:flags.28?Vector<long> default_send_as:flags.29?Peer available_reactions:flags.30?ChatReactions reactions_limit:flags2.13?int stories:flags2.4?PeerStories wallpaper:flags2.7?WallPaper boosts_applied:flags2.8?int boosts_unrestrict:flags2.9?int emojiset:flags2.10?StickerSet = ChatFull;\n\n---functions---\n\nchannels.getFullChannel#8736a09 channel:InputChannel = messages.ChatFull;\n```\n\nSome [channel/supergroup](https://core.telegram.org/api/channel)\\-related suggestions can also be contained in the `pending_suggestions` field of the [channelFull](https://core.telegram.org/constructor/channelFull) constructor, returned by [channels.getFullChannel](https://core.telegram.org/method/channels.getFullChannel).  \nHere's a list of possible suggestions:\n\n##### [](#convert-gigagroup)`CONVERT_GIGAGROUP`\n\nThe [supergroup](https://core.telegram.org/api/channel) has many participants: the admin should call [channels.convertToGigagroup](https://core.telegram.org/method/channels.convertToGigagroup) to convert it to a gigagroup.\n\n#### [](#dismissing-suggestions)Dismissing suggestions\n\n```\nboolFalse#bc799737 = Bool;\nboolTrue#997275b5 = Bool;\n\n---functions---\n\nhelp.dismissSuggestion#f50dbaa1 peer:InputPeer suggestion:string = Bool;\n```\n\n[help.dismissSuggestion](https://core.telegram.org/method/help.dismissSuggestion) can be used to dismiss a suggestion.  \nPass [inputPeerEmpty](https://core.telegram.org/constructor/inputPeerEmpty) to `peer` for [basic suggestions](#basic-suggestions) and the [channel/supergroup](https://core.telegram.org/api/channel)'s peer for [channel suggestions](#channel-suggestions).\n\n### [](#app-specific-configuration)App-specific configuration\n\n```\nhelp.appUpdate#ccbbce30 flags:# can_not_skip:flags.0?true id:int version:string text:string entities:Vector<MessageEntity> document:flags.1?Document url:flags.2?string sticker:flags.3?Document = help.AppUpdate;\nhelp.noAppUpdate#c45a6536 = help.AppUpdate;\n\nupdates#74ae4240 updates:Vector<Update> users:Vector<User> chats:Vector<Chat> date:int seq:int = Updates;\nupdateServiceNotification#ebe46819 flags:# popup:flags.0?true invert_media:flags.2?true inbox_date:flags.1?int type:string message:string media:MessageMedia entities:Vector<MessageEntity> = Update;\n\nhelp.inviteText#18cb9f78 message:string = help.InviteText;\n\n---functions---\n\nhelp.getAppUpdate#522d5a7d source:string = help.AppUpdate;\n\nhelp.getInviteText#4d392343 = help.InviteText;\n```\n\n*   [help.getAppUpdate](https://core.telegram.org/method/help.getAppUpdate) - Get info about an application update, can contain the updated application binary in the attached document\n*   [help.getInviteText](https://core.telegram.org/method/help.getInviteText) - Returns a localized invitation message that can be sent via SMS to contacts that haven't signed up to Telegram yet\n\n### [](#terms-of-service)Terms of service\n\n```\nhelp.termsOfServiceUpdateEmpty#e3309f7f expires:int = help.TermsOfServiceUpdate;\nhelp.termsOfServiceUpdate#28ecf961 expires:int terms_of_service:help.TermsOfService = help.TermsOfServiceUpdate;\n\nhelp.termsOfService#780a0310 flags:# popup:flags.0?true id:DataJSON text:string entities:Vector<MessageEntity> min_age_confirm:flags.1?int = help.TermsOfService;\n\nauth.authorizationSignUpRequired#44747e9a flags:# terms_of_service:flags.0?help.TermsOfService = auth.Authorization;\n\n---functions---\n\nhelp.getTermsOfServiceUpdate#2ca51fd1 = help.TermsOfServiceUpdate;\nhelp.acceptTermsOfService#ee72f79a id:DataJSON = Bool;\n\nauth.signIn#8d52a951 flags:# phone_number:string phone_code_hash:string phone_code:flags.0?string email_verification:flags.1?EmailVerification = auth.Authorization;\n\naccount.deleteAccount#a2c0cf74 flags:# reason:string password:flags.0?InputCheckPasswordSRP = Bool;\n```\n\nThese methods can be used for managing consent to Telegram's [Terms Of Service](https://telegram.org/tos).\n\nTypically, before a user [signs up](https://core.telegram.org/api/auth#sign-in-sign-up) by invoking [auth.signUp](https://core.telegram.org/method/auth.signUp), apps should show a pop-up (if the `popup` flag of the [help.termsOfService](https://core.telegram.org/constructor/help.termsOfService) method is set), asking the user to accept Telegram's terms of service; in case of denial, the user is to be returned to the initial page of the login flow.\n\nWhen signing up for the first time, the [help.termsOfService](https://core.telegram.org/constructor/help.termsOfService) is to be obtained from the [auth.authorizationSignUpRequired](https://core.telegram.org/constructor/auth.authorizationSignUpRequired) constructor returned by the [auth.signIn](https://core.telegram.org/method/auth.signIn).\n\nAfter signing up, or when logging in as an existing user, apps are supposed to call [help.getTermsOfServiceUpdate](https://core.telegram.org/method/help.getTermsOfServiceUpdate) to check for any updates to the Terms of Service; this call should be repeated after `expires` seconds have elapsed.  \nIf an update to the Terms Of Service is available, clients are supposed to show a consent popup; if accepted, clients should call [help.acceptTermsOfService](https://core.telegram.org/method/help.acceptTermsOfService), providing the [termsOfService `id` JSON object](https://core.telegram.org/constructor/help.termsOfService); in case of denial, clients are to delete the account using [account.deleteAccount](https://core.telegram.org/method/account.deleteAccount), providing `Decline ToS update` as deletion `reason`.\n\nExample implementation: [android (signup)](https://github.com/DrKLO/Telegram/blob/dbf81a34affcd1c24d78e1403347ea8b3a186154/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java#L3510), [android (after login)](https://github.com/DrKLO/Telegram/blob/ed9e38da5b3b6ca80a7cb719a000d310d07497b0/TMessagesProj/src/main/java/org/telegram/ui/Components/TermsOfServiceView.java)\n\n### [](#telegram-support-info)Telegram support info\n\n```\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\nhelp.support#17c6b5f6 phone_number:string user:User = help.Support;\nhelp.supportName#8c05f1c9 name:string = help.SupportName;\n\n---functions---\n\nhelp.getSupport#9cdf08cd = help.Support;\nhelp.getSupportName#d360e72c = help.SupportName;\n```\n\nThese methods can be used for fetching info about Telegram's support user, that users can use to get support and ask questions about the app.\n\n*   [help.getSupport](https://core.telegram.org/method/help.getSupport) - Will return the [user](https://core.telegram.org/constructor/user) object that can be used for contacting support.\n*   [help.getSupportName](https://core.telegram.org/method/help.getSupportName) - Will return a localized name for the support chat.\n\n### [](#country-information-and-login-phone-patterns)Country information and login phone patterns\n\n```\nhelp.countryCode#4203c5ef flags:# country_code:string prefixes:flags.0?Vector<string> patterns:flags.1?Vector<string> = help.CountryCode;\n\nhelp.country#c3878e23 flags:# hidden:flags.0?true iso2:string default_name:string name:flags.1?string country_codes:Vector<help.CountryCode> = help.Country;\n\nhelp.countriesListNotModified#93cc1f32 = help.CountriesList;\nhelp.countriesList#87d0759e countries:Vector<help.Country> hash:int = help.CountriesList;\n\n---functions---\nhelp.getCountriesList#735787a8 lang_code:string hash:int = help.CountriesList;\n```\n\n[help.getCountriesList](https://core.telegram.org/method/help.getCountriesList) can be used to fetch a list of localized names for all available countries and phone code patterns for logging in.\n\nThe phone code pattern should be used when showing the [login](https://core.telegram.org/api/auth) screen, or when changing phone number: for example, a pattern value of `XXX XXX XXX` with `country_code` `+39` indicates that the phone field for login should accept a spaced pattern like `+39 123 456 789`.  \nAlso, the beginning of the national part of the phone number (`123 456 789`) should match one of the `prefixes`, if any were returned.\n\nAdditionally, the `fragment_prefixes` [client configuration parameter](https://core.telegram.org/api/config#client-configuration) contains a list of phone number prefixes for anonymous [Fragment](https://fragment.com/) phone numbers.",
    "url": "https://core.telegram.org/api/config"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/bots",
      "title": "Bots",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Bots"
        },
        {
          "property": "og:description",
          "content": "Working with bots, using the MTProto API."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:56 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "2988",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Bots\n\nWorking with bots, using the MTProto API.\n\nSee [here](https://core.telegram.org/bots) for more info about bots.\n\nPlease note that you can also use the simplified [HTTP Bot API](https://core.telegram.org/bots/api) to use bots, see [here for more info\u00a0\u00bb](https://core.telegram.org/bots).\n\n### [](#login)Login\n\n```\n---functions---\n\nauth.importBotAuthorization#67a3ff2c flags:int api_id:int api_hash:string bot_auth_token:string = auth.Authorization;\n```\n\nIn order to login as a bot, instead of using the [standard login code flow](https://core.telegram.org/api/auth), simply provide the [bot token](https://core.telegram.org/bots#how-do-i-create-a-bot) generated by [@botfather](https://t.me/botfather).  \nYou must still provide your [API ID](https://core.telegram.org/api/obtaining_api_id#obtaining-api-id), as per user logins.\n\nAfter successful authorization, you will be able to use [most MTProto API methods](https://core.telegram.org/methods), just as any normal user.  \nMethods that can be called by bots will have a **Bots can use this method** notice.\n\n### [](#edit-bot-information-)[Edit bot information\u00a0\u00bb](https://core.telegram.org/api/bots/info)\n\nUsers can edit and localize the profile picture, name, about text and description of bots they own; the same can be done by the bots themselves.\n\n### [](#commands-)[Commands\u00a0\u00bb](https://core.telegram.org/api/bots/commands)\n\n[Bots](https://core.telegram.org/bots) offer a set of commands that can be used by users in private, or in a chat.\n\n### [](#buttons-)[Buttons\u00a0\u00bb](https://core.telegram.org/api/bots/buttons)\n\nUsers can interact with your bot via **buttons** or even **inline buttons**, straight from inline **messages** in **any** chat.\n\n### [](#menu-button-)[Menu button\u00a0\u00bb](https://core.telegram.org/api/bots/menu)\n\nBots can choose the behavior of the menu button shown next to the text input field.\n\n### [](#suggested-bot-admin-rights-)[Suggested bot admin rights\u00a0\u00bb](https://core.telegram.org/api/rights#suggested-bot-rights)\n\nBots can suggest a set of admin rights when being added to groups and channels.\n\n### [](#inline-queries-)[Inline queries\u00a0\u00bb](https://core.telegram.org/api/bots/inline)\n\nUsers can interact with your bot via **inline queries**, straight from the **text input field** in **any** chat.\n\n### [](#games-)[Games\u00a0\u00bb](https://core.telegram.org/api/bots/games)\n\nBots can offer users HTML5 games to play solo or to compete against each other in groups and one-on-one chats; how to work with games in the MTProto API.\n\n### [](#web-apps-)[Web apps\u00a0\u00bb](https://core.telegram.org/api/bots/webapps)\n\nBots can offer users interactive [HTML5 web apps](https://core.telegram.org/bots/webapps) to completely replace **any website**.\n\n#### [](#affiliate-programs)[Affiliate programs](https://core.telegram.org/api/bots/referrals)\n\nDevelopers can open affiliate programs for their [mini app](https://core.telegram.org/api/bots/webapps) \u2013 allowing **content creators**, other **mini app developers** and **any Telegram user** to promote it and earn commissions on purchases made by people they referred.\n\n### [](#attachment-menu-)[Attachment menu\u00a0\u00bb](https://core.telegram.org/api/bots/attach)\n\nBots can install attachment menu entries, offering conveniently accessible, versatile web apps.\n\n### [](#business-bots-)[Business bots\u00a0\u00bb](https://core.telegram.org/api/business#connected-bots)\n\nBusiness users can connect Telegram bots that will process and answer messages **on their behalf**. This allows businesses to **seamlessly integrate** any existing tools and workflows, or add **AI assistants** that manage their chats.\n\n### [](#bot-api-dialog-ids)[Bot API dialog IDs](https://core.telegram.org/api/bots/ids)\n\nHow to convert MTProto peer IDs to bot API dialog IDs and vice versa.",
    "url": "https://core.telegram.org/api/bots"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/bots/buttons",
      "title": "Buttons",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Buttons"
        },
        {
          "property": "og:description",
          "content": "Users can interact with your bot via buttons or even inline buttons, straight from inline messages in any chat."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:57 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "6706",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Buttons\n\nUsers can interact with your bot via **buttons** or even **inline buttons**, straight from inline **messages** in **any** chat.  \nThis article describes the full button flow, using the MTProto API.\n\nFor a simplified description using the HTTP bot API, see [here\u00a0\u00bb](https://core.telegram.org/bots/features#keyboards).\n\n### [](#buttons)Buttons\n\n```\nkeyboardButton#a2fa4880 text:string = KeyboardButton;\nkeyboardButtonUrl#258aff05 text:string url:string = KeyboardButton;\nkeyboardButtonCallback#35bbdb6b flags:# requires_password:flags.0?true text:string data:bytes = KeyboardButton;\nkeyboardButtonRequestPhone#b16a6c29 text:string = KeyboardButton;\nkeyboardButtonRequestGeoLocation#fc796b3f text:string = KeyboardButton;\nkeyboardButtonSwitchInline#93b9fbb5 flags:# same_peer:flags.0?true text:string query:string peer_types:flags.1?Vector<InlineQueryPeerType> = KeyboardButton;\nkeyboardButtonGame#50f41ccf text:string = KeyboardButton;\nkeyboardButtonBuy#afd93fbb text:string = KeyboardButton;\nkeyboardButtonUrlAuth#10b78d29 flags:# text:string fwd_text:flags.0?string url:string button_id:int = KeyboardButton;\ninputKeyboardButtonUrlAuth#d02e7fd4 flags:# request_write_access:flags.0?true text:string fwd_text:flags.1?string url:string bot:InputUser = KeyboardButton;\nkeyboardButtonRequestPoll#bbc7515d flags:# quiz:flags.0?Bool text:string = KeyboardButton;\ninputKeyboardButtonRequestPeer#c9662d05 flags:# name_requested:flags.0?true username_requested:flags.1?true photo_requested:flags.2?true text:string button_id:int peer_type:RequestPeerType max_quantity:int = KeyboardButton;\n\nkeyboardButtonRow#77608b83 buttons:Vector<KeyboardButton> = KeyboardButtonRow;\n\nreplyKeyboardHide#a03e5b85 flags:# selective:flags.2?true = ReplyMarkup;\nreplyKeyboardForceReply#86b40b08 flags:# single_use:flags.1?true selective:flags.2?true placeholder:flags.3?string = ReplyMarkup;\nreplyKeyboardMarkup#85dd99d1 flags:# resize:flags.0?true single_use:flags.1?true selective:flags.2?true persistent:flags.4?true rows:Vector<KeyboardButtonRow> placeholder:flags.3?string = ReplyMarkup;\nreplyInlineMarkup#48a30254 rows:Vector<KeyboardButtonRow> = ReplyMarkup;\n\nmessage#94345242 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true from_scheduled:flags.18?true legacy:flags.19?true edit_hide:flags.21?true pinned:flags.24?true noforwards:flags.26?true invert_media:flags.27?true flags2:# offline:flags2.1?true video_processing_pending:flags2.4?true id:int from_id:flags.8?Peer from_boosts_applied:flags.29?int peer_id:Peer saved_peer_id:flags.28?Peer fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?long via_business_bot_id:flags2.0?long reply_to:flags.3?MessageReplyHeader date:int message:string media:flags.9?MessageMedia reply_markup:flags.6?ReplyMarkup entities:flags.7?Vector<MessageEntity> views:flags.10?int forwards:flags.10?int replies:flags.23?MessageReplies edit_date:flags.15?int post_author:flags.16?string grouped_id:flags.17?long reactions:flags.20?MessageReactions restriction_reason:flags.22?Vector<RestrictionReason> ttl_period:flags.25?int quick_reply_shortcut_id:flags.30?int effect:flags2.2?long factcheck:flags2.3?FactCheck = Message;\n\n---functions---\n\nmessages.sendMessage#983f9745 flags:# no_webpage:flags.1?true silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\n```\n\nBots can attach a [ReplyMarkup](https://core.telegram.org/type/ReplyMarkup) constructor to outgoing messages, to attach an [inline keyboard](https://core.telegram.org/bots/features#inline-keyboards) or a [custom reply keyboard](https://core.telegram.org/bots/features#keyboards):\n\n*   [replyKeyboardMarkup](https://core.telegram.org/constructor/replyKeyboardMarkup) - Sends a [custom reply keyboard](https://core.telegram.org/bots/features#keyboards).  \n    User clients receiving such a constructor should display a [special keyboard](https://core.telegram.org/bots/features#keyboards) with custom reply options.\n*   [replyKeyboardHide](https://core.telegram.org/constructor/replyKeyboardHide) - Hides the [custom reply keyboard](https://core.telegram.org/bots/features#keyboards).  \n    User clients receiving this constructor should hide the [custom reply keyboard](https://core.telegram.org/bots/features#keyboards) opened by [replyKeyboardMarkup](https://core.telegram.org/constructor/replyKeyboardMarkup)\n*   [replyKeyboardForceReply](https://core.telegram.org/constructor/replyKeyboardForceReply) - Sends a [force reply](https://core.telegram.org/bots/api#forcereply) constructor  \n    User clients receiving a message with this constructor should act as if the user had clicked on the reply button of the message, displaying the reply UI.\n*   [replyInlineMarkup](https://core.telegram.org/constructor/replyInlineMarkup) - Attaches an [inline keyboard](https://core.telegram.org/bots/features#inline-keyboards) to the message, allowing users to send callback data to the bot without sending actual messages to the current chat.\n\n### [](#pressing-buttons)Pressing buttons\n\n```\nrequestPeerTypeUser#5f3b8a00 flags:# bot:flags.0?Bool premium:flags.1?Bool = RequestPeerType;\nrequestPeerTypeChat#c9f06e1b flags:# creator:flags.0?true bot_participant:flags.5?true has_username:flags.3?Bool forum:flags.4?Bool user_admin_rights:flags.1?ChatAdminRights bot_admin_rights:flags.2?ChatAdminRights = RequestPeerType;\nrequestPeerTypeBroadcast#339bef6c flags:# creator:flags.0?true has_username:flags.3?Bool user_admin_rights:flags.1?ChatAdminRights bot_admin_rights:flags.2?ChatAdminRights = RequestPeerType;\n\nkeyboardButtonRequestPeer#53d7bfd8 text:string button_id:int peer_type:RequestPeerType max_quantity:int = KeyboardButton;\n\nmessageActionRequestedPeer#31518e9b button_id:int peers:Vector<Peer> = MessageAction;\n\nkeyboardButton#a2fa4880 text:string = KeyboardButton;\nkeyboardButtonUrl#258aff05 text:string url:string = KeyboardButton;\nkeyboardButtonCallback#35bbdb6b flags:# requires_password:flags.0?true text:string data:bytes = KeyboardButton;\nkeyboardButtonRequestPhone#b16a6c29 text:string = KeyboardButton;\nkeyboardButtonRequestGeoLocation#fc796b3f text:string = KeyboardButton;\nkeyboardButtonRequestPoll#bbc7515d flags:# quiz:flags.0?Bool text:string = KeyboardButton;\nkeyboardButtonSwitchInline#93b9fbb5 flags:# same_peer:flags.0?true text:string query:string peer_types:flags.1?Vector<InlineQueryPeerType> = KeyboardButton;\nkeyboardButtonGame#50f41ccf text:string = KeyboardButton;\nkeyboardButtonBuy#afd93fbb text:string = KeyboardButton;\nkeyboardButtonUrlAuth#10b78d29 flags:# text:string fwd_text:flags.0?string url:string button_id:int = KeyboardButton;\n\n// Used by bots to send a keyboardButtonUrlAuth\ninputKeyboardButtonUrlAuth#d02e7fd4 flags:# request_write_access:flags.0?true text:string fwd_text:flags.1?string url:string bot:InputUser = KeyboardButton;\n\nkeyboardButtonRow#77608b83 buttons:Vector<KeyboardButton> = KeyboardButtonRow;\n\n---functions---\n\nmessages.sendBotRequestedPeer#91b2d060 peer:InputPeer msg_id:int button_id:int requested_peers:Vector<InputPeer> = Updates;\n```\n\nBoth [reply](https://core.telegram.org/bots/features#keyboards) and [inline](https://core.telegram.org/bots/features#inline-keyboards) keyboards are composed of a vector of [rows](https://core.telegram.org/constructor/keyboardButtonRow), each row containing a vector of [buttons](https://core.telegram.org/type/KeyboardButton), for each column.  \nEach row can have a different number of columns, and user clients should properly handle clicking buttons of every type.\n\nButtons available only in reply keyboards:\n\n*   [keyboardButton](https://core.telegram.org/constructor/keyboardButton) - Send a message to the chat, replying to the message that attached the [reply keyboard](https://core.telegram.org/bots/features#keyboards)\n*   [keyboardButtonRequestPhone](https://core.telegram.org/constructor/keyboardButtonRequestPhone) - Only in private chats, send the current user's contact to the chat, replying to the message that attached the [reply keyboard](https://core.telegram.org/bots/features#keyboards)\n*   [keyboardButtonRequestGeoLocation](https://core.telegram.org/constructor/keyboardButtonRequestGeoLocation) - Only in private chats, send the current user's geolocation to the chat, replying to the message that attached the [reply keyboard](https://core.telegram.org/bots/features#keyboards)\n*   [keyboardButtonRequestPoll](https://core.telegram.org/constructor/keyboardButtonRequestPoll) - Only in private chats, prompts the user to create and send a [poll](https://core.telegram.org/api/poll) (or a quiz poll, depending on the `quiz` flag), replying to the message that attached the [reply keyboard](https://core.telegram.org/bots/features#keyboards)\n*   [keyboardButtonRequestPeer](https://core.telegram.org/constructor/keyboardButtonRequestPeer) - Prompts the user to select and share a maximum of `max_quantity` peers with the bot using [messages.sendBotRequestedPeer](https://core.telegram.org/method/messages.sendBotRequestedPeer), according to the criteria specified in the [RequestPeerType](https://core.telegram.org/type/RequestPeerType) constructor. [keyboardButtonRequestPeer](https://core.telegram.org/constructor/keyboardButtonRequestPeer).`button_id` must be passed to the method: the peer and the specified `button_id` will be received by the bot as a [messageActionRequestedPeer](https://core.telegram.org/constructor/messageActionRequestedPeer) service message.\n\nButtons available only in inline keyboards:\n\n*   [keyboardButtonUrl](https://core.telegram.org/constructor/keyboardButtonUrl) - Open the URL, showing a \"Do you want to open this URL?\" prompt (unless the URL is one of the [internal URIs](https://github.com/DrKLO/Telegram/blob/002c01ecd37cd08ed07b3ed84d79318d091dfc85/TMessagesProj/src/main/java/org/telegram/messenger/browser/Browser.java#L351), in which case the URL should be opened right away)\n*   [keyboardButtonCallback](https://core.telegram.org/constructor/keyboardButtonCallback) - Send the callback data to the bot, optionally providing the user's 2FA SRP payload for identity verification, see [here for more info\u00a0\u00bb](#callback-queries)\n*   [keyboardButtonSwitchInline](https://core.telegram.org/constructor/keyboardButtonSwitchInline)\n    *   If `keyboardButtonSwitchInline.same_peer` is set, insert the bot's username and `keyboardButtonSwitchInline.query` in the current chat's input field, triggering an [inline query](https://core.telegram.org/api/bots/inline).\n    *   If `keyboardButtonSwitchInline.same_peer` is not set, prompt the user to select one of their chats, and then insert the bot's username and `keyboardButtonSwitchInline.query` in the current chat's input field, triggering an [inline query](https://core.telegram.org/api/bots/inline).\n*   [keyboardButtonGame](https://core.telegram.org/constructor/keyboardButtonGame) - Open the [game](https://core.telegram.org/constructor/game) from the attached [messageMediaGame](https://core.telegram.org/constructor/messageMediaGame) constructor, for more info [see here\u00a0\u00bb](https://core.telegram.org/api/bots/games)\n*   [keyboardButtonBuy](https://core.telegram.org/constructor/keyboardButtonBuy) - Proceed to initiating the payment flow, for more info [see here\u00a0\u00bb](https://core.telegram.org/api/payments)\n*   [keyboardButtonUrlAuth](https://core.telegram.org/constructor/keyboardButtonUrlAuth) - Log into a website using the user's Telegram account, as specified [here\u00a0\u00bb](https://core.telegram.org/api/url-authorization)\n\n### [](#callback-queries)Callback queries\n\n[keyboardButtonCallback](https://core.telegram.org/constructor/keyboardButtonCallback) buttons can be used to send the specified `data` payload back to the bot, when they are clicked.  \nAdditionally, a bot can verify a user's identity by requiring they verify their 2FA password with [SRP](https://core.telegram.org/api/srp).\n\n#### [](#sending-a-callback-query)Sending a callback query\n\n```\nkeyboardButtonGame#50f41ccf text:string = KeyboardButton;\nkeyboardButtonCallback#35bbdb6b flags:# requires_password:flags.0?true text:string data:bytes = KeyboardButton;\n\nmessages.botCallbackAnswer#36585ea4 flags:# alert:flags.1?true has_url:flags.3?true native_ui:flags.4?true message:flags.0?string url:flags.2?string cache_time:int = messages.BotCallbackAnswer;\n\n---functions---\n\nmessages.getBotCallbackAnswer#9342ca07 flags:# game:flags.1?true peer:InputPeer msg_id:int data:flags.0?bytes password:flags.2?InputCheckPasswordSRP = messages.BotCallbackAnswer;\n```\n\nWhen the user clicks on a [keyboardButtonCallback](https://core.telegram.org/constructor/keyboardButtonCallback) in a message sent by a bot, or generated by an [inline query](https://core.telegram.org/api/bots/inline), [messages.getBotCallbackAnswer](https://core.telegram.org/method/messages.getBotCallbackAnswer) should be called, passing the peer and ID of the message.  \nThe same should happen when clicking on [keyboardButtonGame](https://core.telegram.org/constructor/keyboardButtonGame) buttons, with the difference that the `game` flag must be set instead of the `data` parameter.\n\nMake sure to properly handle bot timeouts in the form of `BOT_RESPONSE_TIMEOUT` RPC errors, as the bot may be offline and unable to reply.\n\nThe returned [messages.botCallbackAnswer](https://core.telegram.org/constructor/messages.botCallbackAnswer) constructor contains:\n\n*   `message` if specified, a message that should be shown in a non-blocking toast notification\n*   `alert` indicates whether the `message` should be shown as a dismissible prompt, instead of a simple toast notification\n*   `has_url` Whether an URL is present\n*   `url` if specified, the client should open the URL, without showing a confirmation prompt.  \n    This is safe and allowed, because here bots can only return:\n    *   [Deep links to themselves\u00a0\u00bb](https://core.telegram.org/api/links#bot-links)\n    *   [Deep links to a valid game they own\u00a0\u00bb](https://core.telegram.org/api/links#game-links), if the bot has manually configured games, and the clicked button was a [keyboardButtonGame](https://core.telegram.org/constructor/keyboardButtonGame).\n*   `native_ui` whether to open game URLs in a WebView or in native UI.\n*   `cache_time` specifies for how long should this answer be cached, client-side\n\n##### [](#srp-verification)SRP verification\n\nIf the `requires_password` flag is set, the [SRP 2FA payload](https://core.telegram.org/api/srp) must also be generated and attached to the query, to verify the identity of the user.\n\n**Note that the bot will NOT be able to access your password or the SRP payload**.\n\nThe SRP payload will be processed exclusively on the Telegram's servers, simply returning an RPC error without passing the query to the bot if the verification fails.  \nThis is just a way of verifying the identity of the user, mainly used by the official [@botfather](https://t.me/botfather) bot to allow securely transferring the ownership of a bot to another user.\n\n#### [](#answering-a-callback-query)Answering a callback query\n\n```\nupdateBotCallbackQuery#b9cfc48d flags:# query_id:long user_id:long peer:Peer msg_id:int chat_instance:long data:flags.0?bytes game_short_name:flags.1?string = Update;\n\nupdateInlineBotCallbackQuery#691e9052 flags:# query_id:long user_id:long msg_id:InputBotInlineMessageID chat_instance:long data:flags.0?bytes game_short_name:flags.1?string = Update;\n\nupdateBusinessBotCallbackQuery#1ea2fda7 flags:# query_id:long user_id:long connection_id:string message:Message reply_to_message:flags.2?Message chat_instance:long data:flags.0?bytes = Update;\n\n---functions---\n\nmessages.setBotCallbackAnswer#d58f130a flags:# alert:flags.1?true query_id:long message:flags.0?string url:flags.2?string cache_time:int = Bool;\n```\n\nAfter the user invokes [messages.getBotCallbackAnswer](https://core.telegram.org/method/messages.getBotCallbackAnswer), an [updateBotCallbackQuery](https://core.telegram.org/constructor/updateBotCallbackQuery), [updateInlineBotCallbackQuery](https://core.telegram.org/constructor/updateInlineBotCallbackQuery) or [updateBusinessBotCallbackQuery](https://core.telegram.org/constructor/updateBusinessBotCallbackQuery) is generated and sent to the bot, depending on whether the query originated from a normal message sent by the bot, from a message sent from an [inline query](https://core.telegram.org/api/bots/inline), or from a message sent via a [business connection](https://core.telegram.org/api/business#connected-bots).\n\nEither way, bots must reply to the query as quickly as possible using [messages.setBotCallbackAnswer](https://core.telegram.org/method/messages.setBotCallbackAnswer):\n\n*   `query_id` is the `query_id` from [messages.getBotCallbackAnswer](https://core.telegram.org/method/messages.getBotCallbackAnswer), an [updateBotCallbackQuery](https://core.telegram.org/constructor/updateBotCallbackQuery), [updateInlineBotCallbackQuery](https://core.telegram.org/constructor/updateInlineBotCallbackQuery) or [updateBusinessBotCallbackQuery](https://core.telegram.org/constructor/updateBusinessBotCallbackQuery)\n*   `message`, `alert`, `url` can contain messages and URLs to trigger different client behaviour, as [specified above\u00a0\u00bb](#sending-a-callback-query)\n*   `cache_time` indicates the maximum amount of time in seconds that the result of the callback query may be cached by the **client**.\n\nIf a `game_short_name` is present in the update, the bot should return the URL of the game with the specified name.  \nThe [messages.setBotCallbackAnswer](https://core.telegram.org/method/messages.setBotCallbackAnswer) method must be called anyway, even if no `message` or `url` is returned, to avoid timeouts on the client.",
    "url": "https://core.telegram.org/api/bots/buttons"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/bots/menu",
      "title": "Bot menu button",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Bot menu button"
        },
        {
          "property": "og:description",
          "content": "Bots can choose the behavior of the menu button shown next to the text input field."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:57 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3736",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Bot menu button\n\nBots can choose the behavior of the menu button shown next to the text input field.\n\nFor a simplified description using the HTTP bot API, see [here \u00bb](https://core.telegram.org/bots/api).\n\n### [](#setting-the-menu-button)Setting the menu button\n\nSchema:\n\n```\nbotMenuButtonDefault#7533a588 = BotMenuButton;\nbotMenuButtonCommands#4258c205 = BotMenuButton;\nbotMenuButton#c7b57ce6 text:string url:string = BotMenuButton;\n\ninputUserEmpty#b98886cf = InputUser;\ninputUser#f21158c6 user_id:long access_hash:long = InputUser;\n\n---functions---\n\nbots.setBotMenuButton#4504d54f user_id:InputUser button:BotMenuButton = Bool;\n```\n\nBots can use [bots.setBotMenuButton](https://core.telegram.org/method/bots.setBotMenuButton) to change the menu button for a certain user, or for all users.\n\n#### [](#set-scope-all-users)Set scope: all users\n\nTo change the menu button for all users use the following parameters:\n\n*   `user_id` - [inputUserEmpty](https://core.telegram.org/constructor/inputUserEmpty)\n*   `button` - one of the following constructors:\n    *   [botMenuButton](https://core.telegram.org/constructor/botMenuButton) - Opens a [bot mini app](https://core.telegram.org/api/bots/webapps) when clicked.\n    *   [botMenuButtonCommands](https://core.telegram.org/constructor/botMenuButtonCommands) - Opens the bot's command list when clicked.\n\n[botMenuButtonDefault](https://core.telegram.org/constructor/botMenuButton) shouldn't be used as it has no effect, keeping the previously set menu button (either [botMenuButton](https://core.telegram.org/constructor/botMenuButton) or [botMenuButtonCommands](https://core.telegram.org/constructor/botMenuButtonCommands)).\n\n#### [](#set-scope-specific-users)Set scope: specific users\n\nTo change the menu button for a specific user use the following parameters:\n\n*   `user_id` - [inputUser](https://core.telegram.org/constructor/inputUser) with the user ID/access hash\n*   `button` - one of the following constructors:\n    *   [botMenuButton](https://core.telegram.org/constructor/botMenuButton) - Opens a [bot mini app](https://core.telegram.org/api/bots/webapps) when clicked.\n    *   [botMenuButtonCommands](https://core.telegram.org/constructor/botMenuButtonCommands) - Opens the bot's command list when clicked.\n    *   [botMenuButtonDefault](https://core.telegram.org/constructor/botMenuButton) - Resets the behavior of the button to the [default scope (all users)](#set-scope-all-users).\n\n### [](#getting-the-menu-button)Getting the menu button\n\n#### [](#bots)Bots\n\n```\nbotMenuButtonDefault#7533a588 = BotMenuButton;\nbotMenuButtonCommands#4258c205 = BotMenuButton;\nbotMenuButton#c7b57ce6 text:string url:string = BotMenuButton;\n\ninputUserEmpty#b98886cf = InputUser;\ninputUser#f21158c6 user_id:long access_hash:long = InputUser;\n\n---functions---\n\nbots.getBotMenuButton#9c60eb28 user_id:InputUser = BotMenuButton;\n```\n\nBots might need to know the button type currently used in a given chat or in all chats: [bots.getBotMenuButton](https://core.telegram.org/method/bots.getBotMenuButton) can be used for this.\n\nUsers can't use this method, and should use the [user](#users) method instead.\n\n##### [](#get-scope-all-users)Get scope: all users\n\nTo get the menu button used for all users use the following parameter:\n\n*   `user_id` - [inputUserEmpty](https://core.telegram.org/constructor/inputUserEmpty)\n\nOne of the following constructors will be returned:\n\n*   [botMenuButton](https://core.telegram.org/constructor/botMenuButton) - Opens a [bot mini app](https://core.telegram.org/api/bots/webapps) when clicked.\n*   [botMenuButtonCommands](https://core.telegram.org/constructor/botMenuButtonCommands) - Opens the bot's command list when clicked.\n\n[botMenuButtonDefault](https://core.telegram.org/constructor/botMenuButton) will never be returned in this case.\n\n##### [](#get-scope-specific-users)Get scope: specific users\n\nTo get the menu button used for a specific user use the following parameter:\n\n*   `user_id` - [inputUser](https://core.telegram.org/constructor/inputUser) with the user ID access/hash\n\nOne of the following constructors will be returned:\n\n*   [botMenuButton](https://core.telegram.org/constructor/botMenuButton) - Opens a [bot mini app](https://core.telegram.org/api/bots/webapps) when clicked.\n*   [botMenuButtonCommands](https://core.telegram.org/constructor/botMenuButtonCommands) - Opens the bot's command list when clicked.\n*   [botMenuButtonDefault](https://core.telegram.org/constructor/botMenuButton) - The [default scope (all users) button behavior is in use](#get-scope-all-users).\n\n#### [](#users)Users\n\n```\nupdateBotMenuButton#14b85813 bot_id:long button:BotMenuButton = Update;\n\nbotMenuButtonCommands#4258c205 = BotMenuButton;\nbotMenuButton#c7b57ce6 text:string url:string = BotMenuButton;\n\nbotInfo#36607333 flags:# has_preview_medias:flags.6?true user_id:flags.0?long description:flags.1?string description_photo:flags.4?Photo description_document:flags.5?Document commands:flags.2?Vector<BotCommand> menu_button:flags.3?BotMenuButton privacy_policy_url:flags.7?string app_settings:flags.8?BotAppSettings = BotInfo;\n\nuserFull#979d2376 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true voice_messages_forbidden:flags.20?true translations_disabled:flags.23?true stories_pinned_available:flags.26?true blocked_my_stories_from:flags.27?true wallpaper_overridden:flags.28?true contact_require_premium:flags.29?true read_dates_private:flags.30?true flags2:# sponsored_enabled:flags2.7?true can_view_revenue:flags2.9?true bot_can_manage_emoji_status:flags2.10?true id:long about:flags.1?string settings:PeerSettings personal_photo:flags.21?Photo profile_photo:flags.2?Photo fallback_photo:flags.22?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int ttl_period:flags.14?int theme_emoticon:flags.15?string private_forward_name:flags.16?string bot_group_admin_rights:flags.17?ChatAdminRights bot_broadcast_admin_rights:flags.18?ChatAdminRights premium_gifts:flags.19?Vector<PremiumGiftOption> wallpaper:flags.24?WallPaper stories:flags.25?PeerStories business_work_hours:flags2.0?BusinessWorkHours business_location:flags2.1?BusinessLocation business_greeting_message:flags2.2?BusinessGreetingMessage business_away_message:flags2.3?BusinessAwayMessage business_intro:flags2.4?BusinessIntro birthday:flags2.5?Birthday personal_channel_id:flags2.6?long personal_channel_message:flags2.6?int stargifts_count:flags2.8?int starref_program:flags2.11?StarRefProgram = UserFull;\n\n---functions---\n\nusers.getFullUser#b60f5918 id:InputUser = users.UserFull;\n```\n\nUsers will receive an [updateBotMenuButton](https://core.telegram.org/constructor/updateBotMenuButton) update when a bot changes the behavior of the menu button globally or in the private chat with the user.\n\nFor new bots, [users.getFullUser](https://core.telegram.org/method/users.getFullUser) can be used to fetch the [userFull](https://core.telegram.org/constructor/userFull) related to the bot, containing the [botInfo](https://core.telegram.org/constructor/botInfo) constructor with various info about the bot, including the menu button behavior.\n\n[botMenuButtonDefault](https://core.telegram.org/constructor/botMenuButton) will never be returned in a [updateBotMenuButton](https://core.telegram.org/constructor/updateBotMenuButton) or in a [botInfo](https://core.telegram.org/constructor/botInfo) (but if it does happen, treat it like a [botMenuButtonCommands](https://core.telegram.org/constructor/botMenuButtonCommands)).\n\nBots should use the [bot](#bots) method instead.",
    "url": "https://core.telegram.org/api/bots/menu"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/bots/inline",
      "title": "Inline",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Inline"
        },
        {
          "property": "og:description",
          "content": "Users can interact with your bot via inline queries, straight from the text input field in any chat."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:58 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "6143",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Inline\n\nUsers can interact with your bot via [**inline queries**](https://core.telegram.org/bots/features#inline-requests), straight from the **text input field** in **any** chat.  \nThis article describes the full inline bot flow, using the MTProto API.\n\nFor a simplified description using the HTTP bot API, see [here\u00a0\u00bb](https://core.telegram.org/bots/features#inline-requests).\n\n### [](#1-making-an-inline-query)1\\. Making an inline query\n\n```\nmessages.botResults#e021f2f6 flags:# gallery:flags.0?true query_id:long next_offset:flags.1?string switch_pm:flags.2?InlineBotSwitchPM switch_webview:flags.3?InlineBotWebView results:Vector<BotInlineResult> cache_time:int users:Vector<User> = messages.BotResults;\n\n---functions---\n\nmessages.getInlineBotResults#514e999d flags:# bot:InputUser peer:InputPeer geo_point:flags.0?InputGeoPoint query:string offset:string = messages.BotResults;\n```\n\nWhen, in a graphical client, the user starts a message with an `@`, clients should:\n\n*   Use the cached [top peer rating for inline bots](https://core.telegram.org/api/top-rating) to show a list of frequently used inline bots.\n*   If the user chooses a bot from the recent bot list or:\n*   Finishes typing a full username followed by a whitespace, and if the username [resolves](https://core.telegram.org/method/contacts.resolveUsername) to a valid bot\n*   [messages.getInlineBotResults](https://core.telegram.org/method/messages.getInlineBotResults) is called, with the following parameters:\n    *   `bot` - The bot peer\n    *   `peer` - The chat where the user made the query (or [inputPeerEmpty](https://core.telegram.org/constructor/inputPeerEmpty) for [GIF searches](https://core.telegram.org/api/gifs) and other queries to built-in bots specified in the [config](https://core.telegram.org/constructor/config))\n    *   `geo_point` - The user's current geolocation, if the bot requires [location-based inline results](https://core.telegram.org/bots/inline#location-based-results) (the `bot_inline_geo` flag of the bot's [user constructor](https://core.telegram.org/constructor/user) will be set)\n    *   `query` - What the user typed after the bot's username\n    *   `offset` - If the user scrolls past the first `len(results)` results, and `next_offset` field is set, the inline query should be repeated with this offset.\n\n### [](#2-answering-to-an-inline-query)2\\. Answering to an inline query\n\n```\ninputBotInlineMessageMediaAuto#3380c786 flags:# invert_media:flags.3?true message:string entities:flags.1?Vector<MessageEntity> reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;\ninputBotInlineMessageText#3dcd7a87 flags:# no_webpage:flags.0?true invert_media:flags.3?true message:string entities:flags.1?Vector<MessageEntity> reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;\ninputBotInlineMessageMediaGeo#96929a85 flags:# geo_point:InputGeoPoint heading:flags.0?int period:flags.1?int proximity_notification_radius:flags.3?int reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;\ninputBotInlineMessageMediaVenue#417bbf11 flags:# geo_point:InputGeoPoint title:string address:string provider:string venue_id:string venue_type:string reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;\ninputBotInlineMessageMediaContact#a6edbffd flags:# phone_number:string first_name:string last_name:string vcard:string reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;\ninputBotInlineMessageGame#4b425864 flags:# reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;\n\ninputBotInlineResult#88bf9319 flags:# id:string type:string title:flags.1?string description:flags.2?string url:flags.3?string thumb:flags.4?InputWebDocument content:flags.5?InputWebDocument send_message:InputBotInlineMessage = InputBotInlineResult;\ninputBotInlineResultPhoto#a8d864a7 id:string type:string photo:InputPhoto send_message:InputBotInlineMessage = InputBotInlineResult;\ninputBotInlineResultDocument#fff8fdc4 flags:# id:string type:string title:flags.1?string description:flags.2?string document:InputDocument send_message:InputBotInlineMessage = InputBotInlineResult;\ninputBotInlineResultGame#4fa417f2 id:string short_name:string send_message:InputBotInlineMessage = InputBotInlineResult;\n\nupdateBotInlineQuery#496f379c flags:# query_id:long user_id:long query:string geo:flags.0?GeoPoint peer_type:flags.1?InlineQueryPeerType offset:string = Update;\n\n---functions---\n\nmessages.setInlineBotResults#bb12a419 flags:# gallery:flags.0?true private:flags.1?true query_id:long results:Vector<InputBotInlineResult> cache_time:int next_offset:flags.2?string switch_pm:flags.3?InlineBotSwitchPM switch_webview:flags.4?InlineBotWebView = Bool;\n```\n\nBots can answer to incoming [updateBotInlineQuery](https://core.telegram.org/constructor/updateBotInlineQuery) updates using [messages.setInlineBotResults](https://core.telegram.org/method/messages.setInlineBotResults).  \nJust like its [bot API counterpart](https://core.telegram.org/bots/api#answerinlinequery), the method can be used to send a set of inline results to the user; see the [constructor page for more info on the MTProto method parameters\u00a0\u00bb](https://core.telegram.org/method/messages.setInlineBotResults).\n\nIn general, the method accepts a vector of [InputBotInlineResult](https://core.telegram.org/type/InputBotInlineResult) constructors, that when [chosen](#3-sending-the-inline-query-result), generates a message with optionally attached media, and even inline buttons.\n\n### [](#21-using-a-prepared-inline-message)2.1. Using a prepared inline message\n\n```\ninlineQueryPeerTypeSameBotPM#3081ed9d = InlineQueryPeerType;\ninlineQueryPeerTypePM#833c0fac = InlineQueryPeerType;\ninlineQueryPeerTypeChat#d766c50a = InlineQueryPeerType;\ninlineQueryPeerTypeMegagroup#5ec4be43 = InlineQueryPeerType;\ninlineQueryPeerTypeBroadcast#6334ee9a = InlineQueryPeerType;\ninlineQueryPeerTypeBotPM#e3b2d0c = InlineQueryPeerType;\n\nmessages.botPreparedInlineMessage#8ecf0511 id:string expire_date:int = messages.BotPreparedInlineMessage;\n\nmessages.preparedInlineMessage#ff57708d query_id:long result:BotInlineResult peer_types:Vector<InlineQueryPeerType> cache_time:int users:Vector<User> = messages.PreparedInlineMessage;\n\n---functions---\n\nmessages.savePreparedInlineMessage#f21f7f2f flags:# result:InputBotInlineResult user_id:InputUser peer_types:flags.0?Vector<InlineQueryPeerType> = messages.BotPreparedInlineMessage;\n\nmessages.getPreparedInlineMessage#857ebdb8 bot:InputUser id:string = messages.PreparedInlineMessage;\n```\n\nAn inline result may also be pre-generated by a [mini app](https://core.telegram.org/api/bots/webapps).\n\n1.  To start, the bot associated with the mini apps saves the prepared message using [messages.savePreparedInlineMessage](https://core.telegram.org/method/messages.savePreparedInlineMessage), specifying the message, the ID of the user that will use the message (i.e. the user currently viewing the web app) and the peer types where the message can be shared.\n2.  Then, the prepared inline message ID is passed to the user's client via the [web\\_app\\_send\\_prepared\\_message web event \u00bb](https://core.telegram.org/api/web-events#web-app-send-prepared-message).\n3.  The ID is then passed to [messages.getPreparedInlineMessage](https://core.telegram.org/method/messages.getPreparedInlineMessage) along with the identifier of the bot that owns the web app to fetch the prepared inline message  \n    3.1) If the method returns any RPC error, emit a [prepared\\_message\\_failed event](https://core.telegram.org/api/bots/webapps#prepared-message-failed) with `error` set to the message of the RPC error and abort the process.  \n    3.2) If the method succeeds, display a preview to the user, letting them select a destination chat.\n4.  If the user aborts the process, emit a [prepared\\_message\\_failed event](https://core.telegram.org/api/bots/webapps#prepared-message-failed) with `error` set to `USER_DECLINED`.\n5.  If the user selects a chat, send the message [as specified here \u00bb](#3-sending-the-inline-query-result).  \n    5.1) If sending fails, emit a [prepared\\_message\\_failed event](https://core.telegram.org/api/bots/webapps#prepared-message-failed) with `error` set to `MESSAGE_SEND_FAILED`.  \n    5.2) If sending succeeds, emit a [prepared\\_message\\_sent event](https://core.telegram.org/api/bots/webapps#prepared-message-sent).\n\n### [](#3-sending-the-inline-query-result)3\\. Sending the inline query result\n\n```\nbotInlineMessageMediaAuto#764cf810 flags:# invert_media:flags.3?true message:string entities:flags.1?Vector<MessageEntity> reply_markup:flags.2?ReplyMarkup = BotInlineMessage;\nbotInlineMessageText#8c7f65e2 flags:# no_webpage:flags.0?true invert_media:flags.3?true message:string entities:flags.1?Vector<MessageEntity> reply_markup:flags.2?ReplyMarkup = BotInlineMessage;\nbotInlineMessageMediaGeo#51846fd flags:# geo:GeoPoint heading:flags.0?int period:flags.1?int proximity_notification_radius:flags.3?int reply_markup:flags.2?ReplyMarkup = BotInlineMessage;\nbotInlineMessageMediaVenue#8a86659c flags:# geo:GeoPoint title:string address:string provider:string venue_id:string venue_type:string reply_markup:flags.2?ReplyMarkup = BotInlineMessage;\nbotInlineMessageMediaContact#18d1cdc2 flags:# phone_number:string first_name:string last_name:string vcard:string reply_markup:flags.2?ReplyMarkup = BotInlineMessage;\n\nbotInlineResult#11965f3a flags:# id:string type:string title:flags.1?string description:flags.2?string url:flags.3?string thumb:flags.4?WebDocument content:flags.5?WebDocument send_message:BotInlineMessage = BotInlineResult;\nbotInlineMediaResult#17db940b flags:# id:string type:string photo:flags.0?Photo document:flags.1?Document title:flags.2?string description:flags.3?string send_message:BotInlineMessage = BotInlineResult;\n\nmessages.botResults#e021f2f6 flags:# gallery:flags.0?true query_id:long next_offset:flags.1?string switch_pm:flags.2?InlineBotSwitchPM switch_webview:flags.3?InlineBotWebView results:Vector<BotInlineResult> cache_time:int users:Vector<User> = messages.BotResults;\n\n---functions---\n\nmessages.sendInlineBotResult#3ebee86a flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true hide_via:flags.11?true peer:InputPeer reply_to:flags.0?InputReplyTo random_id:long query_id:long id:string schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut = Updates;\n```\n\nThe user client should display the [messages.botResults](https://core.telegram.org/constructor/messages.botResults).`results` obtained [during querying](#1-making-an-inline-query) in a list, making sure to handle eventual bot timeouts in the form of a `BOT_RESPONSE_TIMEOUT` RPC error, by simply not displaying anything.\n\nIf either the [messages.botResults](https://core.telegram.org/constructor/messages.botResults).`switch_pm` or [messages.botResults](https://core.telegram.org/constructor/messages.botResults).`switch_webview` flags are populated, a button should be displayed on top of the result list, that when clicked, instead of sending an inline result to the chat, switches the user to a private chat with the bot (`switch_pm`) or to a [inline mode mini app](https://core.telegram.org/api/bots/webapps#inline-mode-mini-apps) (`switch_webview`).\n\nIf the user instead chooses a specific `BotInlineResult` from the normal `results` list, the [messages.sendInlineBotResult](https://core.telegram.org/method/messages.sendInlineBotResult) method should be invoked, passing:\n\n*   The `query_id` from `messages.botResults` or `messages.preparedInlineMessage`\n*   The `id` of the chosen result\n*   The `peer` where to send the chosen result\n\nThe resulting [message](https://core.telegram.org/constructor/message) will have the `via_bot_id` field set, to indicate that the result was generated by the bot that generated the inline result.  \nGraphical clients should display the bot `@username` in the header of the message, allowing the user to click on it, automatically starting an inline query by inserting `@username` in the text bar.\n\n### [](#4-inline-feedback)4\\. Inline feedback\n\n```\ninputBotInlineMessageID#890c3d89 dc_id:int id:long access_hash:long = InputBotInlineMessageID;\n\nupdateBotInlineSend#12f12a07 flags:# user_id:long query:string geo:flags.0?GeoPoint id:string msg_id:flags.1?InputBotInlineMessageID = Update;\n```\n\nIf [feedback collection](https://core.telegram.org/bots/inline#collecting-feedback) is enabled, the bot may receive an [updateBotInlineSend](https://core.telegram.org/constructor/updateBotInlineSend) when the user [chooses and sends](#3-sending-the-inline-query-result) an inline result.\n\nEven if the [probability setting is set to 100%](https://core.telegram.org/bots/inline#collecting-feedback), not all inline results may be reported due to caching (see the `cache_time` parameter in [Answering a callback query](https://core.telegram.org/api/bots/buttons#answering-a-callback-query)).  \n[Feedback collection](https://core.telegram.org/bots/inline#collecting-feedback) can also create load issues for popular bots, so adjust the probability setting to a lower value in such cases.\n\nEither way, feedback collection should only be used for statistical purposes rather than functional.\n\nThe [updateBotInlineSend](https://core.telegram.org/constructor/updateBotInlineSend) will contain:\n\n*   `id` - The ID of the chosen result\n*   `msg_id` - The ID of the sent inline message\n*   `user_id` - The ID of the user that chose the result\n*   `query` - The query string that was used to obtain the result\n*   `geo` - For bots requiring [location-based inline results](https://core.telegram.org/bots/inline#location-based-results), the user's location\n\n### [](#5-editing-sent-inline-messages)5\\. Editing sent inline messages\n\n```\nupdateInlineBotCallbackQuery#691e9052 flags:# query_id:long user_id:long msg_id:InputBotInlineMessageID chat_instance:long data:flags.0?bytes game_short_name:flags.1?string = Update;\n\ninputBotInlineMessageID#890c3d89 dc_id:int id:long access_hash:long = InputBotInlineMessageID;\n\n---functions---\n\nmessages.editInlineBotMessage#83557dba flags:# no_webpage:flags.1?true invert_media:flags.16?true id:InputBotInlineMessageID message:flags.11?string media:flags.14?InputMedia reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Bool;\n```\n\nSent inline messages can be edited by the bot, for example in response to a [button press callback query](https://core.telegram.org/api/bots/buttons#callback-queries).\n\nSimply pass the [inputBotInlineMessageID](https://core.telegram.org/constructor/inputBotInlineMessageID) specified in the [updateInlineBotCallbackQuery](https://core.telegram.org/constructor/updateInlineBotCallbackQuery) to [messages.editInlineBotMessage](https://core.telegram.org/method/messages.editInlineBotMessage) along with the new message, making sure to send the query to the [datacenter](https://core.telegram.org/api/datacenter) specified in `inputBotInlineMessageID.dc_id`.",
    "url": "https://core.telegram.org/api/bots/inline"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/bots/commands",
      "title": "Commands",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Commands"
        },
        {
          "property": "og:description",
          "content": "Bots offer a set of commands that can be used by users in private, or in a chat."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:07:57 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4185",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Commands\n\n[Bots](https://core.telegram.org/bots) offer a set of [commands](https://core.telegram.org/bots/features#commands) that can be used by users in private, or in a chat.\n\nFor a simplified description using the HTTP bot API, see [here\u00a0\u00bb](https://core.telegram.org/bots/features#commands).\n\n### [](#getting-commands)Getting commands\n\n```\nbotCommand#c27ac8c7 command:string description:string = BotCommand;\n\nbotInfo#36607333 flags:# has_preview_medias:flags.6?true user_id:flags.0?long description:flags.1?string description_photo:flags.4?Photo description_document:flags.5?Document commands:flags.2?Vector<BotCommand> menu_button:flags.3?BotMenuButton privacy_policy_url:flags.7?string app_settings:flags.8?BotAppSettings = BotInfo;\n\nchannelFull#bbab348d flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true can_set_location:flags.16?true has_scheduled:flags.19?true can_view_stats:flags.20?true blocked:flags.22?true flags2:# can_delete_channel:flags2.0?true antispam:flags2.1?true participants_hidden:flags2.2?true translations_disabled:flags2.3?true stories_pinned_available:flags2.5?true view_forum_as_messages:flags2.6?true restricted_sponsored:flags2.11?true can_view_revenue:flags2.12?true paid_media_allowed:flags2.14?true can_view_stars_revenue:flags2.15?true paid_reactions_available:flags2.16?true id:long about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int online_count:flags.13?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:flags.23?ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?long migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int folder_id:flags.11?int linked_chat_id:flags.14?long location:flags.15?ChannelLocation slowmode_seconds:flags.17?int slowmode_next_send_date:flags.18?int stats_dc:flags.12?int pts:int call:flags.21?InputGroupCall ttl_period:flags.24?int pending_suggestions:flags.25?Vector<string> groupcall_default_join_as:flags.26?Peer theme_emoticon:flags.27?string requests_pending:flags.28?int recent_requesters:flags.28?Vector<long> default_send_as:flags.29?Peer available_reactions:flags.30?ChatReactions reactions_limit:flags2.13?int stories:flags2.4?PeerStories wallpaper:flags2.7?WallPaper boosts_applied:flags2.8?int boosts_unrestrict:flags2.9?int emojiset:flags2.10?StickerSet = ChatFull;\nuserFull#979d2376 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true voice_messages_forbidden:flags.20?true translations_disabled:flags.23?true stories_pinned_available:flags.26?true blocked_my_stories_from:flags.27?true wallpaper_overridden:flags.28?true contact_require_premium:flags.29?true read_dates_private:flags.30?true flags2:# sponsored_enabled:flags2.7?true can_view_revenue:flags2.9?true bot_can_manage_emoji_status:flags2.10?true id:long about:flags.1?string settings:PeerSettings personal_photo:flags.21?Photo profile_photo:flags.2?Photo fallback_photo:flags.22?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int ttl_period:flags.14?int theme_emoticon:flags.15?string private_forward_name:flags.16?string bot_group_admin_rights:flags.17?ChatAdminRights bot_broadcast_admin_rights:flags.18?ChatAdminRights premium_gifts:flags.19?Vector<PremiumGiftOption> wallpaper:flags.24?WallPaper stories:flags.25?PeerStories business_work_hours:flags2.0?BusinessWorkHours business_location:flags2.1?BusinessLocation business_greeting_message:flags2.2?BusinessGreetingMessage business_away_message:flags2.3?BusinessAwayMessage business_intro:flags2.4?BusinessIntro birthday:flags2.5?Birthday personal_channel_id:flags2.6?long personal_channel_message:flags2.6?int stargifts_count:flags2.8?int starref_program:flags2.11?StarRefProgram = UserFull;\n\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n```\n\nThe [botInfo](https://core.telegram.org/constructor/botInfo) constructors contained in the [userFull](https://core.telegram.org/constructor/userFull), [chatFull](https://core.telegram.org/constructor/chatFull), [channelFull](https://core.telegram.org/constructor/channelFull) contain a list of commands, and for groups, the ID and a description of each bot.\n\nIn graphical clients, when users begin a message with a `/`, a list of commands supported by all bots present in the current chat should be shown; the same should be done for one-to-one chats with the bot itself.\n\nIf the command list of a bot changes, the `bot_info_version` contained in the [user](https://core.telegram.org/constructor/user) constructor received in updates will change; this indicates that the client should refetch full bot information using [users.getFullUser](https://core.telegram.org/method/users.getFullUser).\n\n### [](#setting-commands)Setting commands\n\n```\nbotCommand#c27ac8c7 command:string description:string = BotCommand;\n\n---functions---\n\nbots.setBotCommands#517165a scope:BotCommandScope lang_code:string commands:Vector<BotCommand> = Bool;\n```\n\nThe command list can be changed by the owner of the bot through [@botfather](https://t.me/botfather), but bots can also change their own command list by invoking [bots.setBotCommands](https://core.telegram.org/method/bots.setBotCommands).",
    "url": "https://core.telegram.org/api/bots/commands"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/bots/games",
      "title": "Games",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Games"
        },
        {
          "property": "og:description",
          "content": "Bots can offer users HTML5 games to play solo or to compete against each other in groups and one-on-one chats."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:01 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3630",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Games\n\nBots can offer users [HTML5 games](https://core.telegram.org/bots/games) to play solo or to compete against each other in groups and one-on-one chats.\n\n### [](#sending-a-game)Sending a game\n\n```\ninputUserSelf#f7c1b13f = InputUser;\n\ninputGameID#32c3e77 id:long access_hash:long = InputGame;\ninputGameShortName#c331e80a bot_id:InputUser short_name:string = InputGame;\n\ninputMediaGame#d33f43f3 id:InputGame = InputMedia;\n\ngame#bdf9653b flags:# id:long access_hash:long short_name:string title:string description:string photo:Photo document:flags.0?Document = Game;\nmessageMediaGame#fdb19008 game:Game = MessageMedia;\n\n---functions---\n\nmessages.sendMedia#7852834e flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\n```\n\nBots can directly send a game using [messages.sendMedia](https://core.telegram.org/method/messages.sendMedia), providing:\n\n*   The game's short name obtained from [@BotFather](https://t.me/botfather) or from a [game link\u00a0\u00bb](https://core.telegram.org/api/links#game-links) to `inputGameShortName.short_name`\n*   The current bot's info to `inputGameShortName.bot_id`\n\nThe sent message will contain a [messageMediaGame](https://core.telegram.org/constructor/messageMediaGame) with a [game](https://core.telegram.org/constructor/game), that can then be used by users to forward the game using sendMedia with [inputGameID](https://core.telegram.org/constructor/inputGameID).\n\n### [](#starting-a-game)Starting a game\n\nGames are started clicking on the button, which triggers an callback query that returns the game URL, for more info [see here\u00a0\u00bb](https://core.telegram.org/api/bots/buttons#callback-queries).  \nThe game should then be opened in a WebView or in native UI (specified by the `native_ui` flag), exposing the [appropriate HTML5 APIs](https://core.telegram.org/api/web-events) in order to receive various JS game events directly from the code of the game, as described [here\u00a0\u00bb](https://core.telegram.org/api/web-events).\n\n### [](#setting-highscores)Setting highscores\n\n```\n---functions---\n\nmessages.setGameScore#8ef8ecc0 flags:# edit_message:flags.0?true force:flags.1?true peer:InputPeer id:int user_id:InputUser score:int = Updates;\nmessages.setInlineGameScore#15ad9f64 flags:# edit_message:flags.0?true force:flags.1?true id:InputBotInlineMessageID user_id:InputUser score:int = Bool;\n```\n\nGames are supposed to report back to the MTProto API every time the user looses a game with a new highscore.  \nSince games run in the browser, they cannot directly report data to the API using the bot token, which must be kept secret.  \nInstead, they should send highscores to an intermediate server, that will then report scores using [messages.setGameScore](https://core.telegram.org/method/messages.setGameScore) or [messages.setInlineGameScore](https://core.telegram.org/method/messages.setInlineGameScore), depending on the source of the game.\n\n*   The `edit_message` flag should be set if the game message should be automatically edited to include the current scoreboard\n*   The `force` flag should be set if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters.\n\n### [](#getting-highscores)Getting highscores\n\n```\nmessageActionGameScore#92a72876 game_id:long score:int = MessageAction;\n\nmessageService#2b085862 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true legacy:flags.19?true id:int from_id:flags.8?Peer peer_id:Peer reply_to:flags.3?MessageReplyHeader date:int action:MessageAction ttl_period:flags.25?int = Message;\n\nhighScore#73a379eb pos:int user_id:long score:int = HighScore;\n\nmessages.highScores#9a3bfd99 scores:Vector<HighScore> users:Vector<User> = messages.HighScores;\n\n---functions---\n\nmessages.getGameHighScores#e822649d peer:InputPeer id:int user_id:InputUser = messages.HighScores;\nmessages.getInlineGameHighScores#f635e1b id:InputBotInlineMessageID user_id:InputUser = messages.HighScores;\n```\n\nEvery time a highscore is reached, and the `edit_message` flag is set when reporting the score, a [messageService](https://core.telegram.org/constructor/messageService) with a [messageActionGameScore](https://core.telegram.org/constructor/messageActionGameScore) is generated, indicating that the highscore of a certain game has changed, thanks to a certain `user_id`.  \nOur own current position of the scoreboard is also reported as `pos`.\n\nWhen receiving such an update, graphical clients should refetch the scoreboard using [messages.getGameHighScores](https://core.telegram.org/method/messages.getGameHighScores) or [messages.getInlineGameHighScores](https://core.telegram.org/method/messages.getInlineGameHighScores).",
    "url": "https://core.telegram.org/api/bots/games"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/import",
      "title": "Imported messages",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Imported messages"
        },
        {
          "property": "og:description",
          "content": "Telegram allows importing messages and media from foreign chat apps."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:03 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3686",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Imported messages\n\nTelegram allows importing messages and media from foreign chat apps.\n\n> Note: This article is intended for MTProto API developers. If you're looking for a way to move history from other chat apps into Telegram, check out the related [Telegram blog post](https://telegram.org/blog/move-history).\n\n### [](#1-validate-the-chat-export-file)1\\. Validate the chat export file\n\n```\nmessages.historyImportParsed#5e0fb7b9 flags:# pm:flags.0?true group:flags.1?true title:flags.2?string = messages.HistoryImportParsed;\n\n---functions---\n\nmessages.checkHistoryImport#43fe19f3 import_head:string = messages.HistoryImportParsed;\n```\n\nThe import process begins by calling [messages.checkHistoryImport](https://core.telegram.org/method/messages.checkHistoryImport), passing to `import_head` up to 100 lines of the chat export file, starting from the beginning of the file.\n\nThe returned constructor contains information about the exported chat, including its title or type. If the `pm` flag is set, the chat export file was generated from a private chat. If the `group` flag is set, the chat export file was generated from a group chat. If neither the `pm` or `group` flags are set, the specified chat export was generated from a chat of unknown type.\n\n### [](#2-choosing-a-destination-telegram-chat)2\\. Choosing a destination Telegram chat\n\n```\nmessages.checkedHistoryImportPeer#a24de717 confirm_text:string = messages.CheckedHistoryImportPeer;\n\n---functions---\n\nmessages.checkHistoryImportPeer#5dc60f03 peer:InputPeer = messages.CheckedHistoryImportPeer;\n```\n\nUsing [messages.checkHistoryImportPeer](https://core.telegram.org/method/messages.checkHistoryImportPeer), check whether chat history exported from another chat app can be imported into a specific Telegram `peer`, chosen by the user.  \nTypically, history imports are allowed for private chats with a mutual contact or [supergroups](https://core.telegram.org/api/channel) with [`change_info` administrator rights \u00bb](https://core.telegram.org/api/rights).\n\nIf the check succeeds, and no RPC errors are returned, a [messages.CheckedHistoryImportPeer](https://core.telegram.org/type/messages.CheckedHistoryImportPeer) constructor will be returned, with a confirmation text to be shown to the user in a confirmation prompt.  \nUpon final user confirmation, [the import process is initialized](#3-initialize-the-import).\n\n### [](#3-initialize-the-import)3\\. Initialize the import\n\n```\nmessages.historyImport#1662af0b id:long = messages.HistoryImport;\n\n---functions---\n\nmessages.initHistoryImport#34090c3b peer:InputPeer file:InputFile media_count:int = messages.HistoryImport;\n```\n\nUse [messages.initHistoryImport](https://core.telegram.org/method/messages.initHistoryImport) to initialize the import process, passing the following parameters:\n\n*   `peer` - The Telegram chat where the history should be imported.\n*   `file` - The chat export file.\n*   `media_count` - The number of media files associated with the export, to be uploaded in [the next step](#4-uploading-media).\n\n### [](#4-uploading-media)4\\. Uploading media\n\n```\n---functions---\n\nmessages.uploadImportedMedia#2a862092 peer:InputPeer import_id:long file_name:string media:InputMedia = MessageMedia;\n```\n\nUse [messages.uploadImportedMedia](https://core.telegram.org/method/messages.uploadImportedMedia) to upload media files eventually associated with the chat export.  \n`import_id` is the `id` contained in the [messages.historyImport](https://core.telegram.org/constructor/messages.historyImport) constructor, returned by [messages.initHistoryImport](https://core.telegram.org/method/messages.initHistoryImport) [in the previous step](#3-initialize-the-import).\n\n### [](#5-finalize-the-import)5\\. Finalize the import\n\n```\nmessage#94345242 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true from_scheduled:flags.18?true legacy:flags.19?true edit_hide:flags.21?true pinned:flags.24?true noforwards:flags.26?true invert_media:flags.27?true flags2:# offline:flags2.1?true video_processing_pending:flags2.4?true id:int from_id:flags.8?Peer from_boosts_applied:flags.29?int peer_id:Peer saved_peer_id:flags.28?Peer fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?long via_business_bot_id:flags2.0?long reply_to:flags.3?MessageReplyHeader date:int message:string media:flags.9?MessageMedia reply_markup:flags.6?ReplyMarkup entities:flags.7?Vector<MessageEntity> views:flags.10?int forwards:flags.10?int replies:flags.23?MessageReplies edit_date:flags.15?int post_author:flags.16?string grouped_id:flags.17?long reactions:flags.20?MessageReactions restriction_reason:flags.22?Vector<RestrictionReason> ttl_period:flags.25?int quick_reply_shortcut_id:flags.30?int effect:flags2.2?long factcheck:flags2.3?FactCheck = Message;\n\nmessageFwdHeader#4e4df4bb flags:# imported:flags.7?true saved_out:flags.11?true from_id:flags.0?Peer from_name:flags.5?string date:int channel_post:flags.2?int post_author:flags.3?string saved_from_peer:flags.4?Peer saved_from_msg_id:flags.4?int saved_from_id:flags.8?Peer saved_from_name:flags.9?string saved_date:flags.10?int psa_type:flags.6?string = MessageFwdHeader;\n\n---functions---\n\nmessages.startHistoryImport#b43df344 peer:InputPeer import_id:long = Bool;\n```\n\nFinally, invoke [messages.startHistoryImport](https://core.telegram.org/method/messages.startHistoryImport) to complete the [history import process](https://core.telegram.org/api/import), importing all messages into the chat.  \nAs usual, `import_id` is the `id` contained in the [messages.historyImport](https://core.telegram.org/constructor/messages.historyImport) constructor, returned by [messages.initHistoryImport](https://core.telegram.org/method/messages.initHistoryImport).\n\nImported messages will show in the chat history as [messages](https://core.telegram.org/constructor/message) containing a `fwd_from` [messageFwdHeader](https://core.telegram.org/constructor/messageFwdHeader) constructor with the `imported` flag, and should be appropriately marked in the UI as messages imported from a foreign chat app.",
    "url": "https://core.telegram.org/api/import"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/bots/webapps",
      "title": "Mini Apps on Telegram",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Mini Apps on Telegram"
        },
        {
          "property": "og:description",
          "content": "Bots can offer users interactive HTML5 web apps to completely replace any website."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:02 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "14828",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Mini Apps on Telegram\n\nInteractive [HTML5 Mini Apps](https://core.telegram.org/bots/webapps) on Telegram can completely replace **any website**.\n\nThey support [seamless authorization](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots), [integrated payments](https://core.telegram.org/bots/payments) via multiple payment providers (with _Google Pay_ and _Apple Pay_ out of the box), delivering tailored push notifications to users, and [much more](https://core.telegram.org/bots).\n\nThis article offers a client-side overview of the implementation of bot mini apps using the MTProto API: see [here for an overview of the mini-app side JS API\u00a0\u00bb](https://core.telegram.org/bots/webapps).\n\n### [](#main-mini-apps)Main Mini Apps\n\nSchema:\n\n```\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\nwebViewResultUrl#4d22ff98 flags:# fullsize:flags.1?true fullscreen:flags.2?true query_id:flags.0?long url:string = WebViewResult;\n\nbotAppSettings#c99b1950 flags:# placeholder_path:flags.0?bytes background_color:flags.1?int background_dark_color:flags.2?int header_color:flags.3?int header_dark_color:flags.4?int = BotAppSettings;\nbotInfo#36607333 flags:# has_preview_medias:flags.6?true user_id:flags.0?long description:flags.1?string description_photo:flags.4?Photo description_document:flags.5?Document commands:flags.2?Vector<BotCommand> menu_button:flags.3?BotMenuButton privacy_policy_url:flags.7?string app_settings:flags.8?BotAppSettings = BotInfo;\n\n---functions---\n\nmessages.requestMainWebView#c9e01e7b flags:# compact:flags.7?true fullscreen:flags.8?true peer:InputPeer bot:InputUser start_param:flags.1?string theme_params:flags.0?DataJSON platform:string = WebViewResult;\n```\n\nMain Mini Apps are configured through [@botfather](https://t.me/botfather).\n\nOnce enabled, the [user](https://core.telegram.org/constructor/user).`bot_has_main_app` flag will be set, and an \"Open App\" button should be shown on the bot's profile page.\n\nClicking on this button should open the Main Mini App, by invoking [messages.requestMainWebView](https://core.telegram.org/method/messages.requestMainWebView): no URL needs to be passed to the method, because the Main Mini App URL is configured through [@botfather](https://t.me/botfather).\n\nApps may also specify a custom background, header color and placeholder SVG logo to be used during loading screens, specified in the [botAppSettings](https://core.telegram.org/constructor/botAppSettings) constructor, contained in the [botInfo](https://core.telegram.org/constructor/botInfo) constructor returned in [userFull](https://core.telegram.org/constructor/userFull).\n\nAfter invoking [messages.requestMainWebView](https://core.telegram.org/method/messages.requestMainWebView) and obtaining a [webViewResultUrl](https://core.telegram.org/constructor/webViewResultUrl) result, clients should open a webview using the `url` contained in the returned [webViewResultUrl](https://core.telegram.org/constructor/webViewResultUrl).\n\nThe bot's profile page should also show a list of photos and videos, previewing the features offered by the Main Mini App, see [Main Mini App previews](#main-mini-app-previews) for more info on how to configure and render them.\n\nMain Mini Apps are also featured in the in-app [Mini App Store\u00a0\u00bb](https://core.telegram.org/api/search#apps-tab).\n\nThe Main Mini App should also be directly opened when [clicking on a Main Mini App deep link\u00a0\u00bb](https://core.telegram.org/api/links#main-mini-app-links); the `compact`/`fullscreen` flag of the method must be set if the `mode` parameter in the link is set and equal to `compact`/`fullscreen`; any eventual `start_param` present in the link must also be passed to the method.\n\n#### [](#main-mini-app-previews)Main Mini App previews\n\n```\nbotInfo#36607333 flags:# has_preview_medias:flags.6?true user_id:flags.0?long description:flags.1?string description_photo:flags.4?Photo description_document:flags.5?Document commands:flags.2?Vector<BotCommand> menu_button:flags.3?BotMenuButton privacy_policy_url:flags.7?string app_settings:flags.8?BotAppSettings = BotInfo;\n\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\nbotPreviewMedia#23e91ba3 date:int media:MessageMedia = BotPreviewMedia;\nbots.previewInfo#0ca71d64 media:Vector<BotPreviewMedia> lang_codes:Vector<string> = bots.PreviewInfo;\n\n---functions---\n\nbots.getPreviewMedias#a2a5594d bot:InputUser = Vector<BotPreviewMedia>;\n\nmessages.uploadMedia#14967978 flags:# business_connection_id:flags.0?string peer:InputPeer media:InputMedia = MessageMedia;\n\nbots.getPreviewInfo#423ab3ad bot:InputUser lang_code:string = bots.PreviewInfo;\nbots.addPreviewMedia#17aeb75a bot:InputUser lang_code:string media:InputMedia = BotPreviewMedia;\nbots.editPreviewMedia#8525606f bot:InputUser lang_code:string media:InputMedia new_media:InputMedia = BotPreviewMedia;\nbots.deletePreviewMedia#2d0135b3 bot:InputUser lang_code:string media:Vector<InputMedia> = Bool;\nbots.reorderPreviewMedias#b627f3aa bot:InputUser lang_code:string order:Vector<InputMedia> = Bool;\n```\n\nAfter enabling a [main mini app\u00a0\u00bb](#main-mini-apps) in [@botfather](https://t.me/botfather), bots gain the ability to display **localized** preview medias (photos and videos) on their profile page, offering examples of what the app can do.\n\nIf a bot has some preview medias, the [botInfo](https://core.telegram.org/constructor/botInfo).`has_preview_medias` flag will be set ([botInfo](https://core.telegram.org/constructor/botInfo) is contained in the bot's [userFull](https://core.telegram.org/constructor/userFull)).  \nClients should then invoke [bots.getPreviewMedias](https://core.telegram.org/method/bots.getPreviewMedias) to fetch&download the preview medias once the user opens the bot's profile page.  \nThe method will automatically select the correctly localized variant of each preview, according to the language code of the user (as passed to [initConnection](https://core.telegram.org/method/initConnection) when first setting up the client).\n\nBot owners may edit the preview medias directly through the API.\n\nTo check whether the current user can edit the preview medias of a bot, make sure both the `bot_can_edit` and `bot_has_main_app` flags of the bot's [user](https://core.telegram.org/constructor/user) constructor are set.\n\nThen, [bots.getPreviewInfo](https://core.telegram.org/method/bots.getPreviewInfo) should be invoked by bot owners to fetch the previously configured preview medias.  \nPass an empty string to `lang_code` when first invoking the method to fetch the previously configured default preview medias (used as fallback if there is no preview for the current user's language), and the list of `lang_codes` for which there are localized previews; then re-invoke the method to fetch the previously configured previews for each of the returned `lang_codes`.\n\n(Note: technically non-owners may also invoke [bots.getPreviewInfo](https://core.telegram.org/method/bots.getPreviewInfo), but it will always behave exactly as [bots.getPreviewMedias](https://core.telegram.org/method/bots.getPreviewMedias), returning only previews for the current language and an empty `lang_codes` array, regardless of the passed `lang_code`, so please only use [bots.getPreviewMedias](https://core.telegram.org/method/bots.getPreviewMedias) if you're not the owner).\n\nThen, use [bots.addPreviewMedia](https://core.telegram.org/method/bots.addPreviewMedia), [bots.editPreviewMedia](https://core.telegram.org/method/bots.editPreviewMedia), [bots.reorderPreviewMedias](https://core.telegram.org/method/bots.reorderPreviewMedias), [bots.deletePreviewMedia](https://core.telegram.org/method/bots.deletePreviewMedia), uploading medias using [messages.uploadMedia](https://core.telegram.org/method/messages.uploadMedia) as usual to setup fallback and localized previews for existing and new languages.\n\nAs specified above, each language can have a distinct set of previews that may be edited and reordered independently. The default, fallback language has an empty `lang_code`.\n\nA maximum of [bot\\_preview\\_medias\\_max\u00a0\u00bb](https://core.telegram.org/api/config#bot-preview-medias-max) preview medias may be added per localization key.\n\n### [](#keyboard-button-mini-apps)Keyboard Button Mini Apps\n\nSchema:\n\n```\nreplyKeyboardMarkup#85dd99d1 flags:# resize:flags.0?true single_use:flags.1?true selective:flags.2?true persistent:flags.4?true rows:Vector<KeyboardButtonRow> placeholder:flags.3?string = ReplyMarkup;\n\nkeyboardButtonSimpleWebView#a0c0505c text:string url:string = KeyboardButton;\n\nmessageActionWebViewDataSentMe#47dd8079 text:string data:string = MessageAction;\nmessageActionWebViewDataSent#b4c38cb5 text:string = MessageAction;\n\nwebViewResultUrl#4d22ff98 flags:# fullsize:flags.1?true fullscreen:flags.2?true query_id:flags.0?long url:string = WebViewResult;\n\n---functions---\n\nmessages.requestSimpleWebView#413a3e73 flags:# from_switch_webview:flags.1?true from_side_menu:flags.2?true compact:flags.7?true fullscreen:flags.8?true bot:InputUser url:flags.3?string start_param:flags.4?string theme_params:flags.0?DataJSON platform:string = WebViewResult;\n\nmessages.sendWebViewData#dc0242c8 bot:InputUser random_id:long button_text:string data:string = Updates;\n```\n\nKeyboard Button Mini Apps should be opened when the user clicks a [keyboardButtonSimpleWebView](https://core.telegram.org/constructor/keyboardButtonSimpleWebView) contained in a reply keyboard identified by a [replyKeyboardMarkup](https://core.telegram.org/constructor/replyKeyboardMarkup) constructor, by invoking [messages.requestSimpleWebView](https://core.telegram.org/method/messages.requestSimpleWebView) passing the button's `url` to the `url` parameter.\n\nAfter invoking [messages.requestSimpleWebView](https://core.telegram.org/method/messages.requestSimpleWebView) and obtaining a [webViewResultUrl](https://core.telegram.org/constructor/webViewResultUrl) result, clients should open a webview using the `url` contained in the returned [webViewResultUrl](https://core.telegram.org/constructor/webViewResultUrl).\n\nKeyboard Button Mini Apps can send data back to the bot through the MTProto API via a [`web_app_data_send` JS event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-data-send).\n\nUpon receiving a [`web_app_data_send` JS event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-data-send) **only** from Keyboard Button Mini Apps, clients should invoke [messages.sendWebViewData](https://core.telegram.org/method/messages.sendWebViewData), passing the following arguments:\n\n*   `bot` - Bot ID\n*   `random_id` - Unique random ID to avoid resending the same event multiple times\n*   `button_text` - Text of the [keyboardButtonSimpleWebView](https://core.telegram.org/constructor/keyboardButtonSimpleWebView) that was pressed to open the simple Mini App\n*   `data` - Contents of the `data` field of the JS event.\n\nMake sure to ignore all `web_app_data_send` events sent after the first one, [messages.sendWebViewData](https://core.telegram.org/method/messages.sendWebViewData) must be called only once. The webview must be closed after invoking the [messages.sendWebViewData](https://core.telegram.org/method/messages.sendWebViewData) method.\n\nThis will generate a [messageActionWebViewDataSent](https://core.telegram.org/constructor/messageActionWebViewDataSent) update for the user, and a [messageActionWebViewDataSentMe](https://core.telegram.org/constructor/messageActionWebViewDataSentMe) update for the bot, containing the event data.\n\n### [](#inline-button-mini-apps)Inline button Mini Apps\n\nSchema:\n\n```\nkeyboardButtonWebView#13767230 text:string url:string = KeyboardButton;\n\nwebViewResultUrl#4d22ff98 flags:# fullsize:flags.1?true fullscreen:flags.2?true query_id:flags.0?long url:string = WebViewResult;\n\ninputBotInlineResult#88bf9319 flags:# id:string type:string title:flags.1?string description:flags.2?string url:flags.3?string thumb:flags.4?InputWebDocument content:flags.5?InputWebDocument send_message:InputBotInlineMessage = InputBotInlineResult;\ninputBotInlineResultPhoto#a8d864a7 id:string type:string photo:InputPhoto send_message:InputBotInlineMessage = InputBotInlineResult;\ninputBotInlineResultDocument#fff8fdc4 flags:# id:string type:string title:flags.1?string description:flags.2?string document:InputDocument send_message:InputBotInlineMessage = InputBotInlineResult;\ninputBotInlineResultGame#4fa417f2 id:string short_name:string send_message:InputBotInlineMessage = InputBotInlineResult;\n\nupdateWebViewResultSent#1592b79d query_id:long = Update;\nwebViewMessageSent#c94511c flags:# msg_id:flags.0?InputBotInlineMessageID = WebViewMessageSent;\n\n---functions---\n\nmessages.requestWebView#269dc2c1 flags:# from_bot_menu:flags.4?true silent:flags.5?true compact:flags.7?true fullscreen:flags.8?true peer:InputPeer bot:InputUser url:flags.1?string start_param:flags.3?string theme_params:flags.2?DataJSON platform:string reply_to:flags.0?InputReplyTo send_as:flags.13?InputPeer = WebViewResult;\n\nmessages.prolongWebView#b0d81a83 flags:# silent:flags.5?true peer:InputPeer bot:InputUser query_id:long reply_to:flags.0?InputReplyTo send_as:flags.13?InputPeer = Bool;\n\nmessages.sendWebViewResultMessage#a4314f5 bot_query_id:string result:InputBotInlineResult = WebViewMessageSent;\n```\n\nInline Button Mini Apps work similarly to [inline bots\u00a0\u00bb](https://core.telegram.org/api/bots/inline): they send messages on behalf of the user to the chat from which the query originated.\n\nWhen the user clicks on an [keyboardButtonWebView](https://core.telegram.org/constructor/keyboardButtonWebView) inline button contained in an inline keyboard identified by a [replyInlineMarkup](https://core.telegram.org/constructor/replyInlineMarkup) constructor, [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView) should be invoked, passing [keyboardButtonWebView](https://core.telegram.org/constructor/keyboardButtonWebView).`url` must be passed to the method's `url` parameter.\n\nThen, clients should open a webview using the `url` contained in the returned [webViewResultUrl](https://core.telegram.org/constructor/webViewResultUrl).\n\nAfter loading the webview, until it is closed by a [web\\_app\\_close event](https://core.telegram.org/api/web-events#web-app-close), the user client must invoke [messages.prolongWebView](https://core.telegram.org/method/messages.prolongWebView) every 60 seconds: if the method call returns `QUERY_ID_INVALID`, the webview must be closed.\n\nThe opened URL's fragment parameters already contain basic information about the user and a `query_id` parameter, that is exposed by the [bot Mini Apps JS library](https://core.telegram.org/bots/webapps): this `query_id` can then be passed to the bot (within the Mini App itself, for example via an AJAX query or form submission to the server hosting the Mini App and the bot) and then used **by the bot** to invoke [messages.sendWebViewResultMessage](https://core.telegram.org/method/messages.sendWebViewResultMessage), passing an [InputBotInlineResult](https://core.telegram.org/type/InputBotInlineResult) constructor that will automatically send a message with optionally attached media, and even inline buttons on behalf of the user.\n\n### [](#menu-button-mini-apps)Menu button Mini Apps\n\nMenu button Mini Apps work similarly to [inline button Mini Apps\u00a0\u00bb](#inline-button-mini-apps): they send messages on behalf of the user to the chat from where the [bot menu button\u00a0\u00bb](https://core.telegram.org/api/bots/menu) was clicked.\n\nMenu button Mini Apps can be opened from a [botMenuButton](https://core.telegram.org/constructor/botMenuButton) [menu button\u00a0\u00bb](https://core.telegram.org/api/bots/menu): in this case, the [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView).`from_bot_menu` flag should be set, and the [botMenuButton](https://core.telegram.org/constructor/botMenuButton).`url` field must be passed to the method's `url` parameter.\n\nThe full flow is identical to the flow for [inline button Mini Apps\u00a0\u00bb](#inline-button-mini-apps), apart from the different flags passed to [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView), as described above.\n\n### [](#attachment-menu-mini-apps)Attachment menu Mini Apps\n\nAttachment menu Mini Apps work similarly to [inline button Mini Apps\u00a0\u00bb](#inline-button-mini-apps): they send messages on behalf of the user to the chat where the bot's [attachment menu\u00a0\u00bb](https://core.telegram.org/api/bots/attach) was opened.\n\nAttachment menu Mini Apps can be opened from an [attachment menu entry\u00a0\u00bb](https://core.telegram.org/api/bots/attach): in this case, no special flag should be set when invoking [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView).\n\nAttachment menu Mini Apps can also be opened from a [bot attachment menu deep link](https://core.telegram.org/api/links#bot-attachment-or-side-menu-links), in which case the `start_parameter` should be provided to [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView).`start_param`, if present, and the `compact`/`fullscreen` flag must be set if the `mode` parameter is set and equal to `compact`/`fullscreen`.\n\nThe full flow is identical to the flow for [inline button Mini Apps\u00a0\u00bb](#inline-button-mini-apps), apart from the different flags passed to [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView), as described above.\n\n### [](#inline-mode-mini-apps)Inline mode Mini Apps\n\n```\nmessages.botResults#e021f2f6 flags:# gallery:flags.0?true query_id:long next_offset:flags.1?string switch_pm:flags.2?InlineBotSwitchPM switch_webview:flags.3?InlineBotWebView results:Vector<BotInlineResult> cache_time:int users:Vector<User> = messages.BotResults;\n\ninlineBotWebView#b57295d5 text:string url:string = InlineBotWebView;\n\nwebViewResultUrl#4d22ff98 flags:# fullsize:flags.1?true fullscreen:flags.2?true query_id:flags.0?long url:string = WebViewResult;\n\n---functions---\n\nmessages.getInlineBotResults#514e999d flags:# bot:InputUser peer:InputPeer geo_point:flags.0?InputGeoPoint query:string offset:string = messages.BotResults;\n\nmessages.requestSimpleWebView#413a3e73 flags:# from_switch_webview:flags.1?true from_side_menu:flags.2?true compact:flags.7?true fullscreen:flags.8?true bot:InputUser url:flags.3?string start_param:flags.4?string theme_params:flags.0?DataJSON platform:string = WebViewResult;\n```\n\nNot to be confused with [inline button mini apps\u00a0\u00bb](#inline-button-mini-apps).\n\nInline mode Mini Apps can be used to generate a custom set of inline results in response to a user's [inline query\u00a0\u00bb](https://core.telegram.org/api/bots/inline) via a [`web_app_switch_inline_query` JS event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-switch-inline-query).\n\nInline mode Mini Apps can be opened by clicking on an [inlineBotWebView](https://core.telegram.org/constructor/inlineBotWebView) button returned at the top of the inline result list, contained in [messages.botResults](https://core.telegram.org/constructor/messages.botResults).`switch_webview`, returned by [messages.getInlineBotResults](https://core.telegram.org/method/messages.getInlineBotResults).\n\nPass the `url` to [messages.requestSimpleWebView](https://core.telegram.org/method/messages.requestSimpleWebView), while also setting the `from_switch_webview` flag.\n\nAfter invoking [messages.requestSimpleWebView](https://core.telegram.org/method/messages.requestSimpleWebView) and obtaining a [webViewResultUrl](https://core.telegram.org/constructor/webViewResultUrl) result, clients should open a webview using the `url` contained in the returned [webViewResultUrl](https://core.telegram.org/constructor/webViewResultUrl).\n\nOnce the user has finished making their choices in the Mini App, a [`web_app_switch_inline_query` JS event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-switch-inline-query) should be emitted, containing a JSON object with the following fields:\n\n*   `query` - The inline query that will be inserted in the chat's input field, after the bot's username.  \n    May be an empty string, in which case just the bot's username will be inserted, triggering an empty inline query.\n*   `chat_types` - An array of strings, containing a combination of `users`, `bots`, `groups`, `channels`.  \n    If non-empty, the client should prompt the user to choose a specific chat of the specified type(s), then open the chosen chat and inserts the bot's username and the specified inline query in the input field.  \n    The array values specify which types of chats the user will be able to choose from.  \n    If empty, the current chat is used.\n\nUpon receiving a [`web_app_switch_inline_query` JS event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-switch-inline-query) from the Mini App, the client should [make a new inline query\u00a0\u00bb](https://core.telegram.org/api/bots/inline) to the same bot, with the newly specified `query`, either in the current chat or in the newly chosen chat, as specified by the `chat_types` field.\n\n### [](#side-menu-mini-apps)Side menu Mini Apps\n\n```\nwebViewResultUrl#4d22ff98 flags:# fullsize:flags.1?true fullscreen:flags.2?true query_id:flags.0?long url:string = WebViewResult;\n\n---functions---\n\nmessages.requestSimpleWebView#413a3e73 flags:# from_switch_webview:flags.1?true from_side_menu:flags.2?true compact:flags.7?true fullscreen:flags.8?true bot:InputUser url:flags.3?string start_param:flags.4?string theme_params:flags.0?DataJSON platform:string = WebViewResult;\n```\n\nSide menu Mini Apps can be opened by clicking on the installed [side menu entry\u00a0\u00bb](https://core.telegram.org/api/bots/attach).\n\nThis action must trigger a [messages.requestSimpleWebView](https://core.telegram.org/method/messages.requestSimpleWebView) query with the `from_side_menu` flag set: clients should open a webview using the `url` contained in the returned [webViewResultUrl](https://core.telegram.org/constructor/webViewResultUrl).\n\nAfter invoking [messages.requestSimpleWebView](https://core.telegram.org/method/messages.requestSimpleWebView) and obtaining a [webViewResultUrl](https://core.telegram.org/constructor/webViewResultUrl) result, clients should open a webview using the `url` contained in the returned [webViewResultUrl](https://core.telegram.org/constructor/webViewResultUrl).\n\n### [](#direct-link-mini-apps)Direct Link Mini Apps\n\nSchema:\n\n```\ninputBotAppID#a920bd7a id:long access_hash:long = InputBotApp;\ninputBotAppShortName#908c0407 bot_id:InputUser short_name:string = InputBotApp;\n\nbotAppNotModified#5da674b7 = BotApp;\nbotApp#95fcd1d6 flags:# id:long access_hash:long short_name:string title:string description:string photo:Photo document:flags.0?Document hash:long = BotApp;\n\nmessages.botApp#eb50adf5 flags:# inactive:flags.0?true request_write_access:flags.1?true has_settings:flags.2?true app:BotApp = messages.BotApp;\n\nwebViewResultUrl#4d22ff98 flags:# fullsize:flags.1?true fullscreen:flags.2?true query_id:flags.0?long url:string = WebViewResult;\n\n---functions---\n\nmessages.getBotApp#34fdc5c3 app:InputBotApp hash:long = messages.BotApp;\n\nmessages.requestAppWebView#53618bce flags:# write_allowed:flags.0?true compact:flags.7?true fullscreen:flags.8?true peer:InputPeer app:InputBotApp start_param:flags.1?string theme_params:flags.2?DataJSON platform:string = WebViewResult;\n```\n\nAnother way to open Mini Apps is by using [Direct Mini App links\u00a0\u00bb](https://core.telegram.org/api/links#direct-mini-app-links).\n\nThese links are different from all other Mini App links, because they don't require the user to install an attachment menu, and a single bot can offer multiple Mini Apps, distinguished by their `short_name`.\n\nThese links should be handled as follows:\n\n*   Check if `bot_username` parameter of the link is indeed a bot username, if so then\n    \n*   Invoke [messages.getBotApp](https://core.telegram.org/method/messages.getBotApp), passing an [inputBotAppShortName](https://core.telegram.org/constructor/inputBotAppShortName) with the `short_name` contained in the `appname` query string parameter. If the client has already encountered an app with this short name from the same bot before, pass the `hash` of the cached [botApp](https://core.telegram.org/constructor/botApp) constructor to [messages.getBotApp](https://core.telegram.org/method/messages.getBotApp).\n    \n*   If a [messages.botApp](https://core.telegram.org/constructor/messages.botApp) constructor is returned, open the Mini App by invoking [messages.requestAppWebView](https://core.telegram.org/method/messages.requestAppWebView), generating an [inputBotAppID](https://core.telegram.org/constructor/inputBotAppID) constructor from `id` and `access_hash` of the returned [botApp](https://core.telegram.org/constructor/botApp), or from previously cached information if we already met the bot app and [botAppNotModified](https://core.telegram.org/constructor/botAppNotModified) was returned.\n    \n    *   If the client has clicked on the link in a Telegram chat, pass the chat's peer information into `peer`; otherwise pass the bot's peer information, instead.\n        \n    *   If the [messages.botApp](https://core.telegram.org/constructor/messages.botApp).`request_write_access` flag is set, the bot is asking permission to send messages to the user: **ask confirmation from the user** with a prompt and a checkbox, and if the user agrees, set the `write_allowed` flag when invoking [messages.requestAppWebView](https://core.telegram.org/method/messages.requestAppWebView).\n        \n    *   If the [messages.botApp](https://core.telegram.org/constructor/messages.botApp).`inactive` flag is set, **ask confirmation from the user** before opening the Mini App; the `request_write_access` checkbox should be shown in this prompt, if needed.  \n        Confirmation should **always** be asked, even if the `inactive` flag is not set, when opening the link from places where the full link is not visible (i.e. [messageEntityTextUrl](https://core.telegram.org/constructor/messageEntityTextUrl) text links, inline buttons etc.).\n        \n        Don't use two prompts if confirmation to open the Mini App is required _and_ `request_write_access` is set, use just one prompt with an optional checkbox for `request_write_access`.\n        \n    *   If the `startapp` query string parameter is present, pass it to `start_param` when invoking [messages.requestAppWebView](https://core.telegram.org/method/messages.requestAppWebView).\n        \n\nFinally, open the webview using the `url` contained in the returned [webViewResultUrl](https://core.telegram.org/constructor/webViewResultUrl).\n\n### [](#outgoing-events-mini-app-to-client)Outgoing events: Mini App to client\n\nMini Apps can _send_ web events starting with `web_app_`; see the [web event documentation for the full list of events that can be _sent_ by the Mini App to the client\u00a0\u00bb](https://core.telegram.org/api/web-events).\n\n### [](#incoming-events-client-to-mini-app)Incoming events: Client to Mini App\n\nMini Apps can also _receive_ events, by exposing a `window.Telegram.WebView.receiveEvent(\"event_name\", params)` method.\n\nHere's the full list of events that can be _received_ by a Mini App from the client, if the client invokes the `receiveEvent` method.\n\n#### [](#main-button-pressed)`main_button_pressed`\n\nParams: `null`\n\nSent by the client when the user presses the main button located at the bottom of the webview, handle this event only if the main button was [previously configured by a `web_app_setup_main_button` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-setup-main-button).\n\n#### [](#back-button-pressed)`back_button_pressed`\n\nParams: `null`\n\nSent by the client when the user presses the (OS or UI) back button, if it was [previously enabled by a `web_app_setup_back_button` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-setup-back-button).\n\n#### [](#settings-button-pressed)`settings_button_pressed`\n\nParams: `null`\n\nSent by the client when the user presses the settings button, if it was [previously enabled by a `web_app_setup_settings_button` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-setup-settings-button).\n\n#### [](#invoice-closed)`invoice_closed`\n\nParams: JSON object with the following fields:\n\n*   `slug` - Invoice identifier (string)\n*   `status` - One of the following values (string):\n    *   `cancelled` \u2013 The user closed the invoice popup without paying, before the call to [payments.sendPaymentForm](https://core.telegram.org/method/payments.sendPaymentForm).\n    *   `failed` \u2013 The user tried to pay, but the payment failed: the call to [payments.sendPaymentForm](https://core.telegram.org/method/payments.sendPaymentForm) returned an RPC error and the popup was closed.\n    *   `pending` \u2013 The payment is still processing: the bot will receive a further service message about a successful payment. [payments.sendPaymentForm](https://core.telegram.org/method/payments.sendPaymentForm) was successfully invoked returning [payments.paymentVerificationNeeded](https://core.telegram.org/constructor/payments.paymentVerificationNeeded), the user completed all additional verification forms returned by the method and the invoice popup was closed, but the client hasn't received a [messageActionPaymentSent](https://core.telegram.org/constructor/messageActionPaymentSent) service message yet.  \n        Note that eventual errors will not be sent as a `failed` event if the user fails additional validation (ie 3-D Secure) returned by [payments.paymentVerificationNeeded](https://core.telegram.org/constructor/payments.paymentVerificationNeeded): the state will remaing `pending`.\n    *   `paid` \u2013 The invoice was paid successfully: the client completed the [payment flow\u00a0\u00bb](https://core.telegram.org/api/payments), the invoice popup was closed and a [messageActionPaymentSent](https://core.telegram.org/constructor/messageActionPaymentSent) service message was received by the client.\n\nSent by the client to report the [payment status](https://core.telegram.org/api/payments) of an invoice obtained from a [`web_app_open_invoice` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-open-invoice).\n\n#### [](#viewport-changed)`viewport_changed`\n\nParams: a JSON object with the following fields:\n\n*   `height` - The current height of the visible area of the Mini App (excluding the bottom [main button](#main-button-pressed), if visible) (integer)\n*   `is_state_stable` - If true, the viewport is currently being resized (animation in progress), more events of this type may be emitted. (boolean)\n*   `is_expanded` - Whether the Mini App is expanded to its maximum height after the user swiped up or after the Mini App emitted a [web\\_app\\_expand](https://core.telegram.org/api/web-events#web-app-expand) event (boolean)\n\nEmitted when the viewport is changed.\n\n#### [](#theme-changed)`theme_changed`\n\nParams: a JSON object with the following fields:\n\n*   `theme_params` - A [theme parameters object\u00a0\u00bb](#theme-parameters) (object)\n\nEmitted when requested by the Mini App using a [`web_app_request_theme` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-request-theme), or when the app theme changes.\n\n##### [](#theme-parameters)Theme parameters\n\nBot Mini Apps can be themed according to the following theme parameters, passed as a JSON object to the `theme_params` parameter of the [messages.requestSimpleWebView](https://core.telegram.org/method/messages.requestSimpleWebView), [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView) and [messages.requestAppWebView](https://core.telegram.org/method/messages.requestAppWebView) methods.\n\nThis JSON object has the following keys, containing color theme information (hex string, RGB, no alpha) to pass to the Mini App.\n\nSee [here \u00bb](https://core.telegram.org/bots/webapps#themeparams) for more info on the contents of the object.\n\n#### [](#popup-closed)`popup_closed`\n\nParams: a JSON object with an optional `button_id` string field.\n\nEmitted when the user presses a button or cancels a popup brought up by a previous [`web_app_open_popup` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-open-popup).\n\n#### [](#write-access-requested)`write_access_requested`\n\nParams: a JSON object with the following fields:\n\n*   `status` - `allowed` or `cancelled`\n\nUsed by clients to reply to a [`web_app_request_write_access` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-request-write-access), indicating whether the user has allowed the bot to send messages to the user (`allowed`) or not (`cancelled`).\n\n#### [](#phone-requested)`phone_requested`\n\nParams: a JSON object with the following fields:\n\n*   `status` - `sent` or `cancelled`\n\nUsed by clients to reply to a [`web_app_request_phone` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-request-phone), indicating whether the user has shared their phone number with the bot (`allowed`) or not (`cancelled`).\n\n#### [](#biometry-info-received)`biometry_info_received`\n\nParams: a JSON object with the following fields:\n\n*   `available` - boolean, if true, indicates that biometric authentication is available on the current device.\n*   `type` - optional string, set if `available` is true, contains the type of biometric authentication, one of:\n    *   `finger` - fingerprint-based biometrics\n    *   `face` - face-based biometrics\n    *   `unknown` - biometrics of an unknown type\n*   `access_requested` - boolean, indicates whether the app has previously requested permission to use biometrics through a [`web_app_biometry_request_access` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-request-access)\n*   `access_granted` - boolean, indicates whether the user has granted the app permission to use biometrics in response to a [`web_app_biometry_request_access` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-request-access).  \n    If false and `access_requested` is true, the user has denied the app permission to use biometrics, in which case the app should open a prompt notifying the user that the biometric settings must be changed to use biometrics, and if the user clicks on the in-app confirm button, a [web\\_app\\_biometry\\_open\\_settings event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-open-settings) must be emitted.\n*   `token_saved` - boolean, whether a token was safely stored on-device by a previous [web\\_app\\_biometry\\_update\\_token event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-update-token).\n*   `device_id` - string, a unique device identifier that can be used to match the token to the device.\n\nUsed by clients to reply to a [`web_app_biometry_get_info` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-get-info) or a [`web_app_biometry_request_access` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-request-access).\n\n#### [](#biometry-token-updated)`biometry_token_updated`\n\nParams: a JSON object with the following fields:\n\n*   `status` - string, one of:\n    *   `updated` - If the token was successfully updated.\n    *   `removed` - If the token was successfully removed.\n    *   `failed` - If biometric authentication failed, or the app doesn't have permission to use biometrics (a [biometry\\_info\\_received event\u00a0\u00bb](#biometry-info-received) event will also be emitted if the app hasn't previously initialized the state using [`web_app_biometry_get_info` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-get-info) or a [`web_app_biometry_request_access` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-request-access)).\n\nUsed by clients to reply to a [`web_app_biometry_update_token` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-update-token).\n\n#### [](#biometry-auth-requested)`biometry_auth_requested`\n\nParams: a JSON object with the following fields:\n\n*   `status` - string, either `authorized` or `failed`.  \n    If `failed`, a [biometry\\_info\\_received event\u00a0\u00bb](#biometry-info-received) event will also be emitted if the app hasn't previously initialized the state using [`web_app_biometry_get_info` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-get-info) or a [`web_app_biometry_request_access` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-request-access).\n*   `token` - optional string, set if `status` is `authorized`, contains the token previously set using the [`web_app_biometry_update_token` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-update-token).\n\nUsed by clients to reply to a [`web_app_biometry_request_auth` biometric authentication request\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-request-auth).\n\n#### [](#custom-method-invoked)`custom_method_invoked`\n\nParams: a JSON object with the following fields:\n\n*   `req_id` - The `req_id` from the `web_app_invoke_custom_method` request\n*   `result` - The JSON data contained in the response of the [bots.invokeWebViewCustomMethod](https://core.telegram.org/method/bots.invokeWebViewCustomMethod) method, if the method call succeeded\n*   `error` - The text of the RPC error, if the method call failed\n\nUsed by clients to reply to [`web_app_invoke_custom_method` events\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-invoke-custom-method).\n\n#### [](#clipboard-text-received)`clipboard_text_received`\n\nParams: a JSON object with the following fields:\n\n*   `req_id` - The `req_id` from the `web_app_read_text_from_clipboard` request\n*   `data` - A string with the clipboard contents (optional, if not provided consider the request failed)\n\nUsed by clients to reply to [`web_app_read_text_from_clipboard` events\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-read-text-from-clipboard).\n\n#### [](#qr-text-received)`qr_text_received`\n\nParams: a JSON object with the following fields:\n\n*   `data` - string with the contents of a scanned QR code.\n\nEmitted by clients if a new QR code was scanned by the native QR code scanner opened with a [`web_app_open_scan_qr_popup` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-open-scan-qr-popup).\n\n#### [](#scan-qr-popup-closed)`scan_qr_popup_closed`\n\nParams: `null` or an empty object\n\nEmitted by clients if the QR code scanner popup opened with a [`web_app_open_scan_qr_popup` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-open-scan-qr-popup) was closed by the user or failed to open altogether due to permission issues.\n\n#### [](#visibility-changed)`visibility_changed`\n\nParams: a JSON object with a single `is_visible=true|false` boolean field.\n\nEmitted the Mini App becomes active (`true`) or inactive (`false`), e.g., opened/closed from minimized state or selected/deselected among tabs).\n\n#### [](#secondary-button-pressed)`secondary_button_pressed`\n\nParams: `null`\n\nSent by the client when the user presses the secondary button located at the bottom of the webview, handle this event only if the secondary button was [previously configured by a `web_app_setup_secondary_button` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-setup-secondary-button).\n\n#### [](#fullscreen-changed)`fullscreen_changed`\n\nParams: a JSON object with the following fields:\n\n*   `is_fullscreen` - boolean indicating whether the mini app is currently in fullscreen mode.\n\nSent by the client when replying to [web\\_app\\_request\\_fullscreen](https://core.telegram.org/api/web-events#web-app-request-fullscreen) and [web\\_app\\_exit\\_fullscreen](https://core.telegram.org/api/web-events#web-app-exit-fullscreen) events.\n\n#### [](#fullscreen-failed)`fullscreen_failed`\n\nParams: a JSON object with the following fields:\n\n*   `error` - string indicating the error, one of:\n    *   `UNSUPPORTED` - Fullscreen mode is not supported on this device or platform\n    *   `ALREADY_FULLSCREEN` - The Mini App is already in fullscreen mode\n\nSent by the client if a failure occurs while handling [web\\_app\\_request\\_fullscreen](https://core.telegram.org/api/web-events#web-app-request-fullscreen) and [web\\_app\\_exit\\_fullscreen](https://core.telegram.org/api/web-events#web-app-exit-fullscreen) events.\n\n#### [](#accelerometer-started)`accelerometer_started`\n\nParams: `null`\n\nSent by the client in response to a [web\\_app\\_start\\_accelerometer event \u00bb](https://core.telegram.org/api/web-events#web-app-start-accelerometer) if accelerometer tracking is started successfully.\n\nUntil [web\\_app\\_stop\\_accelerometer](https://core.telegram.org/api/web-events#web-app-stop-accelerometer) is emitted by the mini app, the client will also emit [accelerometer\\_changed events](#accelerometer-changed) at most every `refresh_rate` milliseconds with accelerometer readings.\n\n#### [](#accelerometer-failed)`accelerometer_failed`\n\nParams: JSON object with the following fields:\n\n*   `error` - String, one of:\n    *   `UNSUPPORTED` - Accelerometer tracking is not supported on this device or platform.\n\nSent by the client in response to a [web\\_app\\_start\\_accelerometer event \u00bb](https://core.telegram.org/api/web-events#web-app-start-accelerometer) if accelerometer tracking cannot be started.\n\n#### [](#accelerometer-stopped)`accelerometer_stopped`\n\nParams: `null`\n\nSent by the client in response to a [web\\_app\\_stop\\_accelerometer event \u00bb](https://core.telegram.org/api/web-events#web-app-stop-accelerometer) if accelerometer tracking is stopped successfully.\n\n#### [](#accelerometer-changed)`accelerometer_changed`\n\nParams: JSON object with `x`, `y` and `z` fields of type `float`, containing the current acceleration in the X, Y and Z-axis, measured in m/s\u00b2.\n\nSent periodically by the client at most every `refresh_rate` milliseconds after [web\\_app\\_start\\_accelerometer \u00bb](https://core.telegram.org/api/web-events#web-app-start-accelerometer) is invoked and until [web\\_app\\_stop\\_accelerometer](https://core.telegram.org/api/web-events#web-app-stop-accelerometer) is invoked.\n\n#### [](#gyroscope-started)`gyroscope_started`\n\nParams: `null`\n\nSent by the client in response to a [web\\_app\\_start\\_gyroscope event \u00bb](https://core.telegram.org/api/web-events#web-app-start-gyroscope) if gyroscope tracking is started successfully.\n\nUntil [web\\_app\\_stop\\_gyroscope](https://core.telegram.org/api/web-events#web-app-stop-gyroscope) is emitted by the mini app, the client will also emit [gyroscope\\_changed events](#gyroscope-changed) at most every `refresh_rate` milliseconds with gyroscope readings.\n\n#### [](#gyroscope-failed)`gyroscope_failed`\n\nParams: JSON object with the following fields:\n\n*   `error` - String, one of:\n    *   `UNSUPPORTED` - Gyroscope tracking is not supported on this device or platform.\n\nSent by the client in response to a [web\\_app\\_start\\_gyroscope event \u00bb](https://core.telegram.org/api/web-events#web-app-start-gyroscope) if gyroscope tracking cannot be started.\n\n#### [](#gyroscope-stopped)`gyroscope_stopped`\n\nParams: `null`\n\nSent by the client in response to a [web\\_app\\_stop\\_gyroscope event \u00bb](https://core.telegram.org/api/web-events#web-app-stop-gyroscope) if gyroscope tracking is stopped successfully.\n\n#### [](#gyroscope-changed)`gyroscope_changed`\n\nParams: JSON object with `x`, `y` and `z` fields of type `float`, containing the current rotation rate around the X, Y and Z-axis, measured in rad/s.\n\nSent periodically by the client at most every `refresh_rate` milliseconds after [web\\_app\\_start\\_gyroscope \u00bb](https://core.telegram.org/api/web-events#web-app-start-gyroscope) is invoked and until [web\\_app\\_stop\\_gyroscope](https://core.telegram.org/api/web-events#web-app-stop-gyroscope) is invoked.\n\n#### [](#device-orientation-started)`device_orientation_started`\n\nParams: `null`\n\nSent by the client in response to a [web\\_app\\_start\\_device\\_orientation event \u00bb](https://core.telegram.org/api/web-events#web-app-start-device-orientation) if device orientation tracking is started successfully.\n\nUntil [web\\_app\\_stop\\_device\\_orientation](https://core.telegram.org/api/web-events#web-app-stop-device-orientation) is emitted by the mini app, the client will also emit [device\\_orientation events](#device-orientation-changed) at most every `refresh_rate` milliseconds with device orientation readings.\n\n#### [](#device-orientation-failed)`device_orientation_failed`\n\nParams: JSON object with the following fields:\n\n*   `error` - String, one of:\n    *   `UNSUPPORTED` - Device orientation tracking is not supported on this device or platform.\n\nSent by the client in response to a [web\\_app\\_start\\_device\\_orientation event \u00bb](https://core.telegram.org/api/web-events#web-app-start-device-orientation) if device orientation tracking cannot be started.\n\n#### [](#device-orientation-stopped)`device_orientation_stopped`\n\nParams: `null`\n\nSent by the client in response to a [web\\_app\\_stop\\_device\\_orientation event \u00bb](https://core.telegram.org/api/web-events#web-app-stop-device-orientation) if device orientation tracking is stopped successfully.\n\n#### [](#device-orientation-changed)`device_orientation_changed`\n\nParams: JSON object with the following fields:\n\n*   `alpha` - The rotation around the Z-axis, measured in radians.\n*   `beta` - The rotation around the X-axis, measured in radians.\n*   `gamma` - The rotation around the Y-axis, measured in radians.\n*   `absolute` - A boolean that indicates whether or not the device is providing orientation data in absolute values (may be false even if absolute data was requested if and only if the device/platform doesn't support absolute orientation tracking).\n\nSent periodically by the client at most every `refresh_rate` milliseconds after [web\\_app\\_start\\_device\\_orientation \u00bb](https://core.telegram.org/api/web-events#web-app-start-device-orientation) is invoked and until [web\\_app\\_stop\\_device\\_orientation](https://core.telegram.org/api/web-events#web-app-stop-device-orientation) is invoked.\n\n#### [](#home-screen-added)`home_screen_added`\n\nParams: `null`\n\nSent by the client in response to a [web\\_app\\_add\\_to\\_home\\_screen event \u00bb](https://core.telegram.org/api/web-events#web-app-add-to-home-screen) if the shortcut was (already) added successfully.\n\nIt is acceptable to not emit this event if the current platform doesn't have a way to determine the installation status of the shortcut.\n\n#### [](#home-screen-failed)`home_screen_failed`\n\nParams: JSON object with the following fields:\n\n*   `error` - String, one of:\n    *   `UNSUPPORTED` - Shortcuts are not supported on this platform, or installation of the shortcut failed, or status cannot be reported.\n\nSent by the client in response to a [web\\_app\\_add\\_to\\_home\\_screen event \u00bb](https://core.telegram.org/api/web-events#web-app-add-to-home-screen) if the shortcut could not be added.\n\nIt is acceptable to not emit this event if the current platform doesn't have a way to determine the installation status of the shortcut.\n\n#### [](#home-screen-checked)`home_screen_checked`\n\nParams: JSON object with the following fields:\n\n*   `status` - String, one of:\n    *   `unsupported` \u2013 the feature is not supported, and it is not possible to add the icon to the home screen,\n    *   `unknown` \u2013 the feature is supported, and the icon can be added, but it is not possible to determine if the icon has already been added,\n    *   `added` \u2013 the icon has already been added to the home screen,\n    *   `missed` \u2013 the icon has not been added to the home screen.\n\n**Always** sent by the client in response to a [web\\_app\\_check\\_home\\_screen event \u00bb](https://core.telegram.org/api/web-events#web-app-check-home-screen).\n\n#### [](#emoji-status-failed)`emoji_status_failed`\n\nParams: JSON object with the following fields:\n\n*   `error` - String, one of:\n    *   `UNSUPPORTED` \u2013 The feature is not supported by the client.\n    *   `SUGGESTED_EMOJI_INVALID` \u2013 One or more emoji identifiers are invalid.\n    *   `DURATION_INVALID` \u2013 The specified duration is invalid.\n    *   `USER_DECLINED` \u2013 The user closed the dialog without setting a status.\n    *   `SERVER_ERROR` \u2013 A server error occurred when attempting to set the status.\n    *   `UNKNOWN_ERROR` \u2013 An unknown error occurred.\n\nSent by the client in response to a [web\\_app\\_set\\_emoji\\_status event \u00bb](https://core.telegram.org/api/web-events#web-app-set-emoji-status) if the emoji status could not be set.\n\n#### [](#emoji-status-set)`emoji_status_set`\n\nParams: `null`\n\nSent by the client in response to a [web\\_app\\_set\\_emoji\\_status event \u00bb](https://core.telegram.org/api/web-events#web-app-set-emoji-status) if the emoji status was set successfully.\n\n#### [](#emoji-status-access-requested)`emoji_status_access_requested`\n\nParams: JSON object with the following fields:\n\n*   `status` - String, one of:\n    *   `allowed` \u2013 The user (already) granted the bot permission to edit their emoji status\n    *   `cancelled` \u2013 The user declined the request, or an error occurred.\n\nSent by the client in response to a [web\\_app\\_request\\_emoji\\_status\\_access event \u00bb](https://core.telegram.org/api/web-events#web-app-request-emoji-status-access).\n\n#### [](#file-download-requested)`file_download_requested`\n\nParams: a JSON object with the following fields:\n\n*   `status` - Either `cancelled` (the download was aborted by the user or was not allowed by the API) or `downloading` (the download has successfully started).\n\nEmitted by clients during the [mini app](https://core.telegram.org/api/bots/webapps) file download flow, initiated by the [web\\_app\\_request\\_file\\_download \u00bb](https://core.telegram.org/api/web-events#web-app-request-file-download) event.\n\n#### [](#prepared-message-failed)`prepared_message_failed`\n\nParams: a JSON object with the following fields:\n\n*   `error` - Contains the text of the RPC error returned by [messages.getPreparedInlineMessage](https://core.telegram.org/method/messages.getPreparedInlineMessage), or `USER_DECLINED` if the user aborted the sharing process, or `MESSAGE_SEND_FAILED` if sending fails for another reason.\n\nEmitted by clients in case of errors during the [share prepared messages flow](https://core.telegram.org/api/bots/inline#21-using-a-prepared-inline-message), initiated by the [web\\_app\\_send\\_prepared\\_message \u00bb](https://core.telegram.org/api/web-events#web-app-send-prepared-message) event.\n\n#### [](#prepared-message-sent)`prepared_message_sent`\n\nParams: `null`\n\nEmitted by clients when the [share prepared messages flow](https://core.telegram.org/api/bots/inline#21-using-a-prepared-inline-message) initiated by the [web\\_app\\_send\\_prepared\\_message \u00bb](https://core.telegram.org/api/web-events#web-app-send-prepared-message) event completes successfully.\n\n#### [](#safe-area-changed)`safe_area_changed`\n\nParams: a JSON object with the following fields:\n\n*   `top` - The top inset in pixels, representing the space to avoid at the top of the screen (integer).\n*   `bottom` - The bottom inset in pixels, representing the space to avoid at the bottom of the screen (integer).\n*   `left` - The left inset in pixels, representing the space to avoid on the left side of the screen (integer).\n*   `right` - The right inset in pixels, representing the space to avoid on the left side of the screen (integer).\n\nEmitted by clients when any of the system-defined safe area inset padding values change, or when explicitly requested by the mini app using [web\\_app\\_request\\_safe\\_area](https://core.telegram.org/api/web-events#web-app-request-safe-area).\n\nSee [here \u00bb](https://core.telegram.org/bots/webapps#safeareainset) for more info.\n\n#### [](#content-safe-area-changed)`content_safe_area_changed`\n\nParams: a JSON object with the following fields:\n\n*   `top` - The top inset in pixels, representing the space to avoid at the top of the content area (integer).\n*   `bottom` - The bottom inset in pixels, representing the space to avoid at the bottom of the content area (integer).\n*   `left` - The left inset in pixels, representing the space to avoid on the left side of the content area (integer).\n*   `right` - The right inset in pixels, representing the space to avoid on the left side of the content area (integer).\n\nEmitted by clients when any of the content-defined safe area inset padding values change, or when explicitly requested by the mini app using [web\\_app\\_request\\_content\\_safe\\_area](https://core.telegram.org/api/web-events#web-app-request-content-safe-area).\n\nSee [here \u00bb](https://core.telegram.org/bots/webapps#contentsafeareainset) for more info.\n\n#### [](#location-requested)`location_requested`\n\nParams: a JSON object with the following fields:\n\n*   `available` - Boolean, indicates whether location data is available or not; if false, the following fields must not be set.\n*   `latitude` - Float, contains latitude in degrees.\n*   `longitude` - Float, contains longitude in degrees.\n*   `altitude` - Float or null, contains the altitude above the sea level in metres, must be null if not supported by the device or platform.\n*   `course` - Float or null, contains the direction the device is moving in degrees, must be null if not supported by the device or platform.\n*   `speed` - Float or null, contains the speed of the device in m/s, must be null if not supported by the device or platform.\n*   `horizontal_accuracy` - Float or null, contains the accuracy of the latitude and longitude values in meters, must be null if not supported by the device or platform.\n*   `vertical_accuracy` - Float or null, contains the accuracy of the altitude value in meters, must be null if not supported by the device or platform.\n*   `course_accuracy` - Float or null, contains the accuracy of the course value in degrees, must be null if not supported by the device or platform.\n*   `speed_accuracy` - Float or null, contains the accuracy of the speed value in m/s, must be null if not supported by the device or platform.\n\nEmitted in response to a [web\\_app\\_request\\_location event](https://core.telegram.org/api/web-events#web-app-request-location).\n\n#### [](#location-checked)`location_checked`\n\nParams: a JSON object with the following fields:\n\n*   `available` - Boolean, indicates whether location data is available on the current platform or device.\n*   `access_requested` - Optional boolean, must be set if `available` is true, indicates whether the mini app has already requested access to location data.\n*   `access_granted` - Optional boolean, if set and `true` indicates that the user granted the mini app access to location data.\n\nEmitted in response to a [web\\_app\\_check\\_location event](https://core.telegram.org/api/web-events#web-app-check-location).",
    "url": "https://core.telegram.org/api/bots/webapps"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/gifs",
      "title": "Working with GIFs",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Working with GIFs"
        },
        {
          "property": "og:description",
          "content": "Telegram clients support displaying GIFs."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:06 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4085",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Working with GIFs\n\nTelegram clients support displaying GIFs.\n\nOn Telegram, GIFs are actually MPEG4 (h264) videos without sound; if the user tries to upload an actual GIF file, it will be automatically converted to an MPEG4 file by the server.\n\n### [](#uploading-gifs)Uploading GIFs\n\n```\ndocumentAttributeAnimated#11b58939 = DocumentAttribute;\n\ninputMediaUploadedDocument#5b38c6c1 flags:# nosound_video:flags.3?true force_file:flags.4?true spoiler:flags.5?true file:InputFile thumb:flags.2?InputFile mime_type:string attributes:Vector<DocumentAttribute> stickers:flags.0?Vector<InputDocument> ttl_seconds:flags.1?int = InputMedia;\n\n---functions---\n\nmessages.sendMedia#7852834e flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\n```\n\nOn Telegram, GIFs are actually MPEG4 videos without sound; if the user tries to upload an actual GIF file, it will be automatically converted to an MPEG4 file by the server.\n\nTo upload a GIF, follow the usual [file upload procedure\u00a0\u00bb](https://core.telegram.org/api/files#uploading-files), specifying the [documentAttributeAnimated](https://core.telegram.org/constructor/documentAttributeAnimated).\n\nUploading a GIF will automatically add it to the user's [saved GIFs list\u00a0\u00bb](#saved-gifs).\n\n#### [](#uploading-by-hash)Uploading by hash\n\nFor some types of documents like GIFs, [messages.getDocumentByHash](https://core.telegram.org/method/messages.getDocumentByHash) can be used to search for the document on Telegram servers, instead of uploading it from scratch.  \nSee [here\u00a0\u00bb](https://core.telegram.org/api/files#uploading-by-hash) for the full procedure.\n\n### [](#saved-gifs)Saved GIFs\n\n```\nupdateSavedGifs#9375341e = Update;\n\nmessages.savedGifsNotModified#e8025ca2 = messages.SavedGifs;\nmessages.savedGifs#84a02a0d hash:long gifs:Vector<Document> = messages.SavedGifs;\n\n---functions---\n\nmessages.saveGif#327a30cb id:InputDocument unsave:Bool = Bool;\nmessages.getSavedGifs#5cf09635 hash:long = messages.SavedGifs;\n```\n\nGIFs received in a chat may be added to (or removed from) the saved gifs list using [messages.saveGif](https://core.telegram.org/method/messages.saveGif).\n\nModifying the saved gifs list with the method indicated above will emit an [updateSavedGifs](https://core.telegram.org/constructor/updateSavedGifs) update to other currently logged in sessions, which should trigger a call to [messages.getSavedGifs](https://core.telegram.org/method/messages.getSavedGifs), to refresh the locally cached list.\n\n[messages.getSavedGifs](https://core.telegram.org/method/messages.getSavedGifs) should also be called when first logging in.\n\n[Uploading\u00a0\u00bb](#uploading-gifs) a GIF will automatically add it to the saved gifs list.\n\nThe saved GIFs list should be displayed in the [GIF selection UI\u00a0\u00bb](#searching-gifs).\n\nThe maximum number of GIFs that may be added to the saved GIF list is specified by [appConfig.saved\\_gifs\\_limit\\_default](https://core.telegram.org/api/config#saved-gifs-limit-default)/[appConfig.saved\\_gifs\\_limit\\_premium](https://core.telegram.org/api/config#saved-gifs-limit-premium) for non-[Premium](https://core.telegram.org/api/premium)/[Premium](https://core.telegram.org/api/premium) users.\n\nTrying to add one more GIF after the non-Premium limit is reached should open the Premium subscription modal.  \nIf the user adds one more GIF even after the non-Premium/Premium limit is reached, the server will automatically delete the oldest GIF, and the client should display a toast, notifying the user of this deletion.\n\n### [](#searching-gifs)Searching GIFs\n\n```\nconfig#cc1a241e flags:# default_p2p_contacts:flags.3?true preload_featured_stickers:flags.4?true revoke_pm_inbox:flags.6?true blocked_mode:flags.8?true force_try_ipv6:flags.14?true date:int expires:int test_mode:Bool this_dc:int dc_options:Vector<DcOption> dc_txt_domain_name:string chat_size_max:int megagroup_size_max:int forwarded_count_max:int online_update_period_ms:int offline_blur_timeout_ms:int offline_idle_timeout_ms:int online_cloud_timeout_ms:int notify_cloud_delay_ms:int notify_default_delay_ms:int push_chat_period_ms:int push_chat_limit:int edit_time_limit:int revoke_time_limit:int revoke_pm_time_limit:int rating_e_decay:int stickers_recent_limit:int channels_read_media_period:int tmp_sessions:flags.0?int call_receive_timeout_ms:int call_ring_timeout_ms:int call_connect_timeout_ms:int call_packet_timeout_ms:int me_url_prefix:string autoupdate_url_prefix:flags.7?string gif_search_username:flags.9?string venue_search_username:flags.10?string img_search_username:flags.11?string static_maps_provider:flags.12?string caption_length_max:int message_length_max:int webfile_dc_id:int suggested_lang_code:flags.2?string lang_pack_version:flags.2?int base_lang_pack_version:flags.2?int reactions_default:flags.15?Reaction autologin_token:flags.16?string = Config;\n```\n\nClients should implement a GIF selection/search UI that is almost identical to the [sticker](https://core.telegram.org/api/stickers) search UI, featuring a search bar (with a list of [emoji categories](https://core.telegram.org/api/emoji-categories)) followed (initially) by the list of [saved GIFs](#saved-gifs) that may be selected and sent by the user to the current chat.\n\nEntering text in the search bar should replace the saved GIFs list with the results of the GIF search, which must be implemented as an [inline query\u00a0\u00bb](https://core.telegram.org/api/bots/inline) to the bot specified in [config](https://core.telegram.org/constructor/config).`gif_search_username`, with `peer`\\=[inputPeerEmpty](https://core.telegram.org/constructor/inputPeerEmpty) and `query` set equal to the input of the user.  \nAgain, the GIF search UI should be almost identical to the [sticker](https://core.telegram.org/api/stickers) search UI: even if inline bot queries are used, the usual inline query UI should **not** be used for the GIF search UI.\n\nAs mentioned above, the GIF search bar should also offer a list of categories to quickly filter results by a (list of) emojis, or by some other criteria, see [here\u00a0\u00bb](https://core.telegram.org/api/emoji-categories) for more info.\n\nWhen an emoji category is selected, the search input bar should be disabled, and a search should be made, passing to `query` the first emoji of the selected emoji group.",
    "url": "https://core.telegram.org/api/gifs"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/dice",
      "title": "Dice",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Dice"
        },
        {
          "property": "og:description",
          "content": "Telegram supports sending animated dice emojis."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:06 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3692",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Dice\n\nTelegram supports sending [animated dice](https://telegram.org/blog/folders#and-one-more-thing) emojis.  \nThis is implemented by using the dice constructors:\n\n```\ninputMediaDice#e66fbf7b emoticon:string = InputMedia;\nmessageMediaDice#3f7ee58b value:int emoticon:string = MessageMedia;\n\ninputStickerSetDice#e67f520e emoticon:string = InputStickerSet;\n\nmessages.stickerSet#6e153f16 set:StickerSet packs:Vector<StickerPack> keywords:Vector<StickerKeyword> documents:Vector<Document> = messages.StickerSet;\n\n---functions---\n\nmessages.sendMedia#7852834e flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\n\nmessages.getStickerSet#c8a0ec74 stickerset:InputStickerSet hash:int = messages.StickerSet;\n\nhelp.getAppConfig#61e3f854 hash:int = help.AppConfig;\n```\n\nOn startup, clients should fetch [app configuration using help.getAppConfig](https://core.telegram.org/api/config#client-configuration).  \nThen, for each dice emoji contained in the [`emojies_send_dice` field](https://core.telegram.org/api/config#emojies-send-dice), clients should fetch the dice emoji stickerset by calling the [messages.getStickerSet](https://core.telegram.org/method/messages.getStickerSet) method, providing the properly populated [inputStickerSetDice](https://core.telegram.org/constructor/inputStickerSetDice) to the `stickerset` field.  \nThe returned stickerset will contain a set of animated stickers, one for each of the dice outcomes, plus a first looping sticker that should be shown as preview to the user before actually sending the dice.\n\nIf a user attempts to send a single emoji from the ones specified in `emojies_send_dice`, the dice should be sent using [messages.sendMedia](https://core.telegram.org/method/messages.sendMedia), providing the dice emoji to the `emoticon` field.\n\nIncoming dice stickers will be received as a [messageMediaDice](https://core.telegram.org/constructor/messageMediaDice) constructor, along with a randomly generated server-side value, ranging from 1 to the maximum allowed value for this type of dice.  \nClients should display the correct dice animated sticker for the specified value: since dice values start from 1, and the first animated sticker in dice stickerset is the preview, `value` can be used to directly index the `documents` sticker array from the animated stickerset.\n\nThe [`emojies_send_dice_success` configuration parameter](https://core.telegram.org/api/config#emojies-send-dice-success) contains more info about dice emojis other than the basic ![\ud83c\udfb2](https://telegram.org/img/emoji/40/F09F8EB2.png):\n\n```\n    \"emojies_send_dice_success\": {\n        \"\\ud83c\\udfaf\": {\n            \"value\": 6,\n            \"frame_start\": 62\n        },\n        \"\\ud83c\\udfc0\": {\n            \"value\": 5,\n            \"frame_start\": 110\n        }\n    }\n```\n\nFor each of the dice emojis, a maximum \"winning\" value is specified, along with the frame number at which to show the fireworks ![\ud83c\udf86](https://telegram.org/img/emoji/40/F09F8E86.png).  \nPlease note that dice animated stickers should loop only once, right after being sent/received **for the first time**; clicking on the dice sticker should bring up a popup, inviting the user to send a new dice of the same type.\n\n### [](#slot-machine)Slot machine\n\nSlot machine ![\ud83c\udfb0](https://telegram.org/img/emoji/40/F09F8EB0.png) dice stickers are implemented a bit differently: the `value` isn't used to directly index the stickers array, but is instead used as follows.\n\nThe `value` is composed of three 2-bit values, each indicating the animated sticker to show in the three slots, incremented by one.\n\nThe `stickers` array is composed as follows:\n\n*   0 => Slot machine background\n*   1 => Slot machine winning background, to show after a winning spin\n*   2 => Slot machine frame&handle to play once at the beginning\n*   3 => Left slot winning 7\n*   4..7 => Left slot non-winning options\n*   8 => Left slot spinning animation\n*   9 => Center slot winning 7\n*   10..13 => Center slot non-winning options\n*   14 => Center slot spinning animation\n*   15 => Right slot winning 7\n*   16..19 => Right slot non-winning options\n*   20 => Right slot spinning animation\n\nHow to play the animation (all involved stickers are to be directly overlaid on top of each other, no special placing is required):\n\n*   Freeze single-frame background (`0`)\n*   Play handle animation (`2`) once\n*   Play the three spinning slots animations (`8`, `14`, `20`) once\n*   Play the three slot animations once, chosen as follows:\n    *   If we're in a winning `value == 64`:\n        *   Left slot: choose `3`\n        *   Center slot: choose `9`\n        *   Right slot: choose `15`\n    *   Otherwise, considering `map := [1, 2, 3, 0]`:\n        *   Left slot: choose `4 + map[(value-1) & 3]`\n        *   Center slot: choose `10 + map[((value-1) >> 2) & 3]`\n        *   Right slot: choose `16 + map[((value-1) >> 4) & 3]`\n*   If we're in a winning `value=64`, replace the background (`0`) with `1`.\n\nExample implementation: [tdesktop](https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/history/view/media/history_view_slot_machine.cpp).",
    "url": "https://core.telegram.org/api/dice"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/animated-emojis",
      "title": "Animated Emojis",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Animated Emojis"
        },
        {
          "property": "og:description",
          "content": "Graphical telegram clients should transform emojis into their respective animated version."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:06 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3933",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Animated Emojis\n\nGraphical telegram clients should transform emojis into their respective animated version.\n\n### [](#animated-emojis)Animated emojis\n\n```\ninputStickerSetAnimatedEmoji#28703c8 = InputStickerSet;\n\nmessages.stickerSet#6e153f16 set:StickerSet packs:Vector<StickerPack> keywords:Vector<StickerKeyword> documents:Vector<Document> = messages.StickerSet;\n\n---functions---\n\nmessages.getStickerSet#c8a0ec74 stickerset:InputStickerSet hash:int = messages.StickerSet;\n```\n\nOn startup, clients should fetch the animated emoji stickerset by calling the [messages.getStickerSet](https://core.telegram.org/method/messages.getStickerSet) method, providing [inputStickerSetAnimatedEmoji](https://core.telegram.org/constructor/inputStickerSetAnimatedEmoji) to the `stickerset` field.  \nThe returned stickerset will contain a set of animated stickers, one for each of the supported emojis.\n\nClients should substitute messages containing only one instance of one of the allowed emojis with the respective animated sticker.  \nAlso, when receiving messages containing only one instance of a [custom emoji](https://core.telegram.org/api/custom-emoji), instead of displaying a message bubble with a single small custom emoji inside, the scaled-up custom emoji should be displayed directly, like with normal stickers.\n\nAnimated emojis should loop only once when first sent or received, or when clicked.  \nFor [supported emojis](#emoji-reactions), clients on both sides of private chats with users are supposed to show a reaction animation when any of the two users clicks on the animated emoji: [click here for more info\u00a0\u00bb](#emoji-reactions).\n\nFor special [dice emojis](https://core.telegram.org/api/dice) like ![\ud83c\udfb2](https://telegram.org/img/emoji/40/F09F8EB2.png), ![\ud83c\udfaf](https://telegram.org/img/emoji/40/F09F8EAF.png), or ![\ud83c\udfc0](https://telegram.org/img/emoji/40/F09F8F80.png), clients are supposed to behave differently both when sending and receiving such emojis: [click here for more info\u00a0\u00bb](https://core.telegram.org/api/dice).\n\n### [](#emojis-with-sounds)Emojis with sounds\n\nCertain animated emojis should play sound when clicked, as specified by [server-side configuration](https://core.telegram.org/api/config#client-configuration).\n\nThe returned JSON object will contain the following map, with a list of file IDs to download:\n\n```\n    \"emojies_sounds\": {\n        \"\\ud83c\\udf83\": {\n            \"id\": \"4956223179606458539\",\n            \"access_hash\": \"-2107001400913062971\",\n            \"file_reference_base64\": \"AF-4ApC7ukC0UWEPZN0TeSJURe7T\"\n        },\n        \"\\u26b0\": {\n            \"id\": \"4956223179606458540\",\n            \"access_hash\": \"-1498869544183595185\",\n            \"file_reference_base64\": \"AF-4ApCLKMGt96WCvLm58kbqZHd3\"\n        },\n        \"\\ud83e\\udddf\\u200d\\u2642\": {\n            \"id\": \"4960929110848176331\",\n            \"access_hash\": \"3986395821757915468\",\n            \"file_reference_base64\": \"AF-4ApAedNln3IMEHH-SUQuH8L9g\"\n        },\n    }\n```\n\nThe [file reference field](https://core.telegram.org/api/file_reference) should be base64-decoded before [downloading the file](https://core.telegram.org/api/files).\n\n### [](#emoji-reactions)Emoji reactions\n\n```\ninputStickerSetAnimatedEmojiAnimations#cde3739 = InputStickerSet;\n\nmessages.stickerSet#6e153f16 set:StickerSet packs:Vector<StickerPack> keywords:Vector<StickerKeyword> documents:Vector<Document> = messages.StickerSet;\n\nstickerPack#12b299d4 emoticon:string documents:Vector<long> = StickerPack;\n\nsendMessageEmojiInteraction#25972bcb emoticon:string msg_id:int interaction:DataJSON = SendMessageAction;\nsendMessageEmojiInteractionSeen#b665902e emoticon:string = SendMessageAction;\n\nupdateUserTyping#c01e857f user_id:long action:SendMessageAction = Update;\n\n---functions---\n\nmessages.getStickerSet#c8a0ec74 stickerset:InputStickerSet hash:int = messages.StickerSet;\n\nmessages.setTyping#58943ee2 flags:# peer:InputPeer top_msg_id:flags.0?int action:SendMessageAction = Bool;\n```\n\nNot to be confused with [message reactions\u00a0\u00bb](https://core.telegram.org/api/reactions).\n\nOn startup, clients should fetch the animated reaction emoji stickerset by calling the [messages.getStickerSet](https://core.telegram.org/method/messages.getStickerSet) method, providing [inputStickerSetAnimatedEmojiAnimations](https://core.telegram.org/constructor/inputStickerSetAnimatedEmojiAnimations) to the `stickerset` field.  \nThe returned stickerset will contain a set of animated emoji reactions, _one or more_ for each of the supported emojis.  \nIf a set of reactions for the ![\u2764](https://telegram.org/img/emoji/40/E29DA4.png) emoji is returned, the same reactions should also be assigned to the ![\ud83e\udde1](https://telegram.org/img/emoji/40/F09FA7A1.png), ![\ud83d\udc9b](https://telegram.org/img/emoji/40/F09F929B.png), ![\ud83d\udc9a](https://telegram.org/img/emoji/40/F09F929A.png), ![\ud83d\udc99](https://telegram.org/img/emoji/40/F09F9299.png), ![\ud83d\udc9c](https://telegram.org/img/emoji/40/F09F929C.png), ![\ud83d\udda4](https://telegram.org/img/emoji/40/F09F96A4.png), ![\ud83e\udd0d](https://telegram.org/img/emoji/40/F09FA48D.png) and ![\ud83e\udd0e](https://telegram.org/img/emoji/40/F09FA48E.png) emojis.\n\nClients on both sides of private chats with users should overlay one of the appropriate reaction animations over the animated sticker when any of the two users clicks on a supported animated emoji.  \nThe same should happen for standalone [custom emojis](https://core.telegram.org/api/custom-emoji) (single [custom emojis](https://core.telegram.org/api/custom-emoji) are always displayed as standalone stickers) if the underlying normal emoji is supported (as above).  \nThe reaction animation for each separate tap should be chosen randomly from all the available reactions for a given emoji, and multiple taps should be aggregated and sent to the other user as follows:\n\nAt each tap, clients should store all occurred taps in a local list.  \nAfter 1 second has elapsed with no more taps, the local list should be cleared and stored taps should be sent using [messages.setTyping](https://core.telegram.org/method/messages.setTyping), passing a [sendMessageEmojiInteraction](https://core.telegram.org/constructor/sendMessageEmojiInteraction) constructor with the following fields:\n\n*   `emoticon` - The emoji we're reacting to\n*   `msg_id` - Message ID of the animated emoji that was clicked\n*   `interaction` - A JSON object with interaction info, containing the following keys:\n    *   `v` - An integer indicating the object version, currently `1`\n    *   `a` - An array of JSON objects, each containing the following keys:\n        *   `t` - float, number of seconds that passed since the previous tap in the array, the first tap uses a value of `0.0`.\n        *   `i` - integer, 1-based index of the randomly chosen animation for the tap (equivalent to the index of a specific emoji-related animation in [stickerPack](https://core.telegram.org/constructor/stickerPack) + 1).\n\n1 second after the receiving user has seen the last reaction animation for a specific emoji, an acknowledgement must be sent using [messages.setTyping](https://core.telegram.org/method/messages.setTyping), passing a [sendMessageEmojiInteractionSeen](https://core.telegram.org/constructor/sendMessageEmojiInteractionSeen) with that emoji.",
    "url": "https://core.telegram.org/api/animated-emojis"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/entities",
      "title": "Styled text with message entities",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Styled text with message entities"
        },
        {
          "property": "og:image",
          "content": "d2441cad7ecfa0d622"
        },
        {
          "property": "og:description",
          "content": "How to create styled text with message entities"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:07 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3595",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Styled text with message entities\n\nTelegram supports styled text using [message entities](https://core.telegram.org/type/MessageEntity).\n\nA client that wants to send styled messages would simply have to integrate a [Markdown](https://en.wikipedia.org/wiki/Markdown)/[HTML](https://en.wikipedia.org/wiki/HTML) parser, and generate an array of message entities by iterating through the parsed tags.\n\nNested entities are supported.\n\n### [](#entity-length)Entity length\n\nSpecial care must be taken to consider the length of strings when generating message entities as the number of [UTF-16](https://en.wikipedia.org/wiki/UTF-16) code units, even if the message itself must be encoded using UTF-8.\n\nExample implementations: [tdlib](https://github.com/tdlib/td/tree/master/td/telegram/MessageEntity.cpp), [MadelineProto](https://github.com/danog/telegram-entities/blob/master/src/Entities.php).\n\n#### [](#unicode-codepoints-and-encoding)Unicode codepoints and encoding\n\nA [Unicode](https://en.wikipedia.org/wiki/Unicode) [code point](https://en.wikipedia.org/wiki/Code_point) is a number ranging from `0x0` to `0x10FFFF`, usually represented using `U+0000` to `U+10FFFF` syntax.  \nUnicode defines a codespace of 1,112,064 assignable code points within the `U+0000` to `U+10FFFF` range.  \nEach of the assignable codepoints, once assigned by the Unicode consortium, maps to a specific character, emoji or control symbol.\n\nThe Unicode codespace is further subdivided into 17 planes:\n\n*   Plane 1: `U+0000` to `U+FFFF`: Basic Multilingual Plane (BMP)\n*   Planes 2-17: `U+00000` to `U+10FFFF`: Multiple supplementary planes as specified [by the Unicode standard](https://en.wikipedia.org/wiki/Plane_\\(Unicode\\))\n\nSince storing a 21-bit number for each letter would result in a waste of space, the Unicode consortium defines multiple encodings that allow storing a code point into a smaller _code unit_:\n\n#### [](#utf-8)UTF-8\n\n[UTF-8\u00a0\u00bb](https://en.wikipedia.org/wiki/UTF-8) is a Unicode encoding that allows storing a 21-bit Unicode code point into _code units_ as small as 8 bits.  \nUTF-8 is used by the MTProto and Bot API when transmitting and receiving fields of type [string](https://core.telegram.org/type/string).\n\n#### [](#utf-16)UTF-16\n\n[UTF-16\u00a0\u00bb](https://en.wikipedia.org/wiki/UTF-16) is a Unicode encoding that allows storing a 21-bit Unicode code point into one or two 16-bit _code units_.\n\nUTF-16 is used when computing the length and offsets of entities in the MTProto and bot APIs, by counting the number of UTF-16 code units (**not** code points).\n\n#### [](#computing-entity-length)Computing entity length\n\n*   Code points in the BMP (`U+0000` to `U+FFFF`) count as 1, because they are encoded into a single UTF-16 code unit\n*   Code points in all other planes count as 2, because they are encoded into two UTF-16 code units (also called surrogate pairs)\n\nA simple, but not very efficient way of computing the entity length is converting the text to UTF-16, and then taking the byte length divided by 2 (=number of UTF-16 code units).\n\nHowever, since UTF-8 encodes codepoints in non-BMP planes as a 32-bit code unit starting with `0b11110`, a more efficient way to compute the entity length without converting the message to UTF-16 is the following:\n\n*   If the byte marks the beginning of a 32-bit UTF-8 code unit (all bytes starting with `0b11110`) increment the count by 2, otherwise\n*   If the byte marks the beginning of a UTF-8 code unit (all bytes not starting with `0b10`) increment the count by 1.\n\nExample:\n\n```\nlength := 0\nfor byte in text {\n    if (byte & 0xc0) != 0x80 {\n        length += (byte >= 0xf0 ? 2 : 1)\n    }\n}\n```\n\n**Note**: the _length_ of an entity **must not** include the length of trailing newlines or whitespaces, `rtrim` entities before computing their length: however, the next _offset_ **must** include the length of newlines or whitespaces that precede it.\n\nExample implementations: [tdlib](https://github.com/tdlib/td/tree/master/td/telegram/MessageEntity.cpp), [MadelineProto](https://github.com/danog/telegram-entities/blob/master/src/Entities.php).\n\n### [](#allowed-entities)Allowed entities\n\nFor example the following HTML/Markdown aliases for message entities can be used:\n\n*   [**messageEntityBold**](https://core.telegram.org/constructor/messageEntityBold) => `<b>bold</b>`, `<strong>bold</strong>`, `**bold**`\n*   [_messageEntityItalic_](https://core.telegram.org/constructor/messageEntityItalic) => `<i>italic</i>`, `<em>italic</em>` `*italic*`\n*   [`messageEntityCode`\u00a0\u00bb](https://core.telegram.org/constructor/messageEntityCode) => `<code>code</code>`, `` `code` ``\n*   [~messageEntityStrike~](https://core.telegram.org/constructor/messageEntityStrike) => `<s>strike</s>`, `<strike>strike</strike>`, `<del>strike</del>`, `~~strike~~`\n*   [messageEntityUnderline](https://core.telegram.org/constructor/messageEntityUnderline) => `<u>underline</u>`\n*   [`messageEntityPre`\u00a0\u00bb](https://core.telegram.org/constructor/messageEntityPre) => `<pre language=\"c++\">code</pre>`,\n\n\\`\\`\\`c++\ncode\n\\`\\`\\`\n\nThe following entities can also be used to [mention](https://core.telegram.org/api/mentions) users:\n\n*   [inputMessageEntityMentionName](https://core.telegram.org/constructor/inputMessageEntityMentionName) => [Mention a user](https://t.me/botfather)\n*   [messageEntityMention](https://core.telegram.org/constructor/inputMessageEntityMentionName) => [@botfather](https://t.me/botfather) (this mention is generated automatically server-side for @usernames in messages)\n\nAlso, [messageEntityCustomEmoji](https://core.telegram.org/constructor/messageEntityCustomEmoji) entities are used for [custom emojis\u00a0\u00bb](https://core.telegram.org/api/custom-emoji).\n\nA number of other entities are also available, see the [type page for the full list\u00a0\u00bb](https://core.telegram.org/type/MessageEntity).",
    "url": "https://core.telegram.org/api/entities"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/folders",
      "title": "Folders",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Folders"
        },
        {
          "property": "og:description",
          "content": "Telegram allows placing chats into folders, based on their type, mute status, or other custom criteria, thanks to folder blacklists and whitelists."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:08 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "6058",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Folders\n\nTelegram allows placing chats into folders, based on their type, mute status, or other custom criteria, thanks to folder blacklists and whitelists: these folders may also be shared with other users.\n\n### [](#folders)Folders\n\nSchema:\n\n```\ndialogFilter#5fb5523b flags:# contacts:flags.0?true non_contacts:flags.1?true groups:flags.2?true broadcasts:flags.3?true bots:flags.4?true exclude_muted:flags.11?true exclude_read:flags.12?true exclude_archived:flags.13?true id:int title:string emoticon:flags.25?string color:flags.27?int pinned_peers:Vector<InputPeer> include_peers:Vector<InputPeer> exclude_peers:Vector<InputPeer> = DialogFilter;\ndialogFilterChatlist#9fe28ea4 flags:# has_my_invites:flags.26?true id:int title:string emoticon:flags.25?string color:flags.27?int pinned_peers:Vector<InputPeer> include_peers:Vector<InputPeer> = DialogFilter;\ndialogFilterDefault#363293ae = DialogFilter;\n\ndialogFilterSuggested#77744d4a filter:DialogFilter description:string = DialogFilterSuggested;\n\nupdateDialogFilter#26ffde7d flags:# id:int filter:flags.0?DialogFilter = Update;\nupdateDialogFilterOrder#a5d72105 order:Vector<int> = Update;\nupdateDialogFilters#3504914f = Update;\n\nmessages.dialogFilters#2ad93719 flags:# tags_enabled:flags.0?true filters:Vector<DialogFilter> = messages.DialogFilters;\n\n---functions---\n\nmessages.getDialogFilters#efd48c89 = messages.DialogFilters;\nmessages.getSuggestedDialogFilters#a29cd42c = Vector<DialogFilterSuggested>;\nmessages.updateDialogFilter#1ad4a04a flags:# id:int filter:flags.0?DialogFilter = Bool;\nmessages.updateDialogFiltersOrder#c563c1e4 order:Vector<int> = Bool;\n\nhelp.getAppConfig#61e3f854 hash:int = help.AppConfig;\n```\n\nIn the API, folders are called \"dialog filters\".  \nIn the UI, folders are typically represented as tabs.\n\nOn startup, clients call:\n\n*   [messages.getDialogFilters](https://core.telegram.org/method/messages.getDialogFilters) to fetch a list of previously configured folders.\n*   [messages.getSuggestedDialogFilters](https://core.telegram.org/method/messages.getSuggestedDialogFilters) to fetch a list of suggested folder combinations.\n*   [help.getAppConfig](https://core.telegram.org/method/help.getAppConfig) to fetch app-specific configuration parameters.\n\nThe boolean under the [`dialog_filters_tooltip` JSON key](https://core.telegram.org/api/config#dialog-filters-tooltip) in the result of [help.getAppConfig](https://core.telegram.org/method/help.getAppConfig) can be used to determine whether a folder tooltip should be presented to the user right away.  \nThe UI should then show a list of suggested folder combinations.\n\nOnce configuration is finished, apps call [messages.updateDialogFilter](https://core.telegram.org/method/messages.updateDialogFilter) to create or update existing folders.  \nAs per the [dialogFilter](https://core.telegram.org/constructor/dialogFilter)/[dialogFilterChatlist](https://core.telegram.org/constructor/dialogFilterChatlist) constructors, folders have multiple flags that can be combined to determine which chats should be included in (or excluded from) the folder, which emoji to use as icon for the folder and its name.  \nFolders can also have up to `dialogs_folder_pinned_limit_*` pinned chats, as determined by the [client configuration](https://core.telegram.org/api/config#client-configuration).\n\n[dialogFilterChatlist](https://core.telegram.org/constructor/dialogFilterChatlist) constructors are used to represent imported [shareable folders](#shared-folders).\n\nTo reorder existing folders, [messages.updateDialogFiltersOrder](https://core.telegram.org/method/messages.updateDialogFiltersOrder) should be used with the IDs of the various dialog filters.\n\n[Premium](https://core.telegram.org/api/premium) users also have access to a [dialogFilterDefault](https://core.telegram.org/constructor/dialogFilterDefault) constructor, used only when reordering folders to indicate the default (all chats) folder.\n\nTo delete folders, use [messages.updateDialogFilter](https://core.telegram.org/method/messages.updateDialogFilter) without populating the `filter` flag field.\n\nClients can receive [updateDialogFilter](https://core.telegram.org/constructor/updateDialogFilter), [updateDialogFilterOrder](https://core.telegram.org/constructor/updateDialogFilterOrder) updates with new filter information, generated by other clients when modifying folder info.  \nClients can also receive [updateDialogFilters](https://core.telegram.org/constructor/updateDialogFilters), in which case folder info should be refetched manually using [messages.getDialogFilters](https://core.telegram.org/method/messages.getDialogFilters).\n\n#### [](#folder-tags)Folder tags\n\n```\ndialogFilter#5fb5523b flags:# contacts:flags.0?true non_contacts:flags.1?true groups:flags.2?true broadcasts:flags.3?true bots:flags.4?true exclude_muted:flags.11?true exclude_read:flags.12?true exclude_archived:flags.13?true id:int title:string emoticon:flags.25?string color:flags.27?int pinned_peers:Vector<InputPeer> include_peers:Vector<InputPeer> exclude_peers:Vector<InputPeer> = DialogFilter;\ndialogFilterChatlist#9fe28ea4 flags:# has_my_invites:flags.26?true id:int title:string emoticon:flags.25?string color:flags.27?int pinned_peers:Vector<InputPeer> include_peers:Vector<InputPeer> = DialogFilter;\n\nupdateDialogFilters#3504914f = Update;\n\nmessages.dialogFilters#2ad93719 flags:# tags_enabled:flags.0?true filters:Vector<DialogFilter> = messages.DialogFilters;\n\n---functions---\n\nmessages.toggleDialogFilterTags#fd2dda49 enabled:Bool = Bool;\nmessages.getDialogFilters#efd48c89 = messages.DialogFilters;\n```\n\nFolder tags may be enabled or disabled for all [folders](#folders) using the [messages.toggleDialogFilterTags](https://core.telegram.org/method/messages.toggleDialogFilterTags) method ([Business](https://core.telegram.org/api/business) users only).\n\nIf the new value of the toggle is different, the method will emit an [updateDialogFilters](https://core.telegram.org/constructor/updateDialogFilters) to all other currently-logged in sessions, which should trigger a call to [messages.toggleDialogFilterTags](https://core.telegram.org/method/messages.toggleDialogFilterTags) to load the new value of the toggle, in [messages.dialogFilters](https://core.telegram.org/constructor/messages.dialogFilters).`tags_enabled`.\n\nIf folder tags are enabled, clients should add folder tags (one for each folder the dialog entry is a part of, except for the \"All chats\" folder represented by [dialogFilterDefault](https://core.telegram.org/constructor/dialogFilterDefault) and tags with `color=-1`) to all dialog entries, under the preview of the latest message.\n\nThese folder tags should contain the name of the folder, and should be colored with the `color` specified in the dialog folder entry.  \nThe color is an integer ranging from -1 to 6; if -1, the tag must not be shown in the dialog list; use red, orange, violet, green, cyan, blue, pink for indexes 0 to 6 (i.e. the same colors used for randomized fallback [message accent colors](https://core.telegram.org/api/colors)).\n\nThe tag `color` may only be changed if the user has a [Premium](https://core.telegram.org/api/premium) subscription and tags are enabled.\n\n#### [](#shared-folders)Shared folders\n\n```\ninputChatlistDialogFilter#f3e0da33 filter_id:int = InputChatlist;\n\nexportedChatlistInvite#0c5181ac flags:# title:string url:string peers:Vector<Peer> = ExportedChatlistInvite;\n\nchatlists.exportedChatlistInvite#10e6e3a6 filter:DialogFilter invite:ExportedChatlistInvite = chatlists.ExportedChatlistInvite;\n\nchatlists.exportedInvites#10ab6dc7 invites:Vector<ExportedChatlistInvite> chats:Vector<Chat> users:Vector<User> = chatlists.ExportedInvites;\n\nchatlists.chatlistInviteAlready#fa87f659 filter_id:int missing_peers:Vector<Peer> already_peers:Vector<Peer> chats:Vector<Chat> users:Vector<User> = chatlists.ChatlistInvite;\nchatlists.chatlistInvite#1dcd839d flags:# title:string emoticon:flags.0?string peers:Vector<Peer> chats:Vector<Chat> users:Vector<User> = chatlists.ChatlistInvite;\n\nchatlists.chatlistUpdates#93bd878d missing_peers:Vector<Peer> chats:Vector<Chat> users:Vector<User> = chatlists.ChatlistUpdates;\n\n---functions---\n\nchatlists.exportChatlistInvite#8472478e chatlist:InputChatlist title:string peers:Vector<InputPeer> = chatlists.ExportedChatlistInvite;\n\nchatlists.getExportedInvites#ce03da83 chatlist:InputChatlist = chatlists.ExportedInvites;\nchatlists.editExportedInvite#653db63d flags:# chatlist:InputChatlist slug:string title:flags.1?string peers:flags.2?Vector<InputPeer> = ExportedChatlistInvite;\nchatlists.deleteExportedInvite#719c5c5e chatlist:InputChatlist slug:string = Bool;\n\nchatlists.checkChatlistInvite#41c10fff slug:string = chatlists.ChatlistInvite;\nchatlists.joinChatlistInvite#a6b1e39a slug:string peers:Vector<InputPeer> = Updates;\n\nchatlists.getChatlistUpdates#89419521 chatlist:InputChatlist = chatlists.ChatlistUpdates;\nchatlists.joinChatlistUpdates#e089f8f5 chatlist:InputChatlist peers:Vector<InputPeer> = Updates;\nchatlists.hideChatlistUpdates#66e486fb chatlist:InputChatlist = Bool;\n\nchatlists.getLeaveChatlistSuggestions#fdbcd714 chatlist:InputChatlist = Vector<Peer>;\nchatlists.leaveChatlist#74fae13a chatlist:InputChatlist peers:Vector<InputPeer> = Updates;\n```\n\nFolders may be shared using [chat folder deep links](https://core.telegram.org/api/links#chat-folder-links).  \nThese links are generated by invoking [chatlists.exportChatlistInvite](https://core.telegram.org/method/chatlists.exportChatlistInvite), passing the ID of the folder that should be exported, along with a list of `peers` that should be included in the shared folder.  \nOnly channels and groups/supergroups may be specified in the `peers` array; these channels and groups must be public, or the user must have permission to manage invite links. Basic groups will automatically be [converted to supergroups](https://core.telegram.org/api/channel#migration) when invoking the method.  \nAn optional name for the shared link may also be specified using `title`.\n\nUse [chatlists.getExportedInvites](https://core.telegram.org/method/chatlists.getExportedInvites) to list all links generated for a folder, use [chatlists.editExportedInvite](https://core.telegram.org/method/chatlists.editExportedInvite) to edit the title or list of `peers` of a specific link and [chatlists.deleteExportedInvite](https://core.telegram.org/method/chatlists.deleteExportedInvite) to revoke an exported link, preventing new users from importing it.\n\nThe maximum number of per-folder invites that can be created by [Premium](https://core.telegram.org/api/premium)/non-[Premium](https://core.telegram.org/api/premium) users is specified by the `chatlist_invites_limit_default`/`chatlist_invites_limit_premium` [client configuration parameters\u00a0\u00bb](https://core.telegram.org/api/config#chatlist-invites-limit-default).\n\nUse [chatlists.checkChatlistInvite](https://core.telegram.org/method/chatlists.checkChatlistInvite) to obtain information about a chat folder deep link before importing it with [chatlists.joinChatlistInvite](https://core.telegram.org/method/chatlists.joinChatlistInvite), specifying in `peers` which channels and groups to join (excluding inaccessible channels/supergroups, i.e. the user may not join a supergroup/channel where they were banned, corresponding to a [channelForbidden](https://core.telegram.org/constructor/channelForbidden) constructor).  \nIf the user can't join any of the `peers` of a folder, the folder can't be imported.\n\nThe maximum number of shareable folders that a [Premium](https://core.telegram.org/api/premium)/non-[Premium](https://core.telegram.org/api/premium) user may join is specified by the `chatlists_joined_limit_default`/`chatlists_joined_limit_premium` [client configuration parameters\u00a0\u00bb](https://core.telegram.org/api/config#chatlists-joined-limit-default).\n\nUsers that import a folder should retrieve additions made to the peer list by invoking [chatlists.getChatlistUpdates](https://core.telegram.org/method/chatlists.getChatlistUpdates) at most every `chatlist_update_period` seconds (a [client configuration parameter\u00a0\u00bb](https://core.telegram.org/api/config#chatlist-update-period)).  \nIf the returned `missing_peers` list is non-empty, the client should present it to the user, who may choose to join all or a subset of them (excluding inaccessible channels/supergroups), passing them to the `peers` parameter of [chatlists.joinChatlistUpdates](https://core.telegram.org/method/chatlists.joinChatlistUpdates).  \nIf after excluding inaccessible peers and peers deselected by the user the `peers` list is empty, invoke [chatlists.hideChatlistUpdates](https://core.telegram.org/method/chatlists.hideChatlistUpdates) instead of [chatlists.joinChatlistUpdates](https://core.telegram.org/method/chatlists.joinChatlistUpdates).\n\nWhen removing an imported folder, the list of included peers should be presented to the user prior to deletion, with the peers listed in [chatlists.getLeaveChatlistSuggestions](https://core.telegram.org/method/chatlists.getLeaveChatlistSuggestions) already pre-marked for deletion: the user may then choose to delete or keep some or all of the groups and channels of the folder when invoking [chatlists.leaveChatlist](https://core.telegram.org/method/chatlists.leaveChatlist) to delete the folder, specifying in `peers` the list of channels and groups from the folder that should also be removed.\n\n### [](#peer-folders)Peer folders\n\nThe API also has another method for identifying groups of peers, used by archived chats.\n\nSchema:\n\n```\ninputFolderPeer#fbd2c296 peer:InputPeer folder_id:int = InputFolderPeer;\n\nfolderPeer#e9baa668 peer:Peer folder_id:int = FolderPeer;\n\nupdateFolderPeers#19360dc0 folder_peers:Vector<FolderPeer> pts:int pts_count:int = Update;\n\nupdates#74ae4240 updates:Vector<Update> users:Vector<User> chats:Vector<Chat> date:int seq:int = Updates;\n\n\ninputDialogPeer#fcaafeb7 peer:InputPeer = InputDialogPeer;\ninputDialogPeerFolder#64600527 folder_id:int = InputDialogPeer;\n\ndialogPeer#e56dbf05 peer:Peer = DialogPeer;\ndialogPeerFolder#514519e2 folder_id:int = DialogPeer;\n\n---functions---\n\nfolders.editPeerFolders#6847d0ab folder_peers:Vector<InputFolderPeer> = Updates;\n```\n\nAPI peer folders are typically used only by [archived chats](https://telegram.org/blog/archive-and-new-design), and are really handy for distinguishing groups of peers, since most peer-related constructors (updates, chat info) will contain the `folder_id` assigned the specified chat.\n\nIn Telegram apps, API peer folders are used only to implement the chat archive, identified by `folder_id` `1`; all other peers are in `folder_id` `0` by default; no other `folder_id` is allowed at the moment.\n\n*   [folders.editPeerFolders](https://core.telegram.org/method/folders.editPeerFolders) can be used to add and remove peers from peer folders.\n\nBoth methods return an [updates](https://core.telegram.org/constructor/updates) constructor, containing a single [updateFolderPeers](https://core.telegram.org/constructor/updateFolderPeers) with the new `folder_id` of moved peers.  \nClients can also receive [updateFolderPeers](https://core.telegram.org/constructor/updateFolderPeers) as a normal [update](https://core.telegram.org/api/updates), generated by other clients when modifying peer folders.\n\nClients can then use [InputDialogPeer](https://core.telegram.org/type/InputDialogPeer) to refer either to a specific chat, or to all chats in a peer folder: the server will return a [DialogPeer](https://core.telegram.org/type/DialogPeer) in certain constructors for the same purpose.",
    "url": "https://core.telegram.org/api/folders"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/payments",
      "title": "Payments API",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Payments API"
        },
        {
          "property": "og:description",
          "content": "You can accept payments from Telegram users via Telegram Bots."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:06 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "12966",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Payments API\n\nYou can accept payments from Telegram users via [Telegram Bots](https://core.telegram.org/bots).\n\n> Note: This article is intended for MTProto API developers. If you're looking for a general overview of Telegram Payments, check out the [Telegram blog](https://telegram.org/blog/payments) and the [bot API payment manual](https://core.telegram.org/bots/payments).\n\n### [](#introducing-payments)Introducing Payments\n\nTelegram bots can accept payments for goods and services from users. For more info on how payments work, check out the [Telegram Blog](https://telegram.org/blog/payments) and the [bot API payment manual](https://core.telegram.org/bots/payments).\n\nThis page will elaborate on the actions required to work with payments using the **MTProto API**.\n\n> A simplified version of the process is available only for bots using the [bot API](https://core.telegram.org/bots/payments).\n\nThe first step for bots is [enable payments as described here\u00a0\u00bb](https://core.telegram.org/bots/payments#the-payments-api).\n\nThen, we work with payments as follows.\n\n### [](#1-create-invoice)1\\. Create Invoice\n\n#### [](#11-create-invoice-message)1.1 Create Invoice Message\n\n```\ninputWebDocument#9bed434d url:string size:int mime_type:string attributes:Vector<DocumentAttribute> = InputWebDocument;\n\nlabeledPrice#cb296bf8 label:string amount:long = LabeledPrice;\n\ninvoice#49ee584 flags:# test:flags.0?true name_requested:flags.1?true phone_requested:flags.2?true email_requested:flags.3?true shipping_address_requested:flags.4?true flexible:flags.5?true phone_to_provider:flags.6?true email_to_provider:flags.7?true recurring:flags.9?true currency:string prices:Vector<LabeledPrice> max_tip_amount:flags.8?long suggested_tip_amounts:flags.8?Vector<long> terms_url:flags.10?string subscription_period:flags.11?int = Invoice;\n\ninputMediaInvoice#405fef0d flags:# title:string description:string photo:flags.0?InputWebDocument invoice:Invoice payload:bytes provider:flags.3?string provider_data:DataJSON start_param:flags.1?string extended_media:flags.2?InputMedia = InputMedia;\n\n---functions---\n\nmessages.sendMedia#7852834e flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\n```\n\nThe user contacts the bot and requests to purchase something. The bot forms an [inputMediaInvoice](https://core.telegram.org/constructor/inputMediaInvoice) with an [invoice](https://core.telegram.org/constructor/invoice) constructor with a description of the goods or service, amount to be paid, as well as requested shipping info. The `provider` parameter of the [inputMediaInvoice](https://core.telegram.org/constructor/inputMediaInvoice) constructor is where you put the token value that [you've obtained earlier via Botfather](https://core.telegram.org/bots/payments#the-payments-api). It is possible for one merchant bot to use several different tokens for different users or different goods and services.\n\nUse the [messages.sendMedia](https://core.telegram.org/method/messages.sendMedia) method to send the [invoice](https://core.telegram.org/constructor/invoice). You can also attach an inline keyboard to the message using the `reply_markup` field: if provided, the first button must be a [keyboardButtonBuy](https://core.telegram.org/constructor/keyboardButtonBuy) button. Otherwise, an inline keyboard will be generated automatically, with a `Pay 'total price'` [keyboardButtonBuy](https://core.telegram.org/constructor/keyboardButtonBuy) as only button.\n\nAn invoice message with a pay button can only be sent to a private chat with the user. Groups and channels are not supported.\n\n#### [](#12-create-invoice-link)1.2 Create Invoice Link\n\n```\ninputMediaInvoice#405fef0d flags:# title:string description:string photo:flags.0?InputWebDocument invoice:Invoice payload:bytes provider:flags.3?string provider_data:DataJSON start_param:flags.1?string extended_media:flags.2?InputMedia = InputMedia;\n\npayments.exportedInvoice#aed0cbd9 url:string = payments.ExportedInvoice;\n\n---functions---\n\npayments.exportInvoice#f91b065 invoice_media:InputMedia = payments.ExportedInvoice;\n```\n\nBots may also generate [invoice deep links](https://core.telegram.org/api/links#invoice-links) using [payments.exportInvoice](https://core.telegram.org/method/payments.exportInvoice).\n\nThe returned [payments.exportedInvoice](https://core.telegram.org/constructor/payments.exportedInvoice) will contain an [invoice deep link](https://core.telegram.org/api/links#invoice-links) that can be shared directly, or sent in a bot mini app [`web_app_open_invoice` event](https://core.telegram.org/api/web-events#web-app-open-invoice).\n\n### [](#2-order-information)2\\. Order information\n\n#### [](#21-invoice)2.1 Invoice\n\n```\nkeyboardButtonBuy#afd93fbb text:string = KeyboardButton;\n\nkeyboardButtonRow#77608b83 buttons:Vector<KeyboardButton> = KeyboardButtonRow;\nreplyInlineMarkup#48a30254 rows:Vector<KeyboardButtonRow> = ReplyMarkup;\n\nwebDocument#1c570ed1 url:string access_hash:long size:int mime_type:string attributes:Vector<DocumentAttribute> = WebDocument;\nwebDocumentNoProxy#f9c8bcc6 url:string size:int mime_type:string attributes:Vector<DocumentAttribute> = WebDocument;\n\nmessageMediaInvoice#f6a548d3 flags:# shipping_address_requested:flags.1?true test:flags.3?true title:string description:string photo:flags.0?WebDocument receipt_msg_id:flags.2?int currency:string total_amount:long start_param:string extended_media:flags.4?MessageExtendedMedia = MessageMedia;\n\nmessage#94345242 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true from_scheduled:flags.18?true legacy:flags.19?true edit_hide:flags.21?true pinned:flags.24?true noforwards:flags.26?true invert_media:flags.27?true flags2:# offline:flags2.1?true video_processing_pending:flags2.4?true id:int from_id:flags.8?Peer from_boosts_applied:flags.29?int peer_id:Peer saved_peer_id:flags.28?Peer fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?long via_business_bot_id:flags2.0?long reply_to:flags.3?MessageReplyHeader date:int message:string media:flags.9?MessageMedia reply_markup:flags.6?ReplyMarkup entities:flags.7?Vector<MessageEntity> views:flags.10?int forwards:flags.10?int replies:flags.23?MessageReplies edit_date:flags.15?int post_author:flags.16?string grouped_id:flags.17?long reactions:flags.20?MessageReactions restriction_reason:flags.22?Vector<RestrictionReason> ttl_period:flags.25?int quick_reply_shortcut_id:flags.30?int effect:flags2.2?long factcheck:flags2.3?FactCheck = Message;\n\nupdateNewMessage#1f2b0afd message:Message pts:int pts_count:int = Update;\n```\n\nThe user receives an [invoice deep link](https://core.telegram.org/api/links#invoice-links) or an [updateNewMessage](https://core.telegram.org/constructor/updateNewMessage) constructor from the bot, containing a [messageMediaInvoice](https://core.telegram.org/constructor/messageMediaInvoice) constructor with basic info about the product.\n\nFor invoice messages, the [message](https://core.telegram.org/constructor/message) will also have a [replyInlineMarkup](https://core.telegram.org/constructor/replyInlineMarkup) keyboard attached to it. The first button of the keyboard will always be a [keyboardButtonBuy](https://core.telegram.org/constructor/keyboardButtonBuy) button.\n\nPass `XTR` as `currency` to request payment in [Telegram Stars](https://core.telegram.org/api/stars).\n\n#### [](#22-getting-invoice-info-about-the-product)2.2 Getting invoice info about the product\n\n```\ninputStorePaymentPremiumGiveaway#160544ca flags:# only_new_subscribers:flags.0?true winners_are_visible:flags.3?true boost_peer:InputPeer additional_peers:flags.1?Vector<InputPeer> countries_iso2:flags.2?Vector<string> prize_description:flags.4?string random_id:long until_date:int currency:string amount:long = InputStorePaymentPurpose;\ninputStorePaymentPremiumGiftCode#fb790393 flags:# users:Vector<InputUser> boost_peer:flags.0?InputPeer currency:string amount:long message:flags.1?TextWithEntities = InputStorePaymentPurpose;\n\ninputInvoiceMessage#c5b56859 peer:InputPeer msg_id:int = InputInvoice;\ninputInvoiceSlug#c326caef slug:string = InputInvoice;\ninputInvoicePremiumGiftCode#98986c0d purpose:InputStorePaymentPurpose option:PremiumGiftCodeOption = InputInvoice;\ninputInvoiceStars#65f00ce3 purpose:InputStorePaymentPurpose = InputInvoice;\ninputInvoiceStarGift#25d8c1d8 flags:# hide_name:flags.0?true user_id:InputUser gift_id:long message:flags.1?TextWithEntities = InputInvoice;\n\ninvoice#49ee584 flags:# test:flags.0?true name_requested:flags.1?true phone_requested:flags.2?true email_requested:flags.3?true shipping_address_requested:flags.4?true flexible:flags.5?true phone_to_provider:flags.6?true email_to_provider:flags.7?true recurring:flags.9?true currency:string prices:Vector<LabeledPrice> max_tip_amount:flags.8?long suggested_tip_amounts:flags.8?Vector<long> terms_url:flags.10?string subscription_period:flags.11?int = Invoice;\n\npaymentRequestedInfo#909c3f94 flags:# name:flags.0?string phone:flags.1?string email:flags.2?string shipping_address:flags.3?PostAddress = PaymentRequestedInfo;\n\npaymentSavedCredentialsCard#cdc27a1f id:string title:string = PaymentSavedCredentials;\n\npayments.paymentForm#a0058751 flags:# can_save_credentials:flags.2?true password_missing:flags.3?true form_id:long bot_id:long title:string description:string photo:flags.5?WebDocument invoice:Invoice provider_id:long url:string native_provider:flags.4?string native_params:flags.4?DataJSON additional_methods:flags.6?Vector<PaymentFormMethod> saved_info:flags.0?PaymentRequestedInfo saved_credentials:flags.1?Vector<PaymentSavedCredentials> users:Vector<User> = payments.PaymentForm;\n\npayments.paymentFormStars#7bf6b15c flags:# form_id:long bot_id:long title:string description:string photo:flags.5?WebDocument invoice:Invoice users:Vector<User> = payments.PaymentForm;\npayments.paymentFormStarGift#b425cfe1 form_id:long invoice:Invoice = payments.PaymentForm;\n\n---functions---\n\npayments.getPaymentForm#37148dbb flags:# invoice:InputInvoice theme_params:flags.0?DataJSON = payments.PaymentForm;\n```\n\n[payments.getPaymentForm](https://core.telegram.org/method/payments.getPaymentForm) is used to return a [payment form](https://core.telegram.org/constructor/payments.paymentForm) from an invoice, providing the following `invoice` parameter:\n\n*   [inputInvoiceMessage](https://core.telegram.org/constructor/inputInvoiceMessage), used:\n    *   If the user clicks on the [keyboardButtonBuy](https://core.telegram.org/constructor/keyboardButtonBuy) button, contains the message ID of the invoice preview message.\n    *   When [purchasing paid media\u00a0\u00bb](https://core.telegram.org/api/paid-media).\n*   [inputInvoiceSlug](https://core.telegram.org/constructor/inputInvoiceSlug)\n    *   If the user opens an [invoice deep link](https://core.telegram.org/api/links#invoice-links), contains the `slug` parameter\n    *   If the client has to process a [Telegram Premium](https://core.telegram.org/api/premium) payment, contains the [`premium_invoice_slug` app config parameter \u00bb](https://core.telegram.org/api/config#premium-invoice-slug)\n*   [inputInvoicePremiumGiftCode](https://core.telegram.org/constructor/inputInvoicePremiumGiftCode)\n    *   Used if the user wishes to start a channel [giveaway](https://core.telegram.org/api/giveaways) or send some [giftcodes](https://core.telegram.org/api/giveaways) to members of a channel, in exchange for [boosts](https://core.telegram.org/api/boost).  \n        The `purpose` field should be populated with [inputStorePaymentPremiumGiveaway](https://core.telegram.org/constructor/inputStorePaymentPremiumGiveaway) for [giveaways](https://core.telegram.org/api/giveaways) and [inputStorePaymentPremiumGiftCode](https://core.telegram.org/constructor/inputStorePaymentPremiumGiftCode) for [gifts](https://core.telegram.org/api/giveaways).  \n        The `option` field should be populated with one of the giveaway options returned by [payments.getPremiumGiftCodeOptions](https://core.telegram.org/method/payments.getPremiumGiftCodeOptions).  \n        See the [giveaways\u00a0\u00bb](https://core.telegram.org/api/giveaways) documentation for more info.\n*   [inputInvoiceStars](https://core.telegram.org/constructor/inputInvoiceStars)\n    *   Used to [purchase Telegram Stars](https://core.telegram.org/api/stars#buying-or-gifting-stars). The `option` field should be populated with one of the star topup options returned by [payments.getStarsTopupOptions](https://core.telegram.org/method/payments.getStarsTopupOptions).  \n        See the [stars\u00a0\u00bb](https://core.telegram.org/api/stars#buying-or-gifting-stars) documentation for more info.\n*   [inputInvoiceStarGift](https://core.telegram.org/constructor/inputInvoiceStarGift)\n    *   Used to [purchase Telegram Star Gifts](https://core.telegram.org/api/gifts).  \n        See the [gifts\u00a0\u00bb](https://core.telegram.org/api/gifts) documentation for more info.\n\nThe returned form will contain fields that should be passed to the payment provider along with the full [invoice](https://core.telegram.org/constructor/invoice). The payment form also contains info about previously saved payment credentials and order information (name, phone number, email, shipping address & so on).\n\nThe full [invoice](https://core.telegram.org/constructor/invoice) contains info about the information required for the order, the price and the currency, and whether this is a `test` order. The `recurring` flag will be set for recurring payments, and `recurring_terms_url` will link to the terms of service of the recurring payment: the user must read and accept them before continuing.\n\nA [payments.paymentFormStars](https://core.telegram.org/constructor/payments.paymentFormStars)/[payments.paymentFormStarGift](https://core.telegram.org/constructor/payments.paymentFormStarGift) will be returned if the payment is to be made using [Telegram Stars, see here\u00a0\u00bb](https://core.telegram.org/api/stars) for more info (note that this constructor is used for payments in Telegram Stars to bots and peers, it will **not** be returned when _topping up_ the Telegram Star balance of the current account using [inputInvoiceStars](https://core.telegram.org/constructor/inputInvoiceStars)): the associated invoice will use `XTR` as `currency`.\n\n#### [](#23-verifying-information)2.3 Verifying information\n\n```\ninvoice#49ee584 flags:# test:flags.0?true name_requested:flags.1?true phone_requested:flags.2?true email_requested:flags.3?true shipping_address_requested:flags.4?true flexible:flags.5?true phone_to_provider:flags.6?true email_to_provider:flags.7?true recurring:flags.9?true currency:string prices:Vector<LabeledPrice> max_tip_amount:flags.8?long suggested_tip_amounts:flags.8?Vector<long> terms_url:flags.10?string subscription_period:flags.11?int = Invoice;\n\npostAddress#1e8caaeb street_line1:string street_line2:string city:string state:string country_iso2:string post_code:string = PostAddress;\n\npaymentRequestedInfo#909c3f94 flags:# name:flags.0?string phone:flags.1?string email:flags.2?string shipping_address:flags.3?PostAddress = PaymentRequestedInfo;\n\npayments.validatedRequestedInfo#d1451883 flags:# id:flags.0?string shipping_options:flags.1?Vector<ShippingOption> = payments.ValidatedRequestedInfo;\n\n---functions---\n\npayments.validateRequestedInfo#b6c8f12b flags:# save:flags.0?true invoice:InputInvoice info:PaymentRequestedInfo = payments.ValidatedRequestedInfo;\n```\n\nIf any data at all is requested by the [**invoice**](https://core.telegram.org/constructor/invoice) (`name_requested`, `phone_requested`, `email_requested`, `shipping_address_requested`), the user must call [payments.validateRequestedInfo](https://core.telegram.org/method/payments.validateRequestedInfo), providing the required data (as usual, `msg_id` is the ID of the invoice message). The user can choose to save order information for future use by setting the `save` flag. Data can be autofilled as described in [autofill](#231-autofill).\n\nIf no errors are found in the submitted info, the [response](https://core.telegram.org/constructor/payments.ValidatedRequestedInfo) of the method will contain an `id` flag, to be used later to complete the payment.\n\nIf the `flexible` flag of the invoice is set, calling the [payments.validateRequestedInfo](https://core.telegram.org/method/payments.validateRequestedInfo) method will send a [shipping query update](https://core.telegram.org/constructor/updateBotShippingQuery) to the bot, to which the bot will reply with the available shipping options for the specified address [as described here\u00a0\u00bb](#24-select-delivery-option). The return value in this case will also contain a `shipping_options` field with the available shipping options.\n\nIf any errors are found in the submitted data, a [service notification](https://core.telegram.org/constructor/updateServiceNotification) will be sent to the user, with a description of the error from the bot.\n\n#### [](#231-autofill)2.3.1 Autofill\n\n```\npayments.savedInfo#fb8fe43c flags:# has_saved_credentials:flags.1?true saved_info:flags.0?PaymentRequestedInfo = payments.SavedInfo;\n\n---functions---\n\npayments.getSavedInfo#227d824b = payments.SavedInfo;\npayments.clearSavedInfo#d83d70c1 flags:# credentials:flags.0?true info:flags.1?true = Bool;\n```\n\nThe requested fields can be autofilled with the info provided in the `saved_info` field of the [payment form](https://core.telegram.org/constructor/payments.paymentForm), or with the info fetched manually using [payments.getSavedInfo](https://core.telegram.org/method/payments.getSavedInfo).\n\nSaved order information can also be cleared using [payments.clearSavedInfo](https://core.telegram.org/method/payments.clearSavedInfo).\n\n#### [](#24-select-delivery-option)2.4 Select delivery option\n\n```\nlabeledPrice#cb296bf8 label:string amount:long = LabeledPrice;\n\nshippingOption#b6213cdf id:string title:string prices:Vector<LabeledPrice> = ShippingOption;\n\nupdateBotShippingQuery#b5aefd7d query_id:long user_id:long payload:bytes shipping_address:PostAddress = Update;\n\n---functions---\n\nmessages.setBotShippingResults#e5f672fa flags:# query_id:long error:flags.0?string shipping_options:flags.1?Vector<ShippingOption> = Bool;\n```\n\nIf a shipping address was requested and the bot included the parameter `flexible`, when the user [validates order information](#23-verifying-information) the Telegram API will send an [updateBotShippingQuery](https://core.telegram.org/constructor/updateBotShippingQuery) to the bot. The bot must respond using [messages.setBotShippingResults](https://core.telegram.org/method/messages.setBotShippingResults) either with a list of possible delivery options and the relevant delivery prices, or with an error (for example, if delivery to the specified address is not possible).\n\nThe returned shipping options or the shipping error will be returned to the user while [validating order information](#23-verifying-information).\n\n### [](#3-payment)3\\. Payment\n\n#### [](#31-star-payment)3.1 Star payment\n\n```\npayments.paymentFormStars#7bf6b15c flags:# form_id:long bot_id:long title:string description:string photo:flags.5?WebDocument invoice:Invoice users:Vector<User> = payments.PaymentForm;\npayments.paymentFormStarGift#b425cfe1 form_id:long invoice:Invoice = payments.PaymentForm;\n\n---functions---\n\npayments.sendStarsForm#7998c914 form_id:long invoice:InputInvoice = payments.PaymentResult;\n```\n\nA [payments.paymentFormStars](https://core.telegram.org/constructor/payments.paymentFormStars) or [payments.paymentFormStarGift](https://core.telegram.org/constructor/payments.paymentFormStarGift) will be returned if the payment should be made using [Telegram Stars](https://core.telegram.org/api/stars), invoking [payments.sendStarsForm](https://core.telegram.org/method/payments.sendStarsForm) instead of [payments.sendPaymentForm](https://core.telegram.org/method/payments.sendPaymentForm) at [step 4\u00a0\u00bb](#4-pre-checkout).\n\nCalling [payments.sendStarsForm](https://core.telegram.org/method/payments.sendStarsForm) twice with the same `form_id` will **not** repeat the transaction.\n\nNote that the returned form is only valid for 10 minutes, after which a call to [payments.sendStarsForm](https://core.telegram.org/method/payments.sendStarsForm) will return a `400` `FORM_EXPIRED` error.  \nWhen receiving this error, simply re-generate the form as specified in [step 2.2\u00a0\u00bb](#22-getting-invoice-info-about-the-product) and re-call [payments.sendStarsForm](https://core.telegram.org/method/payments.sendStarsForm).\n\nA `400` `BALANCE_TOO_LOW` error will be emitted by [payments.sendStarsForm](https://core.telegram.org/method/payments.sendStarsForm) if the current Telegram Stars balance is not enough to complete the transaction: when receiving this error, the client should invite the user to [topup their Telegram Stars balance\u00a0\u00bb](https://core.telegram.org/api/stars#buying-or-gifting-stars), before re-invoking [payments.sendStarsForm](https://core.telegram.org/method/payments.sendStarsForm).\n\n#### [](#32-web-payment)3.2 Web payment\n\n```\ninputPaymentCredentials#3417d728 flags:# save:flags.0?true data:DataJSON = InputPaymentCredentials;\n\npayments.paymentForm#a0058751 flags:# can_save_credentials:flags.2?true password_missing:flags.3?true form_id:long bot_id:long title:string description:string photo:flags.5?WebDocument invoice:Invoice provider_id:long url:string native_provider:flags.4?string native_params:flags.4?DataJSON additional_methods:flags.6?Vector<PaymentFormMethod> saved_info:flags.0?PaymentRequestedInfo saved_credentials:flags.1?Vector<PaymentSavedCredentials> users:Vector<User> = payments.PaymentForm;\n\npaymentFormMethod#88f8f21b url:string title:string = PaymentFormMethod;\n```\n\nThe user can choose to use either the main payment platform, using the `url` of the [payments.paymentForm](https://core.telegram.org/constructor/payments.paymentForm), or any of the additional payment platforms, using the `url` of the chosen [paymentFormMethod](https://core.telegram.org/constructor/paymentFormMethod).  \nPayment takes place by opening the `url` of the chosen payment platform in the specified [payment form](https://core.telegram.org/constructor/payments.paymentForm), which leads to a payment form on the website of the payment gateway.  \nOnce the user finishes entering their payment credentials, a [`payment_form_submit` web event](https://core.telegram.org/api/web-events#payment-form-submit) is generated by the payment gateway, containing `credentials` and `title` JSON fields.\n\nThe `title` is used by the client app to represent the payment credentials (typically a censored version of credit card information). The `credentials` are used to generate an [inputPaymentCredentials](https://core.telegram.org/constructor/inputPaymentCredentials) constructor. Eventually, you can set the `save` flag to save the credit card info for future use, only if [2FA](https://core.telegram.org/api/srp) is enabled.\n\nTelegram **does not** have access to your card information. Credit card details will be handled only by the payment system.\n\n#### [](#33-native-payment)3.3 Native payment\n\n```\ninputPaymentCredentials#3417d728 flags:# save:flags.0?true data:DataJSON = InputPaymentCredentials;\n\npayments.paymentForm#a0058751 flags:# can_save_credentials:flags.2?true password_missing:flags.3?true form_id:long bot_id:long title:string description:string photo:flags.5?WebDocument invoice:Invoice provider_id:long url:string native_provider:flags.4?string native_params:flags.4?DataJSON additional_methods:flags.6?Vector<PaymentFormMethod> saved_info:flags.0?PaymentRequestedInfo saved_credentials:flags.1?Vector<PaymentSavedCredentials> users:Vector<User> = payments.PaymentForm;\n```\n\nMost telegram apps support working natively with the native APIs of some payment providers, without opening the website of the payment and receiving a JS event.\n\nThis is done using the JSON `native_params` parameters field of the [payments.paymentForm](https://core.telegram.org/constructor/payments.paymentForm) constructor, which contains an object, which can contain one or more of the following fields:\n\n*   `publishable_key`: Stripe API publishable key\n*   `apple_pay_merchant_id`: Apple Pay merchant ID\n*   `android_pay_public_key`: Android Pay public key\n*   `android_pay_bgcolor`: Android Pay form background color\n*   `android_pay_inverse`: Whether to use the dark theme in the Android Pay form\n*   `need_country`: True, if the user country must be provided,\n*   `need_zip`: True, if the user ZIP/postal code must be provided,\n*   `need_cardholder_name`: True, if the cardholder name must be provided\n\nThe payment gateway to use is decided based on the value of the `native_provider` field.\n\n##### [](#331-stripe)3.3.1 Stripe\n\n```\ninputPaymentCredentials#3417d728 flags:# save:flags.0?true data:DataJSON = InputPaymentCredentials;\n\npayments.paymentForm#a0058751 flags:# can_save_credentials:flags.2?true password_missing:flags.3?true form_id:long bot_id:long title:string description:string photo:flags.5?WebDocument invoice:Invoice provider_id:long url:string native_provider:flags.4?string native_params:flags.4?DataJSON additional_methods:flags.6?Vector<PaymentFormMethod> saved_info:flags.0?PaymentRequestedInfo saved_credentials:flags.1?Vector<PaymentSavedCredentials> users:Vector<User> = payments.PaymentForm;\n```\n\nIf the `native_provider` field is set and equal to `stripe`, the client can make use of the [native Stripe token APIs](https://stripe.com/docs/api/tokens/object) with the `publishable_key` from the `native_params` to add a payment method to Stripe, and then use the token `type` and `id` to generate a JSON object:\n\n```\n{\"type\":\"token.type\", \"id\":\"token.id\"}\"\n```\n\nThe generated JSON object can then be passed to the `data` field of the [inputPaymentCredentials](https://core.telegram.org/constructor/inputPaymentCredentials). Eventually, you can set the `save` flag to save the credit card info for future use, only if [2FA](https://core.telegram.org/api/srp) is enabled.\n\nTelegram **does not** have access to your card information. Credit card details will be handled only by the payment system.\n\nExample implementation: [Telegram for Android](https://github.com/DrKLO/Telegram).\n\n#### [](#34-apple-pay)3.4 Apple pay\n\n```\ninputPaymentCredentialsApplePay#aa1c39f payment_data:DataJSON = InputPaymentCredentials;\n```\n\nOn iOS devices, Apple Pay can be used to generate payment data, which is then sent using the [inputPaymentCredentialsApplePay](https://core.telegram.org/constructor/inputPaymentCredentialsApplePay) constructor.\n\nExample implementation: [Telegram for iOS](https://github.com/TelegramMessenger/Telegram-iOS/).\n\n#### [](#35-android-pay)3.5 Android pay\n\n```\ninputPaymentCredentialsGooglePay#8ac32801 payment_token:DataJSON = InputPaymentCredentials;\n```\n\nOn Android devices, Google Pay can be used to generate payment data, which is then sent using the [inputPaymentCredentialsGooglePay](https://core.telegram.org/constructor/inputPaymentCredentialsApplePay) constructor.\n\nExample implementation: [Telegram for Android](https://github.com/DrKLO/Telegram/blob/ff5735503e068a6f1cada09b977f633df7caf98d/TMessagesProj/src/main/java/org/telegram/ui/PaymentFormActivity.java).\n\n#### [](#36-using-saved-payment-credentials)3.6 Using saved payment credentials\n\n```\ninputPaymentCredentialsSaved#c10eb2cf id:string tmp_password:bytes = InputPaymentCredentials;\n\npaymentSavedCredentialsCard#cdc27a1f id:string title:string = PaymentSavedCredentials;\n\npayments.paymentForm#a0058751 flags:# can_save_credentials:flags.2?true password_missing:flags.3?true form_id:long bot_id:long title:string description:string photo:flags.5?WebDocument invoice:Invoice provider_id:long url:string native_provider:flags.4?string native_params:flags.4?DataJSON additional_methods:flags.6?Vector<PaymentFormMethod> saved_info:flags.0?PaymentRequestedInfo saved_credentials:flags.1?Vector<PaymentSavedCredentials> users:Vector<User> = payments.PaymentForm;\n\naccount.tmpPassword#db64fd34 tmp_password:bytes valid_until:int = account.TmpPassword;\n\n---functions---\n\naccount.getTmpPassword#449e0b51 password:InputCheckPasswordSRP period:int = account.TmpPassword;\n```\n\nTo reuse saved payment methods, the `saved_credentials` field of the [payment form](https://core.telegram.org/constructor/payments.paymentForm) is used. The `title` of the [paymentSavedCredentialsCard](https://core.telegram.org/constructor/paymentSavedCredentialsCard) can be used to preview a censored version of credit card info. The `id` field is provided by the payment provider directly to the Telegram servers when saving the payment method, and identifies the payment method. Full credit card info **is not** saved on Telegram Servers, and cannot be fetched by the user.\n\nIn order to **use** the saved payment method, [2FA](https://core.telegram.org/api/srp) must be enabled: the user must verify their identity by entering their [2FA](https://core.telegram.org/api/srp) password, which is then used as described in the [SRP docs](https://core.telegram.org/api/srp) to generate SRP parameters which must be passed to [account.getTmpPassword](https://core.telegram.org/method/account.getTmpPassword).\n\nThe generated temporary password can then be used to make payments using the saved credentials using the [inputPaymentCredentialsSaved](https://core.telegram.org/constructor/inputPaymentCredentialsSaved) constructor.\n\n*   The `id` field is the [paymentSavedCredentialsCard](https://core.telegram.org/constructor/paymentSavedCredentialsCard) `id`.\n*   The `tmp_password` is the temporary payment password generated by the server, if the user provided a correct [2FA password](https://core.telegram.org/api/srp).\n\nExample implementation: [Telegram for Android](https://github.com/DrKLO/Telegram).\n\n### [](#4-pre-checkout)4\\. Pre-Checkout\n\n```\ninputPaymentCredentialsSaved#c10eb2cf id:string tmp_password:bytes = InputPaymentCredentials;\ninputPaymentCredentials#3417d728 flags:# save:flags.0?true data:DataJSON = InputPaymentCredentials;\ninputPaymentCredentialsApplePay#aa1c39f payment_data:DataJSON = InputPaymentCredentials;\ninputPaymentCredentialsGooglePay#8ac32801 payment_token:DataJSON = InputPaymentCredentials;\n\npayments.paymentResult#4e5f810d updates:Updates = payments.PaymentResult;\npayments.paymentVerificationNeeded#d8411139 url:string = payments.PaymentResult;\n\n---functions---\n\npayments.sendPaymentForm#2d03522f flags:# form_id:long invoice:InputInvoice requested_info_id:flags.0?string shipping_option_id:flags.1?string credentials:InputPaymentCredentials tip_amount:flags.2?long = payments.PaymentResult;\n\npayments.sendStarsForm#7998c914 form_id:long invoice:InputInvoice = payments.PaymentResult;\n```\n\nAfter [verifying order information](#23-verifying-information), the final step for the client is to call [payments.sendPaymentForm](https://core.telegram.org/method/payments.sendPaymentForm) or [payments.sendStarsForm](https://core.telegram.org/method/payments.sendStarsForm) for [payments using Telegram Stars\u00a0\u00bb](#31-star-payment), with the following parameters:\n\n*   The `form_id` is set to the ID of the form\n*   The `invoice` is set to the previously passed invoice\n*   `requested_info_id` is set to the `id` of the [verified order information](#23-verifying-information), if it was requested\n*   `shipping_option_id` is set to the [selected delivery option](#24-select-delivery-option), if shipping was requested.\n*   `credentials` are the payment credentials generated by the payment provider, required to complete the order.\n\nPayment method info can also be saved to the Telegram Servers and reused, by setting the `save` flag of [inputPaymentCredentials](https://core.telegram.org/constructor/inputPaymentCredentials) when sending the form. This is only possible on accounts with [2FA](https://core.telegram.org/api/srp) enabled.\n\nThe bot then [replies to the received precheckout query](#41-receiving-pre-checkout-query), finally the user [proceeds to checkout](#5-checkout).\n\nPlease note that if the result of the method is a [payments.paymentVerificationNeeded](https://core.telegram.org/constructor/payments.paymentVerificationNeeded), before [proceeding to checkout](#5-checkout) the payment provider requires the user to verify their identity by opening the provided `url` and following instructions (ie 3-D Secure).  \nOnce the user finishes working with the webpage, the client can [proceed to checkout](#5-checkout).\n\nEventual errors are returned in the form of RPC errors (`rpc_error`), with the description of the error by the bot contained in additional [service updates](https://core.telegram.org/constructor/updateServiceNotification) received separately, see [here](https://core.telegram.org/api/errors#406-not-acceptable) for more info.\n\nNote that eventual payment errors will not be sent to the client via MTProto if they occur during additional verification (if a [payments.paymentVerificationNeeded](https://core.telegram.org/constructor/payments.paymentVerificationNeeded) is returned and the user fails TOTP verification): such errors will only be displayed inside of the verification webview, no MTProto updates or RPC errors (`rpc_error`) will be received.\n\n#### [](#41-receiving-pre-checkout-query)4.1 Receiving pre-checkout query\n\n```\npaymentRequestedInfo#909c3f94 flags:# name:flags.0?string phone:flags.1?string email:flags.2?string shipping_address:flags.3?PostAddress = PaymentRequestedInfo;\n\nupdateBotPrecheckoutQuery#8caa9a96 flags:# query_id:long user_id:long payload:bytes info:flags.0?PaymentRequestedInfo shipping_option_id:flags.1?string currency:string total_amount:long = Update;\n\n---functions---\n\nmessages.setBotPrecheckoutResults#9c2dd95 flags:# success:flags.1?true query_id:long error:flags.0?string = Bool;\n```\n\nThe user enters their payment information as described above and presses the final pay button. At this moment the Telegram API sends an [updateBotPrecheckoutQuery](https://core.telegram.org/constructor/updateBotPrecheckoutQuery) constructor that contains all the available information about the order to the bot. The bot must reply using [messages.setBotPrecheckoutResults](https://core.telegram.org/method/messages.setBotPrecheckoutResults) **within 10 seconds** after receiving this update or the transaction is canceled.\n\nThe bot may return an error if it can't process the order for any reason. We highly recommend specifying a reason for failure to complete the order in human readable form (e.g. \"Sorry, we're all out of rubber ducks! Would you be interested in a steel bear instead?\"). Telegram will display this reason to the user.\n\n### [](#5-checkout)5\\. Checkout\n\n```\nkeyboardButtonBuy#afd93fbb text:string = KeyboardButton;\n\nkeyboardButtonRow#77608b83 buttons:Vector<KeyboardButton> = KeyboardButtonRow;\nreplyInlineMarkup#48a30254 rows:Vector<KeyboardButtonRow> = ReplyMarkup;\n\nmessageMediaInvoice#f6a548d3 flags:# shipping_address_requested:flags.1?true test:flags.3?true title:string description:string photo:flags.0?WebDocument receipt_msg_id:flags.2?int currency:string total_amount:long start_param:string extended_media:flags.4?MessageExtendedMedia = MessageMedia;\n\nmessage#94345242 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true from_scheduled:flags.18?true legacy:flags.19?true edit_hide:flags.21?true pinned:flags.24?true noforwards:flags.26?true invert_media:flags.27?true flags2:# offline:flags2.1?true video_processing_pending:flags2.4?true id:int from_id:flags.8?Peer from_boosts_applied:flags.29?int peer_id:Peer saved_peer_id:flags.28?Peer fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?long via_business_bot_id:flags2.0?long reply_to:flags.3?MessageReplyHeader date:int message:string media:flags.9?MessageMedia reply_markup:flags.6?ReplyMarkup entities:flags.7?Vector<MessageEntity> views:flags.10?int forwards:flags.10?int replies:flags.23?MessageReplies edit_date:flags.15?int post_author:flags.16?string grouped_id:flags.17?long reactions:flags.20?MessageReactions restriction_reason:flags.22?Vector<RestrictionReason> ttl_period:flags.25?int quick_reply_shortcut_id:flags.30?int effect:flags2.2?long factcheck:flags2.3?FactCheck = Message;\n\nupdateNewMessage#1f2b0afd message:Message pts:int pts_count:int = Update;\n\npayments.paymentReceipt#70c4fe03 flags:# date:int bot_id:long provider_id:long title:string description:string photo:flags.2?WebDocument invoice:Invoice info:flags.0?PaymentRequestedInfo shipping:flags.1?ShippingOption tip_amount:flags.3?long currency:string total_amount:long credentials_title:string users:Vector<User> = payments.PaymentReceipt;\n\npayments.paymentReceiptStars#dabbf83a flags:# date:int bot_id:long title:string description:string photo:flags.2?WebDocument invoice:Invoice currency:string total_amount:long transaction_id:string users:Vector<User> = payments.PaymentReceipt;\n\n---functions---\n\npayments.getPaymentReceipt#2478d1cc peer:InputPeer msg_id:int = payments.PaymentReceipt;\n```\n\nIn case the bot confirms the order, Telegram requests the payment provider to complete the transaction. If the payment information was entered correctly and the payment goes through, the Telegram API will modify the invoice message and send a service message as described below. Once your bot receives this message, it should proceed with delivering the goods or services purchased by the user.\n\nIf all is OK, the user receives a [payments.paymentResult](https://core.telegram.org/constructor/payments.paymentResult) in reply to the [payments.sendPaymentForm](https://core.telegram.org/method/payments.sendPaymentForm) query, containing info about the updated invoice message in the form of an [updateEditMessage](https://core.telegram.org/constructor/updateEditMessage).\n\nThe invoice message will be updated as follows: the attached [messageMediaInvoice](https://core.telegram.org/constructor/messageMediaInvoice) will now have a `receipt_msg_id` field. Clients should treat invoice messages with a `receipt_msg_id` field as receipt messages, **locally** modifying the label of the [keyboardButtonBuy](https://core.telegram.org/constructor/keyboardButtonBuy) button to a localized version of the word `Receipt`. From this point, clicking on the `Receipt` button should trigger a call to [payments.getPaymentReceipt](https://core.telegram.org/method/payments.getPaymentReceipt), providing the `receipt_msg_id` to the `msg_id` field, which will return info about the transaction.\n\nThe payment will also generate one service message of type [messageActionPaymentSent](https://core.telegram.org/constructor/messageActionPaymentSent) or [messageActionPaymentSentMe](https://core.telegram.org/constructor/messageActionPaymentSentMe), replying to the invoice. For bots, the service message will be of type [messageActionPaymentSentMe](https://core.telegram.org/constructor/messageActionPaymentSentMe), for users it will be a [messageActionPaymentSent](https://core.telegram.org/constructor/messageActionPaymentSent).  \nThe `recurring_init` flag will be set if this payment also enables future recurring payments.  \nFurther recurring payments will automatically send [messageActionPaymentSentMe](https://core.telegram.org/constructor/messageActionPaymentSentMe) and [messageActionPaymentSent](https://core.telegram.org/constructor/messageActionPaymentSent) messages with the `recurring_used` flag set.\n\n```\nmessageActionPaymentSentMe#ffa00ccc flags:# recurring_init:flags.2?true recurring_used:flags.3?true currency:string total_amount:long payload:bytes info:flags.0?PaymentRequestedInfo shipping_option_id:flags.1?string charge:PaymentCharge subscription_until_date:flags.4?int = MessageAction;\nmessageActionPaymentSent#c624b16e flags:# recurring_init:flags.2?true recurring_used:flags.3?true currency:string total_amount:long invoice_slug:flags.0?string subscription_until_date:flags.4?int = MessageAction;\n```\n\n### [](#6-refunds)6\\. Refunds\n\n```\npaymentCharge#ea02c27e id:string provider_charge_id:string = PaymentCharge;\n\nmessageActionPaymentSentMe#ffa00ccc flags:# recurring_init:flags.2?true recurring_used:flags.3?true currency:string total_amount:long payload:bytes info:flags.0?PaymentRequestedInfo shipping_option_id:flags.1?string charge:PaymentCharge subscription_until_date:flags.4?int = MessageAction;\n\nmessageActionPaymentRefunded#41b3e202 flags:# peer:Peer currency:string total_amount:long payload:flags.0?bytes charge:PaymentCharge = MessageAction;\n\n---functions---\n\npayments.refundStarsCharge#25ae8f4a user_id:InputUser charge_id:string = Updates;\n```\n\nPayments made using [Telegram Stars\u00a0\u00bb](https://core.telegram.org/api/stars) may be refunded _by the user/bot that received them_ by invoking [payments.refundStarsCharge](https://core.telegram.org/method/payments.refundStarsCharge), passing to `user_id` the ID of the user that did the payment, and to `charge_id` the `provider_charge_id` from the [messageActionPaymentSentMe](https://core.telegram.org/constructor/messageActionPaymentSentMe) service message action of the incoming payment.\n\nThis will emit a [messageActionPaymentRefunded](https://core.telegram.org/constructor/messageActionPaymentRefunded) service message.",
    "url": "https://core.telegram.org/api/payments"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/stickers",
      "title": "Stickers",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Stickers"
        },
        {
          "property": "og:description",
          "content": "Telegram clients support displaying static and animated stickers."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:06 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "12853",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Stickers\n\nTelegram clients support displaying static and animated stickers.\n\n### [](#displaying-stickers)Displaying stickers\n\n```\ndocument#8fd4c4d8 flags:# id:long access_hash:long file_reference:bytes date:int mime_type:string size:long thumbs:flags.0?Vector<PhotoSize> video_thumbs:flags.1?Vector<VideoSize> dc_id:int attributes:Vector<DocumentAttribute> = Document;\n\ndocumentAttributeSticker#6319d612 flags:# mask:flags.1?true alt:string stickerset:InputStickerSet mask_coords:flags.0?MaskCoords = DocumentAttribute;\n\ninputStickerSetEmpty#ffb62b95 = InputStickerSet;\ninputStickerSetID#9de7a269 id:long access_hash:long = InputStickerSet;\ninputStickerSetShortName#861cc8a0 short_name:string = InputStickerSet;\ninputStickerSetAnimatedEmoji#28703c8 = InputStickerSet;\ninputStickerSetDice#e67f520e emoticon:string = InputStickerSet;\ninputStickerSetAnimatedEmojiAnimations#cde3739 = InputStickerSet;\ninputStickerSetPremiumGifts#c88b3b02 = InputStickerSet;\ninputStickerSetEmojiGenericAnimations#4c4d4ce = InputStickerSet;\ninputStickerSetEmojiDefaultStatuses#29d0f5ee = InputStickerSet;\ninputStickerSetEmojiDefaultTopicIcons#44c1f8e9 = InputStickerSet;\ninputStickerSetEmojiChannelDefaultStatuses#49748553 = InputStickerSet;\n```\n\nStickers can be contained in [document](https://core.telegram.org/constructor/document) constructors attached to [messages](https://core.telegram.org/constructor/message), and always have an attribute of type [documentAttributeSticker](https://core.telegram.org/constructor/documentAttributeSticker).\n\nThe [documentAttributeSticker](https://core.telegram.org/constructor/documentAttributeSticker) attribute contains information about the associated [stickerset](#stickersets), the emoji that represents the sticker, and more.\n\nThere are multiple available sticker types:\n\n*   [Static stickers\u00a0\u00bb](#static-stickers)\n*   [Animated stickers\u00a0\u00bb](#animated-stickers)\n*   [Video stickers\u00a0\u00bb](#video-stickers)\n\nLike all files, stickers have a set of previews that should be handled as described [here\u00a0\u00bb](https://core.telegram.org/api/files#image-thumbnail-types).\n\nStickers are organized in [stickersets\u00a0\u00bb](#stickersets), and are also used in the following contexts:\n\n*   [Dice\u00a0\u00bb](https://core.telegram.org/api/dice)\n*   [Animated emojis\u00a0\u00bb](https://core.telegram.org/api/animated-emojis)\n*   [Custom emojis\u00a0\u00bb](https://core.telegram.org/api/custom-emoji)\n*   [Reactions\u00a0\u00bb](https://core.telegram.org/api/reactions)\n*   [Mask stickers\u00a0\u00bb](#mask-stickers)\n\nA single stickerset can contain a mix of [static](#static-stickers), [animated](#animated-stickers) and [video](#video-stickers) stickers.\n\n#### [](#static-stickers)Static stickers\n\nStatic stickers are [WebP](https://en.wikipedia.org/wiki/WebP) images with the following specs:\n\n*   For stickers, either width or height must be equal to 512 pixels.\n*   For [custom emojis](https://core.telegram.org/api/custom-emoji), the resolution must be equal to 100x100 pixels.\n*   Transparency is supported.\n\nThey're identified by `mime_type` field of the associated [document](https://core.telegram.org/constructor/document), always equal to `image/webp`.\n\nSee [here\u00a0\u00bb](https://core.telegram.org/stickers#static-stickers-and-emoji) for tips on how to create the perfect static sticker, and [here\u00a0\u00bb](#creating-stickersets) for info on how to upload it using the API.\n\n#### [](#animated-stickers)Animated stickers\n\nAnimated stickers are [Lottie vector animations\u00a0\u00bb](https://en.wikipedia.org/wiki/Lottie_\\(file_format\\)).\n\nTelegram uses a special `.tgs` file format for lottie animations, which consists in a gzipped bodymovin JSON file, playable using the [rlottie](https://github.com/Samsung/rlottie) library.\n\nLottie animation specs:\n\n*   The canvas size must be 512\u0445512 pixels.\n*   Objects must not leave the canvas.\n*   Animation length must not exceed 3 seconds.\n*   All animations must be looped.\n*   All animations must run at 60 Frames Per Second.\n\nThey're identified by `mime_type` field of the associated [document](https://core.telegram.org/constructor/document), always equal to `application/x-tgsticker`.\n\nSee [here\u00a0\u00bb](https://core.telegram.org/stickers#creating-animations) for tips on how to create the perfect animated sticker, and [here\u00a0\u00bb](#creating-stickersets) for info on how to upload it using the API.\n\n##### [](#premium-animated-sticker-effects)Premium animated sticker effects\n\n```\ndocument#8fd4c4d8 flags:# id:long access_hash:long file_reference:bytes date:int mime_type:string size:long thumbs:flags.0?Vector<PhotoSize> video_thumbs:flags.1?Vector<VideoSize> dc_id:int attributes:Vector<DocumentAttribute> = Document;\n\nvideoSize#de33b094 flags:# type:string w:int h:int size:int video_start_ts:flags.0?double = VideoSize;\n\ninputDocumentFileLocation#bad07584 id:long access_hash:long file_reference:bytes thumb_size:string = InputFileLocation;\n```\n\nSome animated stickers also have an attached animated effect (as another Lottie animation), that should be played once the sticker is inside the viewport.\n\nThis effect is larger than the sticker itself, and should be located _under_ the main sticker animation, but also _over_ any other nearby UI element.\n\nIt should be played the first time the sticker scrolls into view; it should be played again if the chat is closed and then opened again.\n\nPremium stickers may only be _sent_ by users with a [Premium](https://core.telegram.org/api/premium) subscription, and the animated effect should be played by all users, including those without a Premium subscription.\n\nA premium sticker is identified by the presence of a [videoSize](https://core.telegram.org/constructor/videoSize) of `type=f` in the sticker's main [document](https://core.telegram.org/constructor/document).  \nThe TGS file of the animated effect (different from the TGS file of the sticker itself) may be fetched by using [inputDocumentFileLocation](https://core.telegram.org/constructor/inputDocumentFileLocation) with `thumb_size=f`, as specified [here\u00a0\u00bb](https://core.telegram.org/api/files#downloading-files).\n\nNote that [animated message effects\u00a0\u00bb](https://core.telegram.org/api/effects) can also re-use the animated effect of a premium sticker.\n\nAlso, premium animated stickers may be sent with an extra [animated message effect\u00a0\u00bb](https://core.telegram.org/api/effects), in which case both the effect of the sticker and the additional effect should be played simultaneously.\n\n#### [](#video-stickers)Video stickers\n\nVideo stickers are [VP9](https://en.wikipedia.org/wiki/VP9) videos with the following specs:\n\n*   The video must be encoded using [VP9](https://en.wikipedia.org/wiki/VP9), in a [WebM](https://en.wikipedia.org/wiki/WebM) container.\n*   The [WebM](https://en.wikipedia.org/wiki/WebM) container must have **no audio stream**.\n*   For stickers, either width or height must be equal to 512 pixels.\n*   For [custom emojis](https://core.telegram.org/api/custom-emoji), the resolution must be equal to 100x100 pixels.\n*   Maximum duration: 3 seconds.\n*   Frame rate: up to 30 FPS.\n*   Transparency is supported.\n*   The video should be looped for optimal user experience.\n\nThey're identified by `mime_type` field of the associated [document](https://core.telegram.org/constructor/document), always equal to `video/webm`.\n\nSee [here\u00a0\u00bb](https://core.telegram.org/stickers#video-stickers-and-emoji) for tips on how to create the perfect video sticker, and [here\u00a0\u00bb](#creating-stickersets) for info on how to upload it using the API.\n\n### [](#stickersets)Stickersets\n\n```\ninputStickerSetID#9de7a269 id:long access_hash:long = InputStickerSet;\ninputStickerSetShortName#861cc8a0 short_name:string = InputStickerSet;\ninputStickerSetAnimatedEmoji#28703c8 = InputStickerSet;\ninputStickerSetDice#e67f520e emoticon:string = InputStickerSet;\ninputStickerSetAnimatedEmojiAnimations#cde3739 = InputStickerSet;\ninputStickerSetPremiumGifts#c88b3b02 = InputStickerSet;\ninputStickerSetEmojiGenericAnimations#4c4d4ce = InputStickerSet;\ninputStickerSetEmojiDefaultStatuses#29d0f5ee = InputStickerSet;\ninputStickerSetEmojiDefaultTopicIcons#44c1f8e9 = InputStickerSet;\ninputStickerSetEmojiChannelDefaultStatuses#49748553 = InputStickerSet;\n\nmessages.stickerSet#6e153f16 set:StickerSet packs:Vector<StickerPack> keywords:Vector<StickerKeyword> documents:Vector<Document> = messages.StickerSet;\nmessages.stickerSetNotModified#d3f924eb = messages.StickerSet;\n\nstickerSet#2dd14edc flags:# archived:flags.1?true official:flags.2?true masks:flags.3?true emojis:flags.7?true text_color:flags.9?true channel_emoji_status:flags.10?true creator:flags.11?true installed_date:flags.0?int id:long access_hash:long title:string short_name:string thumbs:flags.4?Vector<PhotoSize> thumb_dc_id:flags.4?int thumb_version:flags.4?int thumb_document_id:flags.8?long count:int hash:int = StickerSet;\n\nstickerPack#12b299d4 emoticon:string documents:Vector<long> = StickerPack;\n\n---functions---\n\nmessages.getStickerSet#c8a0ec74 stickerset:InputStickerSet hash:int = messages.StickerSet;\n```\n\nStickers are grouped together in so-called sticker packs: however, in the API they're referred to as \"sticker sets\", and the name \"sticker pack\" is reserved for something else, read on for more info.\n\nUse [messages.getStickerSet](https://core.telegram.org/method/messages.getStickerSet) to fetch information about the stickerset, providing the following parameters:\n\n*   `stickerset` - One of the constructors specified [here\u00a0\u00bb](https://core.telegram.org/type/InputStickerSet), choose the correct one, according to the stickerset that is being fetched.\n*   `hash` - Initially 0, afterwards should contain the `hash` field from the returned [stickerSet](https://core.telegram.org/constructor/stickerSet).\n\nThe method will return a [messages.stickerSetNotModified](https://core.telegram.org/constructor/messages.stickerSetNotModified) if a non-zero `hash` is provided and the stickerset wasn't modified since the last time we fetched it.  \nOtherwise, a [messages.stickerSet](https://core.telegram.org/constructor/messages.stickerSet) will be returned, containing:\n\n*   A [stickerSet](https://core.telegram.org/constructor/stickerSet) constructor with info about the stickerset\n*   A vector of [document](https://core.telegram.org/constructor/document) constructors, containing all the stickers.  \n    Note that even if we provided an old `hash` and just a few stickers were modified/reordered, all stickers will be returned anyway.\n*   A vector of [stickerPack](https://core.telegram.org/constructor/stickerPack) constructors, containing all the stickers IDs in the stickerpack, grouped by emoji.  \n    The main emoji to use when previewing stickers in the chat list is present in the `alt` field of the [document](https://core.telegram.org/constructor/document).  \n    This field is actually used to allow associating more than one emoji to a sticker: this means that the same document ID may be present in multiple [stickerPacks](https://core.telegram.org/constructor/stickerPack).\n\n### [](#stickerset-previews)Stickerset previews\n\n```\nstickerSetCovered#6410a5d2 set:StickerSet cover:Document = StickerSetCovered;\nstickerSetMultiCovered#3407e51b set:StickerSet covers:Vector<Document> = StickerSetCovered;\nstickerSetFullCovered#40d13c0e set:StickerSet packs:Vector<StickerPack> keywords:Vector<StickerKeyword> documents:Vector<Document> = StickerSetCovered;\n```\n\nCertain parts of the API may return partial [StickerSetCovered](https://core.telegram.org/type/StickerSetCovered) constructors instead of full [document](https://core.telegram.org/constructor/document) constructors for every sticker in the set:\n\n*   [stickerSetCovered](https://core.telegram.org/constructor/stickerSetCovered) - Contains generic info about a stickerset and one preview sticker: use [messages.getStickerSet](https://core.telegram.org/method/messages.getStickerSet) to fetch all the stickers in the stickerset.\n*   [stickerSetMultiCovered](https://core.telegram.org/constructor/stickerSetMultiCovered) - Contains generic info about a stickerset and multiple preview stickers: use [messages.getStickerSet](https://core.telegram.org/method/messages.getStickerSet) to fetch all the stickers in the stickerset.\n*   [stickerSetFullCovered](https://core.telegram.org/constructor/stickerSetFullCovered) - Contains generic info about a stickerset and all stickers in the set (not just a preview): currently only used for [custom emoji stickersets](https://core.telegram.org/api/custom-emoji), to avoid a further call to [messages.getStickerSet](https://core.telegram.org/method/messages.getStickerSet).\n\nAlso, like all files, sticker [documents](https://core.telegram.org/constructor/document) have a set of previews that should be handled as described [here\u00a0\u00bb](https://core.telegram.org/api/files#image-thumbnail-types).\n\n### [](#installing-stickersets)Installing stickersets\n\n```\ninputStickerSetID#9de7a269 id:long access_hash:long = InputStickerSet;\ninputStickerSetShortName#861cc8a0 short_name:string = InputStickerSet;\ninputStickerSetAnimatedEmoji#28703c8 = InputStickerSet;\ninputStickerSetDice#e67f520e emoticon:string = InputStickerSet;\ninputStickerSetAnimatedEmojiAnimations#cde3739 = InputStickerSet;\ninputStickerSetPremiumGifts#c88b3b02 = InputStickerSet;\ninputStickerSetEmojiGenericAnimations#4c4d4ce = InputStickerSet;\ninputStickerSetEmojiDefaultStatuses#29d0f5ee = InputStickerSet;\ninputStickerSetEmojiDefaultTopicIcons#44c1f8e9 = InputStickerSet;\ninputStickerSetEmojiChannelDefaultStatuses#49748553 = InputStickerSet;\n\nmessages.stickerSetInstallResultSuccess#38641628 = messages.StickerSetInstallResult;\nmessages.stickerSetInstallResultArchive#35e410a8 sets:Vector<StickerSetCovered> = messages.StickerSetInstallResult;\n\nmessages.allStickersNotModified#e86602c3 = messages.AllStickers;\nmessages.allStickers#cdbbcebb hash:long sets:Vector<StickerSet> = messages.AllStickers;\n\nupdateNewStickerSet#688a30aa stickerset:messages.StickerSet = Update;\nupdateStickerSetsOrder#bb2d201 flags:# masks:flags.0?true emojis:flags.1?true order:Vector<long> = Update;\nupdateStickerSets#31c24808 flags:# masks:flags.0?true emojis:flags.1?true = Update;\n\n---functions---\n\nmessages.installStickerSet#c78fe460 stickerset:InputStickerSet archived:Bool = messages.StickerSetInstallResult;\nmessages.uninstallStickerSet#f96e55de stickerset:InputStickerSet = Bool;\nmessages.toggleStickerSets#b5052fea flags:# uninstall:flags.0?true archive:flags.1?true unarchive:flags.2?true stickersets:Vector<InputStickerSet> = Bool;\nmessages.reorderStickerSets#78337739 flags:# masks:flags.0?true emojis:flags.1?true order:Vector<long> = Bool;\nmessages.getAllStickers#b8a0a1a8 hash:long = messages.AllStickers;\nmessages.getMaskStickers#640f82b8 hash:long = messages.AllStickers;\nmessages.getEmojiStickers#fbfca18f hash:long = messages.AllStickers;\n```\n\nA [stickerset](#stickersets) can be installed using [messages.installStickerSet](https://core.telegram.org/method/messages.installStickerSet), `archived=false`, with possible return values:\n\n*   [messages.stickerSetInstallResultSuccess](https://core.telegram.org/constructor/messages.stickerSetInstallResultSuccess) - The stickerset was successfully installed\n*   [messages.stickerSetInstallResultArchive](https://core.telegram.org/constructor/messages.stickerSetInstallResultArchive) - The stickerset was successfully installed, displacing some older unused stickersets specified in the `sets` field by [archiving them](#archived-stickersets).\n\nUse [messages.uninstallStickerSet](https://core.telegram.org/method/messages.uninstallStickerSet) or [messages.toggleStickerSets](https://core.telegram.org/method/messages.toggleStickerSets) with the `uninstall` flag to uninstall one or more stickersets.\n\nAn [updateNewStickerSet](https://core.telegram.org/constructor/updateNewStickerSet) update will be emitted to the other logged-in sessions when installing stickersets.\n\nAn [updateStickerSets](https://core.telegram.org/constructor/updateStickerSets) update will be emitted to the other logged-in sessions when uninstalling or archiving stickersets.  \nThis update should trigger a call to the following methods:\n\n*   If `masks` is set, call [messages.getMaskStickers](https://core.telegram.org/method/messages.getMaskStickers).\n*   If `emoji` is set, call [messages.getEmojiStickers](https://core.telegram.org/method/messages.getEmojiStickers).\n*   Otherwise, call [messages.getAllStickers](https://core.telegram.org/method/messages.getAllStickers) and [messages.getArchivedStickers](https://core.telegram.org/method/messages.getArchivedStickers).\n\nUse [messages.reorderStickerSets](https://core.telegram.org/method/messages.reorderStickerSets) to reorder installed stickersets by the [stickerSet](https://core.telegram.org/constructor/stickerSet) ID: notice that normal, [mask](#mask-stickers) and [custom emoji](https://core.telegram.org/api/custom-emoji) stickersets are ordered independently, use the appropriate flags to sort the correct type of stickerset.\n\nAn [updateStickerSetsOrder](https://core.telegram.org/constructor/updateStickerSetsOrder) update will be emitted to the other logged-in sessions when reordering stickersets.  \nThis update should trigger a call to [messages.getAllStickers](https://core.telegram.org/method/messages.getAllStickers), [messages.getArchivedStickers](https://core.telegram.org/method/messages.getArchivedStickers), [messages.getEmojiStickers](https://core.telegram.org/method/messages.getEmojiStickers).\n\nUse [messages.getAllStickers](https://core.telegram.org/method/messages.getAllStickers) to fetch all installed and non-archived stickersets.  \nUse [messages.getEmojiStickers](https://core.telegram.org/method/messages.getEmojiStickers) to fetch all installed and non-archived [custom emoji](https://core.telegram.org/api/custom-emoji) stickersets.\n\n### [](#creating-stickersets)Creating stickersets\n\n```\ninputStickerSetItem#32da9e9c flags:# document:InputDocument emoji:string mask_coords:flags.0?MaskCoords keywords:flags.1?string = InputStickerSetItem;\n\nmessages.stickerSet#6e153f16 set:StickerSet packs:Vector<StickerPack> keywords:Vector<StickerKeyword> documents:Vector<Document> = messages.StickerSet;\nmessages.stickerSetNotModified#d3f924eb = messages.StickerSet;\n\nmessages.myStickers#faff629d count:int sets:Vector<StickerSetCovered> = messages.MyStickers;\n\nstickers.suggestedShortName#85fea03f short_name:string = stickers.SuggestedShortName;\n\n---functions---\n\nmessages.uploadMedia#14967978 flags:# business_connection_id:flags.0?string peer:InputPeer media:InputMedia = MessageMedia;\n\nstickers.checkShortName#284b3639 short_name:string = Bool;\nstickers.suggestShortName#4dafc503 title:string = stickers.SuggestedShortName;\n\nstickers.createStickerSet#9021ab67 flags:# masks:flags.0?true emojis:flags.5?true text_color:flags.6?true user_id:InputUser title:string short_name:string thumb:flags.2?InputDocument stickers:Vector<InputStickerSetItem> software:flags.3?string = messages.StickerSet;\n\nmessages.getMyStickers#d0b5e1fc offset_id:long limit:int = messages.MyStickers;\n\nstickers.addStickerToSet#8653febe stickerset:InputStickerSet sticker:InputStickerSetItem = messages.StickerSet;\nstickers.replaceSticker#4696459a sticker:InputDocument new_sticker:InputStickerSetItem = messages.StickerSet;\nstickers.removeStickerFromSet#f7760f51 sticker:InputDocument = messages.StickerSet;\nstickers.changeStickerPosition#ffb6d4ca sticker:InputDocument position:int = messages.StickerSet;\nstickers.setStickerSetThumb#a76a5392 flags:# stickerset:InputStickerSet thumb:flags.0?InputDocument thumb_document_id:flags.1?long = messages.StickerSet;\n```\n\nBots and users can create stickersets by using the following methods.  \nThe [@stickers](https://t.me/stickers) bot which could be previously used to edit stickers is now **deprecated**, the in-app editor (invoking the following methods) should now be used, instead.\n\nNote that unofficial bots **must** append a `\"_by_<bot_username>\"` prefix to the stickerset short name when creating stickersets. Users and bots can directly modify stickersets created using [stickers.createStickerSet](https://core.telegram.org/method/stickers.createStickerSet) and [@stickers](https://t.me/stickers): stickersets owned by the current user/bot will have the `creator` flag set.\n\nUse [messages.getMyStickers](https://core.telegram.org/method/messages.getMyStickers) to fetch the stickersets created by the current account.\n\nUse [messages.uploadMedia](https://core.telegram.org/method/messages.uploadMedia) to upload stickers and thumbnails, if you don't already have access to a previously uploaded [document](https://core.telegram.org/constructor/document).\n\nUse [stickers.checkShortName](https://core.telegram.org/method/stickers.checkShortName) to check if a given short name is available, and [stickers.suggestShortName](https://core.telegram.org/method/stickers.suggestShortName) to let the server suggest a short name, given the stickerset title.\n\nUse [stickers.createStickerSet](https://core.telegram.org/method/stickers.createStickerSet) to create normal, [mask](#mask-stickers) and [custom emoji](https://core.telegram.org/api/custom-emoji) stickersets, _also_ when [importing stickers using the stickers SDK](https://core.telegram.org/import-stickers).\n\nUse [stickers.addStickerToSet](https://core.telegram.org/method/stickers.addStickerToSet) to add stickers to the stickerset.  \nUse [stickers.replaceSticker](https://core.telegram.org/method/stickers.replaceSticker) to replace a sticker in a stickerset (no need to pass the actual stickerset ID here).  \nUse [stickers.setStickerSetThumb](https://core.telegram.org/method/stickers.addStickerToSet) to edit the stickerset thumbnail after creation.  \nUse [stickers.removeStickerFromSet](https://core.telegram.org/method/stickers.removeStickerFromSet) to remove stickers from a stickerset, and [stickers.changeStickerPosition](https://core.telegram.org/method/stickers.changeStickerPosition) to move stickers in a stickerset (simply providing the sticker document is enough).\n\n### [](#searching-stickersets)Searching stickersets\n\n```\nmessages.foundStickerSetsNotModified#d54b65d = messages.FoundStickerSets;\nmessages.foundStickerSets#8af09dd2 hash:long sets:Vector<StickerSetCovered> = messages.FoundStickerSets;\n\n---functions---\n\nmessages.searchStickerSets#35705b8a flags:# exclude_featured:flags.0?true q:string hash:long = messages.FoundStickerSets;\n\nmessages.searchEmojiStickerSets#92b4494c flags:# exclude_featured:flags.0?true q:string hash:long = messages.FoundStickerSets;\n```\n\nYou can use [messages.searchStickerSets](https://core.telegram.org/method/messages.searchStickerSets) and [messages.searchEmojiStickerSets](https://core.telegram.org/method/messages.searchEmojiStickerSets) to search globally available normal stickersets and [custom emoji stickersets\u00a0\u00bb](https://core.telegram.org/api/custom-emoji) by name: note that this method returns a set of [stickerset previews\u00a0\u00bb](#stickerset-previews).\n\n### [](#searching-stickers)Searching stickers\n\n```\nmessages.foundStickersNotModified#6010c534 flags:# next_offset:flags.0?int = messages.FoundStickers;\nmessages.foundStickers#82c9e290 flags:# next_offset:flags.0?int hash:long stickers:Vector<Document> = messages.FoundStickers;\n\n---functions---\n\nmessages.searchStickers#29b1c66a flags:# emojis:flags.0?true q:string emoticon:string lang_code:Vector<string> offset:int limit:int hash:long = messages.FoundStickers;\n```\n\nYou can use [messages.searchStickers](https://core.telegram.org/method/messages.searchStickers) to search globally available normal and [custom emoji stickers \u00bb](https://core.telegram.org/api/custom-emoji) using keywords (`q`) in multiple languages (which can be provided in `lang_code`) and/or a list of space-separated emojis (`emoticon`).\n\nThanks to a server-side custom AI model, this method supports complex searches with multiple keywords.\n\n### [](#featured-stickersets)Featured stickersets\n\n```\nmessages.featuredStickersNotModified#c6dc0c66 count:int = messages.FeaturedStickers;\nmessages.featuredStickers#be382906 flags:# premium:flags.0?true hash:long count:int sets:Vector<StickerSetCovered> unread:Vector<long> = messages.FeaturedStickers;\n\nupdateReadFeaturedStickers#571d2742 = Update;\nupdateReadFeaturedEmojiStickers#fb4c496c = Update;\n\n---functions---\n\nmessages.getFeaturedStickers#64780b14 hash:long = messages.FeaturedStickers;\nmessages.readFeaturedStickers#5b118126 id:Vector<long> = Bool;\n\nmessages.getOldFeaturedStickers#7ed094a1 offset:int limit:int hash:long = messages.FeaturedStickers;\n\nmessages.getFeaturedEmojiStickers#ecf6736 hash:long = messages.FeaturedStickers;\n```\n\nTelegram showcases a set of featured stickersets: they can be fetched using [messages.getFeaturedStickers](https://core.telegram.org/method/messages.getFeaturedStickers) or [messages.getFeaturedEmojiStickers](https://core.telegram.org/method/messages.getFeaturedEmojiStickers), for [custom emojis](https://core.telegram.org/api/custom-emoji).\n\nClients should preload featured stickers on startup according to the value of the `preload_featured_stickers` [configuration parameter](https://core.telegram.org/constructor/config).\n\nThe method also returns a set of unread [stickerSet](https://core.telegram.org/constructor/stickerSet) IDs in the `unread` field: use [messages.readFeaturedStickers](https://core.telegram.org/method/messages.readFeaturedStickers) to mark them as read: note that this will only affect the `unread` field, all stickersets will still be returned, unless you also [generate a `hash`](https://core.telegram.org/api/offsets#hash-generation).  \nThis method will also emit an [updateReadFeaturedStickers](https://core.telegram.org/constructor/updateReadFeaturedStickers) or [updateReadFeaturedEmojiStickers](https://core.telegram.org/constructor/updateReadFeaturedEmojiStickers) update on all other logged-in sessions.\n\n[messages.getOldFeaturedStickers](https://core.telegram.org/method/messages.getOldFeaturedStickers) can be used to fetch an extended list with even more featured stickersets, that were previously featured in the short list returned by [messages.getFeaturedStickers](https://core.telegram.org/method/messages.getFeaturedStickers).\n\n### [](#favorite-stickersets)Favorite stickersets\n\n```\nmessages.favedStickersNotModified#9e8fa6d3 = messages.FavedStickers;\nmessages.favedStickers#2cb51097 hash:long packs:Vector<StickerPack> stickers:Vector<Document> = messages.FavedStickers;\n\nupdateFavedStickers#e511996d = Update;\n\n---functions---\n\nmessages.faveSticker#b9ffc55b id:InputDocument unfave:Bool = Bool;\nmessages.getFavedStickers#4f1aaa9 hash:long = messages.FavedStickers;\n```\n\nA stickerset can be faved or unfaved using [messages.faveSticker](https://core.telegram.org/method/messages.faveSticker).\n\nFavorited stickers can be fetched using [messages.getFavedStickers](https://core.telegram.org/method/messages.getFavedStickers): note that this method returns a set of [stickerset previews\u00a0\u00bb](#stickerset-previews).\n\nUsers can fave only a certain number of stickersets, as specified by the following [configuration](https://core.telegram.org/api/config#client-configuration) parameters:\n\n*   Premium users can fave a total of [`stickers_faved_limit_premium` stickersets](https://core.telegram.org/api/config#stickers-faved-limit-premium).\n*   Non-Premium users can fave a total of [`stickers_faved_limit_default` stickersets](https://core.telegram.org/api/config#stickers-faved-limit-default).\n\nAn [updateFavedStickers](https://core.telegram.org/constructor/updateFavedStickers) update will be emitted to the other logged-in sessions when faving or unfaving stickersets.  \nThis update should trigger a call to [messages.getFavedStickers](https://core.telegram.org/method/messages.getFavedStickers).\n\n### [](#archived-stickersets)Archived stickersets\n\n```\nmessages.archivedStickers#4fcba9c8 count:int sets:Vector<StickerSetCovered> = messages.ArchivedStickers;\n\nupdateStickerSets#31c24808 flags:# masks:flags.0?true emojis:flags.1?true = Update;\n\n---functions---\n\nmessages.installStickerSet#c78fe460 stickerset:InputStickerSet archived:Bool = messages.StickerSetInstallResult;\nmessages.toggleStickerSets#b5052fea flags:# uninstall:flags.0?true archive:flags.1?true unarchive:flags.2?true stickersets:Vector<InputStickerSet> = Bool;\n\nmessages.getArchivedStickers#57f17692 flags:# masks:flags.0?true emojis:flags.1?true offset_id:long limit:int = messages.ArchivedStickers;\n```\n\nOne or more stickersets can be archived (or unarchived) using [messages.installStickerSet](https://core.telegram.org/method/messages.installStickerSet) with `archived=true|false`, or [messages.toggleStickerSets](https://core.telegram.org/method/messages.toggleStickerSets) with either the `archive` or `unarchive` flag.\n\nAn unused stickerset may also be automatically archived when [installing new stickersets](#installing-stickersets).\n\nArchived stickers are not returned by [messages.getAllStickers](https://core.telegram.org/method/messages.getAllStickers) and can only be fetched using [messages.getArchivedStickers](https://core.telegram.org/method/messages.getArchivedStickers): note that this method returns a set of [stickerset previews\u00a0\u00bb](#stickerset-previews).\n\nAn [updateStickerSets](https://core.telegram.org/constructor/updateStickerSets) update will be emitted to the other logged-in sessions when archiving or unarchiving stickersets.  \nThis update should trigger a call to [messages.getArchivedStickers](https://core.telegram.org/method/messages.getArchivedStickers).\n\n### [](#recent-stickers)Recent stickers\n\n```\nmessages.recentStickersNotModified#b17f890 = messages.RecentStickers;\nmessages.recentStickers#88d37c56 hash:long packs:Vector<StickerPack> stickers:Vector<Document> dates:Vector<int> = messages.RecentStickers;\n\nupdateRecentStickers#9a422c20 = Update;\n\n---functions---\n\nmessages.saveRecentSticker#392718f8 flags:# attached:flags.0?true id:InputDocument unsave:Bool = Bool;\nmessages.getRecentStickers#9da9403b flags:# attached:flags.0?true hash:long = messages.RecentStickers;\nmessages.clearRecentStickers#8999602d flags:# attached:flags.0?true = Bool;\n```\n\nAfter using a sticker in a message, clients should invoke [messages.saveRecentSticker](https://core.telegram.org/method/messages.saveRecentSticker) (normal and [mask](#mask-stickers) stickers only, mask stickers should set the `attached` flag).\n\nA sticker can be then removed from the recent stickers list using [messages.saveRecentSticker](https://core.telegram.org/method/messages.saveRecentSticker) with `unsave=true`; the entire list can be cleared using [messages.clearRecentStickers](https://core.telegram.org/method/messages.clearRecentStickers).\n\nUse [messages.getRecentStickers](https://core.telegram.org/method/messages.getRecentStickers) to fetch the recent stickers list.\n\nUsers can add only a certain number of recent stickers, according to the value of the `stickers_recent_limit` [configuration parameter](https://core.telegram.org/constructor/config).\n\nAn [updateRecentStickers](https://core.telegram.org/constructor/updateRecentStickers) update will be emitted to the other logged-in sessions when modifying the recent stickerset list.  \nThis update should trigger a call to [messages.getRecentStickers](https://core.telegram.org/method/messages.getRecentStickers).\n\n### [](#recent-stickersets)Recent stickersets\n\n```\nupdateMoveStickerSetToTop#86fccf85 flags:# masks:flags.0?true emojis:flags.1?true stickerset:long = Update;\n\n---functions---\n\nmessages.sendMessage#983f9745 flags:# no_webpage:flags.1?true silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\nmessages.sendMedia#7852834e flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\nmessages.sendMultiMedia#37b74355 flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo multi_media:Vector<InputSingleMedia> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\n```\n\nThe `update_stickersets_order` flag should be set when manually choosing and using stickers, [masks](#mask-stickers) and [custom emojis](https://core.telegram.org/api/custom-emoji) from a specific stickerset in the stickerset selection bar (not through suggested or recent stickersets UI views).  \nNote that for [custom emojis](https://core.telegram.org/api/custom-emoji), the flag should only be set when manually choosing custom emojis from a single custom emoji stickerset (not multiple custom emoji stickersets).\n\nSetting this flag will trigger an [updateMoveStickerSetToTop](https://core.telegram.org/constructor/updateMoveStickerSetToTop) update (instead of the usual [updateStickerSetsOrder](https://core.telegram.org/constructor/updateStickerSetsOrder)/[updateStickerSets](https://core.telegram.org/constructor/updateStickerSetsOrder) updates), indicating that the installed stickerset list was reordered and the specified stickerset was moved to the top.\n\nNote that the API also offers a separate list of recent _stickers_ (not stickersets), see [here\u00a0\u00bb](#recent-stickers) for more info.\n\n### [](#emoji-categories)Emoji categories\n\nThe sticker selection UI should offer a list of categories to quickly filter results by a (list of) emojis, or by some other criteria, see [here\u00a0\u00bb](https://core.telegram.org/api/emoji-categories) for more info.\n\n### [](#sticker-suggestions)Sticker suggestions\n\n```\nmessages.stickersNotModified#f1749a22 = messages.Stickers;\nmessages.stickers#30a6ec7e hash:long stickers:Vector<Document> = messages.Stickers;\n\nemojiListNotModified#481eadfa = EmojiList;\nemojiList#7a1e11d1 hash:long document_id:Vector<long> = EmojiList;\n\n---functions---\n\nmessages.getStickers#d5a5d3a1 emoticon:string hash:long = messages.Stickers;\nmessages.searchCustomEmoji#2c11c0d7 emoticon:string hash:long = EmojiList;\n```\n\nClients should show a popup with a list of suggested stickers and [custom emojis](https://core.telegram.org/api/custom-emoji) when the user enters an emoji in the text bar.\n\n**If** the [`stickers_emoji_suggest_only_api` app configuration parameter](https://core.telegram.org/api/config#stickers-emoji-suggest-only-api) is set to true, clients must invoke [messages.getStickers](https://core.telegram.org/method/messages.getStickers)/[messages.searchCustomEmoji](https://core.telegram.org/method/messages.searchCustomEmoji) to fetch a list of suggested stickers/[custom emojis](https://core.telegram.org/api/custom-emoji) for the emoji.  \nThe [stickers\\_emoji\\_cache\\_time appConfig parameter](https://core.telegram.org/api/config#stickers-emoji-cache-time) specifies the validity period of the local cache of [messages.getStickers](https://core.telegram.org/method/messages.getStickers)/[messages.searchCustomEmoji](https://core.telegram.org/method/messages.searchCustomEmoji), also relevant when generating the pagination hash when invoking the method.\n\n**Otherwise**, the following local logic should be used.\n\n*   Construct two lists of recently used stickers, matching the emoji:\n    *   List **a**) Contains all non-Premium stickers.\n    *   List **b**) Contains all Premium stickers.\n*   The final suggested sticker list **c** is composed as follows:\n    *   If the user doesn't have a [Premium subscription](https://core.telegram.org/api/premium): all stickers from **a**, followed by `stickers_premium_by_emoji_num` stickers from **b**.\n    *   If the user has a [Premium subscription](https://core.telegram.org/api/premium): `stickers_normal_by_emoji_per_premium_num` stickers from **a**, followed by 1 sticker from **b**, and so on until both lists are empty.\n\n### [](#special-stickers)Special stickers\n\n```\nmessages.stickersNotModified#f1749a22 = messages.Stickers;\nmessages.stickers#30a6ec7e hash:long stickers:Vector<Document> = messages.Stickers;\n\n---functions---\n\nmessages.getStickers#d5a5d3a1 emoticon:string hash:long = messages.Stickers;\n```\n\nSome places in the UI require the usage of a server-specified list of stickers, independent from the installed stickersets, that may be fetched from the server using [messages.getStickers](https://core.telegram.org/method/messages.getStickers) and a specific value of `emoticon`.\n\n#### [](#premium-sticker-examples)Premium sticker examples\n\nSome places in the UI might require showing a list of Premium stickers, as an example of stickers that may be used if the user buys a [Premium subscription](https://core.telegram.org/api/premium).\n\nTo fetch this special list, invoke [messages.getStickers](https://core.telegram.org/method/messages.getStickers) with `emoticon=![\u2b50\ufe0f](https://telegram.org/img/emoji/40/E2AD90.png)![\u2b50\ufe0f](https://telegram.org/img/emoji/40/E2AD90.png)`\n\n#### [](#greeting-stickers)Greeting stickers\n\nWhen the user opens a private chat with a user they don't have a history with, the UI should display a randomly chosen greeting sticker+invitation to send a message.\n\nTo fetch this special list of greeting stickers, invoke [messages.getStickers](https://core.telegram.org/method/messages.getStickers) with `emoticon=![\ud83d\udc4b](https://telegram.org/img/emoji/40/F09F918B.png)![\u2b50\ufe0f](https://telegram.org/img/emoji/40/E2AD90.png)`.\n\nNote that if a custom [Telegram Business introduction\u00a0\u00bb](https://core.telegram.org/api/business#business-introduction) is enabled, the message+sticker specified in [userFull](https://core.telegram.org/constructor/userFull).`intro` must be used, instead.\n\n### [](#attached-stickers)Attached stickers\n\n```\ninputMediaUploadedPhoto#1e287d04 flags:# spoiler:flags.2?true file:InputFile stickers:flags.0?Vector<InputDocument> ttl_seconds:flags.1?int = InputMedia;\n\ninputMediaUploadedDocument#5b38c6c1 flags:# nosound_video:flags.3?true force_file:flags.4?true spoiler:flags.5?true file:InputFile thumb:flags.2?InputFile mime_type:string attributes:Vector<DocumentAttribute> stickers:flags.0?Vector<InputDocument> ttl_seconds:flags.1?int = InputMedia;\n\nphoto#fb197a65 flags:# has_stickers:flags.0?true id:long access_hash:long file_reference:bytes date:int sizes:Vector<PhotoSize> video_sizes:flags.1?Vector<VideoSize> dc_id:int = Photo;\n\ndocument#8fd4c4d8 flags:# id:long access_hash:long file_reference:bytes date:int mime_type:string size:long thumbs:flags.0?Vector<PhotoSize> video_thumbs:flags.1?Vector<VideoSize> dc_id:int attributes:Vector<DocumentAttribute> = Document;\ndocumentAttributeHasStickers#9801d2f7 = DocumentAttribute;\n\ninputStickeredMediaPhoto#4a992157 id:InputPhoto = InputStickeredMedia;\ninputStickeredMediaDocument#438865b id:InputDocument = InputStickeredMedia;\n\ninputStickerSetItem#32da9e9c flags:# document:InputDocument emoji:string mask_coords:flags.0?MaskCoords keywords:flags.1?string = InputStickerSetItem;\n\nstickerSetCovered#6410a5d2 set:StickerSet cover:Document = StickerSetCovered;\nstickerSetMultiCovered#3407e51b set:StickerSet covers:Vector<Document> = StickerSetCovered;\n\n---functions---\n\nmessages.sendMedia#7852834e flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\n\nmessages.getAttachedStickers#cc5b67cc media:InputStickeredMedia = Vector<StickerSetCovered>;\n```\n\nStickers of all kinds can be attached to photos and videos.  \nFirst, overlay the sticker on top of the media file locally (properly handling eventual default [mask coordinates](#mask-stickers)), and [upload](https://core.telegram.org/api/files) the modified media file.  \nThen, when sending the media file using [messages.sendMedia](https://core.telegram.org/method/messages.sendMedia), indicate the stickers that were overlaid in the `stickers` field of [inputMediaUploadedPhoto](https://core.telegram.org/constructor/inputMediaUploadedPhoto) or [inputMediaUploadedDocument](https://core.telegram.org/constructor/inputMediaUploadedPhoto).\n\nSent stickered [photos](https://core.telegram.org/constructor/photo) will have the `has_stickers` flag set.  \nSent stickered [video documents](https://core.telegram.org/constructor/document) will have a [documentAttributeHasStickers](https://core.telegram.org/constructor/documentAttributeHasStickers) attribute.\n\nWhen receiving such a media file, clients should call [messages.getAttachedStickers](https://core.telegram.org/method/messages.getAttachedStickers), passing the media: the method will return a set of [stickerset previews\u00a0\u00bb](#stickerset-previews), with info about the stickersets (not stickers) used in the media.\n\n#### [](#mask-stickers)Mask stickers\n\nMask stickers are a special kind of [static](#static-stickers) stickers that are meant to be overlaid on top of photos and attached to media, as specified [here\u00a0\u00bb](#attached-stickers).\n\n```\nmaskCoords#aed6dbb2 n:int x:double y:double zoom:double = MaskCoords;\n\ndocumentAttributeSticker#6319d612 flags:# mask:flags.1?true alt:string stickerset:InputStickerSet mask_coords:flags.0?MaskCoords = DocumentAttribute;\n\ninputStickerSetItem#32da9e9c flags:# document:InputDocument emoji:string mask_coords:flags.0?MaskCoords keywords:flags.1?string = InputStickerSetItem;\n\n---functions---\n\nmessages.getMaskStickers#640f82b8 hash:long = messages.AllStickers;\n```\n\nMask stickers can optionally have associated coordinates, contained in the [maskCoords](https://core.telegram.org/constructor/maskCoords) constructor.\n\nThe `n` position indicates where the mask should be placed:\n\n*   0 => Relative to the forehead\n*   1 => Relative to the eyes\n*   2 => Relative to the mouth\n*   3 => Relative to the chin\n\nThe `x`, `y` and `zoom` parameters further refine the position relative to the chosen facial feature.\n\nNote that these coordinates are only used to provide a default position when [attaching stickers to media](#attached-stickers), by locally running facial recognition software and placing the mask sticker at the appropriate coordinates relative to the chosen facial feature.  \nThe final sticker position can be modified by the user before generating a new photo/video with the sticker baked-in.  \nThe final coordinates will not be sent along with the attached media, as they are only used as a suggested default position when placing the sticker.\n\nThe default coordinates are chosen by the stickerset creator when [uploading the sticker](#creating-stickersets).",
    "url": "https://core.telegram.org/api/stickers"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/passport",
      "title": "Telegram passport",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Telegram passport"
        },
        {
          "property": "og:image",
          "content": "127528a6974e1bc1ac"
        },
        {
          "property": "og:description",
          "content": "Client-side passport flow"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:08 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "10034",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Telegram passport\n\n**Telegram Passport** is a unified authorization method for services that require personal identification. Users can upload their documents once, then instantly share their data with services that require real-world ID (finance, ICOs, etc.). Telegram doesn't have access to the users' personal information thanks to end-to-end encryption.\n\nThis page describes the request flow that client apps must used to send the requested data to the service.\n\n### [](#overview)Overview\n\nFrom the perspective of a service that requires real-world ID, the process looks like this:\n\n*   A user presses \u201cLog in with Telegram\u201d on your website or in your app.\n*   You request the data you need.\n*   The user accepts your privacy policy and agrees to share their data.\n*   The user's Telegram app downloads and decrypts the data you requested from the end-to-end encrypted storage on Telegram.\n*   If some of the data you requested is missing, the user can add it to their Telegram Passport at this point.\n*   The user's app encrypts the data with your public key and sends it to you.\n*   You decrypt the data, check it for errors and re-request any missing or invalid information.\n*   You sign the user up for your service. Tada!\n\nSee [As a bot](#as-a-bot) to see how to request passport data using a bot, through the MTProto API. Look at the [Passport Manual](https://core.telegram.org/passport) to see how to request passport data using a bot, through the simplified bot API.\n\nFrom the perspective of a user, the process looks something like this:\n\n*   Your app [receives an event/intent](#receiving-requests) from one of the [SDKs](https://core.telegram.org/passport#sdk), or from a custom source.\n*   The user accepts your privacy policy and agrees to share their data.\n*   The user's Telegram app [downloads the data you requested](https://core.telegram.org/passport/encryption#fetching-and-deleting-stored-passport-data) from the end-to-end encrypted storage on Telegram.\n*   If some of the data you requested is missing, the user can [add it to their Telegram Passport](https://core.telegram.org/passport/encryption#encryption) at this point.\n*   The user's app encrypts the data with your public key and sends it to the service.\n*   You sign the user up for your service. Tada!\n\nSee [As a user](#as-a-user) to see how user client apps should send passport data to a service, through the MTProto API.\n\n### [](#as-a-bot)As a bot\n\nA simplified version of this process can be used using the bot API, for more info see the [Passport Manual](https://core.telegram.org/passport).\n\nUsing the MTProto API, the process is pretty much the same, up until the actual API calls.\n\n> Note that all binary fields are in raw binary format, unlike in the bot API where they are base64-encoded\n\n#### [](#setting-up-telegram-passport)Setting Up Telegram Passport\n\n[As per the bot API](https://core.telegram.org/passport#setting-up-telegram-passport).\n\n#### [](#requesting-information)Requesting Information\n\n[As per the bot API](https://core.telegram.org/passport#requesting-information).\n\n#### [](#receiving-information)Receiving information\n\nSchema:\n\n```\nsecureData#8aeabec3 data:bytes data_hash:bytes secret:bytes = SecureData;\n\nsecurePlainPhone#7d6099dd phone:string = SecurePlainData;\nsecurePlainEmail#21ec5a5f email:string = SecurePlainData;\n\nsecureFile#7d09c27e id:long access_hash:long size:long dc_id:int date:int file_hash:bytes secret:bytes = SecureFile;\n\nsecureValueTypePersonalDetails#9d2a81e3 = SecureValueType;\nsecureValueTypePassport#3dac6a00 = SecureValueType;\nsecureValueTypeDriverLicense#6e425c4 = SecureValueType;\nsecureValueTypeIdentityCard#a0d0744b = SecureValueType;\nsecureValueTypeInternalPassport#99a48f23 = SecureValueType;\nsecureValueTypeAddress#cbe31e26 = SecureValueType;\nsecureValueTypeUtilityBill#fc36954e = SecureValueType;\nsecureValueTypeBankStatement#89137c0d = SecureValueType;\nsecureValueTypeRentalAgreement#8b883488 = SecureValueType;\nsecureValueTypePassportRegistration#99e3806a = SecureValueType;\nsecureValueTypeTemporaryRegistration#ea02ec33 = SecureValueType;\nsecureValueTypePhone#b320aadb = SecureValueType;\nsecureValueTypeEmail#8e3ca7ee = SecureValueType;\n\nsecureValue#187fa0ca flags:# type:SecureValueType data:flags.0?SecureData front_side:flags.1?SecureFile reverse_side:flags.2?SecureFile selfie:flags.3?SecureFile translation:flags.6?Vector<SecureFile> files:flags.4?Vector<SecureFile> plain_data:flags.5?SecurePlainData hash:bytes = SecureValue;\n\nsecureCredentialsEncrypted#33f0ea47 data:bytes hash:bytes secret:bytes = SecureCredentialsEncrypted;\n\nmessageActionSecureValuesSentMe#1b287353 values:Vector<SecureValue> credentials:SecureCredentialsEncrypted = MessageAction; \nmessageService#2b085862 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true legacy:flags.19?true id:int from_id:flags.8?Peer peer_id:Peer reply_to:flags.3?MessageReplyHeader date:int action:MessageAction ttl_period:flags.25?int = Message;\n\nupdateNewMessage#1f2b0afd message:Message pts:int pts_count:int = Update;\n```\n\nWhen the user confirms your request by pressing the \"Authorize\" button, the MTProto API sends an [updateNewMessage](https://core.telegram.org/constructor/updateNewMessage) from the user, with a [messageService](https://core.telegram.org/constructor/messageService) constructor, containing a [messageActionSecureValuesSentMe](https://core.telegram.org/constructor/messageActionSecureValuesSentMe) constructor that contains the encrypted Telegram Passport data.\n\n#### [](#decrypting-data)Decrypting data\n\n```\nsecureCredentialsEncrypted#33f0ea47 data:bytes hash:bytes secret:bytes = SecureCredentialsEncrypted;\n\nmessageActionSecureValuesSentMe#1b287353 values:Vector<SecureValue> credentials:SecureCredentialsEncrypted = MessageAction; \n```\n\nTo decrypt the received data, first, decrypt the credentials contained in [secureCredentialsEncrypted](https://core.telegram.org/constructor/secureCredentialsEncrypted).\n\n1.  Decrypt the credentials secret ( _secret_ field in [secureCredentialsEncrypted](https://core.telegram.org/constructor/secureCredentialsEncrypted)) using your **private** key (set OAEP padding option, e.g. `OPENSSL_PKCS1_OAEP_PADDING` in PHP)\n    \n2.  Use this secret and the credentials hash ( _hash_ field in [secureCredentialsEncrypted](https://core.telegram.org/constructor/secureCredentialsEncrypted)) to calculate _credentials\\_key_ and _credentials\\_iv_ as described below:\n    \n    ```\n     credentials_secret_hash = SHA512( credentials_secret + credentials_hash )\n     credentials_key = slice( credentials_secret_hash, 0, 32 )\n     credentials_iv = slice( credentials_secret_hash, 32, 16 )\n    ```\n    \n3.  Decrypt the credentials data ( _data_ field in [secureCredentialsEncrypted](https://core.telegram.org/constructor/secureCredentialsEncrypted)) by AES256-CBC using these _credentials\\_key_ and _credentials\\_iv_. **IMPORTANT:** At this step, make sure that the credentials hash is equal to `SHA256( credentials_data )`\n    \n4.  Credentials data is padded with 32 to 255 random padding bytes to make its length divisible by 16 bytes. The first byte contains the length of this padding (including this byte). Remove the padding to get the data.\n    \n\n> Note that all hashes are raw binary data, not hexits\n\n#### [](#credentials)Credentials\n\nThe credentials are a JSON-serialized object, structured exactly as in the [bot API\u00a0\u00bb](https://core.telegram.org/passport#credentials). Since decryption credentials are E2E encrypted, apps have to store the decryption credentials as JSON and not TL payloads.\n\nThe credentials are used as described in the [Passport Manual](https://core.telegram.org/passport#credentials) to decrypt the files attached to the [secureValue](https://core.telegram.org/constructor/secureValue). In this case, the container for the E2E encrypted data is in TL, while the encrypted data itself is in JSON.\n\n##### [](#securevalue)[secureValue](https://core.telegram.org/constructor/secureValue)\n\n```\nsecureValue#187fa0ca flags:# type:SecureValueType data:flags.0?SecureData front_side:flags.1?SecureFile reverse_side:flags.2?SecureFile selfie:flags.3?SecureFile translation:flags.6?Vector<SecureFile> files:flags.4?Vector<SecureFile> plain_data:flags.5?SecurePlainData hash:bytes = SecureValue;\n\nmessageActionSecureValuesSentMe#1b287353 values:Vector<SecureValue> credentials:SecureCredentialsEncrypted = MessageAction; \n```\n\nThe schema for the [secureValue](https://core.telegram.org/constructor/inputSecureValue) constructor defines the constructor that can be found in each field.\n\n| Name | Type | Description |\n| --- | --- | --- |\n| **type** | [SecureValueType](https://core.telegram.org/type/SecureValueType) | Secure [passport](https://core.telegram.org/passport) value type |\n| **data** | [flags](https://core.telegram.org/mtproto/TL-combinators#conditional-fields).0?[SecureData](https://core.telegram.org/type/SecureData) | Encrypted [Telegram Passport](https://core.telegram.org/passport) element data |\n| **front\\_side** | [flags](https://core.telegram.org/mtproto/TL-combinators#conditional-fields).1?[SecureFile](https://core.telegram.org/type/SecureFile) | Encrypted [passport](https://core.telegram.org/passport) file with the front side of the document |\n| **reverse\\_side** | [flags](https://core.telegram.org/mtproto/TL-combinators#conditional-fields).2?[SecureFile](https://core.telegram.org/type/SecureFile) | Encrypted [passport](https://core.telegram.org/passport) file with the reverse side of the document |\n| **selfie** | [flags](https://core.telegram.org/mtproto/TL-combinators#conditional-fields).3?[SecureFile](https://core.telegram.org/type/SecureFile) | Encrypted [passport](https://core.telegram.org/passport) file with a selfie of the user holding the document |\n| **translation** | [flags](https://core.telegram.org/mtproto/TL-combinators#conditional-fields).6?[Vector](https://core.telegram.org/type/Vector%20t)<[SecureFile](https://core.telegram.org/type/SecureFile)\\> | Array of encrypted [passport](https://core.telegram.org/passport) files with translated versions of the provided documents |\n| **files** | [flags](https://core.telegram.org/mtproto/TL-combinators#conditional-fields).4?[Vector](https://core.telegram.org/type/Vector%20t)<[SecureFile](https://core.telegram.org/type/SecureFile)\\> | Array of encrypted [passport](https://core.telegram.org/passport) files with photos the of the documents |\n| **plain\\_data** | [flags](https://core.telegram.org/mtproto/TL-combinators#conditional-fields).5?[SecurePlainData](https://core.telegram.org/type/SecurePlainData) | Plaintext verified [passport](https://core.telegram.org/passport) data |\n| **hash** | [bytes](https://core.telegram.org/type/bytes) | Data hash |\n\nHere's a list of possible [SecureValueTypes](https://core.telegram.org/type/SecureValueType), and the parameters that can be set/requested when using each type.\n\n| Type | Allowed fields |\n| --- | --- |\n| [secureValueTypeEmail](https://core.telegram.org/constructor/secureValueTypeEmail) | `plain_data` |\n| [secureValueTypePhone](https://core.telegram.org/constructor/secureValueTypeEmail) | `plain_data` |\n| [secureValueTypePersonalDetails](https://core.telegram.org/constructor/secureValueTypePersonalDetails) | `data` |\n| [secureValueTypePassport](https://core.telegram.org/constructor/secureValueTypePassport) | `data`, `front_side`, `selfie`, `translation` |\n| [secureValueTypeDriverLicense](https://core.telegram.org/constructor/secureValueTypeDriverLicense) | `data`, `front_side`, `reverse_side`, `selfie`, `translation` |\n| [secureValueTypeIdentityCard](https://core.telegram.org/constructor/secureValueTypeIdentityCard) | `data`, `front_side`, `reverse_side`, `selfie`, `translation` |\n| [secureValueTypeInternalPassport](https://core.telegram.org/constructor/secureValueTypeInternalPassport) | `data`, `front_side`, `selfie`, `translation` |\n| [secureValueTypeAddress](https://core.telegram.org/constructor/secureValueTypeAddress) | `data` |\n| [secureValueTypeUtilityBill](https://core.telegram.org/constructor/secureValueTypeUtilityBill) | `files`, `translation` |\n| [secureValueTypeBankStatement](https://core.telegram.org/constructor/secureValueTypeBankStatement) | `files`, `translation` |\n| [secureValueTypeRentalAgreement](https://core.telegram.org/constructor/secureValueTypeRentalAgreement) | `files`, `translation` |\n| [secureValueTypePassportRegistration](https://core.telegram.org/constructor/secureValueTypePassportRegistration) | `files`, `translation` |\n| [secureValueTypeTemporaryRegistration](https://core.telegram.org/constructor/secureValueTypeTemporaryRegistration) | `files`, `translation` |\n\n##### [](#securedata)[SecureData](https://core.telegram.org/type/SecureData)\n\n```\nsecureData#8aeabec3 data:bytes data_hash:bytes secret:bytes = SecureData;\n```\n\nData is an encrypted and padded JSON-serialized object of one of the specified JSON types, depending on the chosen [type](https://core.telegram.org/type/SecureValueType).\n\n| Chosen type | JSON object |\n| --- | --- |\n| [secureValueTypePersonalDetails](https://core.telegram.org/constructor/secureValueTypePersonalDetails) | [PersonalDetails](https://core.telegram.org/passport#personaldetails) |\n| [secureValueTypePassport](https://core.telegram.org/constructor/secureValueTypePassport) | [IdDocumentData](https://core.telegram.org/passport#iddocumentdata) |\n| [secureValueTypeDriverLicense](https://core.telegram.org/constructor/secureValueTypeDriverLicense) | [IdDocumentData](https://core.telegram.org/passport#iddocumentdata) |\n| [secureValueTypeIdentityCard](https://core.telegram.org/constructor/secureValueTypeIdentityCard) | [IdDocumentData](https://core.telegram.org/passport#iddocumentdata) |\n| [secureValueTypeInternalPassport](https://core.telegram.org/constructor/secureValueTypeInternalPassport) | [IdDocumentData](https://core.telegram.org/passport#iddocumentdata) |\n| [secureValueTypeAddress](https://core.telegram.org/constructor/secureValueTypeAddress) | [ResidentialAddress](https://core.telegram.org/passport#residentialaddress) |\n\n[DataCredentials](https://core.telegram.org/passport#datacredentials) extracted [from the credentials](#credentials) can then be used to decrypt encrypted data from the _data_ field in [secureData](https://core.telegram.org/constructor/secureData). For more info on how to decrypt the _data_ field, see the [passport manual](https://core.telegram.org/passport#datacredentials).\n\n##### [](#securefile)[SecureFile](https://core.telegram.org/type/SecureFile)\n\n```\nsecureFile#7d09c27e id:long access_hash:long size:long dc_id:int date:int file_hash:bytes secret:bytes = SecureFile;    \n\ninputSecureFileLocation#cbc7ee28 id:long access_hash:long = InputFileLocation;\n\n---functions---\n\nupload.getFile#be5335be flags:# precise:flags.0?true cdn_supported:flags.1?true location:InputFileLocation offset:long limit:int = upload.File;\n```\n\nFiles (JPG format when decrypted, max. 10 MB) are downloaded chunk by chunk as described in [files\u00a0\u00bb](https://core.telegram.org/api/files), except that instead of generating an [inputFileLocation](https://core.telegram.org/constructor/inputFile), an [inputFileLocation](https://core.telegram.org/constructor/inputFileLocation) should be generated, instead.\n\n*   The `id` field is the `id` of the [secureFile](https://core.telegram.org/constructor/secureFile)\n*   The `access_hash` field is the `access_hash` of the [secureFile](https://core.telegram.org/constructor/secureFile)\n\n[FileCredentials](https://core.telegram.org/passport#filecredentials) extracted [from the credentials](#credentials) can then be used to decrypt downloaded encrypted data. For more info on how to decrypt passport files, see the [passport manual](https://core.telegram.org/passport#filecredentials).\n\n##### [](#secureplaindata)[SecurePlainData](https://core.telegram.org/type/SecurePlainData)\n\n```\nsecurePlainPhone#7d6099dd phone:string = SecurePlainData;\nsecurePlainEmail#21ec5a5f email:string = SecurePlainData;\n```\n\nThe email/phone is passed in plaintext using the respective [SecurePlainData](https://core.telegram.org/type/SecurePlainData) constructor. Emails and phone numbers sent using telegram passport are _already verified_ as described in the [passport manual](https://core.telegram.org/passport/encryption#secureplaindata).\n\n#### [](#fixing-errors)Fixing errors\n\n```\nsecureValueErrorData#e8a40bd9 type:SecureValueType data_hash:bytes field:string text:string = SecureValueError;\nsecureValueErrorFrontSide#be3dfa type:SecureValueType file_hash:bytes text:string = SecureValueError;\nsecureValueErrorReverseSide#868a2aa5 type:SecureValueType file_hash:bytes text:string = SecureValueError;\nsecureValueErrorSelfie#e537ced6 type:SecureValueType file_hash:bytes text:string = SecureValueError;\nsecureValueErrorFile#7a700873 type:SecureValueType file_hash:bytes text:string = SecureValueError;\nsecureValueErrorFiles#666220e9 type:SecureValueType file_hash:Vector<bytes> text:string = SecureValueError;\nsecureValueError#869d758f type:SecureValueType hash:bytes text:string = SecureValueError;\nsecureValueErrorTranslationFile#a1144770 type:SecureValueType file_hash:bytes text:string = SecureValueError;\nsecureValueErrorTranslationFiles#34636dd8 type:SecureValueType file_hash:Vector<bytes> text:string = SecureValueError;\n\ninputUser#f21158c6 user_id:long access_hash:long = InputUser;\n\n\n---functions---\n\nusers.setSecureValueErrors#90c894b5 id:InputUser errors:Vector<SecureValueError> = Bool;\n```\n\nIf the data you received contains errors, the bot can use the [users.setSecureValueErrors](https://core.telegram.org/method/users.setSecureValueErrors) method to inform the user and [request information](#requesting-information) again. The user will not be able to resend the data, until all errors are fixed.\n\nDescriptions of the method parameters can be found in the method's [documentation page\u00a0\u00bb](https://core.telegram.org/method/users.setSecureValueErrors).\n\n### [](#as-a-user)As a user\n\n#### [](#receiving-requests)Receiving requests\n\nThe process starts when your app receives an event from one of the [SDKs](https://core.telegram.org/passport#sdk), or from a custom source.\n\n#### [](#uri-format)URI format\n\nThe SDKs trigger a passport authorization request by opening the following [deep links\u00a0\u00bb](https://core.telegram.org/api/links):\n\n`tg:` syntax:\n\n```\ntg://passport?bot_id=<bot_user_id>&scope=<scope>&public_key=<public_key>&nonce=<nonce>\ntg://resolve?domain=telegrampassport&bot_id=<bot_user_id>&scope=<scope>&public_key=<public_key>&nonce=<nonce>\n```\n\nWith the following query string parameters:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n| **Parameters** | **Type** | **Required** | **Description** |\n| domain | String | Required only for `resolve` versions of the passport URI | Always `telegrampassport` for Passport authorization requests. |\n| bot\\_id | Integer | Yes | Unique identifier for the bot. You can get it from bot token. For example, for the bot token `1234567:4TT8bAc8GHUspu3ERYn-KGcvsvGB9u_n4ddy`, the bot id is `1234567`. |\n| scope | [UriPassportScope](#uripassportscope) | Yes | A more compact JSON-serialized object describing the data you want to request |\n| public\\_key | String | Yes | Public key of the bot |\n| nonce | String | Yes | Bot-specified nonce. **Important:** For security purposes it should be a cryptographically secure unique identifier of the request. In particular, it should be long enough and it should be generated using a cryptographically secure pseudorandom number generator. You should never accept credentials with the same nonce twice. |\n| callback\\_url | String | Optional | Supported by some Telegram clients, specifies a callback URL to open once the process is finished or canceled. |\n| payload | String | Optional | **Deprecated** parameter from Telegram Passport 1.0 that had the same function of the `nonce` parameter.  <br>Services that still use a legacy version of the SDK may provide this parameter instead of the `nonce`.  <br>In some cases, both the `nonce` and the `payload` parameters may be found in a URI, for backwards compatibility: in this case, the `nonce` parameter should always be used instead of `payload`. |\n\nExample URI, generated by the [Telegram Passport Example page](https://core.telegram.org/passport/example):\n\n```\ntg://resolve?domain=telegrampassport&bot_id=543260180&scope=%7B%22v%22%3A1%2C%22d%22%3A%5B%7B%22_%22%3A%22pd%22%2C%22n%22%3A1%7D%2C%22ad%22%2C%22pn%22%2C%22em%22%2C%7B%22_%22%3A%5B%7B%22_%22%3A%22pp%22%2C%22s%22%3A1%2C%22t%22%3A1%7D%2C%22ip%22%2C%22dl%22%2C%22ic%22%5D%7D%2C%7B%22_%22%3A%5B%22ub%22%2C%22bs%22%2C%22ra%22%2C%22pr%22%2C%22tr%22%5D%7D%5D%7D&public_key=-----BEGIN%20PUBLIC%20KEY-----%0AMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAv6m1zBF8lZOCqcxf8hnj%0AkvHwuWdU8s4rBWaxKXH%2FvDDUklcCS5uhSnmjhxWca9suubaG3lW4HxlCilkeJPVf%0Ajimg5Q8ZqWrR3OoOihEpcG9iJZTOEpsEk7VtEiabgacBG3Quv9JslTrDe95Fn801%0At9d21HXwgMrHeHpWDOn31Dr%2BwoEH%2BkwySUWa6L%2FZbnGwSNP7eeDTE7Amz1RMDk3t%0A8EWGq58u0IQatPcEH09aUQlKzk6MIiALkZ9ILBKCBk6d2WCokKnsdBctovNbxwSx%0AhP1qst1r%2BYc8iPBZozsDC0ZsC5jXCkcODI3OC0tkNtYzN2XKalW5R0DjDRUDmGhT%0AzQIDAQAB%0A-----END%20PUBLIC%20KEY-----%0A&nonce=b8e892dc2e0afe63424d101b964f1256_32858210_708614a4585b84872e&callback_url=https%3A%2F%2Fcore.telegram.org%2Fpassport%2Fexample%3Fpassport_ssid%3Db8e892dc2e0afe63424d101b964f1256_32858210_db259b427f200751ce&payload=b8e892dc2e0afe63424d101b964f1256_32858210_708614a4585b84872e\n```\n\n#### [](#uripassportscope)UriPassportScope\n\nThis object represents the data to be requested.\n\n|     |     |     |\n| --- | --- | --- |\n| **Field** | **Type** | **Description** |\n| d   | Array of [UriPassportScopeElement](#uripassportscopeelement) | List of requested elements, each type may be used only once in the entire array of UriPassportScopeElement objects |\n| v   | Integer | Scope version, must be _1_ |\n\n##### [](#uripassportscopeelement)UriPassportScopeElement\n\nThis object represents a requested element, should be one of:\n\n*   [UriPassportScopeElementOneOfSeveral](#uripassportscopeelementoneofseveral) - use to request any one of the documents included in the scope.\n*   [UriPassportScopeElementOne](#uripassportscopeelementone) \u2013 use to request one particular document.\n\nPassport document type identifiers are aliased with the following reduced type identifiers:\n\n| **Full** | **Alias** |\n| --- | --- |\n| `personal_details` | `pd` |\n| `passport` | `pp` |\n| `driver_license` | `dl` |\n| `identity_card` | `ic` |\n| `internal_passport` | `ip` |\n| `id_document` | `idd` |\n| `address` | `ad` |\n| `utility_bill` | `ub` |\n| `bank_statement` | `bs` |\n| `rental_agreement` | `ra` |\n| `passport_registration` | `pr` |\n| `temporary_registration` | `tr` |\n| `address_document` | `add` |\n| `phone_number` | `pn` |\n| `email` | `em` |\n\nYou can use the special type \"idd\" as an alias for one of \"pp\", \"dl\", \"ic\" and the special type \"add\" as an alias for one of \"ub\", \"bs\", \"ra\".\n\n#### [](#uripassportscopeelementoneofseveral)UriPassportScopeElementOneOfSeveral\n\nThis object represents several elements one of which must be provided.\n\n|     |     |     |\n| --- | --- | --- |\n| **Field** | **Type** | **Description** |\n| \\_  | Array of [UriPassportScopeElementOne](#uripassportscopeelementone) | List of elements one of which must be provided; must contain either several of \u201cpp\u201d, \u201cdl\u201d, \u201cic\u201d, \u201cip\u201d **or** several of \u201cub\u201d, \u201cbs\u201d, \u201cra\u201d, \u201cpr\u201d, \u201ctr\u201d |\n| s   | Boolean | _Optional._ Use this parameter if you want to request a selfie with the document from this list that the user chooses to upload. |\n| t   | Boolean | _Optional._ Use this parameter if you want to request a translation of the document from this list that the user chooses to upload. **Note:** We suggest to only request translations _after_ you have received a valid document that requires one. |\n\n#### [](#uripassportscopeelementone)UriPassportScopeElementOne\n\nThis object represents one particular element that must be provided. If no options are needed, _String_ can be used instead of this object to specify the type of the element.\n\n|     |     |     |\n| --- | --- | --- |\n| **Field** | **Type** | **Description** |\n| \\_  | String | Element type. One of \"pd\", \"pp\", \"dl\", \"ic\", \"ip\", \"ad\", \"ub\", \"bs\", \"ra\", \"pr\", \"tr\", \"pn\", \"em\" |\n| s   | Boolean | _Optional._ Use this parameter if you want to request a selfie with the document as well. Available for \"pp\", \"dl\", \"ic\" and \"ip\" |\n| t   | Boolean | _Optional._ Use this parameter if you want to request a translation of the document as well. Available for \"pp\", \"dl\", \"ic\", \"ip\", \"ub\", \"bs\", \"ra\", \"pr\" and \"tr\". **Note:** We suggest to only request translations _after_ you have received a valid document that requires one. |\n| n   | Boolean | _Optional._ Use this parameter to request the first, last and middle name of the user in the language of the user's country of residence. Available for \"pd\" |\n\nYou can also use the special type \"idd\" as an alias for one of \"pp\", \"dl\", \"ic\" and the special type \"add\" as an alias for one of \"ub\", \"bs\", \"ra\".\n\n#### [](#setting-up-telegram-passport)Setting up Telegram Passport\n\nThe next step for the client app is to request the user's 2FA passport, and configure Telegram Passport/fetch and decrypt remotely saved Telegram Passport parameters as described in the [Encryption article\u00a0\u00bb](https://core.telegram.org/passport/encryption).\n\n#### [](#fetching-the-passport-form)Fetching the passport form\n\n```\naccount.authorizationForm#ad2e1cd8 flags:# required_types:Vector<SecureRequiredType> values:Vector<SecureValue> errors:Vector<SecureValueError> users:Vector<User> privacy_policy_url:flags.0?string = account.AuthorizationForm;\n\n---functions---\n\naccount.getAuthorizationForm#a929597a bot_id:long scope:string public_key:string = account.AuthorizationForm;\n```\n\nThen, the client app passes the bot ID, scope and public key from the [passport authorization request](#receiving-requests) to the Telegram servers using the [account.getAuthorizationForm](https://core.telegram.org/method/account.getAuthorizationForm) method.\n\nThe response will be an [account.authorizationForm](https://core.telegram.org/constructor/account.authorizationForm) constructor, with info about the required document types, the URL of the service's privacy policy, as well as info about the bot to which the form should be sent. If the form was already submitted at least once, the constructor will also contain a list of already submitted data, along with eventual errors.\n\nThe user should accept the privacy policy and proceed to fill in the required data, and the client should encrypt and upload it as described in the [Encryption article\u00a0\u00bb](https://core.telegram.org/passport/encryption).\n\n#### [](#submitting-the-passport-form)Submitting the passport form\n\n```\nsecureCredentialsEncrypted#33f0ea47 data:bytes hash:bytes secret:bytes = SecureCredentialsEncrypted;\n\nsecureValueHash#ed1ecdb0 type:SecureValueType hash:bytes = SecureValueHash;\n\n---functions---\n\naccount.acceptAuthorization#f3ed4c73 bot_id:long scope:string public_key:string value_hashes:Vector<SecureValueHash> credentials:SecureCredentialsEncrypted = Bool;\n```\n\nOnce the user finishes uploading the required documents and clicks on the submit button, the client calls [account.acceptAuthorization](https://core.telegram.org/method/account.acceptAuthorization), submitting the documents to the bot associated to the service.\n\n*   As before, `bot_id`, `scope` and `public_key` are taken from the authorization request URI.\n*   `value_hashes` is used by the server to choose which document of which type to send to the bot: the `type` field should be set to the document type, and the `hash` field should be set to the `data_hash`/`file_hash` generated when [uploading encrypting the data\u00a0\u00bb](https://core.telegram.org/passport/encryption#encryption).\n*   `credentials` contains the encrypted credentials required by the service to decrypt the sent E2E encrypted secure values: it is generated as described in [Passport Credentials\u00a0\u00bb](https://core.telegram.org/passport/encryption#passport-credentials).\n\nFinally, the client opens the callback URL (if present).\n\n#### [](#handling-invalid-forms)Handling invalid forms\n\n```\nsecureValueErrorData#e8a40bd9 type:SecureValueType data_hash:bytes field:string text:string = SecureValueError;\nsecureValueErrorFrontSide#be3dfa type:SecureValueType file_hash:bytes text:string = SecureValueError;\nsecureValueErrorReverseSide#868a2aa5 type:SecureValueType file_hash:bytes text:string = SecureValueError;\nsecureValueErrorSelfie#e537ced6 type:SecureValueType file_hash:bytes text:string = SecureValueError;\nsecureValueErrorFile#7a700873 type:SecureValueType file_hash:bytes text:string = SecureValueError;\nsecureValueErrorFiles#666220e9 type:SecureValueType file_hash:Vector<bytes> text:string = SecureValueError;\nsecureValueError#869d758f type:SecureValueType hash:bytes text:string = SecureValueError;\nsecureValueErrorTranslationFile#a1144770 type:SecureValueType file_hash:bytes text:string = SecureValueError;\nsecureValueErrorTranslationFiles#34636dd8 type:SecureValueType file_hash:Vector<bytes> text:string = SecureValueError;\n\naccount.authorizationForm#ad2e1cd8 flags:# required_types:Vector<SecureRequiredType> values:Vector<SecureValue> errors:Vector<SecureValueError> users:Vector<User> privacy_policy_url:flags.0?string = account.AuthorizationForm;\n\n---functions---\n\naccount.getAuthorizationForm#a929597a bot_id:long scope:string public_key:string = account.AuthorizationForm;\n```\n\nIf any of the values of the submitted form are rejected by the service, the bot [calls the appropriate method to set information about errors](https://core.telegram.org/api/passport#fixing-errors).\n\nThe user can find out about these errors directly from the service, or, if they decide to [restart the process](#receiving-requests) and resend the corrected data, directly from the authorization form (`errors` field).",
    "url": "https://core.telegram.org/api/passport"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/top-rating",
      "title": "Top peer rating",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Top peer rating"
        },
        {
          "property": "og:image",
          "content": "34465abeb3bc2c4844"
        },
        {
          "property": "og:description",
          "content": "If enabled, the rating of top peers indicates the relevance of a frequently used peer in a certain category (frequently messaged users, frequently used bots, inline bots, frequently visited channels and so on)."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:08 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "2836",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Top peer rating\n\nIf [enabled](https://core.telegram.org/method/contacts.toggleTopPeers), the rating of [top peers](https://core.telegram.org/constructor/topPeer) indicates the relevance of a frequently used peer in a certain [category](https://core.telegram.org/type/TopPeerCategory) (frequently messaged users, frequently used bots, inline bots, frequently visited channels and so on).\n\nSchema:\n\n```\ntopPeerCategoryBotsPM#ab661b5b = TopPeerCategory;\ntopPeerCategoryBotsInline#148677e2 = TopPeerCategory;\ntopPeerCategoryCorrespondents#637b7ed = TopPeerCategory;\ntopPeerCategoryGroups#bd17a14a = TopPeerCategory;\ntopPeerCategoryChannels#161d9628 = TopPeerCategory;\ntopPeerCategoryPhoneCalls#1e76a78c = TopPeerCategory;\ntopPeerCategoryForwardUsers#a8406ca9 = TopPeerCategory;\ntopPeerCategoryForwardChats#fbeec0f0 = TopPeerCategory;\ntopPeerCategoryBotsApp#fd9e7bec = TopPeerCategory;\n\ntopPeer#edcdc05b peer:Peer rating:double = TopPeer;\n\ntopPeerCategoryPeers#fb834291 category:TopPeerCategory count:int peers:Vector<TopPeer> = TopPeerCategoryPeers;\n\ncontacts.topPeersNotModified#de266ef5 = contacts.TopPeers;\ncontacts.topPeers#70b772a8 categories:Vector<TopPeerCategoryPeers> chats:Vector<Chat> users:Vector<User> = contacts.TopPeers;\ncontacts.topPeersDisabled#b52c939d = contacts.TopPeers;\n\n---functions---\n\ncontacts.toggleTopPeers#8514bdda enabled:Bool = Bool;\ncontacts.getTopPeers#973478b6 flags:# correspondents:flags.0?true bots_pm:flags.1?true bots_inline:flags.2?true phone_calls:flags.3?true forward_users:flags.4?true forward_chats:flags.5?true groups:flags.10?true channels:flags.15?true bots_app:flags.16?true offset:int limit:int hash:long = contacts.TopPeers;\ncontacts.resetTopPeerRating#1ae373ac category:TopPeerCategory peer:InputPeer = Bool;\n```\n\nThe rate delta is computed by taking the time delta between the last time the user used a certain peer and the last time the rating for that peer was received through [contacts.getTopPeers](https://core.telegram.org/method/contacts.getTopPeers) and dividing it by the [exponential decay from config](https://core.telegram.org/constructor/config).\n\nSpecifically, clients should:\n\n1.  On startup, invoke [contacts.getTopPeers](https://core.telegram.org/method/contacts.getTopPeers) for all the required peer rate categories, fetching and storing the ratings for all top peers in a local database.\n2.  Every time a user opens (for example) chat `123456789` the following operation must be done on the cached top peer info.\n    \n    \u00a0 `dateOpened` indicates when was the peer used.  \n    `normalizeRate` is an arbitrary time in the recent past (when ratings are received from the server using [contacts.getTopPeers](https://core.telegram.org/method/contacts.getTopPeers) and the schema described above, it is the time when they were received).  \n    `config.rating_e_decay` is the [exponential decay from config](https://core.telegram.org/constructor/config).\n    \n\n```\n  topPeer.rating += e^((dateOpened - normalizeRate) / config.rating_e_decay)\n```\n\n3.  Every time the client needs to display a list of commonly used bots, users, mini apps, call destinations, etc (for example for the [global search tab](https://core.telegram.org/api/search#global-search)), sort the peers by the `rating` for the specified category.\n\nUse [contacts.toggleTopPeers](https://core.telegram.org/method/contacts.toggleTopPeers) to enable or disable top peer ratings.  \nUse [contacts.resetTopPeerRating](https://core.telegram.org/method/contacts.resetTopPeerRating) to reset the top peer rating of a certain peer, in a certain category.",
    "url": "https://core.telegram.org/api/top-rating"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/drafts",
      "title": "Message drafts",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Message drafts"
        },
        {
          "property": "og:image",
          "content": "89f7ae8e51fc1ce19f"
        },
        {
          "property": "og:description",
          "content": "How to handle message drafts"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:06 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "1976",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Message drafts\n\nMessage [drafts](https://telegram.org/blog/drafts) in Telegram allow syncing the text typed into message fields between devices.\n\n### [](#drafts)Drafts\n\nDrafts are represented by the [DraftMessage](https://core.telegram.org/type/DraftMessage) constructors. The parameters of the peer-specific draft should be used as defaults when composing a message to be sent to a certain peer (in the case of media, the same draft should still be used as base, the message will become the caption). If the user exits the app before sending the message, the message should be saved as a draft:\n\n### [](#saving-drafts)Saving drafts\n\nDrafts can be saved using the [messages.saveDraft](https://core.telegram.org/method/messages.saveDraft) method.\n\n### [](#downloading-drafts)Downloading drafts\n\nNew drafts are automatically sent to all devices via [updateDraftMessage](https://core.telegram.org/constructor/updateDraftMessage) updates.\n\n[Dialog](https://core.telegram.org/constructor/dialog) objects fetched via the API also contain the draft associated with the dialog.\n\n### [](#clearing-drafts)Clearing drafts\n\nDrafts can be cleared by setting the `clear_draft` flag when sending messages or media using [messages.sendMessage](https://core.telegram.org/method/messages.sendMessage), [messages.sendMedia](https://core.telegram.org/method/messages.sendMedia), [messages.sendMultiMedia](https://core.telegram.org/method/messages.sendMultiMedia), [messages.sendInlineBotResult](https://core.telegram.org/method/messages.sendInlineBotResult) and similar or manually by passing empty values to [messages.saveDraft](https://core.telegram.org/method/messages.saveDraft).",
    "url": "https://core.telegram.org/api/drafts"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/file_reference",
      "title": "File references",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "File references"
        },
        {
          "property": "og:image",
          "content": "c06d4e41a64b660b9f"
        },
        {
          "property": "og:description",
          "content": "How to handle file references."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:08 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "2572",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# File references\n\nFile references are strings of bytes, that can be encountered in the `file_reference` fields of [document](https://core.telegram.org/constructor/document) and [photo](https://core.telegram.org/constructor/photo) objects.\n\nThey must be cached by the client, along with the **origin context** where the document/photo object was found, in order to be refetched when the file reference expires.\n\nExample implementation of a reference database: [MadelineProto](https://github.com/danog/MadelineProto/blob/v8/src/MTProtoTools/ReferenceDatabase.php), [android](https://github.com/DrKLO/Telegram/blob/master/TMessagesProj/src/main/java/org/telegram/messenger/FileRefController.java), [telegram desktop](https://github.com/telegramdesktop/tdesktop/blob/bec39d89e19670eb436dc794a8f20b657cb87c71/Telegram/SourceFiles/data/data_file_origin.cpp), [tdlib](https://github.com/tdlib/td/blob/56163c2460a65afc4db2c57ece576b8c38ea194b/td/telegram/FileReferenceManager.cpp).\n\n#### [](#another-example)Another example:\n\nAssume you receive a [message](https://core.telegram.org/constructor/message) from your friend: that message contains a [messageMediaPhoto](https://core.telegram.org/constructor/messageMediaPhoto) with a [photo](https://core.telegram.org/constructor/photo).\n\nYour client has to cache not only the `file_reference` field of the photo, but also the context in which the file reference was seen (in this case, a message coming from a specific user).\n\nThe context info is in this case, [an origin context of type message](https://github.com/danog/MadelineProto/blob/v8/src/MTProtoTools/ReferenceDatabase.php#L74), containing the message ID and the peer ID of the chat/channel/user where the message was seen.\n\nThe context info has to be associated with the file reference: when downloading a file using [upload.getFile](https://core.telegram.org/method/upload.getFile) or resending it using [messages.sendMedia](https://core.telegram.org/method/messages.sendMedia), a `FILE_REFERENCE_EXPIRED` error may be returned.  \n[messages.sendMultiMedia](https://core.telegram.org/method/messages.sendMultiMedia) returns a variation of the same error, as a `FILE_REFERENCE_%d_EXPIRED` error (where `%d` is the index of the media with the expired file reference in the passed media array).  \nIf this happens, the context info must be used to refetch the object that contained the file reference: in this example, the peer info and the message ID have to be used with [channels.getMessages](https://core.telegram.org/method/channels.getMessages) or [messages.getMessages](https://core.telegram.org/method/messages.getMessages) to [refetch the message](https://github.com/danog/MadelineProto/blob/v8/src/MTProtoTools/ReferenceDatabase.php#L481), recache the file reference and use it in a new file download request.\n\nMore than one origin context can be associated to one file reference, for greater resilience (in the case of a message that was deleted in one chat but was also forwarded in another chat, the file reference can be refetched from the second chat, instead).\n\nOrigin contexts for objects returned by method calls with certain parameters can be considered, too (for example, in the case of favorited sticker sets returned by [messages.getFavedStickers](https://core.telegram.org/method/messages.getFavedStickers)).",
    "url": "https://core.telegram.org/api/file_reference"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/url-authorization",
      "title": "Seamless Telegram Login",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Seamless Telegram Login"
        },
        {
          "property": "og:image",
          "content": "faa06a44f2ab0cf059"
        },
        {
          "property": "og:description",
          "content": "Handle Seamless Telegram Login URL authorization requests."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:09 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3044",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Seamless Telegram Login\n\nBots or Telegram websites may [ask users to login to a certain website via Telegram](https://core.telegram.org/bots/api#loginurl) when clicking on certain links or URL buttons in inline keyboards.\n\n### [](#bot-url-authorization)Bot URL authorization\n\nWhen the user clicks on [keyboardButtonUrlAuth](https://core.telegram.org/constructor/keyboardButtonUrlAuth), [messages.requestUrlAuth](https://core.telegram.org/method/messages.requestUrlAuth) should be called, providing the `button_id` of the button and the ID and peer of the container message. The returned [urlAuthResultRequest](https://core.telegram.org/constructor/urlAuthResultRequest) object will contain more details about the authorization request:\n\n*   The `domain` parameter will contain the domain name of the website on which the user will log in (example: _comments.app_).\n*   The `bot` parameter will contain info about the bot which will be used for user authorization (example: _DiscussBot_).\n*   The `request_write_access` will be set if the bot would like to send messages to the user.\n\nThe info should be shown in a prompt:\n\n[![TITLE](https://core.telegram.org/file/811140909/1631/20k1Z53eiyY.23995/c541e89b74253623d9 \"TITLE\")](https://core.telegram.org/file/811140015/1734/8VZFkwWXalM.97872/6127fa62d8a0bf2b3c)\n\nIf the user agrees to login to the URL, [messages.acceptUrlAuth](https://core.telegram.org/method/messages.acceptUrlAuth) should be called (eventually setting the `write_allowed` if the permission was requested and the user consented). The result will be a [urlAuthResultAccepted](https://core.telegram.org/constructor/urlAuthResultAccepted) with the final URL to open, which will include a query string with the requested info and a hash that [must be verified upon receival by the service](https://core.telegram.org/widgets/login#receiving-authorization-data).\n\n[urlAuthResultDefault](https://core.telegram.org/constructor/urlAuthResultDefault) could also be returned, instead, in which case the `url` of the [keyboardButtonUrlAuth](https://core.telegram.org/constructor/keyboardButtonUrlAuth) must be opened, instead. The same must be done if the user opens the link while refusing the authorization request.\n\n### [](#link-url-authorization)Link URL authorization\n\nTelegram supports automatic authorization on certain websites upon opening an HTTP URL in-app, upon clicking a link in a message or clicking on a [keyboardButtonUrl](https://core.telegram.org/constructor/keyboardButtonUrl).\n\n#### [](#automatic-authorization)Automatic authorization\n\nClients should automatically authenticate users when opening official Telegram websites, listed in the [`autologin_domains` key](https://core.telegram.org/api/config#autologin-domains) of the [client configuration object\u00a0\u00bb](https://core.telegram.org/api/config#client-configuration).\n\nUpon clicking a link, the URL must be modified by appending the [`autologin_token`\u00a0\u00bb](https://core.telegram.org/constructor/config) from the [MTProto configuration object\u00a0\u00bb](https://core.telegram.org/api/config#mtproto-configuration) to the [query string](https://datatracker.ietf.org/doc/html/rfc3986#section-3.4), like so:\n\nOriginal URL: `https://somedomain.telegram.org/path?query=string#fragment=value`  \nModified URL: `https://somedomain.telegram.org/path?query=string&autologin_token=$autologin_token#fragment=value`\n\nMake sure that the used `autologin_token` is no more than `10000` seconds old, if it is older it must be refetched before use with [help.getConfig](https://core.telegram.org/method/help.getConfig).\n\n#### [](#manual-authorization)Manual authorization\n\nClients should show a confirmation prompt similar to the one used [for bots](#bot-url-authorization), to authenticate users when opening certain Telegram websites, listed in the `url_auth_domains` key of the [client configuration object\u00a0\u00bb](https://core.telegram.org/api/config#url-auth-domains).\n\n[messages.requestUrlAuth](https://core.telegram.org/method/messages.requestUrlAuth) should be called, providing only the original `url`. The returned [urlAuthResultRequest](https://core.telegram.org/constructor/urlAuthResultRequest) object will contain more details about the authorization request:\n\n*   The `domain` parameter will contain the domain name of the website on which the user will log in (example: _comments.app_).\n*   The `request_write_access` will be set if the website would like to send messages to the user.\n\nThe info should be shown in a prompt.\n\nIf the user agrees to login to the URL, [messages.acceptUrlAuth](https://core.telegram.org/method/messages.acceptUrlAuth) should be called (eventually setting the `write_allowed` if the permission was requested and the user consented). The result will be a [urlAuthResultAccepted](https://core.telegram.org/constructor/urlAuthResultAccepted) with the final URL to open.\n\n[urlAuthResultDefault](https://core.telegram.org/constructor/urlAuthResultDefault) could also be returned, instead, in which case the original URL must be opened, instead. The same must be done if the user opens the link while refusing the authorization request.\n\n### [](#related-articles)Related articles\n\n#### [](#client-configuration)[Client configuration](https://core.telegram.org/api/config)\n\nThe MTProto API has multiple configuration parameters that can be fetched with the appropriate methods.",
    "url": "https://core.telegram.org/api/url-authorization"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/ringtones",
      "title": "Ringtones",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Ringtones"
        },
        {
          "property": "og:description",
          "content": "The API allows uploading and synchronizing notification sounds associated to a specific chat."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:16 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3209",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Ringtones\n\nThe API allows uploading and synchronizing notification sounds associated to a specific chat.\n\n### [](#uploading-notification-sounds)Uploading notification sounds\n\nSchema:\n\n```\naccount.savedRingtonesNotModified#fbf6e8b1 = account.SavedRingtones;\naccount.savedRingtones#c1e92cc5 hash:long ringtones:Vector<Document> = account.SavedRingtones;\n\nupdateSavedRingtones#74d8be99 = Update;\n\naccount.savedRingtone#b7263f6d = account.SavedRingtone;\naccount.savedRingtoneConverted#1f307eb7 document:Document = account.SavedRingtone;\n\n---functions---\n\naccount.uploadRingtone#831a83a2 file:InputFile file_name:string mime_type:string = Document;\naccount.saveRingtone#3dea5b03 id:InputDocument unsave:Bool = account.SavedRingtone;\naccount.getSavedRingtones#e1902288 hash:long = account.SavedRingtones;\n```\n\nA notification sound file may be uploaded using [account.uploadRingtone](https://core.telegram.org/method/account.uploadRingtone).  \nAfter upload, the document should be provided to [account.saveRingtone](https://core.telegram.org/method/account.saveRingtone) to save the notification sound, returning a simple [account.savedRingtone](https://core.telegram.org/constructor/account.savedRingtone).\n\nSupported formats:\n\n*   MP3\n*   OGG OPUS\n\nAn existing voice message may also be passed directly to [account.saveRingtone](https://core.telegram.org/method/account.saveRingtone).  \nWhen passing existing voice messages to [account.saveRingtone](https://core.telegram.org/method/account.saveRingtone) an [account.savedRingtoneConverted](https://core.telegram.org/constructor/account.savedRingtoneConverted) constructor will be returned containing the new document to use **instead of** the original voice message document when [removing](#removing-notification-sounds) or [using](#setting-notification-sounds) notification sounds.\n\nThe following ringtone limits are specified in the [client configuration](https://core.telegram.org/api/config#client-configuration):\n\n*   [ringtone\\_duration\\_max](https://core.telegram.org/api/config#ringtone-duration-max) - The maximum duration in seconds of uploaded ringtones\n*   [ringtone\\_saved\\_count\\_max](https://core.telegram.org/api/config#ringtone-saved-count-max) - The maximum number of saveable ringtones\n*   [ringtone\\_size\\_max](https://core.telegram.org/api/config#ringtone-size-max) - The maximum (post-conversion) filesize in bytes of uploadable ringtones\n\n### [](#removing-notification-sounds)Removing notification sounds\n\nSchema:\n\n```\naccount.savedRingtone#b7263f6d = account.SavedRingtone;\n\n---functions---\n\naccount.saveRingtone#3dea5b03 id:InputDocument unsave:Bool = account.SavedRingtone;\n```\n\nPass true to `unsave` in [account.saveRingtone](https://core.telegram.org/method/account.saveRingtone) to remove an uploaded notification sound.\n\n### [](#getting-notification-sounds)Getting notification sounds\n\nSchema:\n\n```\nupdateSavedRingtones#74d8be99 = Update;\n\naccount.savedRingtonesNotModified#fbf6e8b1 = account.SavedRingtones;\naccount.savedRingtones#c1e92cc5 hash:long ringtones:Vector<Document> = account.SavedRingtones;\n\n---functions---\n\naccount.getSavedRingtones#e1902288 hash:long = account.SavedRingtones;\n```\n\n[account.getSavedRingtones](https://core.telegram.org/method/account.getSavedRingtones) can be used to obtain all saved notification sounds.  \nThe client will receive an [updateSavedRingtones](https://core.telegram.org/constructor/updateSavedRingtones) update if the list is modified by the user on other clients, which should trigger a call to [account.getSavedRingtones](https://core.telegram.org/method/account.getSavedRingtones).\n\n### [](#setting-notification-sounds)Setting notification sounds\n\nSchema:\n\n```\nnotificationSoundDefault#97e8bebe = NotificationSound;\nnotificationSoundNone#6f0c34df = NotificationSound;\nnotificationSoundLocal#830b9ae4 title:string data:string = NotificationSound;\nnotificationSoundRingtone#ff6c8049 id:long = NotificationSound;\n\ninputNotifyPeer#b8bc5b0c peer:InputPeer = InputNotifyPeer;\ninputNotifyUsers#193b4417 = InputNotifyPeer;\ninputNotifyChats#4a95e84e = InputNotifyPeer;\ninputNotifyBroadcasts#b1db7c7e = InputNotifyPeer;\n\ninputPeerNotifySettings#cacb6ae2 flags:# show_previews:flags.0?Bool silent:flags.1?Bool mute_until:flags.2?int sound:flags.3?NotificationSound stories_muted:flags.6?Bool stories_hide_sender:flags.7?Bool stories_sound:flags.8?NotificationSound = InputPeerNotifySettings;\n\n---functions---\n\naccount.updateNotifySettings#84be5b93 peer:InputNotifyPeer settings:InputPeerNotifySettings = Bool;\n```\n\nTo set the notification sound to play when receiving messages from a specific peer or from a category of peers, use [account.updateNotifySettings](https://core.telegram.org/method/account.updateNotifySettings), populating the `ios_sound`, `android_sound` or `other_sound` fields according to the platform where the sound should be played.\n\nThe fields can be populated with the following constructors:\n\n*   [notificationSoundDefault](https://core.telegram.org/constructor/notificationSoundDefault) - The default notification sound should be played\n*   [notificationSoundNone](https://core.telegram.org/constructor/notificationSoundNone) - No notification sound should be played\n*   [notificationSoundRingtone](https://core.telegram.org/constructor/notificationSoundRingtone) - A previously [uploaded](#uploading-notification-sounds) notification sound identified by the uploaded/converted document `id` should be played.\n*   [notificationSoundLocal](https://core.telegram.org/constructor/notificationSoundLocal) - A local notification sound (possibly provided by the OS) identified by the client-specific `data` payload should be played.",
    "url": "https://core.telegram.org/api/ringtones"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/wallpapers",
      "title": "Wallpapers",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Wallpapers"
        },
        {
          "property": "og:description",
          "content": "Telegram apps support generating, sharing and synchronizing chat backgrounds."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:16 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5875",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Wallpapers\n\nTelegram apps support generating, sharing and synchronizing chat backgrounds.\n\nWallpapers must be rendered according to the instructions contained in the wallpaper constructors.\n\n### [](#wallpaper-types)Wallpaper types\n\nThere are four main wallpaper types:\n\n*   [Image wallpapers](#image-wallpapers)\n*   [Pattern wallpapers](#pattern-wallpapers)\n*   [Fill wallpapers](#fill-wallpapers)\n*   [Channel and supergroup wallpapers](#channel-and-supergroup-wallpapers)\n\nFill and pattern wallpapers are generated using one of three [fill types](#fill-types).\n\n#### [](#image-wallpapers)Image wallpapers\n\n```\nwallPaper#a437c3ed id:long flags:# creator:flags.0?true default:flags.1?true pattern:flags.3?true dark:flags.4?true access_hash:long slug:string document:Document settings:flags.2?WallPaperSettings = WallPaper;\n\nwallPaperSettings#372efcd0 flags:# blur:flags.1?true motion:flags.2?true background_color:flags.0?int second_background_color:flags.4?int third_background_color:flags.5?int fourth_background_color:flags.6?int intensity:flags.3?int rotation:flags.4?int emoticon:flags.7?string = WallPaperSettings;\n```\n\nImage wallpapers are wallpapers described by a [wallPaper](https://core.telegram.org/constructor/wallPaperNoFile) constructor, containing a JPEG image in the `document` field.  \nThe `settings` field describes the transforms that should be applied to the image if the corresponding flags are set:\n\n*   `settings.blur`: The image should be downscaled to fit in 450x450 square and then box-blurred with radius 12.\n*   `settings.motion`: The image needs to be slightly moved when device is tilted, allowing for a parallax effect.\n\nAll other `settings` flags should be ignored.\n\n#### [](#pattern-wallpapers)Pattern wallpapers\n\n```\nwallPaper#a437c3ed id:long flags:# creator:flags.0?true default:flags.1?true pattern:flags.3?true dark:flags.4?true access_hash:long slug:string document:Document settings:flags.2?WallPaperSettings = WallPaper;\n\nwallPaperSettings#372efcd0 flags:# blur:flags.1?true motion:flags.2?true background_color:flags.0?int second_background_color:flags.4?int third_background_color:flags.5?int fourth_background_color:flags.6?int intensity:flags.3?int rotation:flags.4?int emoticon:flags.7?string = WallPaperSettings;\n```\n\nPattern wallpapers are wallpapers described by a [wallPaper](https://core.telegram.org/constructor/wallPaperNoFile) constructor with the `pattern` flag set, combining the [color fill](#fill-types) specified by the `settings` field with the PNG or TGV (gzipped subset of SVG with MIME type \"application/x-tgwallpattern\") pattern image contained in the `document` field.\n\nThe pattern image should be completely transparent, except for the pattern itself which should be shades of black.\n\nThe following flags in the `settings` field describe how should the pattern be combined with the color fill:\n\n*   `settings.intensity`: A value ranging from -100 to 100.\n    *   Values from 0 to 100 mean that the pattern should be overlaid on top of the [color fill](#fill-types) with the specified intensity (@ 100 the black pattern is fully visible on the background fill, @ 0 only the background fill is visible).\n    *   Values from -1 to -100 mean that the pattern should be inverted (black background, transparent pattern) before overlaying on top of the [color fill](#fill-types) with the specified intensity (@ -100 the filled pattern is fully visible on a black background, @ -1 only black is visible).\n*   `settings.motion`: The pattern needs to be slightly moved on top of the background when device is tilted, allowing for a parallax effect.\n\n#### [](#fill-wallpapers)Fill wallpapers\n\n```\nwallPaperNoFile#e0804116 id:long flags:# default:flags.1?true dark:flags.4?true settings:flags.2?WallPaperSettings = WallPaper;\n```\n\nFill wallpapers are simple wallpapers described by the [wallPaperNoFile](https://core.telegram.org/constructor/wallPaperNoFile) constructor, containing only the [fill](#fill-types) specified by the `settings` field.\n\n#### [](#channel-and-supergroup-wallpapers)Channel and supergroup wallpapers\n\n```\nwallPaperSettings#372efcd0 flags:# blur:flags.1?true motion:flags.2?true background_color:flags.0?int second_background_color:flags.4?int third_background_color:flags.5?int fourth_background_color:flags.6?int intensity:flags.3?int rotation:flags.4?int emoticon:flags.7?string = WallPaperSettings;\n```\n\n[Fill wallpapers](#fill-wallpapers) with an `emoticon` contained in the associated wallpaper `settings` indicate a channel/supergroup wallpaper, that can be [installed\u00a0\u00bb](#installing-wallpapers-in-a-specific-chat-or-channel) in channels and supergroups that have enough boosts, [see here\u00a0\u00bb](#installing-wallpapers-in-a-specific-chat-or-channel) for more info.\n\nThe full list of channel/supergroup wallpapers can be fetched using [account.getChatThemes](https://core.telegram.org/method/account.getChatThemes).\n\nChannels/supergroups may also set any custom wallpaper (not just the ones returned by [account.getChatThemes](https://core.telegram.org/method/account.getChatThemes)) after reaching a higher boost level, [see here\u00a0\u00bb](#installing-wallpapers-in-a-specific-chat-or-channel) for more info.\n\n### [](#fill-types)Fill types\n\nFill and pattern wallpapers are generated using one of three fill types:\n\n*   [Solid fill](#solid-fill)\n*   [Gradient fill](#gradient-fill)\n*   [Freeform gradient fill](#freeform-gradient-fill)\n\n#### [](#solid-fill)Solid fill\n\n```\nwallPaperSettings#372efcd0 flags:# blur:flags.1?true motion:flags.2?true background_color:flags.0?int second_background_color:flags.4?int third_background_color:flags.5?int fourth_background_color:flags.6?int intensity:flags.3?int rotation:flags.4?int emoticon:flags.7?string = WallPaperSettings;\n```\n\nIf out of the `*_background_color` flags only `background_color` is set, the fill is made of just the specified RGB-24 color.\n\n#### [](#gradient-fill)Gradient fill\n\n```\nwallPaperSettings#372efcd0 flags:# blur:flags.1?true motion:flags.2?true background_color:flags.0?int second_background_color:flags.4?int third_background_color:flags.5?int fourth_background_color:flags.6?int intensity:flags.3?int rotation:flags.4?int emoticon:flags.7?string = WallPaperSettings;\n```\n\nIf out of the `*_background_color` flags only `background_color` and `second_background_color` are set, the fill is made of a top-bottom (background-second\\_background) gradient of the specified RGB-24 colors.  \nIf set, `rotation` indicates clockwise rotation angle of the gradient, in degrees; 0-359. Must be always divisible by 45, default to 0 if not set.\n\n#### [](#freeform-gradient-fill)Freeform gradient fill\n\n```\nwallPaperSettings#372efcd0 flags:# blur:flags.1?true motion:flags.2?true background_color:flags.0?int second_background_color:flags.4?int third_background_color:flags.5?int fourth_background_color:flags.6?int intensity:flags.3?int rotation:flags.4?int emoticon:flags.7?string = WallPaperSettings;\n```\n\nIf the `background_color`, `second_background_color`, `third_background_color` and optionally `fourth_background_color` flags are set, the fill is made of a freeform gradient of the specified 3 or 4 RGB-24 colors.\n\n### [](#wallpaper-api)Wallpaper API\n\n#### [](#uploading-wallpapers)Uploading wallpapers\n\n```\nwallPaperSettings#372efcd0 flags:# blur:flags.1?true motion:flags.2?true background_color:flags.0?int second_background_color:flags.4?int third_background_color:flags.5?int fourth_background_color:flags.6?int intensity:flags.3?int rotation:flags.4?int emoticon:flags.7?string = WallPaperSettings;\n\nwallPaper#a437c3ed id:long flags:# creator:flags.0?true default:flags.1?true pattern:flags.3?true dark:flags.4?true access_hash:long slug:string document:Document settings:flags.2?WallPaperSettings = WallPaper;\n\n---functions---\n\naccount.uploadWallPaper#e39a8f03 flags:# for_chat:flags.0?true file:InputFile mime_type:string settings:WallPaperSettings = WallPaper;\n```\n\n[account.uploadWallPaper](https://core.telegram.org/method/account.uploadWallPaper) is used to upload [image](#image-wallpapers) and [pattern](#pattern-wallpapers) wallpapers. The `for_chat` flag must be set when uploading wallpapers to be used with [messages.setChatWallPaper](https://core.telegram.org/method/messages.setChatWallPaper).  \n[Fill wallpapers](#fill-wallpapers) don't require uploading since they have no associated file, and a [wallPaper](https://core.telegram.org/constructor/wallPaper) constructor can directly be generated client-side, specifying `id=0`.\n\nWallpapers can then be shared using a [wallpaper deep link\u00a0\u00bb](https://core.telegram.org/api/links#wallpaper-links), and/or [installed as specified here (image and pattern wallpapers only)\u00a0\u00bb](#installing-wallpapers).\n\n#### [](#installing-wallpapers)Installing wallpapers\n\n```\ninputWallPaper#e630b979 id:long access_hash:long = InputWallPaper;\ninputWallPaperSlug#72091c80 slug:string = InputWallPaper;\n\nwallPaper#a437c3ed id:long flags:# creator:flags.0?true default:flags.1?true pattern:flags.3?true dark:flags.4?true access_hash:long slug:string document:Document settings:flags.2?WallPaperSettings = WallPaper;\n\nwallPaperSettings#372efcd0 flags:# blur:flags.1?true motion:flags.2?true background_color:flags.0?int second_background_color:flags.4?int third_background_color:flags.5?int fourth_background_color:flags.6?int intensity:flags.3?int rotation:flags.4?int emoticon:flags.7?string = WallPaperSettings;\n\naccount.wallPapersNotModified#1c199183 = account.WallPapers;\naccount.wallPapers#cdc3858c hash:long wallpapers:Vector<WallPaper> = account.WallPapers;\n\n---functions---\n\naccount.getWallPaper#fc8ddbea wallpaper:InputWallPaper = WallPaper;\naccount.getMultiWallPapers#65ad71dc wallpapers:Vector<InputWallPaper> = Vector<WallPaper>;\n\naccount.saveWallPaper#6c5a5b37 wallpaper:InputWallPaper unsave:Bool settings:WallPaperSettings = Bool;\naccount.installWallPaper#feed5769 wallpaper:InputWallPaper settings:WallPaperSettings = Bool;\naccount.getWallPapers#7967d36 hash:long = account.WallPapers;\naccount.resetWallPapers#bb3b9804 = Bool;\n```\n\nOnce you've [uploaded your wallpaper](#uploading-wallpapers) or received a [wallpaper deep link](https://core.telegram.org/api/links#wallpaper-links), it can be installed as follows.\n\n_Note that [fill wallpapers](#fill-wallpapers) cannot be globally installed using [account.installWallPaper](https://core.telegram.org/method/account.installWallPaper) or [account.saveWallPaper](https://core.telegram.org/method/account.saveWallPaper), clients should install and keep track of them only locally, without synchronizing the wallpaper list or signaling installations._\n\nThe API keeps a list of wallpapers that the user can set as chat background, including some preinstalled ones.  \nTo fetch the list use [account.getWallPapers](https://core.telegram.org/method/account.getWallPapers).  \nTo save a wallpaper to the list use [account.saveWallPaper](https://core.telegram.org/method/account.saveWallPaper) with `unsave=false`.  \nTo remove a wallpaper (including preinstalled wallpapers) from the list use [account.saveWallPaper](https://core.telegram.org/method/account.saveWallPaper) with `unsave=true`.  \nTo restore the default list, removing all installed wallpapers and reinstalling previously removed preinstalled wallpapers use [account.resetWallPapers](https://core.telegram.org/method/account.resetWallPapers).\n\nWhen a client sets a wallpaper as the default chat background, call [account.installWallPaper](https://core.telegram.org/method/account.installWallPaper) to signal this installation to the server.  \nNote that calling this method will also automatically save the wallpaper, if it's not present in the saved wallpapers list.\n\nIn all cases where an [InputWallPaper](https://core.telegram.org/type/InputWallPaper) constructor is required, pass:\n\n*   [inputWallPaperSlug](https://core.telegram.org/constructor/inputWallPaperSlug) when working with [wallpaper deep links](https://core.telegram.org/api/links#wallpaper-links).\n*   [inputWallPaper](https://core.telegram.org/constructor/inputWallPaper) otherwise, using the ID and access hash fields of a full [wallPaper](https://core.telegram.org/constructor/wallPaper).  \n    As mentioned earlier, [fill wallpapers](#fill-wallpapers) can't be saved to the server using [account.installWallPaper](https://core.telegram.org/method/account.installWallPaper) or [account.saveWallPaper](https://core.telegram.org/method/account.saveWallPaper): an [inputWallPaperNoFile](https://core.telegram.org/constructor/inputWallPaperNoFile) is available for fill wallpapers but can **only** be used when working with [themes\u00a0\u00bb](https://core.telegram.org/api/themes) or when using [messages.setChatWallPaper](https://core.telegram.org/method/messages.setChatWallPaper) as follows.\n\n#### [](#installing-wallpapers-in-a-specific-chat-or-channel)Installing wallpapers in a specific chat or channel\n\n```\nmessageActionSetChatWallPaper#5060a3f4 flags:# same:flags.0?true for_both:flags.1?true wallpaper:WallPaper = MessageAction;\n\nupdatePeerWallpaper#ae3f101d flags:# wallpaper_overridden:flags.1?true peer:Peer wallpaper:flags.0?WallPaper = Update;\n\n---functions---\n\nmessages.setChatWallPaper#8ffacae1 flags:# for_both:flags.3?true revert:flags.4?true peer:InputPeer wallpaper:flags.0?InputWallPaper settings:flags.2?WallPaperSettings id:flags.1?int = Updates;\n```\n\nWallpapers can also be installed in a specific private chat, by using [messages.setChatWallPaper](https://core.telegram.org/method/messages.setChatWallPaper): this will emit a [messageActionSetChatWallPaper](https://core.telegram.org/constructor/messageActionSetChatWallPaper) service message, displaying the wallpaper in the UI along with an invitation for the other user to apply the same wallpaper.\n\nTo `wallpaper`, pass an:\n\n*   [inputWallPaperSlug](https://core.telegram.org/constructor/inputWallPaperSlug) when working with [wallpaper deep links](https://core.telegram.org/api/links#wallpaper-links).\n*   [inputWallPaperNoFile](https://core.telegram.org/constructor/inputWallPaperNoFile) for [fill wallpapers](#fill-wallpapers).\n*   [inputWallPaper](https://core.telegram.org/constructor/inputWallPaper) otherwise, using the ID and access hash fields of a full [wallPaper](https://core.telegram.org/constructor/wallPaper).\n\nIf the other user decides to apply the same wallpaper to the chat, [messages.setChatWallPaper](https://core.telegram.org/method/messages.setChatWallPaper) should be invoked passing the wallpaper `settings` received in the [messageActionSetChatWallPaper](https://core.telegram.org/constructor/messageActionSetChatWallPaper) service message (or some different settings, if the user customized them before applying the wallpaper), along with the `id` of the [messageActionSetChatWallPaper](https://core.telegram.org/constructor/messageActionSetChatWallPaper) service message, **without** the `wallpaper`: this way, the action will emit a [messageActionSetChatWallPaper](https://core.telegram.org/constructor/messageActionSetChatWallPaper) **with the `same` flag set**, which should be displayed in the UI as a simple acknowledgment service message, without the full wallpaper and without an invitation for the other user to apply it (since both participants already just did that).\n\nHowever, if we have [Premium](https://core.telegram.org/api/premium) subscription, we can change the other user's wallpaper without explicit confirmation from the other side: to do so, set the `for_both` flag when invoking [messages.setChatWallPaper](https://core.telegram.org/method/messages.setChatWallPaper).  \nThis will change the wallpaper for both sides of the chat, without requiring confirmation; the [userFull](https://core.telegram.org/constructor/userFull).`wallpaper_overridden` flag will also be set for the other user; the action will also emit a [messageActionSetChatWallPaper](https://core.telegram.org/constructor/messageActionSetChatWallPaper) **with the `for_both` flag set**.  \nIf the other user does not like the new wallpaper we have chosen for them, they can re-set their previous wallpaper just on their side, by invoking [messages.setChatWallPaper](https://core.telegram.org/method/messages.setChatWallPaper), providing only the `revert` flag (and obviously the `peer` parameter).\n\nNote that in order to pass [image](#image-wallpapers) or [pattern](#pattern-wallpapers) wallpapers to [messages.setChatWallPaper](https://core.telegram.org/method/messages.setChatWallPaper), the `for_chat` flag must be set when [uploading them with account.uploadWallPaper](#uploading-wallpapers).\n\nAlso note that unlike [account.installWallPaper](https://core.telegram.org/method/account.installWallPaper) or [account.saveWallPaper](https://core.telegram.org/method/account.saveWallPaper), [messages.setChatWallPaper](https://core.telegram.org/method/messages.setChatWallPaper) accepts [fill wallpapers](#fill-wallpapers) as well.\n\nWallpaper changes will also emit an [updatePeerWallpaper](https://core.telegram.org/constructor/updatePeerWallpaper) update.\n\nAfter reaching at least the [boost level](https://core.telegram.org/api/boost) specified in the [`channel_wallpaper_level_min` config parameter](https://core.telegram.org/api/config#channel-wallpaper-level-min)/[`group_wallpaper_level_min` config parameter](https://core.telegram.org/api/config#group-wallpaper-level-min), channels/groups gain the ability to set one of the [fill channel wallpapers returned by account.getChatThemes (see \u00bb for more info)](#channel-and-supergroup-wallpapers).\n\nAfter reaching at least the boost level specified in the [`channel_custom_wallpaper_level_min` config parameter](https://core.telegram.org/api/config#channel-custom-wallpaper-level-min)/[`group_custom_wallpaper_level_min` config parameter](https://core.telegram.org/api/config#group-custom-wallpaper-level-min), channels/supergroups gain the ability to set any custom [wallpaper](https://core.telegram.org/api/wallpapers), not just fill channel wallpapers.\n\nWhen setting channel wallpapers, do **not** set the `for_both` flag.",
    "url": "https://core.telegram.org/api/wallpapers"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/premium",
      "title": "Telegram Premium",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Telegram Premium"
        },
        {
          "property": "og:description",
          "content": "Telegram Premium is an optional subscription service that unlocks additional exclusive client-side and API-side features, while helping support the development of the app."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:18 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "9063",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Telegram Premium\n\nTelegram Premium is an optional subscription service that unlocks additional exclusive client-side and API-side features, while helping support the development of the app. It is a part of Telegram\u2019s **sustainable monetization** \u2013 driven by our users, rather than advertisers or shareholders. This way, Telegram can remain independent and prioritize its users first.\n\n> This page describes how should client apps handle Premium features: for a user-friendly overview of Telegram Premium features, see the [Telegram Premium FAQ](https://telegram.org/faq_premium).\n\n### [](#telegram-premium-users)Telegram Premium users\n\n```\ninputUserSelf#f7c1b13f = InputUser;\n\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\nhelp.premiumPromo#5334759c status_text:string status_entities:Vector<MessageEntity> video_sections:Vector<string> videos:Vector<Document> period_options:Vector<PremiumSubscriptionOption> users:Vector<User> = help.PremiumPromo;\n\n---functions---\n\nusers.getUsers#d91a548 id:Vector<InputUser> = Vector<User>;\nhelp.getPremiumPromo#b81b93d4 = help.PremiumPromo;\n```\n\nPremium users will have the `premium` flag of the [user](https://core.telegram.org/constructor/user) set.\n\nUse [users.getUsers](https://core.telegram.org/method/users.getUsers) with [inputUserSelf](https://core.telegram.org/constructor/inputUserSelf) to fetch info about the current subscription status of the current user.  \nYou can also directly use [help.getPremiumPromo](https://core.telegram.org/method/help.getPremiumPromo), as it will return info about the current user in the `users` field.\n\n### [](#telegram-premium-features)Telegram Premium features\n\nTelegram Premium offers a set of additional features and raised limits: clients should be aware of the current subscription status to accordingly modify client behavior.\n\n#### [](#promo-page)Promo page\n\n```\nhelp.premiumPromo#5334759c status_text:string status_entities:Vector<MessageEntity> video_sections:Vector<string> videos:Vector<Document> period_options:Vector<PremiumSubscriptionOption> users:Vector<User> = help.PremiumPromo;\n\n---functions---\n\nhelp.getPremiumPromo#b81b93d4 = help.PremiumPromo;\nhelp.getAppConfig#61e3f854 hash:int = help.AppConfig;\n```\n\nThe [help.premiumPromo](https://core.telegram.org/constructor/help.premiumPromo) constructor returned by [help.getPremiumPromo](https://core.telegram.org/method/help.getPremiumPromo) contains various info about the subscription, as described in the [constructor page](https://core.telegram.org/constructor/help.premiumPromo).\n\nClients should show a Telegram Premium button in the settings.  \nClicking on this button in the settings, clicking on the [badge](#badge) of a Premium user or hitting one of the Premium limits listed below should open a Telegram Premium modal.\n\nCall [help.getPremiumPromo](https://core.telegram.org/method/help.getPremiumPromo) and [help.getAppConfig](https://core.telegram.org/method/help.getAppConfig) to fetch info on how to build the premium modal.\n\n[help.getAppConfig](https://core.telegram.org/method/help.getAppConfig) will return a list of Premium feature identifiers in the [`premium_promo_order` appConfig field](https://core.telegram.org/api/config#premium-promo-order): the modal should contain a row for each returned feature, ordered as specified in the returned array.\n\nThese feature identifiers must be used when [subscribing to Telegram Premium](#subscribing-to-telegram-premium) if the related limit was hit.\n\nPossible feature identifiers:\n\n##### [](#stories)`stories`\n\n[Telegram Premium](https://core.telegram.org/api/premium) adds some [story-related](https://core.telegram.org/api/stories) features.\n\nStory-related Premium features also have certain subidentifiers, which are used if the user chooses to [subscribe to Telegram Premium](https://core.telegram.org/api/premium#subscribing-to-telegram-premium) after hitting one of the following story-related limitations.\n\nIf the user instead signs up simply after reading the promo page for story-related features, pass just `stories` as feature identifier.\n\nHere's the full list of story-related features and their sub-identifiers (contained in the title header):\n\n###### `stories__priority_order`\n\nStories posted by Premium users are shown first to users when fetching the list of active stories with [stories.getAllStories\u00a0\u00bb](https://core.telegram.org/method/stories.getAllStories).\n\n###### `stories__stealth_mode`\n\nPremium users can activate [stealth mode\u00a0\u00bb](https://core.telegram.org/api/stories#stealth-mode).\n\n###### `stories__permanent_views_history`\n\nPremium users can [fetch the full viewer list of stories, even after they expire\u00a0\u00bb](https://core.telegram.org/api/stories#fetching-the-interaction-list)\n\n###### `stories__expiration_durations`\n\nPremium users can set [custom expiration options when posting stories\u00a0\u00bb](https://core.telegram.org/api/stories)\n\n###### `stories__save_stories_to_gallery`\n\nPremium users can save other users' unprotected stories.\n\n###### `stories__links_and_formatting`\n\nPremium users can [styled text entities](https://core.telegram.org/api/entities) and links in story captions and use [URL media areas](https://core.telegram.org/api/stories#urls), as specified by the [stories\\_entities\u00a0\u00bb](https://core.telegram.org/api/config#stories-entities) config key.\n\n###### `stories__quality`\n\nPremium users can view stories in a higher quality.\n\nThere are a few more Premium story features that are listed in the [limits \u00bb](#double-limits) section.\n\nSee the [stories documentation\u00a0\u00bb](https://core.telegram.org/api/stories) for more information on stories.\n\n##### [](#double-limits)`double_limits`\n\nClicking on this entry should open a secondary popup with a list of the improved Premium limits, as follows.\n\nLimit-related Premium features also have certain subidentifiers, which are used if the user chooses to [subscribe to Telegram Premium](https://core.telegram.org/api/premium#subscribing-to-telegram-premium) after hitting one of the following limitations.\n\nIf the user instead signs up simply after reading the promo page for limits, pass just `double_limits` as feature identifier.\n\nHere's the full list of improved limits and their sub-identifiers (contained in the title header):\n\n###### `double_limits__channels`\n\nConfig keys: [channels\\_limit\\_premium \u00bb](https://core.telegram.org/api/config#channels-limit-premium)/[channels\\_limit\\_default \u00bb](https://core.telegram.org/api/config#channels-limit-default)\n\nThe maximum number of [channels and supergroups](https://core.telegram.org/api/channel) a [Premium](https://core.telegram.org/api/premium)/non-[Premium](https://core.telegram.org/api/premium) user may join (integer)\n\n###### `double_limits__saved_gifs`\n\nConfig keys: [saved\\_gifs\\_limit\\_premium \u00bb](https://core.telegram.org/api/config#saved-gifs-limit-premium)/[saved\\_gifs\\_limit\\_default \u00bb](https://core.telegram.org/api/config#saved-gifs-limit-default)\n\nThe maximum number of GIFs a [Premium](https://core.telegram.org/api/premium)/non-[Premium](https://core.telegram.org/api/premium) user may save (integer)\n\n###### `double_limits__stickers_faved`\n\nConfig keys: [stickers\\_faved\\_limit\\_premium \u00bb](https://core.telegram.org/api/config#stickers-faved-limit-premium)/[stickers\\_faved\\_limit\\_default \u00bb](https://core.telegram.org/api/config#stickers-faved-limit-default)\n\nThe maximum number of stickers a [Premium](https://core.telegram.org/api/premium)/non-[Premium](https://core.telegram.org/api/premium) user may [add to Favorites\u00a0\u00bb](https://core.telegram.org/api/stickers#favorite-stickersets) (integer)\n\n###### `double_limits__dialog_filters`\n\nConfig keys: [dialog\\_filters\\_limit\\_premium \u00bb](https://core.telegram.org/api/config#dialog-filters-limit-premium)/[dialog\\_filters\\_limit\\_default \u00bb](https://core.telegram.org/api/config#dialog-filters-limit-default)\n\nThe maximum number of [folders](https://core.telegram.org/api/folders) a [Premium](https://core.telegram.org/api/premium)/non-[Premium](https://core.telegram.org/api/premium) user may create (integer)\n\n###### `double_limits__dialog_filters_chats`\n\nConfig keys: [dialog\\_filters\\_chats\\_limit\\_premium \u00bb](https://core.telegram.org/api/config#dialog-filters-chats-limit-premium)/[dialog\\_filters\\_chats\\_limit\\_default \u00bb](https://core.telegram.org/api/config#dialog-filters-chats-limit-default)\n\nThe maximum number of chats a [Premium](https://core.telegram.org/api/premium)/non-[Premium](https://core.telegram.org/api/premium) user may add to a [folder](https://core.telegram.org/api/folders) (integer)\n\n###### `double_limits__dialogs_pinned`\n\nConfig keys: [dialogs\\_pinned\\_limit\\_premium \u00bb](https://core.telegram.org/api/config#dialogs-pinned-limit-premium)/[dialogs\\_pinned\\_limit\\_default \u00bb](https://core.telegram.org/api/config#dialogs-pinned-limit-default)\n\nThe maximum number of chats a [Premium](https://core.telegram.org/api/premium)/non-[Premium](https://core.telegram.org/api/premium) user may pin (integer)\n\n###### `double_limits__dialogs_folder_pinned`\n\nConfig keys: [dialogs\\_folder\\_pinned\\_limit\\_premium \u00bb](https://core.telegram.org/api/config#dialogs-folder-pinned-limit-premium)/[dialogs\\_folder\\_pinned\\_limit\\_default \u00bb](https://core.telegram.org/api/config#dialogs-folder-pinned-limit-default)\n\nThe maximum number of chats a [Premium](https://core.telegram.org/api/premium)/non-[Premium](https://core.telegram.org/api/premium) user may pin in a folder (integer)\n\n###### `double_limits__channels_public`\n\nConfig keys: [channels\\_public\\_limit\\_premium \u00bb](https://core.telegram.org/api/config#channels-public-limit-premium)/[channels\\_public\\_limit\\_default \u00bb](https://core.telegram.org/api/config#channels-public-limit-default)\n\nThe maximum number of public [channels or supergroups](https://core.telegram.org/api/channel) a [Premium](https://core.telegram.org/api/premium)/non-[Premium](https://core.telegram.org/api/premium) user may create (integer)\n\n###### `double_limits__caption_length`\n\nConfig keys: [caption\\_length\\_limit\\_premium \u00bb](https://core.telegram.org/api/config#caption-length-limit-premium)/[caption\\_length\\_limit\\_default \u00bb](https://core.telegram.org/api/config#caption-length-limit-default)\n\nThe maximum UTF-8 length of media captions sendable by [Premium](https://core.telegram.org/api/premium)/non-[Premium](https://core.telegram.org/api/premium) users (integer)\n\n###### `double_limits__about_length`\n\nConfig keys: [about\\_length\\_limit\\_premium \u00bb](https://core.telegram.org/api/config#about-length-limit-premium)/[about\\_length\\_limit\\_default \u00bb](https://core.telegram.org/api/config#about-length-limit-default)\n\nThe maximum UTF-8 length of bios of [Premium](https://core.telegram.org/api/premium)/non-[Premium](https://core.telegram.org/api/premium) users (integer)\n\n###### `double_limits__chatlist_invites`\n\nConfig keys: [chatlist\\_invites\\_limit\\_premium \u00bb](https://core.telegram.org/api/config#chatlist-invites-limit-premium)/[chatlist\\_invites\\_limit\\_default \u00bb](https://core.telegram.org/api/config#chatlist-invites-limit-default)\n\nMaximum number of per-folder [chat folder deep links \u00bb](https://core.telegram.org/api/links#chat-folder-links) that can be created by [Premium](https://core.telegram.org/api/premium)/non-[Premium](https://core.telegram.org/api/premium) users. (integer)\n\n###### `double_limits__chatlists_joined`\n\nConfig keys: [chatlists\\_joined\\_limit\\_premium \u00bb](https://core.telegram.org/api/config#chatlists-joined-limit-premium)/[chatlists\\_joined\\_limit\\_default \u00bb](https://core.telegram.org/api/config#chatlists-joined-limit-default)\n\nMaximum number of [shareable folders](https://core.telegram.org/api/links#chat-folder-links) [Premium](https://core.telegram.org/api/premium)/non-[Premium](https://core.telegram.org/api/premium) users may have. (integer)\n\n###### `double_limits__story_expiring`\n\nConfig keys: [story\\_expiring\\_limit\\_premium \u00bb](https://core.telegram.org/api/config#story-expiring-limit-premium)/[story\\_expiring\\_limit\\_default \u00bb](https://core.telegram.org/api/config#story-expiring-limit-default)\n\nThe maximum number of active [stories](https://core.telegram.org/api/stories) for [Premium](https://core.telegram.org/api/premium)/non-[Premium](https://core.telegram.org/api/premium) users (integer).\n\n###### `double_limits__story_caption_length`\n\nConfig keys: [story\\_caption\\_length\\_limit\\_premium \u00bb](https://core.telegram.org/api/config#story-caption-length-limit-premium)/[story\\_caption\\_length\\_limit\\_default \u00bb](https://core.telegram.org/api/config#story-caption-length-limit-default)\n\nThe maximum UTF-8 length of story captions for [Premium](https://core.telegram.org/api/premium)/non-[Premium](https://core.telegram.org/api/premium) users. (integer)\n\n###### `double_limits__stories_sent_weekly`\n\nConfig keys: [stories\\_sent\\_weekly\\_limit\\_premium \u00bb](https://core.telegram.org/api/config#stories-sent-weekly-limit-premium)/[stories\\_sent\\_weekly\\_limit\\_default \u00bb](https://core.telegram.org/api/config#stories-sent-weekly-limit-default)\n\nMaximum number of stories that can be sent in a week by [Premium](https://core.telegram.org/api/premium)/non-[Premium](https://core.telegram.org/api/premium) users. (integer)\n\n###### `double_limits__stories_sent_monthly`\n\nConfig keys: [stories\\_sent\\_monthly\\_limit\\_premium \u00bb](https://core.telegram.org/api/config#stories-sent-monthly-limit-premium)/[stories\\_sent\\_monthly\\_limit\\_default \u00bb](https://core.telegram.org/api/config#stories-sent-monthly-limit-default)\n\nMaximum number of stories that can be sent in a month by [Premium](https://core.telegram.org/api/premium)/non-[Premium](https://core.telegram.org/api/premium) users. (integer)\n\n###### `double_limits__stories_suggested_reactions`\n\nConfig keys: [stories\\_suggested\\_reactions\\_limit\\_premium \u00bb](https://core.telegram.org/api/config#stories-suggested-reactions-limit-premium)/[stories\\_suggested\\_reactions\\_limit\\_default \u00bb](https://core.telegram.org/api/config#stories-suggested-reactions-limit-default)\n\nMaximum number of [story reaction media areas\u00a0\u00bb](https://core.telegram.org/api/stories#media-areas) that can be added to a story by [Premium](https://core.telegram.org/api/premium)/non-[Premium](https://core.telegram.org/api/premium) users. (integer)\n\n###### `double_limits__recommended_channels`\n\nConfig keys: [recommended\\_channels\\_limit\\_premium \u00bb](https://core.telegram.org/api/config#recommended-channels-limit-premium)/[recommended\\_channels\\_limit\\_default \u00bb](https://core.telegram.org/api/config#recommended-channels-limit-default)\n\nThe maximum number of similar channels that can be recommended by [channels.getChannelRecommendations\u00bb](https://core.telegram.org/method/channels.getChannelRecommendations) to [Premium](https://core.telegram.org/api/premium)/non-[Premium](https://core.telegram.org/api/premium) users. (integer)\n\n###### `double_limits__saved_dialogs_pinned`\n\nConfig keys: [saved\\_dialogs\\_pinned\\_limit\\_premium \u00bb](https://core.telegram.org/api/config#saved-dialogs-pinned-limit-premium)/[saved\\_dialogs\\_pinned\\_limit\\_default \u00bb](https://core.telegram.org/api/config#saved-dialogs-pinned-limit-default)\n\nMaximum number of pinned dialogs in [saved messages](https://core.telegram.org/api/saved-messages) for [Premium](https://core.telegram.org/api/premium)/non-[Premium](https://core.telegram.org/api/premium) users. (integer)\n\n##### [](#business)`business`\n\nPremium users currently have access to [Telegram Business features\u00a0\u00bb](https://core.telegram.org/api/business).\n\n##### [](#last-seen)`last_seen`\n\nPremium users can view the last seen and message read times of other users even they can't view the last seen or read time for the current user.\n\n##### [](#message-privacy)`message_privacy`\n\nPremium users can disallow incoming voice and video note messages in private chats using [inputPrivacyKeyVoiceMessages](https://core.telegram.org/constructor/inputPrivacyKeyVoiceMessages) and [restrict incoming messages from non-contacts](https://core.telegram.org/api/privacy#require-premium-for-new-non-contact-users).\n\n##### [](#more-upload)`more_upload`\n\nPremium users can upload bigger files, as specified by the [upload\\_max\\_fileparts\\_default](https://core.telegram.org/api/config#upload-max-fileparts-default) vs [upload\\_max\\_fileparts\\_premium](https://core.telegram.org/api/config#upload-max-fileparts-premium) config keys.\n\n##### [](#faster-download)`faster_download`\n\nPremium users have no download speed limits (i.e. they can't receive `FLOOD_PREMIUM_WAIT_X` errors when downloading files, see [here\u00a0\u00bb](https://core.telegram.org/api/files) for more info).\n\n##### [](#wallpapers)`wallpapers`\n\nPremium users [can set custom chat wallpapers both for them and the other user in the chat](https://core.telegram.org/api/wallpapers#installing-wallpapers-in-a-specific-chat-or-channel).\n\n##### [](#peer-colors)`peer_colors`\n\nPremium users can [choose a custom color and background emoji for their profile background and messages](https://core.telegram.org/api/colors).\n\n##### [](#voice-to-text)`voice_to_text`\n\nPremium users can [transcribe voice messages without limits](https://core.telegram.org/api/transcribe).\n\n##### [](#translations)`translations`\n\nPremium users can enable [real-time chat translation](https://core.telegram.org/api/translation).\n\n##### [](#no-ads)`no_ads`\n\nPremium users see no [sponsored messages](https://core.telegram.org/api/sponsored-messages).\n\n##### [](#unique-reactions)`unique_reactions`\n\nPremium users have access to more [message reactions](https://core.telegram.org/api/reactions).\n\n##### [](#premium-stickers)`premium_stickers`\n\nPremium users have access to premium [stickersets](https://core.telegram.org/api/stickers).\n\n##### [](#animated-emoji)`animated_emoji`\n\nPremium users can send custom [animated emojis](https://core.telegram.org/api/custom-emoji).\n\n##### [](#advanced-chat-management)`advanced_chat_management`\n\nPremium users can [reorder the default folder](https://core.telegram.org/api/folders), auto-archive and hide new chats from non-contacts.\n\n##### [](#profile-badge)`profile_badge`\n\nPremium users have a [badge](#badge) next to their name, showing that they are helping support Telegram.\n\n##### [](#animated-userpics)`animated_userpics`\n\n[Animated profile pictures](https://core.telegram.org/api/files#animated-profile-pictures) of Premium users will play in-chat and when browsing the dialog list.\n\n##### [](#app-icons)`app_icons`\n\nPremium users can change the default icon of the Telegram app.\n\n##### [](#infinite-reactions)`infinite_reactions`\n\nPremium users can use [custom emojis](https://core.telegram.org/api/custom-emoji) when [reacting to messages](https://core.telegram.org/api/reactions).\n\n##### [](#emoji-status)`emoji_status`\n\nPremium users can set a [status emoji](https://core.telegram.org/api/emoji-status).\n\n##### [](#saved-tags)`saved_tags`\n\nPremium users can use [saved message tags](https://core.telegram.org/api/saved-messages#tags).\n\n##### [](#effects)`effects`\n\nPremium users can use [message effects](https://core.telegram.org/api/effects).\n\n##### [](#channel-boost)`channel_boost`\n\nPremium users can [boost chats and channels](https://core.telegram.org/api/boost).\n\n##### [](#forum-topic-icon)`forum_topic_icon`\n\nPremium users can set a [custom emoji](https://core.telegram.org/api/custom-emoji) as a [forum topic icon](https://core.telegram.org/api/forum)\n\n#### [](#badge)Badge\n\nUsers with a Telegram Premium subscription ([user](https://core.telegram.org/constructor/user).`premium` is set) should have a Telegram Premium badge next to their name.\n\n#### [](#animated-profile-pictures)Animated profile pictures\n\nThe [animated profile pictures](https://core.telegram.org/api/files#animated-profile-pictures) of Premium users should play inside of chats and dialog lists, and not just when opening the profile page.\n\n#### [](#sticker-suggestions)Sticker suggestions\n\nThe suggested sticker selection logic is slightly different for Premium users, see [here for more info\u00a0\u00bb](https://core.telegram.org/api/stickers#sticker-suggestions).\n\n### [](#subscribing-to-telegram-premium)Subscribing to Telegram Premium\n\nHere's how to activate a Telegram Premium subscription, when the user clicks on the subscribe button:\n\n*   If the `premium_bot_username` field is set, call [messages.startBot](https://core.telegram.org/method/messages.startBot), specifying the following parameters:\n    *   `peer` and `bot`: The bot mentioned in `premium_bot_username`\n    *   `start_param`: One of the following values:\n        *   If the user clicks on the subscribe button when viewing the promo page for a specific Premium feature, provide the [feature identifier](#telegram-premium-features) (or an empty string if opened from the main promo page).\n        *   If the user clicks on the subscribe button when viewing the promo page for a specific [Telegram Business](https://core.telegram.org/api/business#business-features-promo-page) feature, provide the business [feature identifier](https://core.telegram.org/api/business#business-features-promo-page) (or `business` if opened from the main business promo page).\n        *   If the user clicks on the subscribe button after hitting a limit that Telegram Premium raises, provide one of the [limit identifiers](#double-limits)\n        *   If the user clicks on the subscribe button after hitting a [story-related](https://core.telegram.org/api/stories) limit that Telegram Premium raises, provide one of the [story feature identifiers](#stories)\n        *   If the user clicks on the subscribe button from the Telegram Premium button in the settings, provide `settings`\n        *   If the user clicks on the subscribe button from the Telegram Premium star in a profile page, provide `profile`\n        *   If the user opened a [premium referrer link](https://core.telegram.org/api/links#premium-referrer-links), provide `deeplink` if the `referrer` is empty, and `deeplink_$referrer` if non-empty. Then, when the user clicks on the subscribe button in the sent invoice, follow the [usual payment flow for message invoices](https://core.telegram.org/api/payments).\n*   Otherwise, if the `premium_invoice_slug` field is set, handle the payment as you would handle a `t.me/$premium_invoice_slug` [invoice deep link](https://core.telegram.org/api/links#invoice-links).\n\nThere is also a store-based subscription flow based on [payments.assignAppStoreTransaction](https://core.telegram.org/method/payments.assignAppStoreTransaction)/[payments.assignPlayMarketTransaction](https://core.telegram.org/method/payments.assignPlayMarketTransaction), but it's currently not available to third-party apps (unlike the flow described above, which can be used by all clients).\n\n### [](#gifting-telegram-premium)Gifting Telegram Premium\n\nNote: to gift a Premium subscriptions to multiple friends, the alternative payment flow [described here\u00a0\u00bb](https://core.telegram.org/api/giveaways) ([inputStorePaymentPremiumGiftCode](https://core.telegram.org/constructor/inputStorePaymentPremiumGiftCode) without setting `boost_peer`) must be used, instead.\n\n```\nuserFull#979d2376 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true voice_messages_forbidden:flags.20?true translations_disabled:flags.23?true stories_pinned_available:flags.26?true blocked_my_stories_from:flags.27?true wallpaper_overridden:flags.28?true contact_require_premium:flags.29?true read_dates_private:flags.30?true flags2:# sponsored_enabled:flags2.7?true can_view_revenue:flags2.9?true bot_can_manage_emoji_status:flags2.10?true id:long about:flags.1?string settings:PeerSettings personal_photo:flags.21?Photo profile_photo:flags.2?Photo fallback_photo:flags.22?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int ttl_period:flags.14?int theme_emoticon:flags.15?string private_forward_name:flags.16?string bot_group_admin_rights:flags.17?ChatAdminRights bot_broadcast_admin_rights:flags.18?ChatAdminRights premium_gifts:flags.19?Vector<PremiumGiftOption> wallpaper:flags.24?WallPaper stories:flags.25?PeerStories business_work_hours:flags2.0?BusinessWorkHours business_location:flags2.1?BusinessLocation business_greeting_message:flags2.2?BusinessGreetingMessage business_away_message:flags2.3?BusinessAwayMessage business_intro:flags2.4?BusinessIntro birthday:flags2.5?Birthday personal_channel_id:flags2.6?long personal_channel_message:flags2.6?int stargifts_count:flags2.8?int starref_program:flags2.11?StarRefProgram = UserFull;\n\npremiumGiftOption#74c34319 flags:# months:int currency:string amount:long bot_url:string store_product:flags.0?string = PremiumGiftOption;\n\nmessageActionGiftPremium#6c6274fa flags:# currency:string amount:long months:int crypto_currency:flags.0?string crypto_amount:flags.0?long message:flags.1?TextWithEntities = MessageAction;\n\ninputStickerSetPremiumGifts#c88b3b02 = InputStickerSet;\n\n---functions---\n\nusers.getFullUser#b60f5918 id:InputUser = users.UserFull;\n```\n\nIf after calling [users.getFullUser](https://core.telegram.org/method/users.getFullUser) the resulting [userFull](https://core.telegram.org/constructor/userFull) constructor has one or more [premiumGiftOptions](https://core.telegram.org/constructor/premiumGiftOption) in the `premium_gifts` field, we can gift a non-recurring Telegram Premium subscription to this user.\n\nThe [premiumGiftOption](https://core.telegram.org/constructor/premiumGiftOption) constructors contain an ordered list of Premium gift offers with discounts over the base price, according to the subscription duration: to process the gift payment open the [deep link](https://core.telegram.org/api/links) contained in the `bot_url` field.\n\nOnce the payment is successfully processed, the user to which the gift was sent will automatically receive a [messageService](https://core.telegram.org/constructor/messageService) from the user that sent the gift, containing a [messageActionGiftPremium](https://core.telegram.org/constructor/messageActionGiftPremium) constructor with further info about the price and duration of the gifted Telegram Premium subscription.  \nClients should display this message, along with a sticker from the [inputStickerSetPremiumGifts](https://core.telegram.org/constructor/inputStickerSetPremiumGifts) [stickerset](https://core.telegram.org/api/stickers): here's an [example](https://telegram.org/blog/custom-emoji#gifting-telegram-premium).\n\nNote that if the `premium_gift_attach_menu_icon` [app configuration parameter](https://core.telegram.org/api/config#client-configuration) is `true`, a gift icon should be shown in the attachment menu in private chats with users, offering the current user to gift a [Telegram Premium](https://core.telegram.org/api/premium) subscription to the other user in the chat.\n\nIf the `premium_gift_text_field_icon` parameter is also set, a gift icon should be shown in the text bar in private chats with users (ie like the `/` icon in chats with bots), offering the current user to gift a [Telegram Premium](https://core.telegram.org/api/premium) subscription to the other user in the chat. Can only be true if `premium_gift_attach_menu_icon` is also true.\n\nNote that even if the `premium_gifts` field is not set, we can still gift one (or more!) Premium subscriptions using the alternative payment flow [described here\u00a0\u00bb](https://core.telegram.org/api/giveaways) ([inputStorePaymentPremiumGiftCode](https://core.telegram.org/constructor/inputStorePaymentPremiumGiftCode) without setting `boost_peer`).\n\nGifting a [Telegram Premium](https://core.telegram.org/api/premium) subscription to another user will create [boosts\\_per\\_sent\\_gift](https://core.telegram.org/api/config#boosts-per-sent-gift) [boost slots\u00a0\u00bb](https://core.telegram.org/api/boost) for us, and one boost slot for the destination user.\n\n### [](#blocked-telegram-premium)Blocked Telegram Premium\n\nIf the `premium_purchase_blocked` [app configuration parameter](https://core.telegram.org/api/config#client-configuration) is set, the user can't purchase a Premium account, and all Telegram Premium features must be hidden (like the [badges](#badge) of Premium users, Telegram Premium purchase buttons, and so on).",
    "url": "https://core.telegram.org/api/premium"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/translation",
      "title": "Translation",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Translation"
        },
        {
          "property": "og:description",
          "content": "Telegram allows translating chat messages: Telegram Premium users may even enable real-time chat translation."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:17 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4262",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Translation\n\nTelegram allows translating chat messages: [Telegram Premium](https://core.telegram.org/api/premium) users may even enable real-time chat translation.\n\n```\ntextWithEntities#751f3146 text:string entities:Vector<MessageEntity> = TextWithEntities;\n\nmessages.translateResult#33db32f8 result:Vector<TextWithEntities> = messages.TranslatedText;\n\n\n---functions---\n\nmessages.translateText#63183030 flags:# peer:flags.0?InputPeer id:flags.0?Vector<int> text:flags.1?Vector<TextWithEntities> to_lang:string = messages.TranslatedText;\n```\n\n[messages.translateText](https://core.telegram.org/method/messages.translateText) can be used to translate a list of chat messages (by populating the `peer` and `id` flags), or a generic list of messages (by populating the `text` flag, for example when translating instant view articles).\n\nThe method will return a vector of [textWithEntities](https://core.telegram.org/constructor/textWithEntities) constructors, containing the translated text, and, only for [Telegram Premium](https://core.telegram.org/api/premium) users, the corresponding [styled text entities](https://core.telegram.org/api/entities) (i.e. correctly repositioned **bold**, _italic_, link entities for the translated message, corresponding to the same entities in the original message).\n\n### [](#real-time-translation)Real-time translation\n\n```\nuserFull#979d2376 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true voice_messages_forbidden:flags.20?true translations_disabled:flags.23?true stories_pinned_available:flags.26?true blocked_my_stories_from:flags.27?true wallpaper_overridden:flags.28?true contact_require_premium:flags.29?true read_dates_private:flags.30?true flags2:# sponsored_enabled:flags2.7?true can_view_revenue:flags2.9?true bot_can_manage_emoji_status:flags2.10?true id:long about:flags.1?string settings:PeerSettings personal_photo:flags.21?Photo profile_photo:flags.2?Photo fallback_photo:flags.22?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int ttl_period:flags.14?int theme_emoticon:flags.15?string private_forward_name:flags.16?string bot_group_admin_rights:flags.17?ChatAdminRights bot_broadcast_admin_rights:flags.18?ChatAdminRights premium_gifts:flags.19?Vector<PremiumGiftOption> wallpaper:flags.24?WallPaper stories:flags.25?PeerStories business_work_hours:flags2.0?BusinessWorkHours business_location:flags2.1?BusinessLocation business_greeting_message:flags2.2?BusinessGreetingMessage business_away_message:flags2.3?BusinessAwayMessage business_intro:flags2.4?BusinessIntro birthday:flags2.5?Birthday personal_channel_id:flags2.6?long personal_channel_message:flags2.6?int stargifts_count:flags2.8?int starref_program:flags2.11?StarRefProgram = UserFull;\n\nchatFull#2633421b flags:# can_set_username:flags.7?true has_scheduled:flags.8?true translations_disabled:flags.19?true id:long about:string participants:ChatParticipants chat_photo:flags.2?Photo notify_settings:PeerNotifySettings exported_invite:flags.13?ExportedChatInvite bot_info:flags.3?Vector<BotInfo> pinned_msg_id:flags.6?int folder_id:flags.11?int call:flags.12?InputGroupCall ttl_period:flags.14?int groupcall_default_join_as:flags.15?Peer theme_emoticon:flags.16?string requests_pending:flags.17?int recent_requesters:flags.17?Vector<long> available_reactions:flags.18?ChatReactions reactions_limit:flags.20?int = ChatFull;\n\nchannelFull#bbab348d flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true can_set_location:flags.16?true has_scheduled:flags.19?true can_view_stats:flags.20?true blocked:flags.22?true flags2:# can_delete_channel:flags2.0?true antispam:flags2.1?true participants_hidden:flags2.2?true translations_disabled:flags2.3?true stories_pinned_available:flags2.5?true view_forum_as_messages:flags2.6?true restricted_sponsored:flags2.11?true can_view_revenue:flags2.12?true paid_media_allowed:flags2.14?true can_view_stars_revenue:flags2.15?true paid_reactions_available:flags2.16?true id:long about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int online_count:flags.13?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:flags.23?ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?long migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int folder_id:flags.11?int linked_chat_id:flags.14?long location:flags.15?ChannelLocation slowmode_seconds:flags.17?int slowmode_next_send_date:flags.18?int stats_dc:flags.12?int pts:int call:flags.21?InputGroupCall ttl_period:flags.24?int pending_suggestions:flags.25?Vector<string> groupcall_default_join_as:flags.26?Peer theme_emoticon:flags.27?string requests_pending:flags.28?int recent_requesters:flags.28?Vector<long> default_send_as:flags.29?Peer available_reactions:flags.30?ChatReactions reactions_limit:flags2.13?int stories:flags2.4?PeerStories wallpaper:flags2.7?WallPaper boosts_applied:flags2.8?int boosts_unrestrict:flags2.9?int emojiset:flags2.10?StickerSet = ChatFull;\n\n---functions---\n\nmessages.togglePeerTranslations#e47cb579 flags:# disabled:flags.0?true peer:InputPeer = Bool;\n```\n\n[Telegram Premium](https://core.telegram.org/api/premium) users may also enable real-time chat translation.  \nIf the currently logged in account is a Premium account, and the `translations_disabled` flag of [userFull](https://core.telegram.org/constructor/userFull), [chatFull](https://core.telegram.org/constructor/chatFull), [channelFull](https://core.telegram.org/constructor/channelFull) is **not** set, the client should run a local language recognition model for all messages received from private chats (not secret chats), chats and channels, and if:\n\n*   The language recognition model was ran on at least 8 messages in the chat,\n*   **and** the language of at least 35% of the processed messages was successfully detected,\n*   **and** at least 65% of the messages whose language was successfully detected are in a foreign language (a language that is not the system language nor the Telegram in-app language, and a language that was not explicitly excluded from translation by the user),\n*   **then**, a popup should be displayed to the user, offering to enable real-time chat translation, or to disallow translation of the detected language (the detected language is the language with most occurrences amongst all processed messages).\n\nIf the user dismisses the autotranslation popup, invoke [messages.togglePeerTranslations](https://core.telegram.org/method/messages.togglePeerTranslations) with the `disabled` flag set: this will set the `translations_disabled` flag in the corresponding full info constructor, signaling to the other sessions that the autotranslation popup should not be displayed.\n\nIf the user enables autotranslation, store the preference locally and invoke [messages.translateText](https://core.telegram.org/method/messages.translateText) for every received message, preferrably batching requests by specifying multiple message IDs in `id`.",
    "url": "https://core.telegram.org/api/translation"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/fragment",
      "title": "Collectibles",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Collectibles"
        },
        {
          "property": "og:description",
          "content": "Telegram users can make it easy for others to contact them or find their public groups and channels via usernames: clients can also assign multiple Fragment &raquo; collectible usernames to accounts, supergroups and channels they own; Fragment &raquo; also allows purchasing phone number collectibles that can be used to register Telegram accounts."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:18 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4309",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Collectibles\n\nTelegram users can make it easy for others to contact them or find their public groups and channels via [usernames](https://telegram.org/faq#usernames-and-t-me): clients can also assign multiple [Fragment\u00a0\u00bb](https://fragment.com/) **collectible usernames** to accounts, supergroups and channels they own; [Fragment\u00a0\u00bb](https://fragment.com/) also allows purchasing phone number collectibles that can be used to register Telegram accounts.\n\n### [](#collectible-usernames)Collectible usernames\n\nSchema:\n\n```\nusername#b4073647 flags:# editable:flags.0?true active:flags.1?true username:string = Username;\n\nupdateUserName#a7848924 user_id:long first_name:string last_name:string usernames:Vector<Username> = Update;\n\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\nchannel#fe4478bd flags:# creator:flags.0?true left:flags.2?true broadcast:flags.5?true verified:flags.7?true megagroup:flags.8?true restricted:flags.9?true signatures:flags.11?true min:flags.12?true scam:flags.19?true has_link:flags.20?true has_geo:flags.21?true slowmode_enabled:flags.22?true call_active:flags.23?true call_not_empty:flags.24?true fake:flags.25?true gigagroup:flags.26?true noforwards:flags.27?true join_to_send:flags.28?true join_request:flags.29?true forum:flags.30?true flags2:# stories_hidden:flags2.1?true stories_hidden_min:flags2.2?true stories_unavailable:flags2.3?true signature_profiles:flags2.12?true id:long access_hash:flags.13?long title:string username:flags.6?string photo:ChatPhoto date:int restriction_reason:flags.9?Vector<RestrictionReason> admin_rights:flags.14?ChatAdminRights banned_rights:flags.15?ChatBannedRights default_banned_rights:flags.18?ChatBannedRights participants_count:flags.17?int usernames:flags2.0?Vector<Username> stories_max_id:flags2.4?int color:flags2.7?PeerColor profile_color:flags2.8?PeerColor emoji_status:flags2.9?EmojiStatus level:flags2.10?int subscription_until_date:flags2.11?int = Chat;\n\n---functions---\n\naccount.toggleUsername#58d6b376 username:string active:Bool = Bool;\naccount.reorderUsernames#ef500eab order:Vector<string> = Bool;\n\nbots.reorderUsernames#9709b1c2 bot:InputUser order:Vector<string> = Bool;\nbots.toggleUsername#053ca973 bot:InputUser username:string active:Bool = Bool;\n\nchannels.toggleUsername#50f24105 channel:InputChannel username:string active:Bool = Bool;\nchannels.reorderUsernames#b45ced1d channel:InputChannel order:Vector<string> = Bool;\nchannels.deactivateAllUsernames#0a245dd3 channel:InputChannel = Bool;\n```\n\nCollectible usernames work just like basic [@usernames](https://t.me/username), they appear in Global Search results and have [deep links\u00a0\u00bb](https://core.telegram.org/api/links#public-username-links), just like basic usernames.\n\nThe ownership of collectible usernames is secured by TON, a fast and scalable blockchain network. They can be bought and sold through the [Fragment platform\u00a0\u00bb](https://fragment.com/), giving a simple and secure way to acquire and exchange valuable Telegram domains.\n\nOn the Fragment platform, clients may associate or dissociate purchased collectible usernames either to their Telegram account, or to a bot/channel/supergroup they own.\n\nIf any collectible username is associated to an account, channel or supergroup, [user](https://core.telegram.org/constructor/user).`username` and [channel](https://core.telegram.org/constructor/channel).`username` won't be set, and [user](https://core.telegram.org/constructor/user).`usernames` and [channel](https://core.telegram.org/constructor/channel).`usernames` will be set, instead: these fields contain an array of [username](https://core.telegram.org/constructor/username) constructors, which indicate whether a certain username is a basic username (`editable` is set) or a collectible username (`editable` is not set); and whether a collectible username is `active` or not.  \nThe first username in the `usernames` vector must be shown in-UI as the main username.\n\nImmediately after association, a username is marked as not `active` (i.e. only the owner can see it in the `usernames` list): use [account.toggleUsername](https://core.telegram.org/method/account.toggleUsername), [bots.toggleUsername](https://core.telegram.org/method/bots.toggleUsername) or [channels.toggleUsername](https://core.telegram.org/method/channels.toggleUsername) to mark it as active.  \nNote that you can't mark as inactive the basic (non-collectible) username, if any.\n\n[channels.deactivateAllUsernames](https://core.telegram.org/method/channels.deactivateAllUsernames) may also be used to mark as inactive all collectible usernames associated to a certain supergroup or channel: useful for example when making a group or channel private, by first invoking [channels.updateUsername](https://core.telegram.org/method/channels.updateUsername) with an empty username to remove the editable username (if present), and then invoking this method to remove all associated collectible usernames.\n\nUse [account.reorderUsernames](https://core.telegram.org/method/account.reorderUsernames)/[bots.reorderUsernames](https://core.telegram.org/method/bots.reorderUsernames)/[channels.reorderUsernames](https://core.telegram.org/method/channels.reorderUsernames) to change the order of the usernames associated to an account, channel or supergroup: all currently active usernames must be specified.\n\n### [](#collectible-phone-numbers)Collectible phone numbers\n\n[Fragment](https://fragment.com/) collectible phone numbers can only be used to create Telegram accounts, using the usual [sign up/login flow\u00a0\u00bb](https://core.telegram.org/api/auth).\n\n### [](#fetching-info-about-fragment-collectibles)Fetching info about Fragment collectibles\n\nSchema:\n\n```\ninputCollectibleUsername#e39460a9 username:string = InputCollectible;\ninputCollectiblePhone#a2e214a4 phone:string = InputCollectible;\n\nfragment.collectibleInfo#6ebdff91 purchase_date:int currency:string amount:long crypto_currency:string crypto_amount:long url:string = fragment.CollectibleInfo;\n\n---functions---\n\nfragment.getCollectibleInfo#be1e85ba collectible:InputCollectible = fragment.CollectibleInfo;\n```\n\n[fragment.getCollectibleInfo](https://core.telegram.org/method/fragment.getCollectibleInfo) may be used to fetch info about [Fragment](https://fragment.com/) collectible owned by us or other users (i.e. the purchase date & price).\n\nThe collectible must be visible to the current user, for example it can be a Fragment user/phone number collectible we own, or a Fragment username that another user has enabled on their account, or another user's Fragment phone number that we can see thanks to the owner's [privacy settings](https://core.telegram.org/api/privacy).",
    "url": "https://core.telegram.org/api/fragment"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/business",
      "title": "Business",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Business"
        },
        {
          "property": "og:description",
          "content": "Users can turn their Telegram account into a business account, gaining access to business features such as opening hours, location, quick replies, automated messages, custom start pages, chatbot support, and more."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:19 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "14547",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Business\n\nUsers can turn their Telegram account into a **business account**, gaining access to business features such as opening hours, location, quick replies, automated messages, custom start pages, chatbot support, and more.\n\nFor the moment, all Telegram Business features are available for free to [Premium](https://core.telegram.org/api/premium) subscribers.\n\n### [](#opening-hours)Opening hours\n\n```\ntimezone#ff9289f5 id:string name:string utc_offset:int = Timezone;\n\nhelp.timezonesListNotModified#970708cc = help.TimezonesList;\nhelp.timezonesList#7b74ed71 timezones:Vector<Timezone> hash:int = help.TimezonesList;\n\n\nbusinessWeeklyOpen#120b1ab9 start_minute:int end_minute:int = BusinessWeeklyOpen;\n\nbusinessWorkHours#8c92b098 flags:# open_now:flags.0?true timezone_id:string weekly_open:Vector<BusinessWeeklyOpen> = BusinessWorkHours;\n\nuserFull#979d2376 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true voice_messages_forbidden:flags.20?true translations_disabled:flags.23?true stories_pinned_available:flags.26?true blocked_my_stories_from:flags.27?true wallpaper_overridden:flags.28?true contact_require_premium:flags.29?true read_dates_private:flags.30?true flags2:# sponsored_enabled:flags2.7?true can_view_revenue:flags2.9?true bot_can_manage_emoji_status:flags2.10?true id:long about:flags.1?string settings:PeerSettings personal_photo:flags.21?Photo profile_photo:flags.2?Photo fallback_photo:flags.22?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int ttl_period:flags.14?int theme_emoticon:flags.15?string private_forward_name:flags.16?string bot_group_admin_rights:flags.17?ChatAdminRights bot_broadcast_admin_rights:flags.18?ChatAdminRights premium_gifts:flags.19?Vector<PremiumGiftOption> wallpaper:flags.24?WallPaper stories:flags.25?PeerStories business_work_hours:flags2.0?BusinessWorkHours business_location:flags2.1?BusinessLocation business_greeting_message:flags2.2?BusinessGreetingMessage business_away_message:flags2.3?BusinessAwayMessage business_intro:flags2.4?BusinessIntro birthday:flags2.5?Birthday personal_channel_id:flags2.6?long personal_channel_message:flags2.6?int stargifts_count:flags2.8?int starref_program:flags2.11?StarRefProgram = UserFull;\n\n---functions---\n\naccount.updateBusinessWorkHours#4b00e066 flags:# business_work_hours:flags.0?BusinessWorkHours = Bool;\n\nhelp.getTimezonesList#49b30240 hash:int = help.TimezonesList;\n```\n\nBusinesses can display their hours of operation; this info will be contained in [userFull](https://core.telegram.org/constructor/userFull).`business_work_hours`.  \nTo set this information use [account.updateBusinessWorkHours](https://core.telegram.org/method/account.updateBusinessWorkHours), passing a [businessWorkHours](https://core.telegram.org/constructor/businessWorkHours) constructor with:\n\n*   `weekly_open` - A list of time intervals (max 28) represented by [businessWeeklyOpen](https://core.telegram.org/constructor/businessWeeklyOpen), indicating the opening hours of their business.  \n    The time intervals in [businessWeeklyOpen](https://core.telegram.org/constructor/businessWeeklyOpen).`start/end_minute` are specified in minutes of the week.  \n    For example, `61` is `Monday 01:01`, but can also be `7*24*60+61` for `end_minute` (see below).\n    \n    When modifying these values, the client should validate them with the following actions (executed in the specified order):\n    \n    *   Sort intervals by `start_minute` before uploading, also to facilitate client-side validation.\n        \n    *   All intervals that do not satisfy the following conditions must be removed:\n        \n        *   `end_minute - start_minute` must be `>= 1`\n        *   `start_minute` must range from `0` to `7*24*60` inclusively\n        *   `end_minute` must range from `1` to `8*24*60` inclusively (`8` and not `7` because this allows to specify intervals that, for example, start on `Sunday 21:00` and end on `Monday 04:00` (`6*24*60+21*60` to `7*24*60+4*60`) without violating the first condition)\n    *   Intersecting intervals and intervals that start and end on the same minute of the day must be merged into a single interval before uploading, for example:\n        \n        *   `Monday 00:00-Monday 00:01` and `Monday 00:01-Monday 00:10` => `Monday 00:00-Monday 00:10`\n        *   `Monday 00:00-Monday 00:05` and `Monday 00:01-Monday 00:10` => `Monday 00:00-Monday 00:10`\n        *   `Monday 00:00-Monday 01:00` and `Monday 00:01-Monday 00:10` => `Monday 00:00-Monday 01:00`\n        *   `Sunday 16:00-Monday 01:00` and `Monday 01:00-Monday 03:00` => `Sunday 16:00-Monday 03:00`\n        \n        Note that in the last example, the first interval ended on `7*60*24+60` but the second interval started on `60`, and they were still merged (i.e., all intervals must be checked modulo `7*24*60`).\n        \n        There is a special case where two such intersecting/adjacent intervals must still generate two distinct intervals instead of one, when:\n        \n        *   The starting minute of the original first interval is `<= 7*24*60`\n        *   AND the ending minute of the original second interval is `>= 1*24*60`.\n        \n        This special case cannot be merged into a single interval, as the resulting `end_minute` would be `>= 8*24*60`.  \n        Thus, the merge result of this special intersection case is two intervals, the first ending on `7*24*60` the second starting at `0`, splitting the first interval even if it originally spanned two or more days including Sunday and Monday.\n        \n        Examples:\n        \n        *   `Sunday 16:00-Monday 01:00` and `Monday 00:30-Thursday 03:00` => `Sunday 16:00-Sunday 23:59` and `Monday 00:00-Thursday 03:00`\n        *   `Sunday 16:00-Monday 01:00` and `Monday 01:00-Thursday 03:00` => `Sunday 16:00-Sunday 23:59` and `Monday 00:00-Thursday 03:00`\n    *   If `end_minute - start_minute` is `> 7*24*60`, `end_minute` must be set equal to `start_minute + 7*24*60` (there must be no intervals longer than 1 week).\n        \n    *   Recursively repeat the last two steps until no more changes are made.\n        \n\n*   `timezone_id` - An ID of one of the timezones returned by [help.getTimezonesList](https://core.telegram.org/method/help.getTimezonesList).  \n    The timezone ID is contained [timezone](https://core.telegram.org/constructor/timezone).`id`, a human-readable, localized name of the timezone is available in [timezone](https://core.telegram.org/constructor/timezone).`name` and the [timezone](https://core.telegram.org/constructor/timezone).`utc_offset` field contains the UTC offset in seconds, which may be displayed in hh:mm format by the client together with the human-readable name (i.e. `$name UTC -01:00`).\n*   `open_now` - Ignored when passed by the client, only populated by the server in [userFull](https://core.telegram.org/constructor/userFull).`business_work_hours`, indicating whether the business is currently open according to the current time and the values in `weekly_open` and `timezone`.\n\nChanging the opening hours will emit an [updateUser](https://core.telegram.org/constructor/updateUser).\n\nTo remove all info about opening hours, invoke [account.updateBusinessWorkHours](https://core.telegram.org/method/account.updateBusinessWorkHours) without populating the `business_work_hours` flag.\n\n### [](#location)Location\n\n```\nbusinessLocation#ac5c1af7 flags:# geo_point:flags.0?GeoPoint address:string = BusinessLocation;\n\nuserFull#979d2376 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true voice_messages_forbidden:flags.20?true translations_disabled:flags.23?true stories_pinned_available:flags.26?true blocked_my_stories_from:flags.27?true wallpaper_overridden:flags.28?true contact_require_premium:flags.29?true read_dates_private:flags.30?true flags2:# sponsored_enabled:flags2.7?true can_view_revenue:flags2.9?true bot_can_manage_emoji_status:flags2.10?true id:long about:flags.1?string settings:PeerSettings personal_photo:flags.21?Photo profile_photo:flags.2?Photo fallback_photo:flags.22?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int ttl_period:flags.14?int theme_emoticon:flags.15?string private_forward_name:flags.16?string bot_group_admin_rights:flags.17?ChatAdminRights bot_broadcast_admin_rights:flags.18?ChatAdminRights premium_gifts:flags.19?Vector<PremiumGiftOption> wallpaper:flags.24?WallPaper stories:flags.25?PeerStories business_work_hours:flags2.0?BusinessWorkHours business_location:flags2.1?BusinessLocation business_greeting_message:flags2.2?BusinessGreetingMessage business_away_message:flags2.3?BusinessAwayMessage business_intro:flags2.4?BusinessIntro birthday:flags2.5?Birthday personal_channel_id:flags2.6?long personal_channel_message:flags2.6?int stargifts_count:flags2.8?int starref_program:flags2.11?StarRefProgram = UserFull;\n\n---functions---\n\naccount.updateBusinessLocation#9e6b131a flags:# geo_point:flags.1?InputGeoPoint address:flags.0?string = Bool;\n```\n\nBusinesses may advertise their location using [account.updateBusinessLocation](https://core.telegram.org/method/account.updateBusinessLocation); this information is then returned to users in [userFull](https://core.telegram.org/constructor/userFull).`business_location`.\n\nThe method takes two parameters:\n\n*   `address` - Mandatory when setting/updating the location, contains a textual description of the address (max 96 UTF-8 chars).\n*   `geo_point` - Optional, contains a set of geographical coordinates.\n\nTo remove business location information invoke the method without setting any of the parameters.\n\nIf a `geo_point` is set, the business' location will also be advertised to geographically close users using the nearby users feature, [as described here\u00a0\u00bb](https://core.telegram.org/api/nearby/#fetching-nearby-users-and-geogroups).\n\nNote that even if just the `address` is set (with or without a `geo_point`), the current geolocation of the user may not be changed using [contacts.getLocated](https://core.telegram.org/method/contacts.getLocated) method (i.e. for the [nearby users feature](https://core.telegram.org/api/nearby#advertising-our-current-location)): it will return a `BUSINESS_ADDRESS_ACTIVE` error, indicating that the location may only be changed (or removed) using [account.updateBusinessLocation\u00a0\u00bb](https://core.telegram.org/method/account.updateBusinessLocation).\n\nChanging the location will emit an [updateUser](https://core.telegram.org/constructor/updateUser).\n\n### [](#quick-reply-shortcuts)Quick reply shortcuts\n\nTelegram Business allows you to create **quick replies**.  \nQuick replies are shortcuts for sending preset messages that may contain several messages and support text formatting, links, stickers, media, and files.\n\nA quick reply shortcut has a name (shown to the user), a numeric ID and a set of associated [message](https://core.telegram.org/constructor/message)s.\n\n#### [](#fetch-existing-quick-reply-shortcuts)Fetch existing quick reply shortcuts\n\n```\nmessage#94345242 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true from_scheduled:flags.18?true legacy:flags.19?true edit_hide:flags.21?true pinned:flags.24?true noforwards:flags.26?true invert_media:flags.27?true flags2:# offline:flags2.1?true video_processing_pending:flags2.4?true id:int from_id:flags.8?Peer from_boosts_applied:flags.29?int peer_id:Peer saved_peer_id:flags.28?Peer fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?long via_business_bot_id:flags2.0?long reply_to:flags.3?MessageReplyHeader date:int message:string media:flags.9?MessageMedia reply_markup:flags.6?ReplyMarkup entities:flags.7?Vector<MessageEntity> views:flags.10?int forwards:flags.10?int replies:flags.23?MessageReplies edit_date:flags.15?int post_author:flags.16?string grouped_id:flags.17?long reactions:flags.20?MessageReactions restriction_reason:flags.22?Vector<RestrictionReason> ttl_period:flags.25?int quick_reply_shortcut_id:flags.30?int effect:flags2.2?long factcheck:flags2.3?FactCheck = Message;\n\nquickReply#697102b shortcut_id:int shortcut:string top_message:int count:int = QuickReply;\n\nmessages.quickReplies#c68d6695 quick_replies:Vector<QuickReply> messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.QuickReplies;\nmessages.quickRepliesNotModified#5f91eb5b = messages.QuickReplies;\n\n---functions---\n\nmessages.getQuickReplies#d483f2a8 hash:long = messages.QuickReplies;\nmessages.getQuickReplyMessages#94a495c3 flags:# shortcut_id:int id:flags.0?Vector<int> hash:long = messages.Messages;\n```\n\nTo fetch basic info about all existing quick reply shortcuts, use [messages.getQuickReplies](https://core.telegram.org/method/messages.getQuickReplies).\n\nThe method will return the ID and name of each shortcut, along with the number of messages in the shortcut and the ID of (only) the last message of each shortcut (along with the message itself in `messages`).\n\nNote that the `hash` is used for caching, and is generated **not** by using the message IDs, but rather the following set of integers, passed to the [usual hashing algorithm](https://core.telegram.org/api/offsets#hash-generation).\n\n```\nhash_ints = [];\nforeach (quick_replies as quick_reply) {\n  hash_ints[] = quick_reply.shortcut_id;\n  hash_ints[] = hexdec(substr(md5(quick_reply.shortcut), 0, 16));\n  hash_ints[] = quick_reply.top_message;\n  hash_ints[] = top_message.edit_date || 0;\n}\n```\n\nThe method will return [messages.quickRepliesNotModified](https://core.telegram.org/constructor/messages.quickRepliesNotModified) if the passed hash is equal to the server-side hash, meaning that the order, names and last messages of the quick replies haven't changed.\n\nEditing some intermediate message in a quick reply will not change the hash, which is why [messages.getQuickReplyMessages](https://core.telegram.org/method/messages.getQuickReplyMessages) should be used to fetch (a subset or all) messages in a quick reply shortcut, and its hash is generated as follows:\n\n```\nhash_ints = [];\nforeach (messages as message) {\n  hash_ints[] = message.id;\n  hash_ints[] = message.edit_date || 0;\n}\n```\n\n#### [](#adding-a-message-to-a-quick-reply-shortcut)Adding a message to a quick reply shortcut\n\n```\ninputQuickReplyShortcut#24596d41 shortcut:string = InputQuickReplyShortcut;\ninputQuickReplyShortcutId#1190cf1 shortcut_id:int = InputQuickReplyShortcut;\n\nmessage#94345242 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true from_scheduled:flags.18?true legacy:flags.19?true edit_hide:flags.21?true pinned:flags.24?true noforwards:flags.26?true invert_media:flags.27?true flags2:# offline:flags2.1?true video_processing_pending:flags2.4?true id:int from_id:flags.8?Peer from_boosts_applied:flags.29?int peer_id:Peer saved_peer_id:flags.28?Peer fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?long via_business_bot_id:flags2.0?long reply_to:flags.3?MessageReplyHeader date:int message:string media:flags.9?MessageMedia reply_markup:flags.6?ReplyMarkup entities:flags.7?Vector<MessageEntity> views:flags.10?int forwards:flags.10?int replies:flags.23?MessageReplies edit_date:flags.15?int post_author:flags.16?string grouped_id:flags.17?long reactions:flags.20?MessageReactions restriction_reason:flags.22?Vector<RestrictionReason> ttl_period:flags.25?int quick_reply_shortcut_id:flags.30?int effect:flags2.2?long factcheck:flags2.3?FactCheck = Message;\n\nquickReply#697102b shortcut_id:int shortcut:string top_message:int count:int = QuickReply;\n\nupdateNewQuickReply#f53da717 quick_reply:QuickReply = Update;\nupdateQuickReplyMessage#3e050d0f message:Message = Update;\n\n---functions---\n\nmessages.sendMessage#983f9745 flags:# no_webpage:flags.1?true silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\nmessages.sendMedia#7852834e flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\nmessages.sendMultiMedia#37b74355 flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo multi_media:Vector<InputSingleMedia> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\nmessages.sendInlineBotResult#3ebee86a flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true hide_via:flags.11?true peer:InputPeer reply_to:flags.0?InputReplyTo random_id:long query_id:long id:string schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut = Updates;\nmessages.forwardMessages#d5039208 flags:# silent:flags.5?true background:flags.6?true with_my_score:flags.8?true drop_author:flags.11?true drop_media_captions:flags.12?true noforwards:flags.14?true allow_paid_floodskip:flags.19?true from_peer:InputPeer id:Vector<int> random_id:Vector<long> to_peer:InputPeer top_msg_id:flags.9?int schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut = Updates;\n\nmessages.checkQuickReplyShortcut#f1d0fbd3 shortcut:string = Bool;\n```\n\nTo add a message to a quick reply shortcut, use [messages.sendMessage](https://core.telegram.org/method/messages.sendMessage), [messages.sendMedia](https://core.telegram.org/method/messages.sendMedia), [messages.sendMultiMedia](https://core.telegram.org/method/messages.sendMultiMedia), [messages.sendInlineBotResult](https://core.telegram.org/method/messages.sendInlineBotResult) or [messages.forwardMessages](https://core.telegram.org/method/messages.forwardMessages) with `peer=`[inputPeerSelf](https://core.telegram.org/constructor/inputPeerSelf), populating the `quick_reply_shortcut` flag with an [InputQuickReplyShortcut](https://core.telegram.org/type/InputQuickReplyShortcut) constructor.\n\nThe [InputQuickReplyShortcut](https://core.telegram.org/type/InputQuickReplyShortcut) constructor can be either:\n\n*   [inputQuickReplyShortcut](https://core.telegram.org/constructor/inputQuickReplyShortcut) to use the shortcut name (used to create a new shortcut)\n*   [inputQuickReplyShortcut](https://core.telegram.org/constructor/inputQuickReplyShortcut) to use the shortcut ID (used to edit an existing shortcut)\n\nIf the specified quick reply does not exist, it will be created when invoking the above methods, emitting an additional [updateNewQuickReply](https://core.telegram.org/constructor/updateNewQuickReply) to all logged-in sessions.\n\nThe numeric ID of the (newly created or existing) shortcut will be contained in the `quick_reply_shortcut_id` field of the [message](https://core.telegram.org/constructor/message)s contained in the [updateQuickReplyMessage](https://core.telegram.org/constructor/updateQuickReplyMessage) updates returned by invoking the above methods.  \nThe returned messages will use a common message `id` sequence, unrelated to any other message ID sequence used in API.\n\nA maximum of [appConfig.`quick_replies_limit`](https://core.telegram.org/api/config#quick-replies-limit) shortcuts may be created, otherwise a `400 QUICK_REPLIES_TOO_MUCH` error will be emitted by the methods above.\n\nEach shortcut can contain a maximum of [appConfig.`quick_reply_messages_limit`](https://core.telegram.org/api/config#quick-reply-messages-limit) messages, otherwise a `400 REPLY_MESSAGES_TOO_MUCH` error will be emitted by the methods above.\n\nMake sure to invoke [messages.checkQuickReplyShortcut](https://core.telegram.org/method/messages.checkQuickReplyShortcut) passing the shortcut name before offering the user the choice to add a message to a quick reply shortcut, to make sure that none of the limits specified above were reached.\n\n#### [](#sending-a-quick-reply-shortcut)Sending a quick reply shortcut\n\n```\n---functions---\n\nmessages.sendQuickReplyMessages#6c750de1 peer:InputPeer shortcut_id:int id:Vector<int> random_id:Vector<long> = Updates;\n```\n\nTo send a quick reply shortcut to a user, use [messages.sendQuickReplyMessages](https://core.telegram.org/method/messages.sendQuickReplyMessages), passing the shortcut ID.\n\nQuick replies may only be sent by users, in private chats with other users. The UI used to select quick replies should be similar to the one used for [bot commands](https://core.telegram.org/api/bots/commands), using the shortcut name instead of the bot command name.\n\nYou may specify a subset of the messages in the `id` field to send only some of the shortcut messages (if empty, defaults to all of them).\n\n#### [](#editing-a-quick-reply-shortcut-message)Editing a quick reply shortcut message\n\n```\nupdateQuickReplyMessage#3e050d0f message:Message = Update;\n\n---functions---\n\nmessages.editMessage#dfd14005 flags:# no_webpage:flags.1?true invert_media:flags.16?true peer:InputPeer id:int message:flags.11?string media:flags.14?InputMedia reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.15?int quick_reply_shortcut_id:flags.17?int = Updates;\n```\n\nUse [messages.editMessage](https://core.telegram.org/method/messages.editMessage) to edit a message in a quick reply shortcut, passing the message ID in `id` and the shortcut ID in `quick_reply_shortcut_id`.\n\nThis will emit a [updateQuickReplyMessage](https://core.telegram.org/constructor/updateQuickReplyMessage) update.\n\n#### [](#deleting-a-quick-reply-shortcut-message)Deleting a quick reply shortcut message\n\n```\nupdateDeleteQuickReplyMessages#566fe7cd shortcut_id:int messages:Vector<int> = Update;\n\n---functions---\n\nmessages.deleteQuickReplyMessages#e105e910 shortcut_id:int id:Vector<int> = Updates;\n```\n\nTo delete one or more messages from a quick reply shortcut, use [messages.deleteQuickReplyMessages](https://core.telegram.org/method/messages.deleteQuickReplyMessages), passing the shortcut ID, and the list of message IDs to delete.  \nThis will also emit an [updateDeleteQuickReplyMessages](https://core.telegram.org/constructor/updateDeleteQuickReplyMessages) update.\n\n#### [](#renaming-a-quick-reply-shortcut)Renaming a quick reply shortcut\n\n```\nupdateQuickReplies#f9470ab2 quick_replies:Vector<QuickReply> = Update;\n\n---functions---\n\nmessages.editQuickReplyShortcut#5c003cef shortcut_id:int shortcut:string = Bool;\n```\n\nUse [messages.editQuickReplyShortcut](https://core.telegram.org/method/messages.editQuickReplyShortcut) to rename a shortcut.  \nThis will emit an [updateQuickReplies](https://core.telegram.org/constructor/updateQuickReplies) update to other logged-in sessions.\n\n#### [](#reordering-quick-reply-shortcuts)Reordering quick reply shortcuts\n\n```\nupdateQuickReplies#f9470ab2 quick_replies:Vector<QuickReply> = Update;\n\n---functions---\n\nmessages.reorderQuickReplies#60331907 order:Vector<int> = Bool;\n```\n\nUse [messages.reorderQuickReplies](https://core.telegram.org/method/messages.reorderQuickReplies) to reorder quick reply shortcuts (not the messages within them); pass in `order` the IDs of all created quick reply shortcuts, in the desired order.  \nThis will emit an [updateQuickReplies](https://core.telegram.org/constructor/updateQuickReplies) update to other logged-in sessions.\n\n#### [](#deleting-a-quick-reply-shortcut)Deleting a quick reply shortcut\n\n```\nupdateDeleteQuickReply#53e6f1ec shortcut_id:int = Update;\n\n---functions---\n\nmessages.deleteQuickReplyShortcut#3cc04740 shortcut_id:int = Bool;\n```\n\nTo completely delete a quick reply shortcut, use [messages.deleteQuickReplyShortcut](https://core.telegram.org/method/messages.deleteQuickReplyShortcut).  \nThis will also emit an [updateDeleteQuickReply](https://core.telegram.org/constructor/updateDeleteQuickReply) update to other logged-in sessions (and _no_ [updateDeleteQuickReplyMessages](https://core.telegram.org/constructor/updateDeleteQuickReplyMessages) updates, even if all the messages in the shortcut are also deleted by this method).\n\n### [](#greeting-messages)Greeting messages\n\n```\ninputBusinessRecipients#6f8b32aa flags:# existing_chats:flags.0?true new_chats:flags.1?true contacts:flags.2?true non_contacts:flags.3?true exclude_selected:flags.5?true users:flags.4?Vector<InputUser> = InputBusinessRecipients;\n\ninputBusinessGreetingMessage#194cb3b shortcut_id:int recipients:InputBusinessRecipients no_activity_days:int = InputBusinessGreetingMessage;\n\nbusinessRecipients#21108ff7 flags:# existing_chats:flags.0?true new_chats:flags.1?true contacts:flags.2?true non_contacts:flags.3?true exclude_selected:flags.5?true users:flags.4?Vector<long> = BusinessRecipients;\n\nbusinessGreetingMessage#e519abab shortcut_id:int recipients:BusinessRecipients no_activity_days:int = BusinessGreetingMessage;\n\nuserFull#979d2376 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true voice_messages_forbidden:flags.20?true translations_disabled:flags.23?true stories_pinned_available:flags.26?true blocked_my_stories_from:flags.27?true wallpaper_overridden:flags.28?true contact_require_premium:flags.29?true read_dates_private:flags.30?true flags2:# sponsored_enabled:flags2.7?true can_view_revenue:flags2.9?true bot_can_manage_emoji_status:flags2.10?true id:long about:flags.1?string settings:PeerSettings personal_photo:flags.21?Photo profile_photo:flags.2?Photo fallback_photo:flags.22?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int ttl_period:flags.14?int theme_emoticon:flags.15?string private_forward_name:flags.16?string bot_group_admin_rights:flags.17?ChatAdminRights bot_broadcast_admin_rights:flags.18?ChatAdminRights premium_gifts:flags.19?Vector<PremiumGiftOption> wallpaper:flags.24?WallPaper stories:flags.25?PeerStories business_work_hours:flags2.0?BusinessWorkHours business_location:flags2.1?BusinessLocation business_greeting_message:flags2.2?BusinessGreetingMessage business_away_message:flags2.3?BusinessAwayMessage business_intro:flags2.4?BusinessIntro birthday:flags2.5?Birthday personal_channel_id:flags2.6?long personal_channel_message:flags2.6?int stargifts_count:flags2.8?int starref_program:flags2.11?StarRefProgram = UserFull;\n\n---functions---\n\naccount.updateBusinessGreetingMessage#66cdafc4 flags:# message:flags.0?InputBusinessGreetingMessage = Bool;\n```\n\nTelegram Business allows to configure a set of greeting messages, automatically sent to new users writing to us in private for the first time, or after a certain inactivity period.\n\nUse [account.updateBusinessGreetingMessage](https://core.telegram.org/method/account.updateBusinessGreetingMessage) to set a (list of) greeting messages in `message`; to disable greetings, call the method without populating the `message` field.\n\nIf populated, the `message` field must contain a [inputBusinessGreetingMessage](https://core.telegram.org/constructor/inputBusinessGreetingMessage), see [the constructor page\u00a0\u00bb](https://core.telegram.org/constructor/inputBusinessGreetingMessage) for a description of its contents and the length limits for the intro title and description.\n\nThe currently configured business greeting can be fetched by the current user through [userFull](https://core.telegram.org/constructor/userFull).`business_greeting_message`, represented by a [businessGreetingMessage constructor\u00a0\u00bb](https://core.telegram.org/constructor/businessGreetingMessage), equivalent to the input counterpart.\n\n### [](#away-messages)Away messages\n\n```\ninputBusinessRecipients#6f8b32aa flags:# existing_chats:flags.0?true new_chats:flags.1?true contacts:flags.2?true non_contacts:flags.3?true exclude_selected:flags.5?true users:flags.4?Vector<InputUser> = InputBusinessRecipients;\n\nbusinessAwayMessageScheduleAlways#c9b9e2b9 = BusinessAwayMessageSchedule;\nbusinessAwayMessageScheduleOutsideWorkHours#c3f2f501 = BusinessAwayMessageSchedule;\nbusinessAwayMessageScheduleCustom#cc4d9ecc start_date:int end_date:int = BusinessAwayMessageSchedule;\n\ninputBusinessAwayMessage#832175e0 flags:# offline_only:flags.0?true shortcut_id:int schedule:BusinessAwayMessageSchedule recipients:InputBusinessRecipients = InputBusinessAwayMessage;\n\nbusinessRecipients#21108ff7 flags:# existing_chats:flags.0?true new_chats:flags.1?true contacts:flags.2?true non_contacts:flags.3?true exclude_selected:flags.5?true users:flags.4?Vector<long> = BusinessRecipients;\n\nbusinessAwayMessage#ef156a5c flags:# offline_only:flags.0?true shortcut_id:int schedule:BusinessAwayMessageSchedule recipients:BusinessRecipients = BusinessAwayMessage;\n\nuserFull#979d2376 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true voice_messages_forbidden:flags.20?true translations_disabled:flags.23?true stories_pinned_available:flags.26?true blocked_my_stories_from:flags.27?true wallpaper_overridden:flags.28?true contact_require_premium:flags.29?true read_dates_private:flags.30?true flags2:# sponsored_enabled:flags2.7?true can_view_revenue:flags2.9?true bot_can_manage_emoji_status:flags2.10?true id:long about:flags.1?string settings:PeerSettings personal_photo:flags.21?Photo profile_photo:flags.2?Photo fallback_photo:flags.22?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int ttl_period:flags.14?int theme_emoticon:flags.15?string private_forward_name:flags.16?string bot_group_admin_rights:flags.17?ChatAdminRights bot_broadcast_admin_rights:flags.18?ChatAdminRights premium_gifts:flags.19?Vector<PremiumGiftOption> wallpaper:flags.24?WallPaper stories:flags.25?PeerStories business_work_hours:flags2.0?BusinessWorkHours business_location:flags2.1?BusinessLocation business_greeting_message:flags2.2?BusinessGreetingMessage business_away_message:flags2.3?BusinessAwayMessage business_intro:flags2.4?BusinessIntro birthday:flags2.5?Birthday personal_channel_id:flags2.6?long personal_channel_message:flags2.6?int stargifts_count:flags2.8?int starref_program:flags2.11?StarRefProgram = UserFull;\n\n---functions---\n\naccount.updateBusinessAwayMessage#a26a7fa5 flags:# message:flags.0?InputBusinessAwayMessage = Bool;\n```\n\nTelegram Business allows to configure a set of \"away\" messages, automatically sent to users writing to us when we're offline, during closing hours, while we're on vacation, or in some other custom time period when we cannot immediately answer to the user.\n\nUse [account.updateBusinessAwayMessage](https://core.telegram.org/method/account.updateBusinessAwayMessage) to set a (list of) away messages in `message`; to disable greetings, call the method without populating the `message` field.\n\nIf populated, the `message` field must contain a [inputBusinessAwayMessage](https://core.telegram.org/constructor/inputBusinessAwayMessage), see [the constructor page\u00a0\u00bb](https://core.telegram.org/constructor/inputBusinessAwayMessage) for a description of its contents.\n\nThe currently configured business away message can be fetched by the current user through [userFull](https://core.telegram.org/constructor/userFull).`business_away_message`, represented by a [businessAwayMessage constructor\u00a0\u00bb](https://core.telegram.org/constructor/businessAwayMessage), equivalent to the input counterpart.\n\n### [](#business-introduction)Business introduction\n\n```\ninputBusinessIntro#09c469cd flags:# title:string description:string sticker:flags.0?InputDocument = InputBusinessIntro;\n\nbusinessIntro#5a0a066d flags:# title:string description:string sticker:flags.0?Document = BusinessIntro;\n\nuserFull#979d2376 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true voice_messages_forbidden:flags.20?true translations_disabled:flags.23?true stories_pinned_available:flags.26?true blocked_my_stories_from:flags.27?true wallpaper_overridden:flags.28?true contact_require_premium:flags.29?true read_dates_private:flags.30?true flags2:# sponsored_enabled:flags2.7?true can_view_revenue:flags2.9?true bot_can_manage_emoji_status:flags2.10?true id:long about:flags.1?string settings:PeerSettings personal_photo:flags.21?Photo profile_photo:flags.2?Photo fallback_photo:flags.22?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int ttl_period:flags.14?int theme_emoticon:flags.15?string private_forward_name:flags.16?string bot_group_admin_rights:flags.17?ChatAdminRights bot_broadcast_admin_rights:flags.18?ChatAdminRights premium_gifts:flags.19?Vector<PremiumGiftOption> wallpaper:flags.24?WallPaper stories:flags.25?PeerStories business_work_hours:flags2.0?BusinessWorkHours business_location:flags2.1?BusinessLocation business_greeting_message:flags2.2?BusinessGreetingMessage business_away_message:flags2.3?BusinessAwayMessage business_intro:flags2.4?BusinessIntro birthday:flags2.5?Birthday personal_channel_id:flags2.6?long personal_channel_message:flags2.6?int stargifts_count:flags2.8?int starref_program:flags2.11?StarRefProgram = UserFull;\n\n---functions---\n\naccount.updateBusinessIntro#a614d034 flags:# intro:flags.0?InputBusinessIntro = Bool;\n```\n\nTelegram Business allows to configure the message and sticker of the [profile introduction\u00a0\u00bb](https://core.telegram.org/api/profile#introduction), shown to new users that don't have a private chat with us.\n\nUse [account.updateBusinessIntro](https://core.telegram.org/method/account.updateBusinessIntro) to set a custom business introduction; invoke the same method without setting the `intro` flag to remove the custom business introduction, defaulting to a randomly-chosen introduction message and sticker (see [here\u00a0\u00bb](https://core.telegram.org/api/profile) for more info on default profile introductions).\n\nChanging the business introduction will emit an [updateUser](https://core.telegram.org/constructor/updateUser), and the business introduction will be contained in [userFull](https://core.telegram.org/constructor/userFull).`intro`.\n\nNote that the greeting sticker selection UI should offer a list of categories to quickly filter results by a (list of) emojis, or by some other criteria, see [here\u00a0\u00bb](https://core.telegram.org/api/emoji-categories) for more info.\n\n### [](#business-chat-links)Business chat links\n\n```\ninputBusinessChatLink#11679fa7 flags:# message:string entities:flags.0?Vector<MessageEntity> title:flags.1?string = InputBusinessChatLink;\n\nbusinessChatLink#b4ae666f flags:# link:string message:string entities:flags.0?Vector<MessageEntity> title:flags.1?string views:int = BusinessChatLink;\n\naccount.businessChatLinks#ec43a2d1 links:Vector<BusinessChatLink> chats:Vector<Chat> users:Vector<User> = account.BusinessChatLinks;\n\naccount.resolvedBusinessChatLinks#9a23af21 flags:# peer:Peer message:string entities:flags.0?Vector<MessageEntity> chats:Vector<Chat> users:Vector<User> = account.ResolvedBusinessChatLinks;\n\n---functions---\n\naccount.createBusinessChatLink#8851e68e link:InputBusinessChatLink = BusinessChatLink;\naccount.getBusinessChatLinks#6f70dde1 = account.BusinessChatLinks;\naccount.editBusinessChatLink#8c3410af slug:string link:InputBusinessChatLink = BusinessChatLink;\naccount.deleteBusinessChatLink#60073674 slug:string = Bool;\n\naccount.resolveBusinessChatLink#5492e5ee slug:string = account.ResolvedBusinessChatLinks;\n```\n\n[Business chat deep links](https://core.telegram.org/api/links#business-chat-links) allow business owners to share pre-made links to their Telegram business account, optionally filling out the message input field with a pre-prepared message (with support for [styled text entities\u00a0\u00bb](https://core.telegram.org/api/entities)).\n\nThere is no additional limit (apart from the usual [message\\_length\\_max](https://core.telegram.org/constructor/config)) on the prepared message length (because the message text is _not_ present in the URL's query string, rather it's fetched from the server using the link slug); each created business chat deep link also has a view counter.\n\nUse [account.createBusinessChatLink](https://core.telegram.org/method/account.createBusinessChatLink) to create a business chat link, specifying in [inputBusinessChatLink](https://core.telegram.org/constructor/inputBusinessChatLink) the message to pre-fill when users open the link, as well as a human-readable name for the link in `title`, useful when managing created links.  \nThe created [deep link](https://core.telegram.org/api/links#business-chat-links) is returned in the `link` field, and may be shared directly or as a QR code.\n\nUse [account.getBusinessChatLinks](https://core.telegram.org/method/account.getBusinessChatLinks) to fetch info about all created business chat links (including the view counter, indicating the number of times a business chat link was resolved (clicked on, scanned) by a user).\n\nUse [account.editBusinessChatLink](https://core.telegram.org/method/account.editBusinessChatLink) to edit the information of a business chat link.\n\nUse [account.deleteBusinessChatLink](https://core.telegram.org/method/account.deleteBusinessChatLink) to delete a business chat link.\n\nUse [account.resolveBusinessChatLink](https://core.telegram.org/method/account.resolveBusinessChatLink) to open a business chat link, obtaining the peer to contact and (if set) the message to pre-fill, also increasing the link's view counter.\n\nThe last three methods listed above take a business chat link slug, which should be extracted from a business chat link as specified [here\u00a0\u00bb](https://core.telegram.org/api/links#business-chat-links).\n\nAll listed methods except [account.resolveBusinessChatLink](https://core.telegram.org/method/account.resolveBusinessChatLink) require a Telegram Business subscription (currently included in [Telegram Premium](https://core.telegram.org/api/premium) subscriptions).\n\nAn account may create a maximum of [business\\_chat\\_links\\_limit](https://core.telegram.org/api/config#business-chat-links-limit) business chat links: attempts to exceed this limit will emit a `CHATLINKS_TOO_MUCH` RPC error, prompting the user to delete older links.\n\n### [](#connected-bots)Connected bots\n\n```\ninputBusinessBotRecipients#c4e5921e flags:# existing_chats:flags.0?true new_chats:flags.1?true contacts:flags.2?true non_contacts:flags.3?true exclude_selected:flags.5?true users:flags.4?Vector<InputUser> exclude_users:flags.6?Vector<InputUser> = InputBusinessBotRecipients;\n\nbusinessBotRecipients#b88cf373 flags:# existing_chats:flags.0?true new_chats:flags.1?true contacts:flags.2?true non_contacts:flags.3?true exclude_selected:flags.5?true users:flags.4?Vector<long> exclude_users:flags.6?Vector<long> = BusinessBotRecipients;\n\nconnectedBot#bd068601 flags:# can_reply:flags.0?true bot_id:long recipients:BusinessBotRecipients = ConnectedBot;\n\naccount.connectedBots#17d7f87b connected_bots:Vector<ConnectedBot> users:Vector<User> = account.ConnectedBots;\n\nbotBusinessConnection#896433b4 flags:# can_reply:flags.0?true disabled:flags.1?true connection_id:string user_id:long dc_id:int date:int = BotBusinessConnection;\n\nupdateBotBusinessConnect#8ae5c97a connection:BotBusinessConnection qts:int = Update;\nupdateBotNewBusinessMessage#9ddb347c flags:# connection_id:string message:Message reply_to_message:flags.0?Message qts:int = Update;\nupdateBotEditBusinessMessage#7df587c flags:# connection_id:string message:Message reply_to_message:flags.0?Message qts:int = Update;\nupdateBotDeleteBusinessMessage#a02a982e connection_id:string peer:Peer messages:Vector<int> qts:int = Update;\nupdateBusinessBotCallbackQuery#1ea2fda7 flags:# query_id:long user_id:long connection_id:string message:Message reply_to_message:flags.2?Message chat_instance:long data:flags.0?bytes = Update;\n\n---functions---\n\naccount.updateConnectedBot#43d8521d flags:# can_reply:flags.0?true deleted:flags.1?true bot:InputUser recipients:InputBusinessBotRecipients = Updates;\naccount.getConnectedBots#4ea4c80f = account.ConnectedBots;\n\naccount.toggleConnectedBotPaused#646e1097 peer:InputPeer paused:Bool = Bool;\naccount.disablePeerConnectedBot#5e437ed9 peer:InputPeer = Bool;\n\naccount.getBotBusinessConnection#76a86270 connection_id:string = Updates;\n\ninvokeWithBusinessConnection#dd289f8e {X:Type} connection_id:string query:!X = X;\n```\n\nBusiness users can connect Telegram bots that will process and answer messages **on their behalf**. This allows businesses to **seamlessly integrate** any existing tools and workflows, or add **AI assistants** that manage their chats.\n\nCurrently just one business bot may be connected to a user account.  \nBots which may be connected to user accounts have the [user](https://core.telegram.org/constructor/user).`bot_business` flag set; trying to connect a non-business bot will emit a `BOT_BUSINESS_MISSING` error.\n\nUse [account.updateConnectedBot\u00a0\u00bb](https://core.telegram.org/method/account.updateConnectedBot) to connect a business bot to the current account, or to change the connection settings.  \nUse [account.updateConnectedBot\u00a0\u00bb](https://core.telegram.org/method/account.updateConnectedBot) with the `deleted` flag set to disconnect a business bot from the current account.  \nUse [account.getConnectedBots\u00a0\u00bb](https://core.telegram.org/method/account.getConnectedBots) list all currently connected business bots.\n\nUse [account.toggleConnectedBotPaused\u00a0\u00bb](https://core.telegram.org/method/account.toggleConnectedBotPaused) to pause or unpause a specific chat, temporarily disconnecting it from all business bots (equivalent to temporarily specifying it in `recipients.exclude_users` during initial configuration with [account.updateConnectedBot\u00a0\u00bb](https://core.telegram.org/method/account.updateConnectedBot)).  \nUse [account.disablePeerConnectedBot\u00a0\u00bb](https://core.telegram.org/method/account.toggleConnectedBotPaused) to permanently disconnect a specific chat from all business bots (equivalent to specifying it in `recipients.exclude_users` during initial configuration with [account.updateConnectedBot\u00a0\u00bb](https://core.telegram.org/method/account.updateConnectedBot)); to reconnect of a chat disconnected using this method the user must reconnect the entire bot by invoking [account.updateConnectedBot\u00a0\u00bb](https://core.telegram.org/method/account.updateConnectedBot).\n\nNote that invoking the above two methods will also add the peer to the `recipients.exclude_users` field of the related [connectedBot](https://core.telegram.org/constructor/connectedBot) (or to `recipients.users`, if the inversion `recipients.exclude_selected` flag is set).\n\nThe above two methods should be invoked when pressing the appropriate buttons in the [action bar, see here\u00a0\u00bb](https://core.telegram.org/api/action-bar#manage-a-connected-business-bot) for more info on the business bot action bar that should be displayed on all peers currently managed by the bot, according to the [action bar flags\u00a0\u00bb](https://core.telegram.org/api/action-bar#manage-a-connected-business-bot).\n\nConnecting or disconnecting a business bot or changing the connection settings will emit an [updateBotBusinessConnect](https://core.telegram.org/constructor/updateBotBusinessConnect) update to the bot, with the new settings and a `connection_id` that will be used by the bot to handle updates from and send messages as the user.\n\nAccording to the specified settings, the bot will start receiving [updateBotNewBusinessMessage](https://core.telegram.org/constructor/updateBotNewBusinessMessage), [updateBotEditBusinessMessage](https://core.telegram.org/constructor/updateBotEditBusinessMessage), [updateBotDeleteBusinessMessage](https://core.telegram.org/constructor/updateBotDeleteBusinessMessage) updates containing messages sent to the connected user via the business connection.\n\nBots may invoke [account.getBotBusinessConnection](https://core.telegram.org/method/account.getBotBusinessConnection) to re-fetch the [updateBotBusinessConnect](https://core.telegram.org/constructor/updateBotBusinessConnect) constructor associated with a specific `connection_id`.  \nThis is needed for example for freshly logged in bots that are receiving some [updateBotNewBusinessMessage](https://core.telegram.org/constructor/updateBotNewBusinessMessage), etc. updates because some users have already connected to the bot before it could login.  \nIn this case, the bot is receiving messages from the business connection, but it hasn't cached the associated [updateBotBusinessConnect](https://core.telegram.org/constructor/updateBotBusinessConnect) with info about the connection (can it reply to messages? etc.) yet, and cannot receive the old ones because they were sent when the bot wasn't logged into the session yet.  \nThis method can be used to fetch info about a not-yet-cached business connection, and should not be invoked if the info is already cached or to fetch changes, as eventual changes will automatically be sent as new [updateBotBusinessConnect](https://core.telegram.org/constructor/updateBotBusinessConnect) updates to the bot, using the usual [update delivery methods\u00a0\u00bb](https://core.telegram.org/api/updates).\n\nIf the `can_reply` flag was set when connecting the bot, the bot will also be able to invoke the following methods on behalf of the user to interact with messages received via the business connection, by wrapping the query in a [invokeWithBusinessConnection\u00a0\u00bb](https://core.telegram.org/method/invokeWithBusinessConnection), passing the connection ID:\n\n*   [messages.sendMessage](https://core.telegram.org/method/messages.sendMessage)\n*   [messages.editMessage](https://core.telegram.org/method/messages.editMessage)\n*   [messages.sendMedia](https://core.telegram.org/method/messages.sendMedia)\n*   [messages.sendMultiMedia](https://core.telegram.org/method/messages.sendMultiMedia)\n*   [messages.setTyping](https://core.telegram.org/method/messages.setTyping)\n*   [messages.updatePinnedMessage](https://core.telegram.org/method/messages.updatePinnedMessage)\n*   [payments.exportInvoice](https://core.telegram.org/method/payments.exportInvoice)\n\nMake sure to always send queries wrapped in an `invokeWithBusinessConnection` to the datacenter ID, specified in the `dc_id` field of the [botBusinessConnection](https://core.telegram.org/constructor/botBusinessConnection) that is being used.\n\n[messages.uploadMedia](https://core.telegram.org/method/messages.uploadMedia) may also be used in business connections, _not_ by wrapping it in [invokeWithBusinessConnection\u00a0\u00bb](https://core.telegram.org/method/invokeWithBusinessConnection), but rather by specifying the business connection ID in the `business_connection_id` parameter.\n\n[Message](https://core.telegram.org/constructor/message)s sent by business bots on behalf of the user using this method will have the `via_business_connection` flag set, indicating that the message was sent by the business bot indicated in [message](https://core.telegram.org/constructor/message).`via_bot_id`.\n\n[Message](https://core.telegram.org/constructor/message)s sent by business bots on behalf of the user may also contain [inline keyboards](https://core.telegram.org/api/bots/buttons), including [callback buttons](https://core.telegram.org/api/bots/buttons#answering-a-callback-query), which when pressed will emit an [updateBusinessBotCallbackQuery](https://core.telegram.org/constructor/updateBusinessBotCallbackQuery) which should be handled as specified [here\u00a0\u00bb](https://core.telegram.org/api/bots/buttons#answering-a-callback-query) (_without_ wrapping the query in an `invokeWithBusinessConnection`).\n\n### [](#re-enable-ads)Re-enable ads\n\n```\nuserFull#979d2376 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true voice_messages_forbidden:flags.20?true translations_disabled:flags.23?true stories_pinned_available:flags.26?true blocked_my_stories_from:flags.27?true wallpaper_overridden:flags.28?true contact_require_premium:flags.29?true read_dates_private:flags.30?true flags2:# sponsored_enabled:flags2.7?true can_view_revenue:flags2.9?true bot_can_manage_emoji_status:flags2.10?true id:long about:flags.1?string settings:PeerSettings personal_photo:flags.21?Photo profile_photo:flags.2?Photo fallback_photo:flags.22?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int ttl_period:flags.14?int theme_emoticon:flags.15?string private_forward_name:flags.16?string bot_group_admin_rights:flags.17?ChatAdminRights bot_broadcast_admin_rights:flags.18?ChatAdminRights premium_gifts:flags.19?Vector<PremiumGiftOption> wallpaper:flags.24?WallPaper stories:flags.25?PeerStories business_work_hours:flags2.0?BusinessWorkHours business_location:flags2.1?BusinessLocation business_greeting_message:flags2.2?BusinessGreetingMessage business_away_message:flags2.3?BusinessAwayMessage business_intro:flags2.4?BusinessIntro birthday:flags2.5?Birthday personal_channel_id:flags2.6?long personal_channel_message:flags2.6?int stargifts_count:flags2.8?int starref_program:flags2.11?StarRefProgram = UserFull;\n\n---functions---\n\naccount.toggleSponsoredMessages#b9d9a38d enabled:Bool = Bool;\n```\n\nSince Telegram Business is currently included with the [Telegram Premium](https://core.telegram.org/api/premium) subscription, and Telegram Premium subscribers do not see [sponsored messages in channels](https://core.telegram.org/api/sponsored-messages).\n\nThis may be problematic for business owners that may want to launch and view their own Telegram ads via the [Telegram ad platform\u00a0\u00bb](https://ads.telegram.org/).\n\nFor this reason, the Telegram Business settings page should contain a toggle to re-enable Telegram ads for the current account, which should trigger a call to [account.toggleSponsoredMessages](https://core.telegram.org/method/account.toggleSponsoredMessages).\n\nThe current value of the toggle will be stored in [userFull](https://core.telegram.org/constructor/userFull).`sponsored_enabled`.\n\n### [](#folder-tags)Folder tags\n\nTelegram Business users can use [folder tags, see here\u00a0\u00bb](https://core.telegram.org/api/folders#folder-tags) for more info.\n\n### [](#business-features-promo-page)Business features promo page\n\nTelegram Business offers a set of additional features and raised limits: clients should be aware of the current subscription status to accordingly modify client behavior.\n\n```\n---functions---\n\nhelp.getAppConfig#61e3f854 hash:int = help.AppConfig;\n```\n\nClients should show a Telegram Business button in the settings.  \nClicking on this button in the settings should open a Telegram Business modal.\n\n[help.getAppConfig](https://core.telegram.org/method/help.getAppConfig) to fetch info on how to build the Telegram Business modal, returning a list of Business feature identifiers in the [`business_promo_order` appConfig field](https://core.telegram.org/api/config#business-promo-order): the modal should contain a row for each returned feature, ordered as specified in the returned array.\n\nPossible feature identifiers:\n\n#### [](#business-location)`business_location`\n\nBusiness users can set a [business location](#location)\n\n#### [](#business-hours)`business_hours`\n\nBusiness users can set [opening hours](#opening-hours)\n\n#### [](#quick-replies)`quick_replies`\n\nBusiness users can create and use [quick reply shortcuts](#quick-reply-shortcuts)\n\n#### [](#greeting-message)`greeting_message`\n\nBusiness users can set a [greeting message](#greeting-messages)\n\n#### [](#away-message)`away_message`\n\nBusiness users can set an [away message](#away-messages)\n\n#### [](#business-links)`business_links`\n\nBusiness users can create [business chat links](#business-chat-links)\n\n#### [](#business-intro)`business_intro`\n\nBusiness users can set a custom [business chat introduction](#business-introduction)\n\n#### [](#business-bots)`business_bots`\n\nBusiness users can [connect business bots to their account](#connected-bots)\n\n#### [](#emoji-status)`emoji_status`\n\nBusiness users can set a [custom emoji status](https://core.telegram.org/api/emoji-status).\n\n#### [](#folder-tags)`folder_tags`\n\nBusiness users can enable [folder tags](https://core.telegram.org/api/folders#folder-tags).\n\n#### [](#stories)`stories`\n\nBusiness users can use [stories](https://core.telegram.org/api/stories) to showcase products (i.e. no additional functionality neeeds to be implemented by clients, it's just another way to use stories).",
    "url": "https://core.telegram.org/api/business"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/transcribe",
      "title": "Voice message transcription",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Voice message transcription"
        },
        {
          "property": "og:description",
          "content": "How to transcribe voice messages."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:17 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "2293",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Voice message transcription\n\nThe API provides methods to transcribe voice messages.\n\nSchema:\n\n```\nupdateTranscribedAudio#84cd5a flags:# pending:flags.0?true peer:Peer msg_id:int transcription_id:long text:string = Update;\n\nmessages.transcribedAudio#cfb9d957 flags:# pending:flags.0?true transcription_id:long text:string trial_remains_num:flags.1?int trial_remains_until_date:flags.1?int = messages.TranscribedAudio;\n\n---functions---\n\nmessages.transcribeAudio#269e9a49 peer:InputPeer msg_id:int = messages.TranscribedAudio;\nmessages.rateTranscribedAudio#7f1d072f peer:InputPeer msg_id:int transcription_id:long good:Bool = Bool;\n```\n\nUse [messages.transcribeAudio](https://core.telegram.org/method/messages.transcribeAudio) to initiate transcription of a message.  \nThe returned [messages.transcribedAudio](https://core.telegram.org/constructor/messages.transcribedAudio) constructor will have the `pending` flag set if the transcription is still in progress and the transcribed text contained in `text` will be updated in future with [updateTranscribedAudio](https://core.telegram.org/constructor/updateTranscribedAudio) updates.  \nThese updates will contain the updated `text` with the same `transcription_id` returned in the first [messages.transcribedAudio](https://core.telegram.org/constructor/messages.transcribedAudio), and the `pending` flag will be set if the transcription is still in progress.\n\nA transcription can then be rated as good or bad using [messages.rateTranscribedAudio](https://core.telegram.org/method/messages.rateTranscribedAudio).\n\nUsers without a [Telegram Premium](https://core.telegram.org/api/premium) subscription can only transcribe [transcribe\\_audio\\_trial\\_weekly\\_number](https://core.telegram.org/api/config#transcribe-audio-trial-weekly-number) messages per week, each of maximum duration equal to [transcribe\\_audio\\_trial\\_duration\\_max](https://core.telegram.org/api/config#transcribe-audio-trial-duration-max) seconds.  \nFor non-premium users, the `trial_remains_num` and `trial_remains_until_date` flags of [messages.transcribedAudio](https://core.telegram.org/constructor/messages.transcribedAudio) will also be set, indicating the remaining transcriptions, and the date when the `trial_remains_num` counter will be reset to the maximum value of [transcribe\\_audio\\_trial\\_weekly\\_number](https://core.telegram.org/api/config#transcribe-audio-trial-weekly-number).\n\nAlso, after a supergroup reaches at least the [boost level](https://core.telegram.org/api/boost) specified in the [`group_transcribe_level_min`\u00a0\u00bb](https://core.telegram.org/api/config#group-transcribe-level-min) config parameter, non-[Premium](https://core.telegram.org/api/premium) users in the supergroup gain the ability to [transcribe any voice message](https://core.telegram.org/api/transcribe), without using up their free transcription quota.",
    "url": "https://core.telegram.org/api/transcribe"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/stars",
      "title": "Telegram Stars",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Telegram Stars"
        },
        {
          "property": "og:description",
          "content": "Telegram Stars are virtual items that allow users to purchase digital goods and services from bots and mini apps inside the Telegram ecosystem, send gifts to content creators on the Telegram platform, and more."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:19 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "6967",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Telegram Stars\n\nTelegram Stars are virtual items that allow users to purchase digital goods and services from bots and mini apps inside the Telegram ecosystem, send gifts to content creators on the Telegram platform, and more.\n\nThis page describes the methods used to buy, use and withdraw [Telegram Stars](https://telegram.org/blog/mini-app-bar-paid-media-and-more#rewards-for-content-creators-and-developers), as well as view detailed revenue stats and make purchases using Telegram Stars.\n\nClients should disable Telegram Stars support for the current user if the [stars\\_purchase\\_blocked field is equal to `true`\u00a0\u00bb](https://core.telegram.org/api/config#stars-purchase-blocked) due to regional limitations.\n\n### [](#balance-and-transaction-history)Balance and transaction history\n\n```\ninputStarsTransaction#206ae6d1 flags:# refund:flags.0?true id:string = InputStarsTransaction;\n\nstarsTransactionPeerAppStore#b457b375 = StarsTransactionPeer;\nstarsTransactionPeerPlayMarket#7b560a0b = StarsTransactionPeer;\nstarsTransactionPeerPremiumBot#250dbaf8 = StarsTransactionPeer;\nstarsTransactionPeerFragment#e92fd902 = StarsTransactionPeer;\nstarsTransactionPeer#d80da15d peer:Peer = StarsTransactionPeer;\nstarsTransactionPeerAds#60682812 = StarsTransactionPeer;\nstarsTransactionPeerUnsupported#95f2bfe4 = StarsTransactionPeer;\n\nstarsTransaction#64dfc926 flags:# refund:flags.3?true pending:flags.4?true failed:flags.6?true gift:flags.10?true reaction:flags.11?true id:string stars:StarsAmount date:int peer:StarsTransactionPeer title:flags.0?string description:flags.1?string photo:flags.2?WebDocument transaction_date:flags.5?int transaction_url:flags.5?string bot_payload:flags.7?bytes msg_id:flags.8?int extended_media:flags.9?Vector<MessageMedia> subscription_period:flags.12?int giveaway_post_id:flags.13?int stargift:flags.14?StarGift floodskip_number:flags.15?int starref_commission_permille:flags.16?int starref_peer:flags.17?Peer starref_amount:flags.17?StarsAmount = StarsTransaction;\n\npayments.starsStatus#6c9ce8ed flags:# balance:StarsAmount subscriptions:flags.1?Vector<StarsSubscription> subscriptions_next_offset:flags.2?string subscriptions_missing_balance:flags.4?long history:flags.3?Vector<StarsTransaction> next_offset:flags.0?string chats:Vector<Chat> users:Vector<User> = payments.StarsStatus;\n\nupdateStarsBalance#4e80a379 balance:StarsAmount = Update;\n\n---functions---\n\npayments.getStarsStatus#104fcfa7 peer:InputPeer = payments.StarsStatus;\n\npayments.getStarsTransactions#69da4557 flags:# inbound:flags.0?true outbound:flags.1?true ascending:flags.2?true subscription_id:flags.3?string peer:InputPeer offset:string limit:int = payments.StarsStatus;\n\npayments.getStarsTransactionsByID#27842d2e peer:InputPeer id:Vector<InputStarsTransaction> = payments.StarsStatus;\n```\n\nUse [payments.getStarsStatus](https://core.telegram.org/method/payments.getStarsStatus) to get the current stars balance of the current account (with peer=[inputPeerSelf](https://core.telegram.org/constructor/inputPeerSelf)), or the stars balance of the bot or channel specified in `peer`.  \nThe method will also return the last 5 [star transactions\u00a0\u00bb](https://core.telegram.org/constructor/starsTransaction).  \nTo return all [star transactions\u00a0\u00bb](https://core.telegram.org/constructor/starsTransaction) (and optionally search using filters), use [payments.getStarsTransactions](https://core.telegram.org/method/payments.getStarsTransactions), paginating through the transactions passing the returned `next_offset` (if set) to `offset` [as usual](https://core.telegram.org/api/offsets).\n\n[payments.getStarsTransactionsByID](https://core.telegram.org/method/payments.getStarsTransactionsByID) may be used to fetch info about specific Telegram Star transactions (or refunds) using their IDs, passed as [inputStarsTransaction](https://core.telegram.org/constructor/inputStarsTransaction) constructors.\n\nChanges in the star balance (through [topups](#buying-or-gifting-stars) or [purchases](#using-stars)) will be notified by the server via an [updateStarsBalance](https://core.telegram.org/constructor/updateStarsBalance) update.\n\n### [](#revenue-statistics)Revenue statistics\n\n```\nstarsRevenueStatus#febe5491 flags:# withdrawal_enabled:flags.0?true current_balance:StarsAmount available_balance:StarsAmount overall_revenue:StarsAmount next_withdrawal_at:flags.1?int = StarsRevenueStatus;\n\npayments.starsRevenueStats#c92bb73b revenue_graph:StatsGraph status:StarsRevenueStatus usd_rate:double = payments.StarsRevenueStats;\n\nupdateStarsRevenueStatus#a584b019 peer:Peer status:StarsRevenueStatus = Update;\n\n---functions---\n\npayments.getStarsRevenueStats#d91ffad6 flags:# dark:flags.0?true peer:InputPeer = payments.StarsRevenueStats;\n```\n\nTelegram Star revenue statistics may be fetched by bot owners, and by channel admins if the [channelFull](https://core.telegram.org/constructor/channelFull).`can_view_stars_revenue` flag is set.\n\nUse [payments.getStarsRevenueStats](https://core.telegram.org/method/payments.getStarsRevenueStats) to fetch statistics about earned Telegram Stars; the returned [StatsGraph](https://core.telegram.org/type/StatsGraph) graphs can be rendered [as described here\u00a0\u00bb](https://core.telegram.org/api/stats#graph-visualization).\n\nSpecifically:\n\n*   `revenue_graph` - Star revenue graph (number of earned stars)\n*   `status` - Current balance, current withdrawable balance and overall earned Telegram Stars\n*   `usd_rate` - Current conversion rate of Telegram Stars to USD\n\nThe server will emit an [updateStarsRevenueStatus](https://core.telegram.org/constructor/updateStarsRevenueStatus) every time the balance changes; if the client is currently in the Monetization tab of the channel or bot, this update should apply the new balances (contained in the update), and refresh the transaction list using [payments.getStarsTransactions](https://core.telegram.org/method/payments.getStarsTransactions) as specified [here\u00a0\u00bb](#balance-and-transaction-history).\n\n### [](#buying-or-gifting-stars)Buying or gifting stars\n\n```\nstarsTopupOption#bd915c0 flags:# extended:flags.1?true stars:long store_product:flags.0?string currency:string amount:long = StarsTopupOption;\n\nstarsGiftOption#5e0589f1 flags:# extended:flags.1?true stars:long store_product:flags.0?string currency:string amount:long = StarsGiftOption;\n\ninputStorePaymentStarsTopup#dddd0f56 stars:long currency:string amount:long = InputStorePaymentPurpose;\ninputStorePaymentStarsGift#1d741ef7 user_id:InputUser stars:long currency:string amount:long = InputStorePaymentPurpose;\n\ninputInvoiceStars#65f00ce3 purpose:InputStorePaymentPurpose = InputInvoice;\n\n---functions---\n\npayments.getStarsTopupOptions#c00ec7d3 = Vector<StarsTopupOption>;\n\npayments.getStarsGiftOptions#d3c96bc8 flags:# user_id:flags.0?InputUser = Vector<StarsGiftOption>;\n```\n\nTo purchase telegram stars for ourselves, first invoke the [payments.getStarsTopupOptions](https://core.telegram.org/method/payments.getStarsTopupOptions) method, to obtain a list of topup options as [starsTopupOption](https://core.telegram.org/constructor/starsTopupOption) constructors.\n\nTo purchase telegram stars for a friend, first invoke the [payments.getStarsGiftOptions](https://core.telegram.org/method/payments.getStarsGiftOptions) method, to obtain a list of gift options as [starsGiftOption](https://core.telegram.org/constructor/starsGiftOption) constructors.\n\n**Note**: Star gifting functionality should only be enabled if the [stars\\_gifts\\_enabled\u00a0\u00bb](https://core.telegram.org/api/config#stars-gifts-enabled) flag is equal to true.\n\nOnce the user has chosen a specific star topup/gift option, invoke [payments.getPaymentForm](https://core.telegram.org/method/payments.getPaymentForm), passing an [inputInvoiceStars](https://core.telegram.org/constructor/inputInvoiceStars), with either [inputStorePaymentStarsTopup](https://core.telegram.org/constructor/inputStorePaymentStarsTopup) or [inputStorePaymentStarsGift](https://core.telegram.org/constructor/inputStorePaymentStarsGift), populated with the values from the chosen [starsTopupOption](https://core.telegram.org/constructor/starsTopupOption)/[starsGiftOption](https://core.telegram.org/constructor/starsGiftOption).\n\nThen, follow the [invoice payment flow as described in the payments documentation\u00a0\u00bb](https://core.telegram.org/api/payments#22-getting-invoice-info-about-the-product).\n\nMore alternative payment flows are also available:\n\n*   Payment via [Fragment](https://fragment.com/), which also allows making larger purchases.\n*   The store-based subscription flow based on [payments.assignAppStoreTransaction](https://core.telegram.org/method/payments.assignAppStoreTransaction)/[payments.assignPlayMarketTransaction](https://core.telegram.org/method/payments.assignPlayMarketTransaction), currently not available to third-party apps.\n\nFor gifts, once the payment is successfully processed, the user to which the gift was sent will automatically receive a [messageService](https://core.telegram.org/constructor/messageService) from the user that sent the gift, containing a [messageActionGiftStars](https://core.telegram.org/constructor/messageActionGiftStars) constructor with further info about the price and duration of the gifted Telegram Stars.  \nClients should display this message, along with a sticker from the [inputStickerSetPremiumGifts](https://core.telegram.org/constructor/inputStickerSetPremiumGifts) [stickerset](https://core.telegram.org/api/stickers): here's an [example](https://telegram.org/blog/w3-browser-mini-app-store#gifting-stars-to-friends).\n\nThe price in US dollars of 1000 Telegram Stars can be fetched using the [`stars_usd_sell_rate_x1000` config parameter \u00bb](https://core.telegram.org/api/config#stars-usd-sell-rate-x1000).\n\nThe Star topup page should also be activated, if [some conditions](https://core.telegram.org/api/links#stars-topup-link) are met, when the user clicks on a [topup deep link \u00bb](https://core.telegram.org/api/links#stars-topup-link).\n\n### [](#using-stars)Using stars\n\n```\npayments.paymentFormStars#7bf6b15c flags:# form_id:long bot_id:long title:string description:string photo:flags.5?WebDocument invoice:Invoice users:Vector<User> = payments.PaymentForm;\n\npayments.paymentReceiptStars#dabbf83a flags:# date:int bot_id:long title:string description:string photo:flags.2?WebDocument invoice:Invoice currency:string total_amount:long transaction_id:string users:Vector<User> = payments.PaymentReceipt;\n\n---functions---\n\npayments.sendStarsForm#7998c914 form_id:long invoice:InputInvoice = payments.PaymentResult;\n\npayments.refundStarsCharge#25ae8f4a user_id:InputUser charge_id:string = Updates;\n```\n\nThe full flow to follow to make purchases using Telegram Stars is described along the traditional payment flow in the [payments documentation\u00a0\u00bb](https://core.telegram.org/api/payments): all invoices and constructors working with currency amounts will use the currency code `XTR`, and the amounts will be in Telegram Stars.\n\n#### [](#paid-media)Paid media\n\nTelegram Stars are used to pay for [paid media](https://core.telegram.org/api/paid-media), which may be posted on channels by administrators as specified [here\u00a0\u00bb](https://core.telegram.org/api/paid-media).\n\nPurchasing paid media will transfer Telegram Stars to the channel's balance.  \nChannel owners can then [withdraw Stars as Toncoin\u00a0\u00bb](#withdrawing-stars), or [use Stars to place ads for the channel\u00a0\u00bb](#paying-for-ads).\n\n[Star revenue statistics](#revenue-statistics) and [balance information](#balance-and-transaction-history) is also available to channel owners.\n\n#### [](#paid-reactions)Paid reactions\n\nUsers can now directly support their favorite channels and content creators by sending them Telegram Stars using a new Star reaction.\n\nChannel owners receive 100% of the stars \u2014 and can convert them into Toncoin cryptocurrency rewards or subsidized ads.\n\nSee [here \u00bb](https://core.telegram.org/api/reactions#paid-reactions) for the full flow.\n\n#### [](#bot-payments)Bot payments\n\nTelegram Stars are also used to pay for digital services in bots, using [keyboardButtonBuy](https://core.telegram.org/constructor/keyboardButtonBuy) and [the usual payment flow\u00a0\u00bb](https://core.telegram.org/api/payments), with `currency=\"XTR\"`.\n\nPurchasing paid media will transfer Telegram Stars to the bot's balance.  \nBot owners can then [withdraw Stars as Toncoin\u00a0\u00bb](#withdrawing-stars), or [use Stars to place ads for the channel\u00a0\u00bb](#paying-for-ads).\n\n[Star revenue statistics](#revenue-statistics) and [balance information](#balance-and-transaction-history) is also available to bot owners.\n\n#### [](#star-referrals)Star referrals\n\nDevelopers can open affiliate programs for their [mini app](https://core.telegram.org/api/bots/webapps) \u2013 allowing **content creators**, other **mini app developers** and **any Telegram user** to promote it and earn commissions on purchases made by people they referred.\n\nSee [here \u00bb](https://core.telegram.org/api/bots/referrals) for more info on the full flow.\n\n#### [](#star-subscriptions)Star subscriptions\n\nBots and channels may create subscriptions, periodically charging users a certain amount of [Telegram Stars](https://core.telegram.org/api/stars) in exchange for content and services.\n\nSee [here \u00bb](https://core.telegram.org/api/subscriptions) for the full flow.\n\n#### [](#star-giveaways)Star giveaways\n\nStar giveaways are similar to [normal giveaways](https://core.telegram.org/api/giveaways#giveaways-and-giftcodes), with the only difference that instead of giving away gifts or [Telegram Premium subscriptions](https://core.telegram.org/api/premium), the giveaway will automatically distribute Telegram Stars among the winners.\n\nSee [here \u00bb](https://core.telegram.org/api/giveaways#star-giveaways) for the full flow.\n\n#### [](#star-gifts)Star gifts\n\nUsers can send **Gifts** to their friends. The recipients of gifts can display them on their profile pages or turn them into Telegram Stars.\n\nSee [here \u00bb](https://core.telegram.org/api/gifts) for the full flow.\n\n### [](#withdrawing-stars)Withdrawing stars\n\n```\npayments.starsRevenueWithdrawalUrl#1dab80b7 url:string = payments.StarsRevenueWithdrawalUrl;\n---functions---\n\npayments.getStarsRevenueWithdrawalUrl#13bbe8b3 peer:InputPeer stars:long password:InputCheckPasswordSRP = payments.StarsRevenueWithdrawalUrl;\n```\n\nTo withdraw funds from the star balance of a channel or bot we own, invoke [payments.getStarsRevenueWithdrawalUrl](https://core.telegram.org/method/payments.getStarsRevenueWithdrawalUrl), passing the current account's [2FA password](https://core.telegram.org/api/srp) as an [InputCheckPasswordSRP](https://core.telegram.org/type/InputCheckPasswordSRP) constructor, generated [as specified here\u00a0\u00bb](https://core.telegram.org/api/srp).\n\nOnly the channel/bot owner can invoke this method, and only if the balance is bigger than or equal to [stars\\_revenue\\_withdrawal\\_min\u00a0\u00bb](https://core.telegram.org/api/config#stars-revenue-withdrawal-min) and the `status.withdrawal_enabled` flag returned by [payments.getStarsRevenueStats](https://core.telegram.org/method/payments.getStarsRevenueStats) is set.\n\nThe method will return a unique URL to a [Fragment](https://fragment.com/) page where the user will be able to specify and submit the address of the TON wallet where the funds will be sent.\n\nBy withdrawing one thousand stars, the user will receive the equivalent of [`stars_usd_withdraw_rate_x1000` US dollars, as specified by the client configuration \u00bb](https://core.telegram.org/api/config#stars-usd-withdraw-rate-x1000).\n\n### [](#paying-for-ads)Paying for ads\n\n```\nstarsTransactionPeerAds#60682812 = StarsTransactionPeer;\n\npayments.starsRevenueAdsAccountUrl#394e7f21 url:string = payments.StarsRevenueAdsAccountUrl;\n\n---functions---\n\npayments.getStarsRevenueAdsAccountUrl#d1d7efc5 peer:InputPeer = payments.StarsRevenueAdsAccountUrl;\n```\n\nChannel/bot owners may place Telegram advertisements for channels/bots they own using the Telegram Ad platform, paying using the **Stars** currently available on the bot/channel's balance at a special rate with a **30% discount** \u2013 creating a **cost-effective** way of reaching new users.\n\nTo use Stars for ads, go to your bot's or channels' Balance or Monetization section and tap '_Buy Ads_'.  \nClicking on the button should invoke [payments.getStarsRevenueAdsAccountUrl](https://core.telegram.org/method/payments.getStarsRevenueAdsAccountUrl) (passing the bot/channel in `peer`).  \nThe returned `url` will lead to a page where the user will be able to place ads for the channel/bot passed in `peer`.\n\n[Transactions](#balance-and-transaction-history) for ad payments will be of type [starsTransactionPeerAds](https://core.telegram.org/constructor/starsTransactionPeerAds).",
    "url": "https://core.telegram.org/api/stars"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/subscriptions",
      "title": "Star subscriptions",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Star subscriptions"
        },
        {
          "property": "og:description",
          "content": "Bots and channels may create subscriptions, periodically charging users a certain amount of Telegram Stars in exchange for content and services."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:19 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5567",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Star subscriptions\n\nBots and channels may create subscriptions, periodically charging users a certain amount of [Telegram Stars](https://core.telegram.org/api/stars) in exchange for content and services.\n\n### [](#channel-subscriptions)Channel subscriptions\n\n```\nstarsSubscriptionPricing#05416d58 period:int amount:long = StarsSubscriptionPricing;\n\nchatInvite#fe65389d flags:# channel:flags.0?true broadcast:flags.1?true public:flags.2?true megagroup:flags.3?true request_needed:flags.6?true verified:flags.7?true scam:flags.8?true fake:flags.9?true can_refulfill_subscription:flags.11?true title:string about:flags.5?string photo:Photo participants_count:int participants:flags.4?Vector<User> color:int subscription_pricing:flags.10?StarsSubscriptionPricing subscription_form_id:flags.12?long = ChatInvite;\n\ninputInvoiceChatInviteSubscription#34e793f1 hash:string = InputInvoice;\n\nstarsSubscription#2e6eab1a flags:# canceled:flags.0?true can_refulfill:flags.1?true missing_balance:flags.2?true bot_canceled:flags.7?true id:string peer:Peer until_date:int pricing:StarsSubscriptionPricing chat_invite_hash:flags.3?string title:flags.4?string photo:flags.5?WebDocument invoice_slug:flags.6?string = StarsSubscription;\n\n---functions---\n\nmessages.exportChatInvite#a455de90 flags:# legacy_revoke_permanent:flags.2?true request_needed:flags.3?true peer:InputPeer expire_date:flags.0?int usage_limit:flags.1?int title:flags.4?string subscription_pricing:flags.5?StarsSubscriptionPricing = ExportedChatInvite;\n\nmessages.checkChatInvite#3eadb1bb hash:string = ChatInvite;\n\nmessages.importChatInvite#6c50051c hash:string = Updates;\npayments.fulfillStarsSubscription#cc5bebb3 peer:InputPeer subscription_id:string = Bool;\n\nmessages.getChatInviteImporters#df04dd4e flags:# requested:flags.0?true subscription_expired:flags.3?true peer:InputPeer link:flags.1?string q:flags.2?string offset_date:int offset_user:InputUser limit:int = messages.ChatInviteImporters;\n```\n\nChannel administrators can create special invite links that allow joining a channel in exchange for a monthly payment in Telegram Stars.\n\nSubscribing to a channel using a paid invite link will transfer Telegram Stars to the channel's balance.\n\nTo create such links, invoke [messages.exportChatInvite](https://core.telegram.org/method/messages.exportChatInvite) passing a [starsSubscriptionPricing](https://core.telegram.org/constructor/starsSubscriptionPricing) constructor to `subscription_pricing`, passing in `peer` the **private channel** we wish to sell access to, and in `amount` the amount of Telegram Stars users should pay every `period` seconds to gain and maintain access to the channel.  \nCurrently the only allowed subscription period is `30*24*60*60`, i.e. the user will be automatically debited `amount` stars every month, and the maximum allowed `amount` is specified in the [`stars_subscription_amount_max` config key \u00bb](https://core.telegram.org/api/config#stars-subscription-amount-max).\n\nUsers obtaining info about the invitation link using [messages.checkChatInvite](https://core.telegram.org/method/messages.checkChatInvite) will obtain a [chatInvite](https://core.telegram.org/constructor/chatInvite) constructor with the `subscription_pricing` and `subscription_form_id` flags set.\n\nTo pay for the subscription, follow the [usual payment flow \u00bb](https://core.telegram.org/api/payments), with the following variation: since subscriptions already have a pre-generated form contained in the `subscription_form_id` returned in [chatInvite](https://core.telegram.org/constructor/chatInvite), the first two steps of the [payment flow \u00bb](https://core.telegram.org/api/payments) (those used to generate a payment form) must be skipped, starting directly at the [payments.sendStarsForm](https://core.telegram.org/method/payments.sendStarsForm) call in [step 3 \u00bb](https://core.telegram.org/api/payments#3-payment), passing to `invoice` an [inputInvoiceChatInviteSubscription](https://core.telegram.org/constructor/inputInvoiceChatInviteSubscription) with the `hash` component of the [invite link](https://core.telegram.org/api/links#message-links), and to `form_id` the [chatInvite](https://core.telegram.org/constructor/chatInvite).`subscription_form_id`.\n\nOnce the payment is successfully completed, the user will be automatically added to the channel, without having to invoke [messages.importChatInvite](https://core.telegram.org/method/messages.importChatInvite) to join the private channel.\n\nThe end date of the current subscription period will be contained in [channel](https://core.telegram.org/constructor/channel).`subscription_until_date` and [starsSubscription](https://core.telegram.org/constructor/starsSubscription).`until_date`.\n\nThe subscription will be automatically renewed at `subscription_until_date`, removing `amount` stars from the user's Star balance and pushing forward the subscription's `subscription_until_date` by `period` seconds.\n\nIf the user decides to leave the channel without cancelling the subscription (or before the end of the current cancelled subscription period), subsequent calls to [messages.checkChatInvite](https://core.telegram.org/method/messages.checkChatInvite) will return a [chatInvite](https://core.telegram.org/constructor/chatInvite) with the `can_refulfill_subscription` flag set, indicating that they may re-join the channel using [payments.fulfillStarsSubscription](https://core.telegram.org/method/payments.fulfillStarsSubscription) (passing [inputPeerSelf](https://core.telegram.org/constructor/inputPeerSelf) to `peer` and the [starsSubscription](https://core.telegram.org/constructor/starsSubscription).`id` to `subscription_id`; alternatively, [messages.importChatInvite](https://core.telegram.org/method/messages.importChatInvite) may simply be used) without repeating the payment; the `subscription_pricing` will also be returned, but no `subscription_form_id` will be returned.\n\nAdmins may also use [messages.getChatInviteImporters](https://core.telegram.org/method/messages.getChatInviteImporters) with the `subscription_expired` flag set to fetch only and all users with an expired subscription.\n\nChannel admins can also see the end date of the current subscription period for any user in [channelParticipant](https://core.telegram.org/constructor/channelParticipant).`subscription_until_date`.\n\nSee [here \u00bb](#managing-subscriptions) for more info on how to handle active subscriptions as a subscriber.\n\n### [](#bot-subscriptions)Bot subscriptions\n\n```\ninvoice#049ee584 flags:# test:flags.0?true name_requested:flags.1?true phone_requested:flags.2?true email_requested:flags.3?true shipping_address_requested:flags.4?true flexible:flags.5?true phone_to_provider:flags.6?true email_to_provider:flags.7?true recurring:flags.9?true currency:string prices:Vector<LabeledPrice> max_tip_amount:flags.8?long suggested_tip_amounts:flags.8?Vector<long> terms_url:flags.10?string subscription_period:flags.11?int = Invoice;\n\nstarsSubscription#2e6eab1a flags:# canceled:flags.0?true can_refulfill:flags.1?true missing_balance:flags.2?true bot_canceled:flags.7?true id:string peer:Peer until_date:int pricing:StarsSubscriptionPricing chat_invite_hash:flags.3?string title:flags.4?string photo:flags.5?WebDocument invoice_slug:flags.6?string = StarsSubscription;\n\n---functions---\n\nmessages.sendMedia#7852834e flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\n\npayments.botCancelStarsSubscription#6dfa0622 flags:# restore:flags.0?true user_id:InputUser charge_id:string = Bool;\n```\n\nTo create (and subscribe to) a bot subscription, start by following the [invoicing link flow \u00bb](https://core.telegram.org/api/payments#12-create-invoice-link), specifying:\n\n*   A price for the subscription in Telegram Stars (currency code `XTR`) not greater than the value specified in [`stars_subscription_amount_max` config key \u00bb](https://core.telegram.org/api/config#stars-subscription-amount-max)\n*   The subscription period in seconds in the `subscription_period` flag of the [invoice](https://core.telegram.org/constructor/invoice): currently the only allowed subscription period is `30*24*60*60`, i.e. the user will be automatically debited the specified amount of stars every month.\n\n**Note**: subscription invoices may not be sent using [messages.sendMedia](https://core.telegram.org/method/messages.sendMedia), only exported to [invoice deep links](https://core.telegram.org/api/links#invoice-links) using [payments.exportInvoice](https://core.telegram.org/method/payments.exportInvoice).\n\nAny number of subscriptions can be active for a given bot at the same time, including multiple concurrent subscriptions for the same user.\n\nTo subscribe to a bot subscription, simply proceed with the payment of the invoice [as specified here \u00bb](https://core.telegram.org/api/payments#3-payment).\n\nThe subscription will be automatically renewed every `subscription_period` seconds, removing `amount` stars from the user's Star balance and pushing forward the subscription's end date by `period` seconds.\n\nThe subscription may be cancelled by the bot using [payments.botCancelStarsSubscription](https://core.telegram.org/method/payments.botCancelStarsSubscription), passing the following parameters:\n\n*   `restore`: If **not** set, disables autorenewal of the subscriptions, and prevents the user from reactivating the subscription once the current period expires: a subscription cancelled by the bot will have the [starsSubscription](https://core.telegram.org/constructor/starsSubscription).`bot_canceled` flag set.  \n    The bot can can partially undo this operation by setting this flag: this will allow the user to reactivate the subscription.\n*   `user_id`: Pass here the ID of the user whose subscription should be (un)cancelled\n*   `charge_id`: Pass here the `provider_charge_id` from the [messageActionPaymentSentMe](https://core.telegram.org/constructor/messageActionPaymentSentMe) service message sent to the bot for the first subscription payment.\n\nSee [here \u00bb](#managing-subscriptions) for more info on how to handle active subscriptions as a subscriber: the [starsSubscription](https://core.telegram.org/constructor/starsSubscription) constructor associated with bot subscriptions will have the `invoice_slug` flag set.\n\n### [](#managing-subscriptions)Managing subscriptions\n\n```\nstarsSubscriptionPricing#05416d58 period:int amount:long = StarsSubscriptionPricing;\n\nstarsSubscription#2e6eab1a flags:# canceled:flags.0?true can_refulfill:flags.1?true missing_balance:flags.2?true bot_canceled:flags.7?true id:string peer:Peer until_date:int pricing:StarsSubscriptionPricing chat_invite_hash:flags.3?string title:flags.4?string photo:flags.5?WebDocument invoice_slug:flags.6?string = StarsSubscription;\n\npayments.starsStatus#6c9ce8ed flags:# balance:StarsAmount subscriptions:flags.1?Vector<StarsSubscription> subscriptions_next_offset:flags.2?string subscriptions_missing_balance:flags.4?long history:flags.3?Vector<StarsTransaction> next_offset:flags.0?string chats:Vector<Chat> users:Vector<User> = payments.StarsStatus;\n\n---functions---\n\npayments.getStarsSubscriptions#032512c5 flags:# missing_balance:flags.0?true peer:InputPeer offset:string = payments.StarsStatus;\npayments.changeStarsSubscription#c7770878 flags:# peer:InputPeer subscription_id:string canceled:flags.0?Bool = Bool;\npayments.getStarsTransactions#69da4557 flags:# inbound:flags.0?true outbound:flags.1?true ascending:flags.2?true subscription_id:flags.3?string peer:InputPeer offset:string limit:int = payments.StarsStatus;\n```\n\nTo obtain a list of all active and cancelled subscriptions invoke [payments.getStarsSubscriptions](https://core.telegram.org/method/payments.getStarsSubscriptions), passing [inputPeerSelf](https://core.telegram.org/constructor/inputPeerSelf) to `peer`: this will return a vector of [starsSubscription](https://core.telegram.org/constructor/starsSubscription) constructors, containing info about each subscription.\n\nTo cancel an active subscription, invoke [payments.changeStarsSubscription](https://core.telegram.org/method/payments.changeStarsSubscription) passing [inputPeerSelf](https://core.telegram.org/constructor/inputPeerSelf) to `peer`, the [starsSubscription](https://core.telegram.org/constructor/starsSubscription).`id` to `subscription_id` and [boolTrue](https://core.telegram.org/constructor/boolTrue) to `canceled`; to resubscribe, invoke the same method passing [boolFalse](https://core.telegram.org/constructor/boolFalse) to `canceled`.\n\nWhen we get close to the end of the subscription period of one or more active subscriptions, and the current Telegram Star balance is not high enough to autorenew at least one of them, the [\"STARS\\_SUBSCRIPTION\\_LOW\\_BALANCE\" suggestion \u00bb](https://core.telegram.org/api/config#suggestions) will be activated: when the user clicks on the suggestion, the client should fetch and display the list of expiring subscriptions by invoking [payments.getStarsSubscriptions](https://core.telegram.org/method/payments.getStarsSubscriptions), passing [inputPeerSelf](https://core.telegram.org/constructor/inputPeerSelf) to `peer` and setting the `missing_balance` flag: the returned subscriptions may be renewed by [filling up the current Telegram Star balance](https://core.telegram.org/api/stars) with at least [payments.starsStatus](https://core.telegram.org/constructor/payments.starsStatus).`subscriptions_missing_balance` stars.\n\n[payments.getStarsTransactions](https://core.telegram.org/method/payments.getStarsTransactions) may be used to fetch only and all transactions for a specific subscription by populating the `subscription_id` flag.",
    "url": "https://core.telegram.org/api/subscriptions"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/paid-media",
      "title": "Paid media",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Paid media"
        },
        {
          "property": "og:description",
          "content": "Content creators can accept Stars by publishing paid photos or videos on their channels.  Subscribers will be allowed to view such posts only after paying the author to unlock them."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:20 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5322",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Paid media\n\nContent creators can accept [Stars](https://core.telegram.org/api/stars) by publishing **paid photos or videos** on their channels. Subscribers will be allowed to view such posts only after paying the author to unlock them.\n\nCreators can then [withdraw Stars using the Toncoin cryptocurrency\u00a0\u00bb](https://core.telegram.org/api/stars#withdrawing-stars), or use them to [advertise their channel](https://core.telegram.org/api/stars#paying-for-ads) and get even more subscribers \u2013 all of this with next to **0 commission** from Telegram.\n\n### [](#posting-paid-media)Posting paid media\n\n```\nchannelFull#bbab348d flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true can_set_location:flags.16?true has_scheduled:flags.19?true can_view_stats:flags.20?true blocked:flags.22?true flags2:# can_delete_channel:flags2.0?true antispam:flags2.1?true participants_hidden:flags2.2?true translations_disabled:flags2.3?true stories_pinned_available:flags2.5?true view_forum_as_messages:flags2.6?true restricted_sponsored:flags2.11?true can_view_revenue:flags2.12?true paid_media_allowed:flags2.14?true can_view_stars_revenue:flags2.15?true paid_reactions_available:flags2.16?true id:long about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int online_count:flags.13?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:flags.23?ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?long migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int folder_id:flags.11?int linked_chat_id:flags.14?long location:flags.15?ChannelLocation slowmode_seconds:flags.17?int slowmode_next_send_date:flags.18?int stats_dc:flags.12?int pts:int call:flags.21?InputGroupCall ttl_period:flags.24?int pending_suggestions:flags.25?Vector<string> groupcall_default_join_as:flags.26?Peer theme_emoticon:flags.27?string requests_pending:flags.28?int recent_requesters:flags.28?Vector<long> default_send_as:flags.29?Peer available_reactions:flags.30?ChatReactions reactions_limit:flags2.13?int stories:flags2.4?PeerStories wallpaper:flags2.7?WallPaper boosts_applied:flags2.8?int boosts_unrestrict:flags2.9?int emojiset:flags2.10?StickerSet = ChatFull;\n\ninputMediaPaidMedia#c4103386 flags:# stars_amount:long extended_media:Vector<InputMedia> payload:flags.0?string = InputMedia;\n\n---functions---\n\nmessages.sendMedia#7852834e flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\n```\n\n[Channel](https://core.telegram.org/api/channel) administrators may forward or post paid media if the [channelFull](https://core.telegram.org/constructor/channelFull).`paid_media_allowed` flag is set.\n\nTo post paid media, use [messages.sendMedia](https://core.telegram.org/method/messages.sendMedia), passing an [inputMediaPaidMedia](https://core.telegram.org/constructor/inputMediaPaidMedia) constructor, containing:\n\n*   In `stars_amount`, the amount of [Telegram Stars](https://core.telegram.org/api/stars) users must pay to obtain access to the media.  \n    The maximum value that can be passed here is specified in the [stars\\_paid\\_post\\_amount\\_max client configuration value\u00a0\u00bb](https://core.telegram.org/api/config#stars-paid-post-amount-max).\n*   In `extended_media`, the actual media files (currently only photos and videos are supported). To send albums, do **not** use [messages.sendMultiMedia](https://core.telegram.org/method/messages.sendMultiMedia), but rather pass all the medias in the `extended_media` array.\n\n### [](#viewing-paid-media)Viewing paid media\n\n```\nmessageExtendedMediaPreview#ad628cc8 flags:# w:flags.0?int h:flags.0?int thumb:flags.1?PhotoSize video_duration:flags.2?int = MessageExtendedMedia;\nmessageExtendedMedia#ee479c64 media:MessageMedia = MessageExtendedMedia;\n\nmessageMediaPaidMedia#a8852491 stars_amount:long extended_media:Vector<MessageExtendedMedia> = MessageMedia;\n\ninputInvoiceMessage#c5b56859 peer:InputPeer msg_id:int = InputInvoice;\n\nupdateMessageExtendedMedia#d5a41724 peer:Peer msg_id:int extended_media:Vector<MessageExtendedMedia> = Update;\nupdateBotPurchasedPaidMedia#283bd312 user_id:long payload:string qts:int = Update;\n\nstarsTransaction#64dfc926 flags:# refund:flags.3?true pending:flags.4?true failed:flags.6?true gift:flags.10?true reaction:flags.11?true id:string stars:StarsAmount date:int peer:StarsTransactionPeer title:flags.0?string description:flags.1?string photo:flags.2?WebDocument transaction_date:flags.5?int transaction_url:flags.5?string bot_payload:flags.7?bytes msg_id:flags.8?int extended_media:flags.9?Vector<MessageMedia> subscription_period:flags.12?int giveaway_post_id:flags.13?int stargift:flags.14?StarGift floodskip_number:flags.15?int starref_commission_permille:flags.16?int starref_peer:flags.17?Peer starref_amount:flags.17?StarsAmount = StarsTransaction;\n\n---functions---\n\nmessages.getExtendedMedia#84f80814 peer:InputPeer id:Vector<int> = Updates;\n```\n\nPaid media is represented by a [messageMediaPaidMedia](https://core.telegram.org/constructor/messageMediaPaidMedia) constructor, containing:\n\n*   In `stars_amount`, the price of the media in [Telegram Stars](https://core.telegram.org/api/stars)\n*   In `extended_media`, a vector of [MessageExtendedMedia](https://core.telegram.org/type/MessageExtendedMedia) constructors, which will **all** be either:\n    *   [messageExtendedMediaPreview](https://core.telegram.org/constructor/messageExtendedMediaPreview), for media the current user hasn't bought yet, **optionally** contains basic info about the media (width, height, [extremely low resolution thumbnail](https://core.telegram.org/api/files#stripped-thumbnails), video duration for videos).\n    *   [messageExtendedMedia](https://core.telegram.org/constructor/messageExtendedMedia), for media the current user has already purchased, containing the actual [messageMediaPhoto](https://core.telegram.org/constructor/messageMediaPhoto)/[messageMediaDocument](https://core.telegram.org/constructor/messageMediaDocument) (video) that can be downloaded and viewed [as usual\u00a0\u00bb](https://core.telegram.org/api/files).\n\nTo purchase paid media, follow the [usual payment flow\u00a0\u00bb](https://core.telegram.org/api/payments#22-getting-invoice-info-about-the-product), passing an [inputInvoiceMessage](https://core.telegram.org/constructor/inputInvoiceMessage) with the peer and message ID of the paid media.\n\nOnce the payment succeds, an [updateMessageExtendedMedia](https://core.telegram.org/constructor/updateMessageExtendedMedia) will be emitted, replacing the [messageExtendedMediaPreview](https://core.telegram.org/constructor/messageExtendedMediaPreview) constructors associated with the message with [messageExtendedMedia](https://core.telegram.org/constructor/messageExtendedMedia) constructors.  \nIf the media was posted by a bot, it will also receive an [updateBotPurchasedPaidMedia](https://core.telegram.org/constructor/updateBotPurchasedPaidMedia).  \nNo other updates will be emitted (i.e. **no** [updateEditChannelMessage](https://core.telegram.org/constructor/updateEditChannelMessage) updates will be emitted for the message containing the paid media, even if re-fetching the same messages through other means like [messages.getHistory](https://core.telegram.org/method/messages.getHistory) _will_ return the revealed [messageExtendedMedia](https://core.telegram.org/constructor/messageExtendedMedia) constructors).\n\nThe associated [starsTransaction](https://core.telegram.org/constructor/starsTransaction) that will be generated will be of type [starsTransactionPeer](https://core.telegram.org/constructor/starsTransactionPeer) (with `peer` equal to the channel), `msg_id` equal to the message ID of the paid media and `extended_media` set to the revealed paid media.\n\n**Note**: the [updateMessageExtendedMedia](https://core.telegram.org/constructor/updateMessageExtendedMedia) update does not have a `pts`/`qts` field.  \nThis means that this update can only be received passively via the socket ([see here\u00a0\u00bb](https://core.telegram.org/api/updates#event-sequences)), and it **cannot** be returned by [updates.getDifference](https://core.telegram.org/method/updates.getDifference) or [updates.getChannelDifference](https://core.telegram.org/method/updates.getChannelDifference).  \nThis implies that if a certain client is offline, and another session purchases a paid media, the first client will not receive the revealed [messageExtendedMedia](https://core.telegram.org/constructor/messageExtendedMedia) constructors when it reconnects to the server, and it would have no way to know that a cached paid media can be revealed to the user.\n\nTo bypass this issue, if:\n\n*   One or more messages containing not-yet-bought paid media are visible to the user.\n    \n*   From the messages selected above, include only messages received _before_ the client last went offline (i.e. exclude paid media messages that were received and cached via updates or getHistory/getMessages/etc N seconds ago, and the client connected to the server M >= N seconds ago).\n    \n*   From the messages selected above, include only messages for which [messages.getExtendedMedia](https://core.telegram.org/method/messages.getExtendedMedia) was called more than 15 seconds ago.\n    \n*   For all messages satisfying the above conditions, make a single query to [messages.getExtendedMedia](https://core.telegram.org/method/messages.getExtendedMedia), aggregating matching message IDs in `id`.  \n    The method will return an array of [updateMessageExtendedMedia](https://core.telegram.org/constructor/updateMessageExtendedMedia) updates, only for passed messages containing **already bought** paid media.  \n    No information will be returned for passed messages containing not yet bought paid media, or not containing paid media.\n    \n    Repeat the method call every 15 seconds if at least one of the messages satisfying the above conditions is still visible.  \n    Repeat the method call immediately if a new paid message satisfying the above conditions scrolls into view.",
    "url": "https://core.telegram.org/api/paid-media"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/antispam",
      "title": "Native antispam system",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Native antispam system"
        },
        {
          "property": "og:description",
          "content": "Admins of supergroups with a certain number of members can choose to unleash the full proactive power of Telegram's own antispam algorithms \u2013 turning on the new Aggressive mode for the automated spam filters."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:18 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3169",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Native antispam system\n\nAdmins of supergroups with a certain number of members can choose to unleash the full proactive power of Telegram's own antispam algorithms \u2013 turning on the new Aggressive mode for the automated spam filters.\n\nSchema:\n\n```\nchannelFull#bbab348d flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true can_set_location:flags.16?true has_scheduled:flags.19?true can_view_stats:flags.20?true blocked:flags.22?true flags2:# can_delete_channel:flags2.0?true antispam:flags2.1?true participants_hidden:flags2.2?true translations_disabled:flags2.3?true stories_pinned_available:flags2.5?true view_forum_as_messages:flags2.6?true restricted_sponsored:flags2.11?true can_view_revenue:flags2.12?true paid_media_allowed:flags2.14?true can_view_stars_revenue:flags2.15?true paid_reactions_available:flags2.16?true id:long about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int online_count:flags.13?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:flags.23?ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?long migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int folder_id:flags.11?int linked_chat_id:flags.14?long location:flags.15?ChannelLocation slowmode_seconds:flags.17?int slowmode_next_send_date:flags.18?int stats_dc:flags.12?int pts:int call:flags.21?InputGroupCall ttl_period:flags.24?int pending_suggestions:flags.25?Vector<string> groupcall_default_join_as:flags.26?Peer theme_emoticon:flags.27?string requests_pending:flags.28?int recent_requesters:flags.28?Vector<long> default_send_as:flags.29?Peer available_reactions:flags.30?ChatReactions reactions_limit:flags2.13?int stories:flags2.4?PeerStories wallpaper:flags2.7?WallPaper boosts_applied:flags2.8?int boosts_unrestrict:flags2.9?int emojiset:flags2.10?StickerSet = ChatFull;\n\nchannelAdminLogEventActionToggleAntiSpam#64f36dfc new_value:Bool = ChannelAdminLogEventAction;\nchannelAdminLogEventActionDeleteMessage#42e047bb message:Message = ChannelAdminLogEventAction;\n\n---functions---\n\nchannels.toggleAntiSpam#68f3e4eb channel:InputChannel enabled:Bool = Updates;\nchannels.reportAntiSpamFalsePositive#a850a693 channel:InputChannel msg_id:int = Bool;\n```\n\nNative antispam functionality can be enabled for [supergroups](https://core.telegram.org/api/channel) using [channels.toggleAntiSpam](https://core.telegram.org/method/channels.toggleAntiSpam), if the supergroup has at least `telegram_antispam_group_size_min` members, as specified by the [client configuration parameters](https://core.telegram.org/api/config#client-configuration).\n\nOnce enabled, Telegram's native antispam system will start monitoring the supergrup, automatically deleting spam messages using the official Telegram Antispam bot, with ID equal to `telegram_antispam_user_id`, as specified by the [client configuration parameters](https://core.telegram.org/api/config#client-configuration).  \nNote that this bot **does not** have to be added as participant or admin to the supergroup for the native antispam system to work, just invoking [channels.toggleAntiSpam](https://core.telegram.org/method/channels.toggleAntiSpam) is enough; however, it should still be locally shown as a group admin when displaying the admin list to the user (clients should simply append it to the admin list _without_ invoking [channels.editAdmin](https://core.telegram.org/method/channels.editAdmin)).\n\nFalse positive message deletions can be reported by admins by navigating through the [admin log](https://core.telegram.org/api/recent-actions), and invoking [channels.reportAntiSpamFalsePositive](https://core.telegram.org/method/channels.reportAntiSpamFalsePositive) for mistaken [channelAdminLogEventActionDeleteMessage](https://core.telegram.org/constructor/channelAdminLogEventActionDeleteMessage) events made by the `telegram_antispam_user_id` bot.",
    "url": "https://core.telegram.org/api/antispam"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/gifts",
      "title": "Telegram Gifts",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Telegram Gifts"
        },
        {
          "property": "og:description",
          "content": "Users can send Gifts to their friends. The recipients of gifts can display them on their profile pages or turn them into Telegram Stars &raquo;. Telegram Stars can be used for many things, including supporting creators and buying services in mini apps."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:20 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3354",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Telegram Gifts\n\nUsers can send **Gifts** to their friends. The recipients of gifts can display them on their profile pages or turn them into [Telegram Stars \u00bb](https://core.telegram.org/api/stars). Telegram Stars can be used for many things, including supporting creators and buying services in mini apps.\n\n```\npayments.starGiftsNotModified#a388a368 = payments.StarGifts;\npayments.starGifts#901689ea hash:int gifts:Vector<StarGift> = payments.StarGifts;\n\nstarGift#49c577cd flags:# limited:flags.0?true sold_out:flags.1?true birthday:flags.2?true id:long sticker:Document stars:long availability_remains:flags.0?int availability_total:flags.0?int convert_stars:long first_sale_date:flags.1?int last_sale_date:flags.1?int = StarGift;\n\ninputInvoiceStarGift#25d8c1d8 flags:# hide_name:flags.0?true user_id:InputUser gift_id:long message:flags.1?TextWithEntities = InputInvoice;\n\nmessageActionStarGift#8557637 flags:# name_hidden:flags.0?true saved:flags.2?true converted:flags.3?true gift:StarGift message:flags.1?TextWithEntities convert_stars:flags.4?long = MessageAction;\n\npayments.userStarGifts#6b65b517 flags:# count:int gifts:Vector<UserStarGift> next_offset:flags.0?string users:Vector<User> = payments.UserStarGifts;\n\ninputPrivacyKeyStarGiftsAutoSave#e1732341 = InputPrivacyKey;\nprivacyKeyStarGiftsAutoSave#2ca4fdf8 = PrivacyKey;\n\n---functions---\n\npayments.getStarGifts#c4563590 hash:int = payments.StarGifts;\npayments.saveStarGift#87acf08e flags:# unsave:flags.0?true user_id:InputUser msg_id:int = Bool;\npayments.convertStarGift#0421e027 user_id:InputUser msg_id:int = Bool;\n\npayments.getUserStarGifts#5e72c7e1 user_id:InputUser offset:string limit:int = payments.UserStarGifts;\n```\n\nUse [payments.getStarGifts](https://core.telegram.org/method/payments.getStarGifts) to obtain the full list of of available [starGifts](https://core.telegram.org/constructor/starGift).\n\nOnce the user chooses a (non-`sold_out`) gift, they may buy it spending [starGift](https://core.telegram.org/constructor/starGift).`stars` [Telegram Stars](https://core.telegram.org/api/stars) from our balance by invoking [payments.getPaymentForm](https://core.telegram.org/method/payments.getPaymentForm), passing an [inputInvoiceStarGift](https://core.telegram.org/constructor/inputInvoiceStarGift), passing the following parameters:\n\n*   `user_id`: Identifier of the user that will receive the gift\n*   `gift_id`: Identifier of the gift, from [starGift](https://core.telegram.org/constructor/starGift).`id`\n*   `message`: Optional message, attached with the gift: the maximum length for this field is specified in the [stargifts\\_message\\_length\\_max client configuration value \u00bb](https://core.telegram.org/api/config#stargifts-message-length-max).\n*   `hide_name`: If set, your name will be hidden if the destination user decides to display the gift on their profile (they will still see that you sent the gift)\n\nThen, follow the [usual payment flow \u00bb](https://core.telegram.org/api/payments#22-getting-invoice-info-about-the-product).\n\nOnce the payment is completed, the user passed to `user_id` will receive a [messageService](https://core.telegram.org/constructor/messageService) with a [messageActionStarGift](https://core.telegram.org/constructor/messageActionStarGift) from us, containing info about the received gift.\n\nThe user may then choose to display the received gift on their profile using [payments.saveStarGift](https://core.telegram.org/method/payments.saveStarGift).  \nReceived gifts may also be automatically displayed on the profile, depending on the destination user's [privacy settings](https://core.telegram.org/api/privacy) ([inputPrivacyKeyStarGiftsAutoSave](https://core.telegram.org/constructor/inputPrivacyKeyStarGiftsAutoSave) key).\n\nAlternatively, the gift may be converted into [Telegram Stars](https://core.telegram.org/api/stars) using [payments.convertStarGift](https://core.telegram.org/method/payments.convertStarGift); the latter operation will permanently destroy the gift, converting it into [starGift](https://core.telegram.org/constructor/starGift).`convert_stars` Telegram Stars, added to the user's balance (note that [starGift](https://core.telegram.org/constructor/starGift).`convert_stars` will be less than the buying price ([starGift](https://core.telegram.org/constructor/starGift).`stars`) of the gift if it was originally bought using Telegram Stars bought a long time ago).  \nA gift can be converted back into [Telegram Stars](https://core.telegram.org/api/stars) only if it was received less than [`stargifts_convert_period_max` seconds ago, as specified by the client configuration \u00bb](https://core.telegram.org/api/config#stargifts-convert-period-max).\n\nBoth methods take a `user_id` and a `msg_id`, the first should contain the identifier of the user that sent us the gift, and the second should contain the ID of the [messageService](https://core.telegram.org/constructor/messageService) with the [messageActionStarGift](https://core.telegram.org/constructor/messageActionStarGift).\n\nIf the user decides to display the received gift on their profile, it will be fetchable by all users using [payments.getUserStarGifts](https://core.telegram.org/method/payments.getUserStarGifts).  \nThe same method may also be used to fetch all gifts received by the current user from any user, by passing [inputUserSelf](https://core.telegram.org/constructor/inputUserSelf) to `user_id`.\n\nNote that gift support must disabled if the [`stargifts_blocked` client configuration flag \u00bb](https://core.telegram.org/api/config) is set to true.",
    "url": "https://core.telegram.org/api/gifts"
  },
  {
    "metadata": {
      "canonicalUrl": "https://telegram.org/apps?setln=en",
      "title": "Telegram Applications",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Telegram Applications"
        },
        {
          "property": "og:site_name",
          "content": "Telegram"
        },
        {
          "property": "og:description",
          "content": "Telegram apps are open source and support reproducible builds. Anyone can independently verify that Telegram apps you download\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:23 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3835",
        "set-cookie": "stel_ssid=bd4a25f71f3025bb2b_15167492313854882050; expires=Fri, 16 May 2025 13:15:03 GMT; path=/; samesite=None; secure; HttpOnly\nstel_ln=en; expires=Mon, 11 May 2026 09:11:07 GMT; path=/; domain=telegram.org; HttpOnly",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=31536000; includeSubDomains; preload",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Telegram Applications\n\nTelegram apps are **open source** and support [reproducible builds](https://core.telegram.org/reproducible-builds). Anyone can independently verify that Telegram apps you download from App Store or Google Play were built using the [exact same code](#source-code) that we publish.\n\n#### [](#mobile-apps)Mobile apps\n\n*   [Telegram for Android](https://telegram.org/android)\n*   [Telegram for iPhone and iPad](https://telegram.org/dl/ios)\n\n#### [](#desktop-apps)Desktop apps\n\n*   [Telegram for Windows/Mac/Linux](https://desktop.telegram.org/)\n*   [Telegram for macOS](https://macos.telegram.org/)\n\n#### [](#web-apps)Web apps\n\n*   [Telegram WebA](https://telegram.org/dl/weba)\n*   [Telegram WebK](https://telegram.org/dl/webk)\n\n#### [](#telegram-database-library-tdlib)Telegram Database Library (TDLib)\n\n*   [TDLib](https://core.telegram.org/tdlib) \u2013 a cross-platform client designed to facilitate creating custom apps on the Telegram platform.\n*   [Telegram X for Android](https://play.google.com/store/apps/details?id=org.thunderdog.challegram&hl=en) \u2013 a slick experimental Telegram client based on TDLib.\n\n#### [](#unofficial-apps)Unofficial apps\n\n*   [Unigram, a client optimized for Windows](https://github.com/UnigramDev/Unigram) (based on [TDLib](https://core.telegram.org/tdlib))\n*   [Telegram CLI for Linux](https://telegram.org/dl/cli)\n*   [MadelineProto](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#source-code)Source code\n\nThis code allows security researchers to **fully evaluate** our [end-to-end encryption implementation](https://core.telegram.org/api/end-to-end). It is also possible to **independently verify** that Telegram apps available on Google Play and App Store are built using the [same code](https://core.telegram.org/reproducible-builds) that we publish on GitHub.\n\n##### [](#telegram-database-library)[Telegram Database Library](https://github.com/tdlib/td)\n\nCross-platform library for building custom Telegram apps, see [TDLib](https://core.telegram.org/tdlib) for details.  \nLicensed under [Boost 1.0](https://www.boost.org/LICENSE_1_0.txt).  \n[GitHub \u00bb](https://github.com/tdlib/td)\n\n##### [](#telegram-for-android)[Telegram for Android](https://github.com/DrKLO/Telegram)\n\nOfficial Android App, see [Google Play Market page](https://telegram.org/dl/android) for full description.  \nLicensed under [GNU GPL v. 2 or later](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/DrKLO/Telegram)  \n[Download APK File \u00bb](https://telegram.org/dl/android/apk)\n\n##### [](#telegram-for-ios)[Telegram for iOS](https://github.com/TelegramMessenger/Telegram-iOS)\n\nLicensed under [GNU GPL v. 2 or later](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/TelegramMessenger/Telegram-iOS)\n\n##### [](#telegram-for-macos)[Telegram for macOS](https://github.com/overtake/TelegramSwift)\n\nNative macOS client.  \nLicensed under [GNU GPL v. 2](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/overtake/TelegramSwift)\n\n##### [](#telegram-for-web-browsers)Telegram for Web browsers\n\n*   [**Telegram Web, Version K**](https://github.com/morethanwords/tweb). Mac, Windows, Linux, Mobile.  \n    Licensed under [GNU GPL v. 3](https://github.com/morethanwords/tweb/blob/master/LICENSE).  \n    [GitHub \u00bb](https://github.com/morethanwords/tweb)\n    \n*   [**Telegram Web, Version A**](https://github.com/Ajaxy/telegram-tt). Mac, Windows, Linux, Mobile.  \n    Licensed under [GNU GPL v. 3](https://github.com/Ajaxy/telegram-tt/blob/master/LICENSE).  \n    [GitHub \u00bb](https://github.com/Ajaxy/telegram-tt)\n    \n*   [Legacy JavaScript client](https://github.com/zhukov/webogram). Mac, Windows, Linux.  \n    Licensed under [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n    [GitHub \u00bb](https://github.com/zhukov/webogram)\n    \n\n##### [](#telegram-react)[Telegram React](https://github.com/evgeny-nadymov/telegram-react)\n\nJavaScript client for browsers. Mac, Windows, Linux.  \nLicensed under [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-react)\n\n##### [](#telegram-desktop)[Telegram Desktop](https://github.com/telegramdesktop/tdesktop)\n\nQt-based desktop client. Mac, Windows, Linux.  \nLicensed under [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/telegramdesktop/tdesktop)\n\n##### [](#telegram-for-wp)[Telegram for WP](https://github.com/evgeny-nadymov/telegram-wp)\n\nLicensed under [GNU GPL v. 2 or later](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-wp)\n\n##### [](#telegram-x-for-android)[Telegram X for Android](https://github.com/TGX-Android/Telegram-X)\n\nAlternative Telegram client for Android based on TDLib.  \nLicensed under [GPL v.3.0](https://github.com/TGX-Android/Telegram-X/blob/main/LICENSE)  \n[GitHub \u00bb](https://github.com/TGX-Android/Telegram-X)\n\n#### [](#unofficial-apps)Unofficial apps\n\n##### [](#telegram-cli-unofficial)[Telegram CLI](https://github.com/vysheng/tg) (Unofficial)\n\nLinux Command-line interface for Telegram.  \nLicensed under [GNU GPL v. 2](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/vysheng/tg)\n\n##### [](#unigram-unofficial)[Unigram](https://github.com/UnigramDev/Unigram) (Unofficial)\n\nA Telegram client optimized for Windows.  \nLicensed under [GNU GPL v. 3 or later](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/UnigramDev/Unigram)\n\n##### [](#madelineproto-unofficial)[MadelineProto](https://github.com/danog/MadelineProto) (Unofficial)\n\nA PHP MTProto Telegram client.  \nLicensed under [GNU AGPL v. 3](https://www.gnu.org/licenses/agpl-3.0.en.html).  \n[GitHub \u00bb](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#bug-bounty-program)Bug Bounty Program\n\nTelegram welcomes developers and the security research community to audit its services, [code](https://telegram.org/apps#source-code) and [protocol](https://core.telegram.org/mtproto) seeking vulnerabilities or security-related issues. [Learn more about our Bug Bounty Program here](https://core.telegram.org/bug-bounty).",
    "url": "https://telegram.org/apps?setln=en"
  },
  {
    "metadata": {
      "canonicalUrl": "https://telegram.org/apps?setln=id",
      "title": "Aplikasi Telegram",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Aplikasi Telegram"
        },
        {
          "property": "og:site_name",
          "content": "Telegram"
        },
        {
          "property": "og:description",
          "content": "Aplikasi Telegram bersifat sumber terbuka dan mendukung reproducible build. Siapa pun dapat secara independen membuktikan\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:24 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4043",
        "set-cookie": "stel_ln=id; expires=Tue, 12 May 2026 18:09:01 GMT; path=/; domain=telegram.org; HttpOnly",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=31536000; includeSubDomains; preload",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Aplikasi Telegram\n\nAplikasi Telegram bersifat **sumber terbuka** dan mendukung [reproducible build](https://core.telegram.org/reproducible-builds). Siapa pun dapat secara independen membuktikan bahwa aplikasi Telegram yang mereka unduh dari App Store atau Google Play dibangun dari [kode yang sama](#source-code) dengan yang kami terbitkan.\n\n#### [](#aplikasi-seluler)Aplikasi seluler\n\n*   [Telegram untuk Android](https://telegram.org/android)\n*   [Telegram untuk iPhone dan iPad](https://telegram.org/dl/ios)\n\n#### [](#aplikasi-desktop)Aplikasi desktop\n\n*   [Telegram untuk Windows/Mac/Linux](https://desktop.telegram.org/)\n*   [Telegram untuk macOS](https://macos.telegram.org/)\n\n#### [](#aplikasi-web)Aplikasi web\n\n*   [Telegram WebA](https://telegram.org/dl/weba)\n*   [Telegram WebK](https://telegram.org/dl/webk)\n\n#### [](#telegram-database-library-tdlib)Telegram Database Library (TDLib)\n\n*   [TDLib](https://core.telegram.org/tdlib) \u2013 klien lintas platform yang didesain untuk memfasilitasi pembuatan aplikasi kustom di platform Telegram.\n*   [Telegram X untuk Android](https://play.google.com/store/apps/details?id=org.thunderdog.challegram&hl=en) \u2013 klien eksperimental Telegram yang sederhana berdasar TDLib.\n\n#### [](#aplikasi-tidak-resmi)Aplikasi tidak resmi\n\n*   [Unigram, klien yang dioptimisasi untuk Windows](https://github.com/UnigramDev/Unigram) (berdasar [TDLib](https://core.telegram.org/tdlib))\n*   [Telegram CLI untuk Linux](https://telegram.org/dl/cli)\n*   [MadelineProto](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#kode-sumber)Kode sumber\n\nUntuk saat ini, kami berfokus pada penyediaan sumber terbuka hal-hal yang membantu pengembang membangun sesuatu dengan cepat menggunakan API kami. Kami telah menerbitkan kode untuk Android, iOS, dan aplikasi desktop (Win, macOS, dan Linux) beserta Telegram Database Library.\n\n> Kode ini memungkinkan peneliti keamanan untuk **secara penuh mengevaluasi** [implementasi enkripsi end-to-end](https://core.telegram.org/api/end-to-end) kami. Siapa pun juga dapat **secara independen membuktikan** bahwa aplikasi Telegram yang tersedia di Google Play dan App Store dibangun dari [kode yang sama](#source-code) dengan yang kami terbitkan di Github.\n\n##### [](#telegram-database-library)[Telegram Database Library](https://github.com/tdlib/td)\n\nPustaka lintas platform untuk pengembangan aplikasi Telegram kustom, kunjungi [TDLib](https://core.telegram.org/tdlib) untuk detailnya.  \nDilisensikan di bawah [Boost 1.0](https://www.boost.org/LICENSE_1_0.txt).\n\n[GitHub \u00bb](https://github.com/tdlib/td)\n\n##### [](#telegram-untuk-android)[Telegram untuk Android](https://github.com/DrKLO/Telegram)\n\nAplikasi Android Resmi, kunjungi [Google Play Market page](https://telegram.org/dl/android) untuk deskripsi lengkapnya.  \nDilisensikan di bawah [GNU GPL v. 2 or later](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).\n\n[GitHub \u00bb](https://github.com/DrKLO/Telegram)  \n[Unduh Berkas APK \u00bb](https://telegram.org/dl/android/apk)\n\n##### [](#telegram-untuk-ios)[Telegram untuk iOS](https://github.com/TelegramMessenger/Telegram-iOS)\n\nDilisensikan di bawah [GNU GPL v. 2 or later](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/TelegramMessenger/Telegram-iOS)\n\n##### [](#telegram-untuk-macos)[Telegram untuk macOS](https://github.com/overtake/TelegramSwift)\n\nKlien macOS asli.  \nDilisensikan di bawah [GNU GPL v. 2](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/overtake/TelegramSwift)\n\n##### [](#telegram-untuk-peramban-web)Telegram untuk Peramban Web\n\n*   [**Telegram Web, Version K**](https://github.com/morethanwords/tweb). Mac, Windows, Linux, Seluler.  \n    Dilisensikan di bawah [GNU GPL v. 3](https://github.com/morethanwords/tweb/blob/master/LICENSE).  \n    [GitHub \u00bb](https://github.com/morethanwords/tweb)\n    \n*   [**Telegram Web, Versi A**](https://github.com/Ajaxy/telegram-tt). Mac, Windows, Linux, Seluler.  \n    Dilisensikan di bawah [GNU GPL v. 3](https://github.com/Ajaxy/telegram-tt/blob/master/LICENSE).  \n    [GitHub \u00bb](https://github.com/Ajaxy/telegram-tt)\n    \n*   [Legacy JavaScript client](https://github.com/zhukov/webogram). Mac, Windows, Linux.  \n    Dilisensikan di bawah [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n    [GitHub \u00bb](https://github.com/zhukov/webogram)\n    \n\n##### [](#telegram-react)[Telegram React](https://github.com/evgeny-nadymov/telegram-react)\n\nKlien JavaScript untuk browsers. Mac, Windows, Linux.  \nDilisensikan di bawah [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-react)\n\n##### [](#telegram-desktop)[Telegram Desktop](https://github.com/telegramdesktop/tdesktop)\n\nKlien desktop Qt-based. Mac, Windows, Linux.  \nDilisensikan di bawah [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/telegramdesktop/tdesktop)\n\n##### [](#telegram-untuk-wp)[Telegram untuk WP](https://github.com/evgeny-nadymov/telegram-wp)\n\nDilisensikan di bawah [GNU GPL v. 2 or later](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-wp)\n\n##### [](#telegram-x-untuk-android)[Telegram X untuk Android](https://github.com/TGX-Android/Telegram-X)\n\nKlien Telegram alternatif untuk Android berdasarkan TDLib.  \nDilisensikan di bawah [GPL v.3.0](https://github.com/TGX-Android/Telegram-X/blob/main/LICENSE)  \n[GitHub \u00bb](https://github.com/TGX-Android/Telegram-X)\n\n#### [](#aplikasi-tidak-resmi)Aplikasi tidak resmi\n\n##### [](#telegram-cli-tidak-resmi)[Telegram CLI](https://github.com/vysheng/tg) (Tidak Resmi)\n\nAntarmuka Linux Command-line untuk Telegram.  \nDilisensikan di bawah [GNU GPL v. 2](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/vysheng/tg)\n\n##### [](#unigram-tidak-resmi)[Unigram](https://github.com/UnigramDev/Unigram) (Tidak Resmi)\n\nKlien Telegram yang dioptimisasi untuk Windows.  \nDilisensikan di bawah [GNU GPL v. 3 or later](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/UnigramDev/Unigram)\n\n##### [](#madelineproto-tidak-resmi)[MadelineProto](https://github.com/danog/MadelineProto) (Tidak Resmi)\n\nKlien Telegram PHP MTProto.  \nDilisensikan di bawah [GNU AGPL v. 3](https://www.gnu.org/licenses/agpl-3.0.en.html).  \n[GitHub \u00bb](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#program-bug-bounty)Program Bug Bounty\n\nTelegram menyambut pengembang dan komunitas peneliti keamanan untuk mengaudit layanannya, [kode](https://telegram.org/apps#source-code), dan [protokol](https://core.telegram.org/mtproto) guna mencari kerentanan atau isu keamanan lainnya. [Pelajari selengkapnya mengenai Program Bug Bounty di sini](https://core.telegram.org/bug-bounty).",
    "url": "https://telegram.org/apps?setln=id"
  },
  {
    "metadata": {
      "canonicalUrl": "https://telegram.org/apps?setln=ms",
      "title": "Aplikasi Telegram",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Aplikasi Telegram"
        },
        {
          "property": "og:site_name",
          "content": "Telegram"
        },
        {
          "property": "og:description",
          "content": "Aplikasi kami adalah sumber terbuka dan menyokong pembangunan boleh diulang. Ini bermakna sesiapa boleh mengesahkan secara bebas bahawa kod di GitHub kami adalah kod yang sama yang diguna untuk membangun aplikasi yang anda muat turun dari App Store atau Google Play."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:25 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3793",
        "set-cookie": "stel_ln=ms; expires=Wed, 20 May 2026 03:38:31 GMT; path=/; domain=telegram.org; HttpOnly",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=31536000; includeSubDomains; preload",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Aplikasi Telegram\n\n> Aplikasi kami adalah **sumber terbuka** dan menyokong **pembangunan boleh diulang**. Ini bermakna sesiapa boleh mengesahkan secara bebas bahawa [kod di GitHub](#source-code) kami adalah kod yang sama yang diguna untuk membangun aplikasi yang anda muat turun dari App Store atau Google Play. Juruprogram adalah dialu-alukan untuk memeriksa [Garis panduan untuk Pembangunan Boleh Diulang untuk iOS dan Android](https://core.telegram.org/reproducible-builds) kami.\n\n#### [](#aplikasi-mobil)Aplikasi mobil\n\n*   [Telegram untuk Android (Google Play)](https://telegram.org/dl/android)\n*   [Telegram untuk Android (APK)](https://telegram.org/dl/android/apk)\n*   [Telegram untuk iPhone dan iPad](https://telegram.org/dl/ios)\n*   [Telegram untuk WP](https://telegram.org/dl/wp)\n\n> Anda boleh juga muat turun versi terkini **Telegram untuk Android** dari [channel ini](https://t.me/TAndroidAPK).\n\n#### [](#aplikasi-desktop)Aplikasi Desktop\n\n*   [Telegram untuk Windows/Mac/Linux](https://desktop.telegram.org/)\n*   [Telegram untuk macOS](https://macos.telegram.org/)\n\n#### [](#aplikasi-web)Aplikasi Web\n\n*   [Telegram versi Web](https://telegram.org/dl/webogram)\n*   [Telegram aplikasi Chrome](https://telegram.org/dl/webogram/chromeapp)\n*   [Telegram Bertindak React](https://evgeny-nadymov.github.io/telegram-react/)\n\n#### [](#telegram-database-library-tdlib)Telegram Database Library (TDLib)\n\n*   [TDLib](https://core.telegram.org/tdlib) \u2013 klien merentas platform yang direka untuk memudahkan membuat aplikasi tersuai di platform Telegram.\n*   [Telegram X untuk Android](https://play.google.com/store/apps/details?id=org.thunderdog.challegram&hl=en) \u2013 pelanggan Telegram percubaan yang licin berdasarkan TDLib.\n\n#### [](#aplikasi-tidak-rasmi)Aplikasi tidak rasmi\n\n*   [Unigram, klien dioptimakan untuk Windows10](https://github.com/UnigramDev/Unigram) (berdasarkan [TDLib](https://core.telegram.org/tdlib)) (desktop dan Xbox One)\n*   [Telegram CLI untuk Linux](https://telegram.org/dl/cli)\n*   [MadelineProto](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#kod-sumber)Kod sumber\n\nBuat masa ini kami memberi tumpuan kepada sumber terbuka yang membolehkan juruprogram membuat sesuatu dengan cepat menggunakan API kami. Kami telah menerbitkan kod untuk aplikasi Android, iOS, web dan desktop kami (Win, macOS dan Linux) dan juga Telegram Database Library.\n\n> Kod ini membolehkan penyelidik sekuriti untuk **menilai sepenuhnya** [Pelaksanaan inkripsi awal ke akhir](https://core.telegram.org/api/end-to-end) kami. Ia juga dapat **mengesahkan secara bebas** bahawa aplikasi Telegram yang tersedia di Google Play dan App Store dibina menggunakan [kod sama](https://core.telegram.org/reproducible-builds) yang kami terbit di GitHub.\n\n##### [](#telegram-database-library)[Telegram Database Library](https://github.com/tdlib/td)\n\nPerpustakaan merentas platform untuk membina aplikasi Telegram tersuai, lihat [TDLib](https://core.telegram.org/tdlib) untuk maklumat terperinci.  \nDilesen di bawah [Boost 1.0](https://www.boost.org/LICENSE_1_0.txt).  \n[GitHub \u00bb](https://github.com/tdlib/td)\n\n##### [](#telegram-untuk-android)[Telegram untuk Android](https://github.com/DrKLO/Telegram)\n\nAplikasi Android Rasmi, lihat [Halaman Google Play Market](https://telegram.org/dl/android) untuk keterangan penuh.  \nDilesen di bawah [GNU GPL v. 2 atau terkemudian](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/DrKLO/Telegram)  \n[Muat turun Fail APK\u00bb](https://telegram.org/dl/android/apk)\n\n##### [](#telegram-untuk-ios)[Telegram untuk iOS](https://github.com/TelegramMessenger/Telegram-iOS)\n\nDilesen di bawah [GNU GPL v. 2 atau terkemudian](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/TelegramMessenger/Telegram-iOS)\n\n##### [](#telegram-untuk-macos)[Telegram untuk macOS](https://github.com/overtake/TelegramSwift)\n\nKlien macOS asli.  \nDilesen di bawah [GNU GPL v. 2](http://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/overtake/TelegramSwift)\n\n##### [](#telegram-untuk-web-browser)[Telegram untuk Web browser](https://github.com/zhukov/webogram)\n\nKlien Javascript untuk browser. Mac, Windows, Linux.  \nDilesen di bawah [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/zhukov/webogram)\n\n##### [](#telegram-react)[Telegram React](https://github.com/evgeny-nadymov/telegram-react)\n\nKlien Javascript untuk browser. Mac, Windows, Linux.  \nDilesen di bawah [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-react)\n\n##### [](#telegram-desktop)[Telegram Desktop](https://github.com/telegramdesktop/tdesktop)\n\nKlien Qt-based desktop. Mac, Windows, Linux.  \nDilesen di bawah [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/telegramdesktop/tdesktop)\n\n##### [](#telegram-untuk-wp)[Telegram untuk WP](https://github.com/evgeny-nadymov/telegram-wp)\n\nDilesen di bawah [GNU GPL v. 2 atau terkemudian](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-wp)\n\n#### [](#aplikasi-tidak-rasmi)Aplikasi tidak rasmi\n\n##### [](#telegram-cli-tidak-rasmi)[Telegram CLI](https://github.com/vysheng/tg) (Tidak rasmi)\n\nPerantaraan \u201cLinux Command-line\u201d untuk Telegram.  \nDilesen di bawah [GNU GPL v. 2](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/vysheng/tg)\n\n##### [](#unigram-tidak-rasmi)[Unigram](https://github.com/UnigramDev/Unigram) (Tidak rasmi)\n\nKlien Telegram di optimakan untuk Windows 10 (desktop dan Xbox One).  \nDilesen di bawah [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html) atau terkemudian.  \n[GitHub \u00bb](https://github.com/UnigramDev/Unigram)\n\n##### [](#madelineproto-tidak-rasmi)[MadelineProto](https://github.com/danog/MadelineProto) (Tidak rasmi)\n\nKlien Telegram A PHP MTProto.  \nDilesen di bawah [GNU AGPL v. 3](https://www.gnu.org/licenses/agpl-3.0.en.html)  \n[GitHub \u00bb](http://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#kontak-untuk-penyelidik-sekuriti)Kontak untuk penyelidik sekuriti\n\nSekiranya anda mempunyai masalah dengan aplikasi dan protokol Telegram, atau mempunyai pertanyaan mengenai pelaksanaan ciri keselamatan kami, sila hubungi kami di **security@telegram.org**.",
    "url": "https://telegram.org/apps?setln=ms"
  },
  {
    "metadata": {
      "canonicalUrl": "https://telegram.org/apps?setln=de",
      "title": "Telegram Apps",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Telegram Apps"
        },
        {
          "property": "og:site_name",
          "content": "Telegram"
        },
        {
          "property": "og:description",
          "content": "Unsere Anwendungen sind Open Source und unterst\u00fctzen nachvollziehbare Builds. Das bedeutet, dass jeder \u00fcberpr\u00fcfen kann\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:26 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4255",
        "set-cookie": "stel_ln=de; expires=Sat, 09 May 2026 13:48:21 GMT; path=/; domain=telegram.org; HttpOnly",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=31536000; includeSubDomains; preload",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Telegram Apps\n\nUnsere Anwendungen sind **Open Source** und unterst\u00fctzen [nachvollziehbare Builds](https://core.telegram.org/reproducible-builds). Das bedeutet, dass jeder \u00fcberpr\u00fcfen kann, dass der [Code auf GitHub](#source-code) genau derselbe ist, der f\u00fcr die Apps im App Store oder bei Google Play verwendet wurde.\n\n#### [](#mobile-apps)Mobile Apps\n\n*   [Telegram f\u00fcr Android](https://telegram.org/android)\n*   [Telegram f\u00fcr iPhone oder iPad](https://telegram.org/dl/ios)\n\n#### [](#desktop-apps)Desktop Apps\n\n*   [Telegram f\u00fcr Windows/Mac/Linux](https://desktop.telegram.org/)\n*   [Telegram f\u00fcr macOS](https://macos.telegram.org/)\n\n#### [](#web-apps)Web Apps\n\n*   [Telegram WebA](https://telegram.org/dl/weba)\n*   [Telegram WebK](https://telegram.org/dl/webk)\n\n#### [](#telegram-database-library-tdlib)Telegram Database Library (TDLib)\n\n*   [TDLib](https://core.telegram.org/tdlib) \u2013 eine plattform\u00fcbergreifende Bibliothek, die die Entwicklung eigener Anwendungen auf der Telegram-Plattform erleichtert.\n*   [Telegram X f\u00fcr Android](https://play.google.com/store/apps/details?id=org.thunderdog.challegram&hl=en) \u2013 eine schlanke, _experimentelle_ App, die auf TDLib basiert.\n\n#### [](#inoffizielle-apps)Inoffizielle Apps\n\n*   [Unigram](https://github.com/UnigramDev/Unigram) \u2013 speziell f\u00fcr Windows optimiert, basierend auf [TDLib](https://core.telegram.org/tdlib).\n*   [Telegram CLI f\u00fcr Linux](https://telegram.org/dl/cli) \u2013 ein Kommandozeilen-Client.\n*   [MadelineProto](https://github.com/danog/MadelineProto) \u2013 eine PHP-Bibliothek f\u00fcr die Telegram-API.\n\n* * *\n\n### [](#quelltext)Quelltext\n\nDerzeit konzentrieren wir uns auf Angebote, die Entwicklern n\u00fctzlich sind. Wir stellen eine gut dokumentierte API bereit, die es Entwicklern erm\u00f6glicht, neue Telegram-Apps zu erstellen. Der Quellcode unserer Android-, iOS-, Web- und Desktop-Apps (Windows, macOS und Linux) sowie der Telegram Database Library ist ebenfalls \u00f6ffentlich verf\u00fcgbar.\n\n> Dieser Code erm\u00f6glicht Sicherheitsprofis die **vollst\u00e4ndige Pr\u00fcfung** unserer [Ende-zu-Ende-Verschl\u00fcsselung](https://core.telegram.org/api/end-to-end). Zudem k\u00f6nnen sie **unabh\u00e4ngig verifizieren**, dass die Telegram-Apps bei Google Play und im App Store tats\u00e4chlich den [gleichen Code](https://core.telegram.org/reproducible-builds) verwenden, den wir auf GitHub ver\u00f6ffentlichen.\n\n##### [](#telegram-database-library)[Telegram Database Library](https://github.com/tdlib/td)\n\nEine plattform\u00fcbergreifende Bibliothek zur Erstellung eigener Telegram-Apps. Mehr Informationen unter [TDLib](https://core.telegram.org/tdlib).  \n**Lizenz:** [Boost 1.0](https://www.boost.org/LICENSE_1_0.txt).  \n[Quellcode auf GitHub \u00bb](https://github.com/tdlib/td)\n\n##### [](#telegram-fur-android)[Telegram f\u00fcr Android](https://github.com/DrKLO/Telegram)\n\nDie offizielle Android-App. Mehr Informationen im [Google Play Store](https://telegram.org/dl/android).  \n**Lizenz:** [GNU GPL v. 2 oder neuer](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).\n\n[GitHub \u00bb](https://github.com/DrKLO/Telegram)  \n[APK Datei herunterladen \u00bb](https://telegram.org/dl/android/apk)\n\n##### [](#telegram-fur-ios)[Telegram f\u00fcr iOS](https://github.com/TelegramMessenger/Telegram-iOS)\n\n**Lizenz:** [GNU GPL v. 2 or later](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/TelegramMessenger/Telegram-iOS)\n\n##### [](#telegram-fur-macos)[Telegram f\u00fcr macOS](https://github.com/overtake/TelegramSwift)\n\nNativer macOS-Client.  \n**Lizenz:** [GNU GPL v. 2](http://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/overtake/TelegramSwift)\n\n##### [](#telegram-fur-webbrowser)Telegram f\u00fcr Webbrowser\n\n*   [**Telegram Web, Version K**](https://github.com/morethanwords/tweb) \u2013 Mac, Windows, Linux, Mobil.  \n    **Lizenz:** [GNU GPL v. 3](https://github.com/morethanwords/tweb/blob/master/LICENSE)  \n    [Quellcode auf GitHub \u00bb](https://github.com/morethanwords/tweb)\n    \n*   [**Telegram Web, Version A**](https://github.com/Ajaxy/telegram-tt) \u2013 Mac, Windows, Linux, Mobil.  \n    **Lizenz:** [GNU GPL v. 3](https://github.com/Ajaxy/telegram-tt/blob/master/LICENSE)  \n    [Quellcode auf GitHub \u00bb](https://github.com/Ajaxy/telegram-tt)\n    \n*   [**Veralteter JavaScript-Client**](https://github.com/zhukov/webogram) \u2013 Mac, Windows, Linux.  \n    **Lizenz:** [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html)  \n    [Quellcode auf GitHub \u00bb](https://github.com/zhukov/webogram)\n    \n\n##### [](#telegram-react)[**Telegram React**](https://github.com/evgeny-nadymov/telegram-react)\n\nJavaScript-Client f\u00fcr Browser \u2013 Mac, Windows, Linux.  \n**Lizenz:** [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html)  \n[Quellcode auf GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-react)\n\n##### [](#telegram-desktop)[**Telegram Desktop**](https://github.com/telegramdesktop/tdesktop)\n\nQt-basierte Desktop-App \u2013 Mac, Windows, Linux.  \n**Lizenz:** [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html)  \n[Quellcode auf GitHub \u00bb](https://github.com/telegramdesktop/tdesktop)\n\n##### [](#telegram-fur-wp)[**Telegram f\u00fcr WP**](https://github.com/evgeny-nadymov/telegram-wp)\n\n**Lizenz:** [GNU GPL v. 2 oder sp\u00e4ter](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)  \n[Quellcode auf GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-wp)\n\n##### [](#telegram-x-fur-android)[**Telegram X f\u00fcr Android**](https://github.com/TGX-Android/Telegram-X)\n\nAlternativer Telegram-Client f\u00fcr Android, basierend auf TDLib.  \n**Lizenz:** [GPL v. 3.0](https://github.com/TGX-Android/Telegram-X/blob/main/LICENSE)  \n[Quellcode auf GitHub \u00bb](https://github.com/TGX-Android/Telegram-X)\n\n#### [](#inoffizielle-apps)Inoffizielle Apps\n\n##### [](#telegram-cli-inoffiziell)[**Telegram CLI**](https://github.com/vysheng/tg) (Inoffiziell)\n\nCLI-Client f\u00fcr Linux.  \n**Lizenz:** [GNU GPL v. 2](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)  \n[Quellcode auf GitHub \u00bb](https://github.com/vysheng/tg)\n\n##### [](#unigram-inoffiziell)[**Unigram**](https://github.com/UnigramDev/Unigram) (Inoffiziell)\n\nEin Telegram-Client, optimiert f\u00fcr Windows 10.  \n**Lizenz:** [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html)  \n[Quellcode auf GitHub \u00bb](https://github.com/UnigramDev/Unigram)\n\n##### [](#madelineproto-inoffiziell)[**MadelineProto**](https://github.com/danog/MadelineProto) (Inoffiziell)\n\nPHP-basierter Telegram-Client, der MTProto verwendet.  \n**Lizenz:** [GNU AGPL v. 3](https://www.gnu.org/licenses/agpl-3.0.en.html)  \n[Quellcode auf GitHub \u00bb](http://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#bug-bounty-programm)Bug-Bounty-Programm\n\nTelegram ermutigt Entwickler und Sicherheitsforscher, die Dienste, [den Code](https://telegram.org/apps#source-code) und [das Protokoll](https://core.telegram.org/mtproto) auf Schwachstellen oder sicherheitsrelevante Probleme zu pr\u00fcfen.  \n[Mehr \u00fcber unser Bug-Bounty-Programm erf\u00e4hrst du hier](https://core.telegram.org/bug-bounty).",
    "url": "https://telegram.org/apps?setln=de"
  },
  {
    "metadata": {
      "canonicalUrl": "https://telegram.org/apps?setln=es",
      "title": "Aplicaciones de Telegram",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Aplicaciones de Telegram"
        },
        {
          "property": "og:site_name",
          "content": "Telegram"
        },
        {
          "property": "og:description",
          "content": "Las apps de Telegram son de c\u00f3digo abierto y permiten compilaciones verificables. Cualquiera puede verificar de forma independiente\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:27 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4155",
        "set-cookie": "stel_ln=es; expires=Mon, 11 May 2026 07:11:18 GMT; path=/; domain=telegram.org; HttpOnly",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=31536000; includeSubDomains; preload",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Aplicaciones de Telegram\n\nLas apps de Telegram son de **c\u00f3digo abierto** y permiten [compilaciones verificables](https://core.telegram.org/reproducible-builds). Cualquiera puede verificar de forma independiente que las apps de Telegram que descargas desde el App Store o Google Play fueron construidas usando [exactamente el mismo c\u00f3digo](#codigo-fuente) que publicamos.\n\n#### [](#apps-para-moviles)Apps para m\u00f3viles\n\n*   [Telegram para Android](https://telegram.org/android)\n*   [Telegram para iPhone y iPad](https://telegram.org/dl/ios)\n\n#### [](#apps-para-computadora)Apps para computadora\n\n*   [Telegram para Windows/Mac/Linux](https://desktop.telegram.org/)\n*   [Telegram para macOS](https://macos.telegram.org/)\n\n#### [](#apps-para-navegador-web)Apps para navegador web\n\n*   [Telegram WebK](https://telegram.org/dl/webk)\n*   [Telegram WebA](https://telegram.org/dl/weba)\n\n#### [](#telegram-database-library-tdlib)Telegram Database Library (TDLib)\n\n*   [TDLib](https://core.telegram.org/tdlib) \u2013 cliente multiplataforma dise\u00f1ado para facilitar la creaci\u00f3n de apps personalizadas de Telegram.\n*   [Telegram X para Android](https://play.google.com/store/apps/details?id=org.thunderdog.challegram&hl=es) \u2013 cliente experimental de Telegram basado en TDLib.\n\n#### [](#apps-no-oficiales)Apps no oficiales\n\n*   [Unigram, un cliente optimizado para Windows](https://github.com/UnigramDev/Unigram) (basado en [TDLib](https://core.telegram.org/tdlib))\n*   [Telegram CLI para Linux](https://telegram.org/dl/cli)\n*   [MadelineProto](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#codigo-fuente)C\u00f3digo fuente\n\nPor el momento nos estamos centrando en liberar las partes que permiten a los desarrolladores construir r\u00e1pidamente algo usando nuestra API. Hemos publicado el c\u00f3digo de nuestras aplicaciones para Android, iOS, web y para computadoras (Windows, macOS y Linux) as\u00ed como la Telegram Database Library.\n\n> Este c\u00f3digo permite a los investigadores de seguridad **evaluar a fondo** nuestra [implementaci\u00f3n del cifrado end-to-end](https://core.telegram.org/api/end-to-end). Tambi\u00e9n es posible **verificar de forma independiente** que las apps de Telegram disponibles en Google Play y App Store est\u00e1n construidas con el [mismo c\u00f3digo](https://core.telegram.org/reproducible-builds) que publicamos en GitHub.\n\n##### [](#telegram-database-library)[Telegram Database Library](https://github.com/tdlib/td)\n\nBiblioteca multiplataforma para crear aplicaciones personalizadas de Telegram, mira [TDLib](https://core.telegram.org/tdlib) para saber m\u00e1s.  \nBajo licencia [Boost 1.0](https://www.boost.org/LICENSE_1_0.txt).  \n[GitHub \u00bb](https://github.com/tdlib/td)\n\n##### [](#telegram-para-android)[Telegram para Android](https://github.com/DrKLO/Telegram)\n\nApp oficial para Android, mira [la p\u00e1gina de Google Play](https://telegram.org/dl/android) para una descripci\u00f3n completa.  \nBajo licencia [GNU GPL v. 2 o superior](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/DrKLO/Telegram)  \n[Descargar archivo APK \u00bb](https://telegram.org/dl/android/apk)\n\n##### [](#telegram-para-ios)[Telegram para iOS](https://github.com/TelegramMessenger/Telegram-iOS)\n\nBajo licencia [GNU GPL v. 2 o superior](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/TelegramMessenger/Telegram-iOS)\n\n##### [](#telegram-para-macos)[Telegram para macOS](https://github.com/overtake/TelegramSwift)\n\nCliente nativo para macOS.  \nBajo licencia [GNU GPL v. 2](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/overtake/TelegramSwift)\n\n##### [](#telegram-para-navegadores-web)Telegram para navegadores web\n\n*   [**Telegram Web, versi\u00f3n K**](https://github.com/morethanwords/tweb). Mac, Windows, Linux, m\u00f3vil.  \n    Bajo licencia [GNU GPL v. 3](https://github.com/morethanwords/tweb/blob/master/LICENSE).  \n    [GitHub \u00bb](https://github.com/morethanwords/tweb)\n    \n*   [**Telegram Web, versi\u00f3n A**](https://github.com/Ajaxy/telegram-tt). Mac, Windows, Linux, m\u00f3vil.  \n    Bajo licencia [GNU GPL v. 3](https://github.com/Ajaxy/telegram-tt/blob/master/LICENSE).  \n    [GitHub \u00bb](https://github.com/Ajaxy/telegram-tt)\n    \n*   [Antiguo cliente basado en JavaScript](https://github.com/zhukov/webogram). Mac, Windows, Linux.  \n    Bajo licencia [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n    [GitHub \u00bb](https://github.com/zhukov/webogram)\n    \n\n##### [](#telegram-react)[Telegram React](https://github.com/evgeny-nadymov/telegram-react)\n\nCliente para navegadores web basado en JavaScript. Mac, Windows, Linux.  \nBajo licencia [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-react)\n\n##### [](#telegram-desktop)[Telegram Desktop](https://github.com/telegramdesktop/tdesktop)\n\nCliente para escritorio basado en Qt. Mac, Windows, Linux.  \nBajo licencia [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/telegramdesktop/tdesktop)\n\n##### [](#telegram-para-wp)[Telegram para WP](https://github.com/evgeny-nadymov/telegram-wp)\n\nBajo licencia [GNU GPL v. 2 o superior](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-wp)\n\n##### [](#telegram-x-para-android)[Telegram X para Android](https://github.com/TGX-Android/Telegram-X)\n\nCliente de Telegram alternativo para Android basado en TDLib.  \nBajo licencia [GPL v.3.0](https://github.com/TGX-Android/Telegram-X/blob/main/LICENSE)  \n[GitHub \u00bb](https://github.com/TGX-Android/Telegram-X)\n\n#### [](#apps-no-oficiales)Apps no oficiales\n\n##### [](#telegram-cli-unofficial)[Telegram CLI](https://github.com/vysheng/tg) (Unofficial)\n\nInterfaz de l\u00ednea de comandos de Linux para Telegram.  \nBajo licencia [GNU GPL v. 2](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/vysheng/tg)\n\n##### [](#unigram-unofficial)[Unigram](https://github.com/UnigramDev/Unigram) (Unofficial)\n\nCliente de Telegram optimizado para Windows.  \nBajo licencia [GNU GPL v. 3 o superior](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/UnigramDev/Unigram)\n\n##### [](#madelineproto-unofficial)[MadelineProto](https://github.com/danog/MadelineProto) (Unofficial)\n\nCliente de MTProto Telegram basado en PHP.  \nBajo licencia [GNU AGPL v. 3](https://www.gnu.org/licenses/agpl-3.0.en.html).  \n[GitHub \u00bb](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#programa-de-recompensas-por-fallos)Programa de recompensas por fallos\n\nTelegram invita a los desarrolladores y a la comunidad de investigadores de seguridad a auditar sus servicios, [c\u00f3digo](https://telegram.org/apps#codigo-fuente) y [protocolo](https://core.telegram.org/mtproto) en busca de vulnerabilidades o problemas relacionados con la seguridad. [M\u00e1s informaci\u00f3n sobre nuestro programa de recompensas por fallos aqu\u00ed](https://core.telegram.org/bug-bounty).",
    "url": "https://telegram.org/apps?setln=es"
  },
  {
    "metadata": {
      "canonicalUrl": "https://telegram.org/apps?setln=fr",
      "title": "Applications Telegram",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Applications Telegram"
        },
        {
          "property": "og:site_name",
          "content": "Telegram"
        },
        {
          "property": "og:description",
          "content": "Les applications Telegram sont open source et prennent en charge les compilations reproductibles. Cela signifie que n'importe\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:27 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4326",
        "set-cookie": "stel_ln=fr; expires=Fri, 08 May 2026 01:00:48 GMT; path=/; domain=telegram.org; HttpOnly",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=31536000; includeSubDomains; preload",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Applications Telegram\n\nLes applications Telegram sont **open source** et prennent en charge les [compilations reproductibles](https://core.telegram.org/reproducible-builds). Cela signifie que n'importe qui peut v\u00e9rifier que notre [code sur GitHub](#code-source) **correspond exactement** au code utilis\u00e9 pour compiler les applications que vous t\u00e9l\u00e9chargez depuis l'App Store et Google Play.\n\n#### [](#applications-mobiles)Applications mobiles\n\n*   [Telegram pour Android](https://telegram.org/android)\n*   [Telegram pour iPhone et iPad](https://telegram.org/dl/ios)\n\n> Vous pouvez aussi t\u00e9l\u00e9charger la derni\u00e8re version de **Telegram pour Android** depuis [cette page](https://telegram.org/android/?setln=fr).\n\n#### [](#applications-de-bureau)Applications de bureau\n\n*   [Telegram pour Windows/Mac/Linux](https://desktop.telegram.org/)\n*   [Telegram pour macOS](https://macos.telegram.org/)\n\n#### [](#applications-web)Applications web\n\n*   [Telegram WebK](https://telegram.org/dl/webk)\n*   [Telegram WebA](https://telegram.org/dl/weba)\n\n#### [](#telegram-database-library-tdlib)Telegram Database Library (TDLib)\n\n*   [TDLib](https://core.telegram.org/tdlib) est un client multiplateforme con\u00e7u pour faciliter la cr\u00e9ation d'applications personnalis\u00e9es sur la plateforme Telegram.\n*   [Telegram X pour Android](https://play.google.com/store/apps/details?id=org.thunderdog.challegram&hl=fr) est un formidable client Telegram exp\u00e9rimental bas\u00e9 sur TDLib.\n\n#### [](#applications-non-officielles)Applications non-officielles\n\n*   [Unigram, un client optimis\u00e9 pour Windows 10](https://github.com/UnigramDev/Unigram) (bas\u00e9 sur [TDLib](https://core.telegram.org/tdlib))\n*   [Telegram CLI pour Linux](https://telegram.org/dl/cli)\n*   [MadelineProto](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#code-source)Code source\n\nPour le moment, nous concentrons nos efforts pour rendre open source les choses permettant aux d\u00e9veloppeurs de construire rapidement quelque chose au travers de notre API. Nous avons publi\u00e9 le code de nos applications Android, iOS, Web et Desktop (Windows, macOS et Linux) ainsi que notre Telegram Database Library (TDLib).\n\n> Ce code permet aux chercheurs en s\u00e9curit\u00e9 d'**\u00e9valuer pleinement** notre [impl\u00e9mentation du chiffrement de bout en bout](https://core.telegram.org/api/end-to-end). Il est \u00e9galement possible de **v\u00e9rifier de mani\u00e8re ind\u00e9pendante** que les applications Telegram disponibles sur Google Play et l'App Store sont compil\u00e9es depuis le [m\u00eame code](https://core.telegram.org/reproducible-builds) que nous publions sur GitHub.\n\n##### [](#telegram-database-library)[Telegram Database Library](https://github.com/tdlib/td)\n\nBiblioth\u00e8que multiplateforme pour concevoir des applications Telegram personnalis\u00e9es, consultez [TDLib](https://core.telegram.org/tdlib) pour plus de d\u00e9tails.  \nSous licence [Boost 1.0](https://www.boost.org/LICENSE_1_0.txt).  \n[GitHub \u00bb](https://github.com/tdlib/td)\n\n##### [](#telegram-pour-android)[Telegram pour Android](https://github.com/DrKLO/Telegram)\n\nApplication Android officielle, consultez la [page Google Play Store](https://telegram.org/dl/android) pour une description compl\u00e8te.  \nSous licence [GNU GPL v.2 ou ult\u00e9rieur](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/DrKLO/Telegram)  \n[T\u00e9l\u00e9charger le fichier APK \u00bb](https://telegram.org/android)\n\n##### [](#telegram-pour-ios)[Telegram pour iOS](https://github.com/TelegramMessenger/Telegram-iOS)\n\nSous licence [GNU GPL v. 2 ou ult\u00e9rieur](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/TelegramMessenger/Telegram-iOS)\n\n##### [](#telegram-pour-macos)[Telegram pour macOS](https://github.com/overtake/TelegramSwift)\n\nClient natif macOS.  \nSous licence [GNU GPL v. 2](http://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/overtake/TelegramSwift)\n\n##### [](#telegram-pour-navigateurs-web)Telegram pour navigateurs Web\n\n*   [**Telegram Web, Version K**](https://github.com/morethanwords/tweb). Mac, Windows, Linux, Mobile.  \n    Sous licence [GNU GPL v. 3](https://github.com/morethanwords/tweb/blob/master/LICENSE).  \n    [GitHub \u00bb](https://github.com/morethanwords/tweb)\n    \n*   [**Telegram Web, Version A**](https://github.com/Ajaxy/telegram-tt). Mac, Windows, Linux, Mobile.  \n    Sous licence [GNU GPL v. 3](https://github.com/Ajaxy/telegram-tt/blob/master/LICENSE).  \n    [GitHub \u00bb](https://github.com/Ajaxy/telegram-tt)\n    \n*   [Client JavaScript historique](https://github.com/zhukov/webogram). Mac, Windows, Linux.  \n    Sous licence [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n    [GitHub \u00bb](https://github.com/zhukov/webogram)\n    \n\n##### [](#telegram-react)[Telegram React](https://github.com/evgeny-nadymov/telegram-react)\n\nClient Javascript pour navigateurs. Mac, Windows, Linux.  \nSous licence [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-react)\n\n##### [](#telegram-desktop)[Telegram Desktop](https://github.com/telegramdesktop/tdesktop)\n\nClient desktop bas\u00e9 sur Qt. Mac, Windows, Linux.  \nSous licence [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/telegramdesktop/tdesktop)\n\n##### [](#telegram-pour-windows-phone)[Telegram pour Windows Phone](https://github.com/evgeny-nadymov/telegram-wp)\n\nSous licence [GNU GPL v. 2 ou ult\u00e9rieur](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-wp)\n\n##### [](#telegram-x-for-android)[Telegram X for Android](https://github.com/TGX-Android/Telegram-X)\n\nClient Telegram alternatif Android bas\u00e9 sur TDLib.  \nSous licence [GPL v.3.0](https://github.com/TGX-Android/Telegram-X/blob/main/LICENSE)  \n[GitHub \u00bb](https://github.com/TGX-Android/Telegram-X)\n\n#### [](#applications-non-officielles)Applications non officielles\n\n##### [](#telegram-cli-non-officiel)[Telegram CLI](https://github.com/vysheng/tg) (Non officiel)\n\nInterface en ligne de commande Linux pour Telegram.  \nSous licence [GNU GPL v. 2](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/vysheng/tg)\n\n##### [](#unigram-non-officiel)[Unigram](https://github.com/UnigramDev/Unigram) (Non officiel)\n\nUn client Telegram optimis\u00e9 pour Windows.  \nSous licence [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/UnigramDev/Unigram)\n\n##### [](#madelineproto-non-officiel)[MadelineProto](https://github.com/danog/MadelineProto) (Non officiel)\n\nUn client PHP MTProto Telegram.  \nSous licence [GNU AGPL v. 3](https://www.gnu.org/licenses/agpl-3.0.en.html)  \n[GitHub \u00bb](http://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#recompense-pour-les-bugs-trouves)R\u00e9compense pour les bugs trouv\u00e9s\n\nNous encourageons les d\u00e9veloppeurs et les chercheurs en s\u00e9curit\u00e9 \u00e0 auditer nos services, nos [codes](#code-source) et notre [protocole](https://core.telegram.org/mtproto) \u00e0 la recherche de vuln\u00e9rabilit\u00e9s et de probl\u00e8mes li\u00e9s \u00e0 la s\u00e9curit\u00e9. [En savoir plus sur notre programme Bug Bounty](https://core.telegram.org/bug-bounty)",
    "url": "https://telegram.org/apps?setln=fr"
  },
  {
    "metadata": {
      "canonicalUrl": "https://telegram.org/apps?setln=it",
      "title": "Applicazioni di Telegram",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Applicazioni di Telegram"
        },
        {
          "property": "og:site_name",
          "content": "Telegram"
        },
        {
          "property": "og:description",
          "content": "Le nostre app sono open source e supportano le build riproducibili. Questo significa che chiunque pu\u00f2 verificare in modo indipendente che il nostro codice su GitHub \u00e8 lo stesso identico codice che \u00e8 stato utilizzato per costruire le applicazioni che si scaricano da App Store o Google Play. Gli sviluppatori sono invitati a consultare la nostra Guida alle build riproducibili per iOS e Android."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:30 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4285",
        "set-cookie": "stel_ssid=17a5ff316d610772c8_2181626299427714751; expires=Fri, 16 May 2025 13:15:10 GMT; path=/; samesite=None; secure; HttpOnly\nstel_ln=it; expires=Tue, 19 May 2026 03:07:18 GMT; path=/; domain=telegram.org; HttpOnly",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=31536000; includeSubDomains; preload",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Applicazioni di Telegram\n\nLe nostre app sono **open source** e supportano [le build riproducibili](https://core.telegram.org/reproducible-builds). Chiunque pu\u00f2 verificare in modo indipendente che le app Telegram scaricate dall'App Store o dal Play Store siano costruite usando lo [stesso identico codice](#codice-sorgente) che pubblichiamo.\n\n#### [](#app-per-dispositivi-mobili)App per dispositivi mobili\n\n*   [Telegram per Android](https://telegram.org/android)\n*   [Telegram per iPhone e iPad](https://telegram.org/dl/ios)\n\n#### [](#app-per-computer)App per computer\n\n*   [Telegram per Windows/Mac/Linux](https://desktop.telegram.org/)\n*   [Telegram per macOS](https://macos.telegram.org/)\n\n#### [](#app-web)App web\n\n*   [Telegram WebK](https://telegram.org/dl/webk)\n*   [Telegram WebA](https://telegram.org/dl/weba)\n\n#### [](#telegram-database-library-tdlib)Telegram Database Library (TDLib)\n\n*   [TDLib](https://core.telegram.org/tdlib): un client multipiattaforma progettato per facilitare la creazione di applicazioni personalizzate sulla piattaforma Telegram.\n*   [Telegram X per Android](https://play.google.com/store/apps/details?id=org.thunderdog.challegram&hl=en): un veloce client Telegram sperimentale basato su TDLib.\n\n#### [](#app-non-ufficiali)App non ufficiali\n\n*   [Unigram, un client ottimizzato per Windows](https://github.com/UnigramDev/Unigram) (basato su [TDLib](https://core.telegram.org/tdlib))\n*   [Telegram CLI per Linux](https://telegram.org/dl/cli)\n*   [MadelineProto](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#codice-sorgente)Codice sorgente\n\nPer il momento ci stiamo concentrando nel rendere open source le cose che permettono agli sviluppatori di costruire rapidamente qualcosa utilizzando le nostre API. Abbiamo pubblicato il codice per le nostre applicazioni Android, iOS, web e desktop (Windows, macOS e Linux) e la Telegram Database Library.\n\n> Questo codice permette ai ricercatori nel campo della sicurezza di **valutare completamente** la nostra [implementazione della crittografia end-to-end](https://core.telegram.org/api/end-to-end). \u00c8 inoltre possibile **verificare in modo indipendente** che le app Telegram disponibili su Google Play e App Store siano costruite utilizzando lo [stesso codice](https://core.telegram.org/reproducible-builds) che pubblichiamo su GitHub.\n\n##### [](#telegram-database-library)[Telegram Database Library](https://github.com/tdlib/td)\n\nLibreria multipiattaforma per la creazione di applicazioni Telegram personalizzate, controlla [TDLib](https://core.telegram.org/tdlib) per i dettagli.  \nSotto licenza [Boost 1.0](https://www.boost.org/LICENSE_1_0.txt).  \n[GitHub \u00bb](https://github.com/tdlib/td)\n\n##### [](#telegram-per-android)[Telegram per Android](https://github.com/DrKLO/Telegram)\n\nApp Android ufficiale, controlla la [pagina Google Play Store](https://telegram.org/dl/android) per la descrizione completa.  \nSotto licenza [GNU GPL v. 2 o successiva](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/DrKLO/Telegram)  \n[Download File APK \u00bb](https://telegram.org/dl/android/apk)\n\n##### [](#telegram-per-ios)[Telegram per iOS](https://github.com/TelegramMessenger/Telegram-iOS)\n\nSotto licenza [GNU GPL v. 2 o successiva](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/TelegramMessenger/Telegram-iOS)\n\n##### [](#telegram-per-macos)[Telegram per macOS](https://github.com/overtake/TelegramSwift)\n\nClient nativo macOS.  \nSotto licenza [GNU GPL v. 2](http://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/overtake/TelegramSwift)\n\n##### [](#telegram-per-browser-web)Telegram per browser Web\n\n*   [**Telegram Web, Versione K**](https://github.com/morethanwords/tweb). Mac, Windows, Linux, Mobile.  \n    Sotto licenza [GNU GPL v. 3](https://github.com/morethanwords/tweb/blob/master/LICENSE).  \n    [GitHub \u00bb](https://github.com/morethanwords/tweb)\n    \n*   [**Telegram Web, Versione A**](https://github.com/Ajaxy/telegram-tt). Mac, Windows, Linux, Mobile.  \n    Sotto licenza [GNU GPL v. 3](https://github.com/Ajaxy/telegram-tt/blob/master/LICENSE).  \n    [GitHub \u00bb](https://github.com/Ajaxy/telegram-tt)\n    \n*   [Client JavaScript Legacy](https://github.com/zhukov/webogram). Mac, Windows, Linux.  \n    Sotto licenza [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n    [GitHub \u00bb](https://github.com/zhukov/webogram)\n    \n\n##### [](#telegram-react)[Telegram React](https://github.com/evgeny-nadymov/telegram-react)\n\nClient Javascript per browser. Mac, Windows, Linux.  \nSotto licenza [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-react)\n\n##### [](#telegram-desktop)[Telegram Desktop](https://github.com/telegramdesktop/tdesktop)\n\nClient desktop su base Qt. Mac, Windows, Linux.  \nSotto licenza [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/telegramdesktop/tdesktop)\n\n##### [](#telegram-per-wp)[Telegram per WP](https://github.com/evgeny-nadymov/telegram-wp)\n\nSotto licenza [GNU GPL v. 2 or later](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-wp)\n\n##### [](#telegram-x-for-android)[Telegram X for Android](https://github.com/TGX-Android/Telegram-X)\n\nClient Telegram alternativo per Android basato su TDLib.  \nSotto licenza [GPL v.3.0](https://github.com/TGX-Android/Telegram-X/blob/main/LICENSE)  \n[GitHub \u00bb](https://github.com/TGX-Android/Telegram-X)\n\n#### [](#app-non-ufficiali)App non ufficiali\n\n##### [](#telegram-cli-non-ufficiale)[Telegram CLI](https://github.com/vysheng/tg) (Non ufficiale)\n\nInterfaccia a riga di comando Linux per Telegram.  \nSotto licenza [GNU GPL v. 2](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/vysheng/tg)\n\n##### [](#unigram-non-ufficiale)[Unigram](https://github.com/UnigramDev/Unigram) (Non ufficiale)\n\nUn client Telegram ottimizzato per Windows.  \nSotto licenza [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html) o successiva.  \n[GitHub \u00bb](https://github.com/UnigramDev/Unigram)\n\n##### [](#madelineproto-non-ufficiale)[MadelineProto](https://github.com/danog/MadelineProto) (Non ufficiale)\n\nUn client Telegram PHP MTProto.  \nSotto licenza [GNU AGPL v. 3](https://www.gnu.org/licenses/agpl-3.0.en.html)  \n[GitHub \u00bb](http://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#programma-di-bug-bounty)Programma di bug bounty\n\nTelegram invita la comunit\u00e0 degli sviluppatori e dei ricercatori sulla sicurezza a verificare i suoi servizi, il [codice](https://telegram.org/apps#source-code) e il [protocollo](https://core.telegram.org/mtproto), alla ricerca di vulnerabilit\u00e0 o problemi legati alla sicurezza. [Scopri di pi\u00f9 sul nostro programma di bug bounty qui](https://core.telegram.org/bug-bounty).",
    "url": "https://telegram.org/apps?setln=it"
  },
  {
    "metadata": {
      "canonicalUrl": "https://telegram.org/apps?setln=uz",
      "title": "Telegram ilovalari",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Telegram ilovalari"
        },
        {
          "property": "og:site_name",
          "content": "Telegram"
        },
        {
          "property": "og:description",
          "content": "Ilovalarimiz ochiq kodli va qayta ishlab chiqish mumkin bo\u02bblgan yig\u02bbmalarni qo\u02bbllab-quvvatlaydi. Bu istalgan kishi mustaqil\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:31 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3911",
        "set-cookie": "stel_ssid=f1e4e3baaa94420ed4_15688271284836523488; expires=Fri, 16 May 2025 13:15:11 GMT; path=/; samesite=None; secure; HttpOnly\nstel_ln=uz; expires=Thu, 07 May 2026 05:37:22 GMT; path=/; domain=telegram.org; HttpOnly",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=31536000; includeSubDomains; preload",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Telegram ilovalari\n\n> Ilovalarimiz **ochiq kodli** va **qayta ishlab chiqish mumkin bo\u02bblgan yig\u02bbmalarni** qo\u02bbllab-quvvatlaydi. Bu istalgan kishi mustaqil ravishda [GitHub saytidagi kodimiz](#source-code) App Store yoki Google Play do\u02bbkonlaridan yuklab olish mumkin bo\u02bblgan ilovalarni yaratish uchun foydalanilgan kod bilan aniq bir xil ekanligini tekshirib ko\u02bbrishi mumkinligini anglatadi. Dasturchilar [iOS va Android uchun qayta ishlab chiqish mumkin bo\u02bblgan yig\u02bbmalar bo\u02bbyicha qo\u02bbllanmamiz](https://core.telegram.org/reproducible-builds) bilan tanishib chiqishi mumkin.\n\n#### [](#mobil-ilovalar)Mobil ilovalar\n\n*   [Android uchun Telegram](https://telegram.org/android)\n*   [iPhone va iPad uchun Telegram](https://telegram.org/dl/ios)\n\n> [Bu kanaldan](https://t.me/TAndroidAPK) **Android uchun Telegram** ilovasining oxirgi versiyasini yuklab olishingiz ham mumkin.\n\n#### [](#kompyuter-ilovalari)Kompyuter ilovalari\n\n*   [Windows/Mac/Linux uchun Telegram](https://desktop.telegram.org/)\n*   [macOS uchun Telegram](https://macos.telegram.org/)\n\n#### [](#veb-ilovalar)Veb ilovalar\n\n*   [Telegram WebK](https://telegram.org/dl/webk)\n*   [Telegram WebA](https://telegram.org/dl/weba)\n\n#### [](#telegram-malumotlar-bazasi-kutubxonasi-tdlib)Telegram ma\u02bclumotlar bazasi kutubxonasi (TDLib)\n\n*   [TDLib](https://core.telegram.org/tdlib) \u2013 bu Telegram platformasida maxsus ilovalarni yaratishni osonlashtirish uchun mo\u02bbljallangan platformalararo mijoz.\n*   [Android uchun Telegram X](https://play.google.com/store/apps/details?id=org.thunderdog.challegram&hl=en) \u2013 bu TDLib asosidagi ajoyib tajribaviy Telegram mijozi.\n\n#### [](#norasmiy-ilovalar)Norasmiy ilovalar\n\n*   [Unigram, Windows 10 uchun optimallangan mijoz](https://github.com/UnigramDev/Unigram) ([TDLib](https://core.telegram.org/tdlib) asosida) (kompyuter va Xbox One)\n*   [Linux uchun Telegram CLI](https://telegram.org/dl/cli)\n*   [MadelineProto](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#manba-kodi)Manba kodi\n\nAyni payda biz dasturchilarga bizning API yordamida tezda biror narsani yaratish imkonini beradigan narsalarni ochiq kodli qilishga e\u02bctibor qaratmoqdamiz. Biz Android, iOS, veb va kompyuter ilovalarimiz (Win, macOS va Linux) kodini, shuningdek, Telegram ma\u02bclumotlar bazasi kutubxonasini nashr qildik.\n\n> Bu kod xavfsizlik bo\u02bbyicha tadqiqotchilarga [boshidan oxirigacha shifrlashimizni](https://core.telegram.org/api/end-to-end) **to\u02bbliq baholash** imkonini beradi. Google Play va App Store do\u02bbkonlaridagi Telegram ilovalari biz GitHub saytida nashr qilgan bilan [bir xil kod](https://core.telegram.org/reproducible-builds) yordamida yaratilganini **mustaqil ravishda tekshirish** imkoni ham mavjud.\n\n##### [](#telegram-malumotlar-bazasi-kutubxonasi)[Telegram ma\u02bclumotlar bazasi kutubxonasi](https://github.com/tdlib/td)\n\nMaxsus Telegram ilovalarini yaratish uchun platformalararo kutubxona, tafsilotlar uchun [TDLib](https://core.telegram.org/tdlib) bilan tanishing.  \n[Boost 1.0](https://www.boost.org/LICENSE_1_0.txt) ostida litsenziyalangan.  \n[GitHub \u00bb](https://github.com/tdlib/td)\n\n##### [](#android-uchun-telegram)[Android uchun Telegram](https://github.com/DrKLO/Telegram)\n\nRasmiy Android ilovasi, to\u02bbliq tavsif uchun [Google Play Market sahifasi](https://telegram.org/dl/android) bilan tanishing.  \n[GNU GPL v. 2 yoki keyingi versiyalari](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html) ostida litsenziyalangan.  \n[GitHub \u00bb](https://github.com/DrKLO/Telegram)  \n[APK faylini yuklab olish\u00bb](https://telegram.org/dl/android/apk)\n\n##### [](#ios-uchun-telegram)[iOS uchun Telegram](https://github.com/TelegramMessenger/Telegram-iOS)\n\n[GNU GPL v. 2 yoki keyingi versiyalari](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html) ostida litsenziyalangan.  \n[GitHub \u00bb](https://github.com/TelegramMessenger/Telegram-iOS)\n\n##### [](#macos-uchun-telegram)[macOS uchun Telegram](https://github.com/overtake/TelegramSwift)\n\nIchki macOS mijozi.  \n[GNU GPL v. 2](http://www.gnu.org/licenses/gpl.html) ostida litsenziyalangan.  \n[GitHub \u00bb](https://github.com/overtake/TelegramSwift)\n\n##### [](#veb-brauzerlar-uchun-telegram)[Veb brauzerlar uchun Telegram](https://github.com/zhukov/webogram)\n\nBrauzerlar uchun Javascript mijozi. Mac, Windows, Linux.  \n[GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html) ostida litsenziyalangan.  \n[GitHub \u00bb](https://github.com/zhukov/webogram)\n\n##### [](#telegram-react)[Telegram React](https://github.com/evgeny-nadymov/telegram-react)\n\nBrauzerlar uchun Javascript mijozi. Mac, Windows, Linux.  \n[GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html) ostida litsenziyalangan.  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-react)\n\n##### [](#telegram-desktop)[Telegram Desktop](https://github.com/telegramdesktop/tdesktop)\n\nQt asosidagi ish stoli mijozi. Mac, Windows, Linux.  \n[GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html) ostida litsenziyalangan.  \n[GitHub \u00bb](https://github.com/telegramdesktop/tdesktop)\n\n##### [](#wp-uchun-telegram)[WP uchun Telegram](https://github.com/evgeny-nadymov/telegram-wp)\n\n[GNU GPL v. 2 or later](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html) ostida litsenziyalangan.  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-wp)\n\n#### [](#norasmiy-ilovalar)Norasmiy ilovalar\n\n##### [](#telegram-cli-norasmiy)[Telegram CLI](https://github.com/vysheng/tg) (norasmiy)\n\nTelegram uchun Linux Command-line interfeysi.  \n[GNU GPL v. 2](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html) ostida litsenziyalangan.  \n[GitHub \u00bb](https://github.com/vysheng/tg)\n\n##### [](#unigram-norasmiy)[Unigram](https://github.com/UnigramDev/Unigram) (norasmiy)\n\nWindows 10 (kompyuter va Xbox One) uchun optimallangan Telegram mijozi.  \n[GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html) yoki keyingi versiyalari ostida litsenziyalangan.  \n[GitHub \u00bb](https://github.com/UnigramDev/Unigram)\n\n##### [](#madelineproto-norasmiy)[MadelineProto](https://github.com/danog/MadelineProto) (norasmiy)\n\nPHP MTProto Telegram mijozi.  \n[GNU AGPL v. 3](https://www.gnu.org/licenses/agpl-3.0.en.html) ostida litsenziyalangan  \n[GitHub \u00bb](http://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#xavfsizlik-boyicha-tadqiqotchilar-uchun-aloqa)Xavfsizlik bo\u02bbyicha tadqiqotchilar uchun aloqa\n\nAgar Telegram ilovasi va protokoli bilan bog\u02bbliq biror muammoni topsangiz yoki xavfsizlik funksiyalarini tatbiq qilishimiz yuzasidan biror savolingiz bo\u02bblsa, **security@telegram.org** manzili orqali bizga murojaat qiling.",
    "url": "https://telegram.org/apps?setln=uz"
  },
  {
    "metadata": {
      "canonicalUrl": "https://telegram.org/apps?setln=pt-br",
      "title": "Aplicativos do Telegram",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Aplicativos do Telegram"
        },
        {
          "property": "og:site_name",
          "content": "Telegram"
        },
        {
          "property": "og:description",
          "content": "Os aplicativos do Telegram s\u00e3o de c\u00f3digo aberto e t\u00eam compila\u00e7\u00f5es reproduz\u00edveis. Qualquer pessoa pode verificar de forma independente se os aplicativos do Telegram que voc\u00ea baixa da App Store ou do Google Play foram criados usando exatamente o mesmo c\u00f3digo que publicamos."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:31 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4191",
        "set-cookie": "stel_ln=pt-br; expires=Fri, 15 May 2026 10:41:35 GMT; path=/; domain=telegram.org; HttpOnly",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=31536000; includeSubDomains; preload",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Aplicativos do Telegram\n\nOs aplicativos do Telegram s\u00e3o **de c\u00f3digo aberto** e t\u00eam [compila\u00e7\u00f5es reproduz\u00edveis](https://core.telegram.org/reproducible-builds). Qualquer pessoa pode verificar de forma independente se os aplicativos do Telegram que voc\u00ea baixa da App Store ou do Google Play foram criados usando [exatamente o mesmo c\u00f3digo](#codigo-fonte) que publicamos.\n\n#### [](#apps-mobile)Apps Mobile\n\n*   [Telegram para Android](https://telegram.org/android?setln=pt-br)\n*   [Telegram para iPhone e iPad](https://telegram.org/dl/ios)\n\n#### [](#apps-desktop-pc)Apps Desktop (PC)\n\n*   [Telegram para Windows/Mac/Linux](https://desktop.telegram.org/?setln=pt-br)\n*   [Telegram para macOS](https://macos.telegram.org/?setln=pt-br)\n\n#### [](#apps-web)Apps Web\n\n*   [Telegram WebK](https://telegram.org/dl/webk)\n*   [Telegram WebA](https://telegram.org/dl/weba)\n\n#### [](#telegram-database-library-tdlib)Telegram Database Library (TDLib)\n\n*   [TDLib](https://core.telegram.org/tdlib) \u2013 um cliente multiplataforma desenvolvido para facilitar a cria\u00e7\u00e3o de apps personalizados na plataforma do Telegram.\n*   [Telegram X para Android](https://play.google.com/store/apps/details?id=org.thunderdog.challegram&hl=en) \u2013 um app experimental e suave do Telegram baseado na TDLib.\n\n#### [](#apps-nao-oficiais)Apps n\u00e3o oficiais\n\n*   [Unigram, um app otimizado para Windows 10](https://github.com/UnigramDev/Unigram) (baseado na [TDLib](https://core.telegram.org/tdlib))\n*   [Telegram CLI para Linux](https://telegram.org/dl/cli)\n*   [MadelineProto](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#codigo-fonte)C\u00f3digo-Fonte\n\nNo momento, estamos nos concentrando em abrir o c\u00f3digo-fonte dos itens que permitem aos desenvolvedores construirem algo rapidamente usando a nossa API. Publicamos o c\u00f3digo dos nossos aplicativos de Android, iOS, Web e Desktop (Windows, macOS e Linux), bem como a Telegram Database Library (TDLib).\n\n> Este c\u00f3digo permite que pesquisadores de seguran\u00e7a **avaliem completamente** nossa [implementa\u00e7\u00e3o de criptografia de ponta a ponta](https://core.telegram.org/api/end-to-end). Tamb\u00e9m \u00e9 poss\u00edvel **verificar de forma independente** que os apps do Telegram na Google Play e na App Store s\u00e3o feitos usando [o mesmo c\u00f3digo](https://core.telegram.org/reproducible-builds) que publicamos no GitHub.\n\n##### [](#telegram-database-library)[Telegram Database Library](https://github.com/tdlib/td)\n\nBiblioteca multiplataforma para constru\u00e7\u00e3o de apps personalizados do Telegram, confira [TDLib](https://core.telegram.org/tdlib) para detalhes.  \nLicenciado sob a [Boost 1.0](https://www.boost.org/LICENSE_1_0.txt).  \n[GitHub \u00bb](https://github.com/tdlib/td)\n\n##### [](#telegram-para-android)[Telegram para Android](https://github.com/DrKLO/Telegram)\n\nApp oficial para Android, veja [a p\u00e1gina na Google Play](https://telegram.org/dl/android) para a descri\u00e7\u00e3o completa.  \nLicenciado sob a [GNU GPL v. 2 ou superior](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/DrKLO/Telegram)  \n[Baixar arquivo APK \u00bb](https://telegram.org/dl/android/apk)\n\n##### [](#telegram-para-ios)[Telegram para iOS](https://github.com/TelegramMessenger/Telegram-iOS)\n\nLicenciado sob a [GNU GPL v. 2 ou superior](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/TelegramMessenger/Telegram-iOS)\n\n##### [](#telegram-para-macos)[Telegram para macOS](https://github.com/overtake/TelegramSwift)\n\nApp nativo para macOS.  \nLicenciado sob a [GNU GPL v. 2](http://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/overtake/TelegramSwift)\n\n##### [](#telegram-web-para-navegadores)Telegram Web para Navegadores\n\n*   [**Telegram Web, vers\u00e3o K**](https://github.com/morethanwords/tweb). Mac, Windows, Linux, Mobile.  \n    Licenciado sob a [GNU GPL v. 3](https://github.com/morethanwords/tweb/blob/master/LICENSE)  \n    [GitHub \u00bb](https://github.com/morethanwords/tweb)\n    \n*   [**Telegram Web, vers\u00e3o A**](https://github.com/Ajaxy/telegram-tt). Mac, Windows, Linux, Mobile.  \n    Licenciado sob a [GNU GPL v. 3](https://github.com/Ajaxy/telegram-tt/blob/master/LICENSE)  \n    [GitHub \u00bb](https://github.com/Ajaxy/telegram-tt)\n    \n*   [App JavaScript legado](https://github.com/zhukov/webogram). Mac, Windows, Linux.  \n    Licenciado sob a [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html).  \n    [GitHub \u00bb](https://github.com/zhukov/webogram)\n    \n\n##### [](#telegram-react)[Telegram React](https://github.com/evgeny-nadymov/telegram-react)\n\nApp Javascript para navegadores. Mac, Windows, Linux.  \nLicenciado sob a [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-react)\n\n##### [](#telegram-desktop)[Telegram Desktop](https://github.com/telegramdesktop/tdesktop)\n\nApp Desktop baseado em Qt. Mac, Windows, Linux.  \nLicenciado sob a [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/telegramdesktop/tdesktop)\n\n##### [](#telegram-para-wp)[Telegram para WP](https://github.com/evgeny-nadymov/telegram-wp)\n\nLicenciado sob a [GNU GPL v. 2 ou superior](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-wp)\n\n##### [](#telegram-x-para-android)[Telegram X para Android](https://github.com/TGX-Android/Telegram-X)\n\nApp alternativo para o Telegram para Android baseado na TDLib.  \nLicenciado sob a [GPL v.3.0](https://github.com/TGX-Android/Telegram-X/blob/main/LICENSE)  \n[GitHub \u00bb](https://github.com/TGX-Android/Telegram-X)\n\n#### [](#apps-nao-oficiais)Apps n\u00e3o oficiais\n\n##### [](#telegram-cli-nao-oficial)[Telegram CLI](https://github.com/vysheng/tg) (N\u00e3o Oficial)\n\nInterface de linha de comando Linux para o Telegram.  \nLicenciado sob a [GNU GPL v. 2](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/vysheng/tg)\n\n##### [](#unigram-nao-oficial)[Unigram](https://github.com/UnigramDev/Unigram) (N\u00e3o Oficial)\n\nUm app para o Telegram otimizado para Windows 10.  \nLicenciado sob a [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html) ou superior.  \n[GitHub \u00bb](https://github.com/UnigramDev/Unigram)\n\n##### [](#madelineproto-nao-oficial)[MadelineProto](https://github.com/danog/MadelineProto) (N\u00e3o Oficial)\n\nUm app para o Telegram em PHP MTProto.  \nLicenciado sob a [GNU AGPL v. 3](https://www.gnu.org/licenses/agpl-3.0.en.html)  \n[GitHub \u00bb](http://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#programa-de-recompensas-por-bugs)Programa de Recompensas por Bugs\n\nO Telegram convida desenvolvedores e a comunidade de pesquisa de seguran\u00e7a a auditar seus servi\u00e7os, [c\u00f3digo](https://telegram.org/apps?setln=pt-br#codigo-fonte) e [protocolo](https://core.telegram.org/mtproto) procurando vulnerabilidades ou problemas relacionados \u00e0 seguran\u00e7a. [Saiba mais sobre nosso Programa de Recompensas por Bugs aqui](https://core.telegram.org/bug-bounty).",
    "url": "https://telegram.org/apps?setln=pt-br"
  },
  {
    "metadata": {
      "canonicalUrl": "https://telegram.org/apps?setln=pl",
      "title": "Aplikacje Telegram",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Aplikacje Telegram"
        },
        {
          "property": "og:site_name",
          "content": "Telegram"
        },
        {
          "property": "og:description",
          "content": "Aplikacje Telegrama s\u0105, otwarto\u017ar\u00f3d\u0142owe i obs\u0142uguj\u0105 weryfikowalne kompilacje. zweryfikowa\u0107, czy aplikacje Telegrama, kt\u00f3re\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:31 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4140",
        "set-cookie": "stel_ln=pl; expires=Wed, 06 May 2026 02:32:12 GMT; path=/; domain=telegram.org; HttpOnly",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=31536000; includeSubDomains; preload",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Aplikacje Telegram\n\nAplikacje Telegrama s\u0105, **otwarto\u017ar\u00f3d\u0142owe** i obs\u0142uguj\u0105 [weryfikowalne kompilacje](https://core.telegram.org/reproducible-builds). zweryfikowa\u0107, czy aplikacje Telegrama, kt\u00f3re pobierasz ze sklepu App Store lub Google Play, zosta\u0142y zbudowane przy u\u017cyciu dok\u0142adnie [tego samego kodu](#kod-zrodlowy), kt\u00f3ry publikujemy.\n\n#### [](#aplikacje-mobilne)Aplikacje mobilne\n\n*   [Telegram dla Androida](https://telegram.org/android)\n*   [Telegram dla iPhona i iPada](https://telegram.org/dl/ios)\n\n#### [](#aplikacje-na-komputer)Aplikacje na komputer\n\n*   [Telegram dla Windows/Mac/Linux](https://desktop.telegram.org/)\n*   [Telegram dla macOS](https://macos.telegram.org/)\n\n#### [](#aplikacje-dla-przegladarek)Aplikacje dla przegl\u0105darek\n\n*   [Telegram WebK](https://telegram.org/dl/webk)\n*   [Telegram WebA](https://telegram.org/dl/weba)\n\n#### [](#telegram-database-library-tdlib)Telegram Database Library (TDLib)\n\n*   [TDLib](https://core.telegram.org/tdlib) \u2013 wieloplatformowy klient zaprojektowany w celu u\u0142atwienia tworzenia niestandardowych aplikacji na platformie Telegram.\n*   [Telegram X dla Androida](https://play.google.com/store/apps/details?id=org.thunderdog.challegram&hl=en) \u2013 zgrabny eksperymentalny klient Telegrama oparty na TDLib.\n\n#### [](#aplikacje-nieoficjalne)Aplikacje nieoficjalne\n\n*   [Unigram, klient zoptymalizowany dla Windows](https://github.com/UnigramDev/Unigram) (oparty na [TDLib](https://core.telegram.org/tdlib))\n*   [Telegram CLI dla Linuxa](https://telegram.org/dl/cli)\n*   [MadelineProto](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#kod-zrodlowy)Kod \u017ar\u00f3d\u0142owy\n\nTen kod pozwala badaczom bezpiecze\u0144stwa na **pe\u0142n\u0105 ocen\u0119** naszego [wdro\u017cenia szyfrowania typu \u201eend-to-end\u201d](https://core.telegram.org/api/end-to-end). Mo\u017cliwe jest r\u00f3wnie\u017c **niezale\u017cne sprawdzenie**, czy aplikacje Telegram dost\u0119pne w Google Play i App Store s\u0105 zbudowane przy u\u017cyciu [tego samego kodu](https://core.telegram.org/reproducible-builds), kt\u00f3ry publikujemy na GitHubie.\n\n##### [](#telegram-database-library)[Telegram Database Library](https://github.com/tdlib/td)\n\nWieloplatformowa biblioteka do tworzenia niestandardowych aplikacji Telegram. Aby uzyska\u0107 szczeg\u00f3\u0142owe informacje, zobacz [TDLib](https://core.telegram.org/tdlib).  \nLicencjonowana na podstawie [Boost 1.0](https://www.boost.org/LICENSE_1_0.txt).\n\n[GitHub \u00bb](https://github.com/tdlib/td)\n\n##### [](#telegram-dla-androida)[Telegram dla Androida](https://github.com/DrKLO/Telegram)\n\nOficjalna aplikacja dla Androida, pe\u0142ny opis znajdziesz na [stronie sklepu Google Play](https://telegram.org/dl/android).  \nLicencjonowany na podstawie [GNU GPL v. 2 lub p\u00f3\u017aniejszych](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/DrKLO/Telegram)  \n[Pobierz plik APK \u00bb](https://telegram.org/dl/android/apk)\n\n##### [](#telegram-dla-iosa)[Telegram dla iOSa](https://github.com/TelegramMessenger/Telegram-iOS)\n\nLicencjonowany na podstawie [GNU GPL v. 2 lub p\u00f3\u017aniejszych](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/TelegramMessenger/Telegram-iOS)\n\n##### [](#telegram-dla-macosa)[Telegram dla macOSa](https://github.com/overtake/TelegramSwift)\n\nNatywny klient dla macOS.  \nLicencjonowany na podstawie [GNU GPL v. 2](http://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/overtake/TelegramSwift)\n\n##### [](#telegram-dla-przegladarek-internetowych)Telegram dla przegl\u0105darek internetowych\n\n*   [**Telegram Web, Wersja K**](https://github.com/morethanwords/tweb). Mac, Windows, Linux, Mobile.  \n    Licencjonowany na podstawie [GNU GPL v. 3](https://github.com/morethanwords/tweb/blob/master/LICENSE)  \n    [GitHub \u00bb](https://github.com/morethanwords/tweb)\n    \n*   [**Telegram Web, Wersja A**](https://github.com/Ajaxy/telegram-tt). Mac, Windows, Linux, Mobile.  \n    Licencjonowany na podstawie [GNU GPL v. 3](https://github.com/Ajaxy/telegram-tt/blob/master/LICENSE)  \n    [GitHub \u00bb](https://github.com/Ajaxy/telegram-tt)\n    \n*   [Starszy klient w JavaScript](https://github.com/zhukov/webogram). Mac, Windows, Linux.  \n    Licencjonowany na podstawie [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html).  \n    [GitHub \u00bb](https://github.com/zhukov/webogram)\n    \n\n##### [](#telegram-react)[Telegram React](https://github.com/evgeny-nadymov/telegram-react)\n\nKlient w Javascript dla przegl\u0105darek. Mac, Windows, Linux.  \nLicencjonowany na podstawie [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-react)\n\n##### [](#telegram-desktop)[Telegram Desktop](https://github.com/telegramdesktop/tdesktop)\n\nKlient na komputery oparty na Qt. Mac, Windows, Linux.  \nLicencjonowany na podstawie [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/telegramdesktop/tdesktop)\n\n##### [](#telegram-dla-wp)[Telegram dla WP](https://github.com/evgeny-nadymov/telegram-wp)\n\nLicencjonowany na podstawie [GNU GPL v. 2 or later](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-wp)\n\n##### [](#telegram-x-dla-androida)[Telegram X dla Androida](https://github.com/TGX-Android/Telegram-X)\n\nAlternatywny klient Telegrama dla Androida oparty na TDLib.  \nLicencjonowany na podstawie [GPL v.3.0](https://github.com/TGX-Android/Telegram-X/blob/main/LICENSE)  \n[GitHub \u00bb](https://github.com/TGX-Android/Telegram-X)\n\n#### [](#aplikacje-nieoficjalne)Aplikacje nieoficjalne\n\n##### [](#telegram-cli-nieoficjalny)[Telegram CLI](https://github.com/vysheng/tg) (Nieoficjalny)\n\nLinuxowy interfejs wiersza polece\u0144 dla Telegrama.  \nLicencjonowany na podstawie [GNU GPL v. 2](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/vysheng/tg)\n\n##### [](#unigram-nieoficjalny)[Unigram](https://github.com/UnigramDev/Unigram) (Nieoficjalny)\n\nKlient Telegrama zoptymalizowany dla Windows.  \nLicencjonowany na podstawie [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html) lub p\u00f3\u017aniejszych.  \n[GitHub \u00bb](https://github.com/UnigramDev/Unigram)\n\n##### [](#madelineproto-nieoficjalny)[MadelineProto](https://github.com/danog/MadelineProto) (Nieoficjalny)\n\nKlient Telegrama PHP MTProto.  \nLicencjonowany na podstawie [GNU AGPL v. 3](https://www.gnu.org/licenses/agpl-3.0.en.html)  \n[GitHub \u00bb](http://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#program-bug-bounty)Program Bug Bounty\n\nTelegram zaprasza programist\u00f3w i spo\u0142eczno\u015b\u0107 badaczy bezpiecze\u0144stwa do przeprowadzania audyt\u00f3w swoich us\u0142ug, [kodu](#kod-zrodlowy) i [protoko\u0142u](https://core.telegram.org/mtproto) w poszukiwaniu luk lub problem\u00f3w zwi\u0105zanych z bezpiecze\u0144stwem. [Tutaj dowiesz si\u0119 wi\u0119cej o naszym programie Bug Bounty](https://core.telegram.org/bug-bounty).",
    "url": "https://telegram.org/apps?setln=pl"
  },
  {
    "metadata": {
      "canonicalUrl": "https://telegram.org/apps?setln=tr",
      "title": "Telegram Uygulamalar\u0131",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Telegram Uygulamalar\u0131"
        },
        {
          "property": "og:site_name",
          "content": "Telegram"
        },
        {
          "property": "og:description",
          "content": "Uygulamalar\u0131m\u0131z a\u00e7\u0131k kaynakl\u0131d\u0131r ve yeniden \u00fcretilebilir yap\u0131lar\u0131 destekler. Bu, herkesin ba\u011f\u0131ms\u0131z olarak App Store veya\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:32 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4065",
        "set-cookie": "stel_ln=tr; expires=Tue, 12 May 2026 09:00:46 GMT; path=/; domain=telegram.org; HttpOnly",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=31536000; includeSubDomains; preload",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Telegram Uygulamalar\u0131\n\n> Uygulamalar\u0131m\u0131z **a\u00e7\u0131k kaynakl\u0131d\u0131r** ve **yeniden \u00fcretilebilir yap\u0131lar\u0131** destekler. Bu, herkesin ba\u011f\u0131ms\u0131z olarak App Store veya Google Play'den indirdi\u011finiz uygulamalar\u0131 olu\u015fturmak i\u00e7in kullan\u0131lan kodla [GitHub'daki kodumuzun](#kaynak-kodu) ayn\u0131 oldu\u011funu do\u011frulayabilece\u011fi anlam\u0131na gelir. Geli\u015ftiriciler, [iOS ve Android i\u00e7in Yeniden \u00dcretilebilir Yap\u0131lar Rehberimize](https://core.telegram.org/reproducible-builds) g\u00f6z atabilirler.\n\n#### [](#mobil-uygulamalar)Mobil uygulamalar\n\n*   [Android i\u00e7in Telegram](https://telegram.org/android)\n*   [iPhone ve iPad i\u00e7in Telegram](https://telegram.org/dl/ios)\n\n> **Android i\u00e7in Telegram**'\u0131n en son s\u00fcr\u00fcm\u00fcn\u00fc [bu kanaldan](https://t.me/TAndroidAPK) indirebilirsiniz.\n\n#### [](#masaustu-uygulamalari)Masa\u00fcst\u00fc uygulamalar\u0131\n\n*   [Windows/Mac/Linux i\u00e7in Telegram](https://desktop.telegram.org/)\n*   [macOS i\u00e7in Telegram](https://macos.telegram.org/)\n\n#### [](#web-uygulamalari)Web uygulamalar\u0131\n\n*   [Telegram WebK](https://telegram.org/dl/webk)\n*   [Telegram WebA](https://telegram.org/dl/weba)\n\n#### [](#telegram-veritabani-kutuphanesi-tdlib)Telegram Veritaban\u0131 K\u00fct\u00fcphanesi (TDLib)\n\n*   [TDLib](https://core.telegram.org/tdlib) \u2013 Telegram platformunda \u00f6zel uygulamalar olu\u015fturmay\u0131 kolayla\u015ft\u0131rmak i\u00e7in tasarlanm\u0131\u015f bir \u00e7apraz platform istemcisi.\n*   [Android i\u00e7in Telegram X](https://play.google.com/store/apps/details?id=org.thunderdog.challegram&hl=tr) \u2013 TDLib tabanl\u0131 ak\u0131c\u0131 bir deneysel Telegram istemcisi.\n\n#### [](#resmi-olmayan-uygulamalar)Resmi olmayan uygulamalar\n\n*   [Unigram, Windows 10 i\u00e7in optimize edilmi\u015f bir istemci](https://github.com/UnigramDev/Unigram) ([TDLib](https://core.telegram.org/tdlib) tabanl\u0131) (masa\u00fcst\u00fc ve Xbox One)\n*   [Linux i\u00e7in Telegram CLI](https://telegram.org/dl/cli)\n*   [MadelineProto](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#kaynak-kodu)Kaynak kodu\n\n\u015eu an geli\u015ftiricilerin API'mizi kullanarak h\u0131zl\u0131 bir \u015fekilde bir \u015feyler olu\u015fturmas\u0131na izin veren \u015feyleri a\u00e7\u0131k kaynakl\u0131 olarak sa\u011flamaya odaklan\u0131yoruz. Telegram Veritaban\u0131 K\u00fct\u00fcphanesinin yan\u0131 s\u0131ra Android, iOS, web ve masa\u00fcst\u00fc uygulamalar\u0131m\u0131z\u0131n (Win, macOS ve Linux) kodunu da yay\u0131nlad\u0131k.\n\n> Bu kod, g\u00fcvenlik ara\u015ft\u0131rmac\u0131lar\u0131n\u0131n [u\u00e7tan uca \u015fifreleme uygulamam\u0131z\u0131](https://core.telegram.org/api/end-to-end) **tam olarak** de\u011ferlendirmesine olanak tan\u0131r. Google Play ve App Store'da bulunan Telegram uygulamalar\u0131n\u0131n GitHub'da yay\u0131nlad\u0131\u011f\u0131m\u0131z [ayn\u0131 kodla](https://core.telegram.org/reproducible-builds) kullan\u0131larak olu\u015fturuldu\u011funu **ba\u011f\u0131ms\u0131z olarak do\u011frulamak** da m\u00fcmk\u00fcnd\u00fcr.\n\n##### [](#telegram-veritabani-kutuphanesi)[Telegram Veritaban\u0131 K\u00fct\u00fcphanesi](https://github.com/tdlib/td)\n\n\u00d6zel Telegram uygulamalar\u0131 olu\u015fturmak i\u00e7in \u00e7apraz platform kitapl\u0131\u011f\u0131, ayr\u0131nt\u0131lar i\u00e7in [TDLib](https://core.telegram.org/tdlib)'e bak\u0131n.  \n[Boost 1.0](https://www.boost.org/LICENSE_1_0.txt) alt\u0131nda lisanslanm\u0131\u015ft\u0131r.\n\n[GitHub \u00bb](https://github.com/tdlib/td)\n\n##### [](#android-icin-telegram)[Android i\u00e7in Telegram](https://github.com/DrKLO/Telegram)\n\nResmi Android Uygulamas\u0131, tam a\u00e7\u0131klama i\u00e7in [Google Play Store sayfas\u0131na](https://telegram.org/dl/android) bak\u0131n.  \n[GNU GPL v. 2 veya sonras\u0131](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html) alt\u0131nda lisanslanm\u0131\u015ft\u0131r.\n\n[GitHub \u00bb](https://github.com/DrKLO/Telegram)  \n[APK Dosyas\u0131n\u0131 \u0130ndir \u00bb](https://telegram.org/dl/android/apk)\n\n##### [](#ios-icin-telegram)[iOS i\u00e7in Telegram](https://github.com/TelegramMessenger/Telegram-iOS)\n\n[GNU GPL v. 2 veya sonras\u0131](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html) alt\u0131nda lisanslanm\u0131\u015ft\u0131r.\n\n[GitHub \u00bb](https://github.com/TelegramMessenger/Telegram-iOS)\n\n##### [](#macos-icin-telegram)[macOS i\u00e7in Telegram](https://github.com/overtake/TelegramSwift)\n\nYerel macOS istemcisi.  \n[GNU GPL v. 2](http://www.gnu.org/licenses/gpl.html) alt\u0131nda lisanslanm\u0131\u015ft\u0131r.\n\n[GitHub \u00bb](https://github.com/overtake/TelegramSwift)\n\n##### [](#web-tarayicilari-icin-telegram)Web taray\u0131c\u0131lar\u0131 i\u00e7in Telegram\n\n*   [**Telegram Web, Version K**](https://github.com/morethanwords/tweb). Mac, Windows, Linux, Mobil.  \n    [GNU GPL v. 3](https://github.com/morethanwords/tweb/blob/master/LICENSE) alt\u0131nda lisanslanm\u0131\u015ft\u0131r.  \n    [GitHub \u00bb](https://github.com/morethanwords/tweb)\n    \n*   [**Telegram Web, Version A**](https://github.com/Ajaxy/telegram-tt). Mac, Windows, Linux, Mobil.  \n    [GNU GPL v. 3](https://github.com/Ajaxy/telegram-tt/blob/master/LICENSE) alt\u0131nda lisanslanm\u0131\u015ft\u0131r.  \n    [GitHub \u00bb](https://github.com/Ajaxy/telegram-tt)\n    \n*   [Eski JavaScript istemcisi](https://github.com/zhukov/webogram). Mac, Windows, Linux.  \n    [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html) alt\u0131nda lisanslanm\u0131\u015ft\u0131r.  \n    [GitHub \u00bb](https://github.com/zhukov/webogram)\n    \n\n##### [](#telegram-react)[Telegram React](https://github.com/evgeny-nadymov/telegram-react)\n\nTaray\u0131c\u0131lar i\u00e7in Javascript istemcisi. Mac, Windows, Linux.  \n[GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html) alt\u0131nda lisanslanm\u0131\u015ft\u0131r.\n\n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-react)\n\n##### [](#telegram-desktop)[Telegram Desktop](https://github.com/telegramdesktop/tdesktop)\n\nQt tabanl\u0131 masa\u00fcst\u00fc istemcisi. Mac, Windows, Linux.  \n[GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html) alt\u0131nda lisanslanm\u0131\u015ft\u0131r.\n\n[GitHub \u00bb](https://github.com/telegramdesktop/tdesktop)\n\n##### [](#wp-icin-telegram)[WP i\u00e7in Telegram](https://github.com/evgeny-nadymov/telegram-wp)\n\n[GNU GPL v. 2 veya sonras\u0131](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html) alt\u0131nda lisanslanm\u0131\u015ft\u0131r.\n\n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-wp)\n\n#### [](#resmi-olmayan-uygulamalar)Resmi olmayan uygulamalar\n\n##### [](#telegram-cli-resmi-olmayan)[Telegram CLI](https://github.com/vysheng/tg) (Resmi olmayan)\n\nTelegram i\u00e7in Linux Komut sat\u0131r\u0131 aray\u00fcz\u00fc.  \n[GNU GPL v. 2](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html) alt\u0131nda lisanslanm\u0131\u015ft\u0131r.\n\n[GitHub \u00bb](https://github.com/vysheng/tg)\n\n##### [](#unigram-resmi-olmayan)[Unigram](https://github.com/UnigramDev/Unigram) (Resmi olmayan)\n\nWindows 10 (masa\u00fcst\u00fc ve Xbox One) i\u00e7in optimize edilmi\u015f bir Telegram istemcisi.  \n[GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html) veya sonras\u0131 alt\u0131nda lisanslanm\u0131\u015ft\u0131r.\n\n[GitHub \u00bb](https://github.com/UnigramDev/Unigram)\n\n##### [](#madelineproto-resmi-olmayan)[MadelineProto](https://github.com/danog/MadelineProto) (Resmi olmayan)\n\nPHP MTProto Telegram istemcisi.  \n[GNU AGPL v. 3](https://www.gnu.org/licenses/agpl-3.0.en.html) alt\u0131nda lisanslanm\u0131\u015ft\u0131r.\n\n[GitHub \u00bb](http://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#guvenlik-arastirmacilari-icin-iletisim)G\u00fcvenlik ara\u015ft\u0131rmac\u0131lar\u0131 i\u00e7in ileti\u015fim\n\nTelegram uygulamalar\u0131 ve protokol\u00fcyle ilgili herhangi bir sorunla kar\u015f\u0131la\u015f\u0131rsan\u0131z veya g\u00fcvenlik \u00f6zelliklerinin uygulanmas\u0131yla ilgili herhangi bir sorunuz varsa, l\u00fctfen **security@telegram.org** adresinden bizimle ileti\u015fime ge\u00e7in.",
    "url": "https://telegram.org/apps?setln=tr"
  },
  {
    "metadata": {
      "canonicalUrl": "https://telegram.org/apps?setln=be",
      "title": "Telegram Applications",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Telegram Applications"
        },
        {
          "property": "og:site_name",
          "content": "Telegram"
        },
        {
          "property": "og:description",
          "content": "Telegram apps are open source and support reproducible builds. Anyone can independently verify that Telegram apps you download\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:32 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4078",
        "set-cookie": "stel_ln=be; expires=Mon, 18 May 2026 16:08:27 GMT; path=/; domain=telegram.org; HttpOnly",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=31536000; includeSubDomains; preload",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Telegram Applications\n\nTelegram apps are **open source** and support [reproducible builds](https://core.telegram.org/reproducible-builds). Anyone can independently verify that Telegram apps you download from App Store or Google Play were built using the [exact same code](#source-code) that we publish.\n\n#### [](#mobile-apps)Mobile apps\n\n*   [Telegram for Android](https://telegram.org/android)\n*   [Telegram for iPhone and iPad](https://telegram.org/dl/ios)\n\n#### [](#desktop-apps)Desktop apps\n\n*   [Telegram for Windows/Mac/Linux](https://desktop.telegram.org/)\n*   [Telegram for macOS](https://macos.telegram.org/)\n\n#### [](#web-apps)Web apps\n\n*   [Telegram WebK](https://telegram.org/dl/webk)\n*   [Telegram WebA](https://telegram.org/dl/weba)\n\n#### [](#telegram-database-library-tdlib)Telegram Database Library (TDLib)\n\n*   [TDLib](https://core.telegram.org/tdlib) \u2013 a cross-platform client designed to facilitate creating custom apps on the Telegram platform.\n*   [Telegram X for Android](https://play.google.com/store/apps/details?id=org.thunderdog.challegram&hl=en) \u2013 a slick experimental Telegram client based on TDLib.\n\n#### [](#unofficial-apps)Unofficial apps\n\n*   [Unigram, a client optimized for Windows](https://github.com/UnigramDev/Unigram) (based on [TDLib](https://core.telegram.org/tdlib))\n*   [Telegram CLI for Linux](https://telegram.org/dl/cli)\n*   [MadelineProto](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#source-code)Source code\n\nThis code allows security researchers to **fully evaluate** our [end-to-end encryption implementation](https://core.telegram.org/api/end-to-end). It is also possible to **independently verify** that Telegram apps available on Google Play and App Store are built using the [same code](https://core.telegram.org/reproducible-builds) that we publish on GitHub.\n\n##### [](#telegram-database-library)[Telegram Database Library](https://github.com/tdlib/td)\n\nCross-platform library for building custom Telegram apps, see [TDLib](https://core.telegram.org/tdlib) for details.  \nLicensed under [Boost 1.0](https://www.boost.org/LICENSE_1_0.txt).  \n[GitHub \u00bb](https://github.com/tdlib/td)\n\n##### [](#telegram-for-android)[Telegram for Android](https://github.com/DrKLO/Telegram)\n\nOfficial Android App, see [Google Play Market page](https://telegram.org/dl/android) for full description.  \nLicensed under [GNU GPL v. 2 or later](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/DrKLO/Telegram)  \n[Download APK File \u00bb](https://telegram.org/dl/android/apk)\n\n##### [](#telegram-for-ios)[Telegram for iOS](https://github.com/TelegramMessenger/Telegram-iOS)\n\nLicensed under [GNU GPL v. 2 or later](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/TelegramMessenger/Telegram-iOS)\n\n##### [](#telegram-for-macos)[Telegram for macOS](https://github.com/overtake/TelegramSwift)\n\nNative macOS client.  \nLicensed under [GNU GPL v. 2](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/overtake/TelegramSwift)\n\n##### [](#telegram-for-web-browsers)Telegram for Web browsers\n\n*   [**Telegram Web, Version K**](https://github.com/morethanwords/tweb). Mac, Windows, Linux, Mobile.  \n    Licensed under [GNU GPL v. 3](https://github.com/morethanwords/tweb/blob/master/LICENSE).  \n    [GitHub \u00bb](https://github.com/morethanwords/tweb)\n    \n*   [**Telegram Web, Version A**](https://github.com/Ajaxy/telegram-tt). Mac, Windows, Linux, Mobile.  \n    Licensed under [GNU GPL v. 3](https://github.com/Ajaxy/telegram-tt/blob/master/LICENSE).  \n    [GitHub \u00bb](https://github.com/Ajaxy/telegram-tt)\n    \n*   [Legacy JavaScript client](https://github.com/zhukov/webogram). Mac, Windows, Linux.  \n    Licensed under [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n    [GitHub \u00bb](https://github.com/zhukov/webogram)\n    \n\n##### [](#telegram-react)[Telegram React](https://github.com/evgeny-nadymov/telegram-react)\n\nJavaScript client for browsers. Mac, Windows, Linux.  \nLicensed under [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-react)\n\n##### [](#telegram-desktop)[Telegram Desktop](https://github.com/telegramdesktop/tdesktop)\n\nQt-based desktop client. Mac, Windows, Linux.  \nLicensed under [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/telegramdesktop/tdesktop)\n\n##### [](#telegram-for-wp)[Telegram for WP](https://github.com/evgeny-nadymov/telegram-wp)\n\nLicensed under [GNU GPL v. 2 or later](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-wp)\n\n##### [](#telegram-x-for-android)[Telegram X for Android](https://github.com/TGX-Android/Telegram-X)\n\nAlternative Telegram client for Android based on TDLib.  \nLicensed under [GPL v.3.0](https://github.com/TGX-Android/Telegram-X/blob/main/LICENSE)  \n[GitHub \u00bb](https://github.com/TGX-Android/Telegram-X)\n\n#### [](#unofficial-apps)Unofficial apps\n\n##### [](#telegram-cli-unofficial)[Telegram CLI](https://github.com/vysheng/tg) (Unofficial)\n\nLinux Command-line interface for Telegram.  \nLicensed under [GNU GPL v. 2](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/vysheng/tg)\n\n##### [](#unigram-unofficial)[Unigram](https://github.com/UnigramDev/Unigram) (Unofficial)\n\nA Telegram client optimized for Windows.  \nLicensed under [GNU GPL v. 3 or later](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/UnigramDev/Unigram)\n\n##### [](#madelineproto-unofficial)[MadelineProto](https://github.com/danog/MadelineProto) (Unofficial)\n\nA PHP MTProto Telegram client.  \nLicensed under [GNU AGPL v. 3](https://www.gnu.org/licenses/agpl-3.0.en.html).  \n[GitHub \u00bb](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#bug-bounty-program)Bug Bounty Program\n\nTelegram welcomes developers and the security research community to audit its services, [code](https://telegram.org/apps#source-code) and [protocol](https://core.telegram.org/mtproto) seeking vulnerabilities or security-related issues. [Learn more about our Bug Bounty Program here](https://core.telegram.org/bug-bounty).",
    "url": "https://telegram.org/apps?setln=be"
  },
  {
    "metadata": {
      "canonicalUrl": "https://telegram.org/apps?setln=nl",
      "title": "Telegram-applicaties",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Telegram-applicaties"
        },
        {
          "property": "og:site_name",
          "content": "Telegram"
        },
        {
          "property": "og:description",
          "content": "Onze apps zijn opensource en ondersteunen reproduceerbare builds. Dit betekent dat iedereen onafhankelijk kan verifi\u00ebren\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:32 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3881",
        "set-cookie": "stel_ssid=5a658dfdd9cc6dfaed_4133743359213791730; expires=Fri, 16 May 2025 13:15:12 GMT; path=/; samesite=None; secure; HttpOnly\nstel_ln=nl; expires=Sun, 17 May 2026 12:00:47 GMT; path=/; domain=telegram.org; HttpOnly",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=31536000; includeSubDomains; preload",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Telegram-applicaties\n\n> Onze apps zijn **opensource** en ondersteunen **reproduceerbare builds**. Dit betekent dat iedereen onafhankelijk kan verifi\u00ebren dat onze [code op GitHub](#source-code) exact dezelfde code is die gebruikt werd om de apps te bouwen die je downloadt in App Store of Google Play. Ontwikkelaars zijn vrij om onze [gids voor reproduceerbare builds voor iOS en Android](https://core.telegram.org/reproducible-builds) te bekijken.\n\n#### [](#mobiele-apps)Mobiele apps\n\n*   [Telegram voor Android](https://telegram.org/android)\n*   [Telegram voor iPhone en iPad](https://telegram.org/dl/ios)\n\n> Je kan ook de laatste versie van **Telegram voor Android** downloaden via [dit kanaal](https://t.me/TAndroidAPK).\n\n#### [](#desktopapps)Desktopapps\n\n*   [Telegram voor Windows/Mac/Linux](https://desktop.telegram.org/)\n*   [Telegram voor macOS](https://macos.telegram.org/)\n\n#### [](#webapps)Webapps\n\n*   [Telegram WebA](https://telegram.org/dl/weba)\n*   [Telegram WebK](https://telegram.org/dl/webk)\n\n#### [](#telegram-databasebibliotheek-tdlib)Telegram-databasebibliotheek (TDLib)\n\n*   [TDLib](https://core.telegram.org/tdlib) \u2013 een cross-platform client ontworpen om het maken van aangepaste apps op het Telegram-platform te vergemakkelijken.\n*   [Telegram X voor Android](https://play.google.com/store/apps/details?id=org.thunderdog.challegram) \u2013 een gelikte experimentele Telegram-client gebaseerd op TDLib.\n\n#### [](#onofficiele-apps)Onoffici\u00eble apps\n\n*   [Unigram, een client geoptimaliseerd voor Windows 10](https://github.com/UnigramDev/Unigram) (gebaseerd op [TDLib](https://core.telegram.org/tdlib)) (desktop en Xbox One)\n*   [Telegram CLI voor Linux](https://telegram.org/dl/cli)\n*   [MadelineProto](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#broncode)Broncode\n\nOp dit moment richten we ons op het opensource maken van die dingen die ontwikkelaars in staat stellen om snel iets te bouwen met behulp van onze API. We hebben de code voor onze apps voor Android, iOS, web en desktop (Windows, macOS en Linux) en de Telegram-databasebibliotheek gepubliceerd.\n\n> Met deze code kunnen beveiligingsonderzoekers onze [implementatie van end-to-end encryptie](https://core.telegram.org/api/end-to-end) **volledig evalueren**. Het is ook mogelijk om **onafhankelijk te controleren** of de Telegram-apps beschikbaar op Google Play en App Store gebouwd zijn met [dezelfde code](https://core.telegram.org/reproducible-builds) die we op GitHub publiceren.\n\n##### [](#telegram-databasebibliotheek)[Telegram-databasebibliotheek](https://github.com/tdlib/td)\n\nCross-platform bibliotheek voor het bouwen van aangepaste Telegram-apps, zie [TDLib](https://core.telegram.org/tdlib) voor details.  \nGelicenseerd onder [Boost 1.0](https://www.boost.org/LICENSE_1_0.txt).  \n[GitHub \u00bb](https://github.com/tdlib/td)\n\n##### [](#telegram-voor-android)[Telegram voor Android](https://github.com/DrKLO/Telegram)\n\nOffici\u00eble Android-app, zie de [Google Play-pagina](https://telegram.org/dl/android) voor een volledige beschrijving.  \nGelicenseerd onder [GNU GPL v. 2 of later](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/DrKLO/Telegram)  \n[Download het APK-bestand \u00bb](https://telegram.org/dl/android/apk)\n\n##### [](#telegram-voor-ios)[Telegram voor iOS](https://github.com/TelegramMessenger/Telegram-iOS)\n\nGelicenseerd onder [GNU GPL v. 2 of later](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/TelegramMessenger/Telegram-iOS)\n\n##### [](#telegram-voor-macos)[Telegram voor macOS](https://github.com/overtake/TelegramSwift)\n\nNative macOS-client.  \nGelicenseerd onder [GNU GPL v. 2](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/overtake/TelegramSwift)\n\n##### [](#telegram-voor-webbrowsers)Telegram voor webbrowsers\n\n*   [**Telegram Web, versie K**](https://github.com/morethanwords/tweb). Mac, Windows, Linux, mobiel.  \n    Gelicenseerd onder [GNU GPL v. 3](https://github.com/morethanwords/tweb/blob/master/LICENSE)  \n    [GitHub \u00bb](https://github.com/morethanwords/tweb)\n    \n*   [**Telegram Web, versie A**](https://github.com/Ajaxy/telegram-tt). Mac, Windows, Linux, mobiel.  \n    Gelicenseerd onder [GNU GPL v. 3](https://github.com/Ajaxy/telegram-tt/blob/master/LICENSE)  \n    [GitHub \u00bb](https://github.com/Ajaxy/telegram-tt)\n    \n*   [Verouderde JavaScript-client](https://github.com/zhukov/webogram). Mac, Windows, Linux.  \n    Gelicenseerd onder [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n    [GitHub \u00bb](https://github.com/zhukov/webogram)\n    \n\n##### [](#telegram-react)[Telegram React](https://github.com/evgeny-nadymov/telegram-react)\n\nJavaScript-client voor browsers. Mac, Windows, Linux.  \nGelicenseerd onder [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-react)\n\n##### [](#telegram-desktop)[Telegram Desktop](https://github.com/telegramdesktop/tdesktop)\n\nDesktopclient gebaseerd op Qt. Mac, Windows, Linux.  \nGelicenseerd onder [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/telegramdesktop/tdesktop)\n\n##### [](#telegram-voor-wp)[Telegram voor WP](https://github.com/evgeny-nadymov/telegram-wp)\n\nGelicenseerd onder [GNU GPL v. 2 of later](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-wp)\n\n#### [](#onofficiele-apps)Onoffici\u00eble apps\n\n##### [](#telegram-cli-onofficieel)[Telegram CLI](https://github.com/vysheng/tg) (onofficieel)\n\nLinux-opdrachtregelinterface voor Telegram.  \nGelicenseerd onder [GNU GPL v. 2](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/vysheng/tg)\n\n##### [](#unigram-onofficieel)[Unigram](https://github.com/UnigramDev/Unigram) (onofficieel)\n\nEen Telegram-client geoptimaliseerd voor Windows 10.  \nGelicenseerd onder [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html) of later.  \n[GitHub \u00bb](https://github.com/UnigramDev/Unigram)\n\n##### [](#madelineproto-onofficieel)[MadelineProto](https://github.com/danog/MadelineProto) (onofficieel)\n\nEen MTProto-Telegram-client in PHP.  \nGelicenseerd onder [GNU AGPL v. 3](https://www.gnu.org/licenses/agpl-3.0.en.html)  \n[GitHub \u00bb](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#contact-voor-veiligheidsonderzoekers)Contact voor veiligheidsonderzoekers\n\nAls je problemen ondervindt met Telegram-apps en het protocol, of als je vragen hebt over onze implementatie van beveiligingsfuncties, neem dan contact met ons op via **security@telegram.org**.",
    "url": "https://telegram.org/apps?setln=nl"
  },
  {
    "metadata": {
      "canonicalUrl": "https://telegram.org/apps?setln=ru",
      "title": "Telegram Applications",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Telegram Applications"
        },
        {
          "property": "og:site_name",
          "content": "Telegram"
        },
        {
          "property": "og:description",
          "content": "Telegram apps are open source and support reproducible builds. Anyone can independently verify that Telegram apps you download\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:32 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4020",
        "set-cookie": "stel_ln=ru; expires=Wed, 13 May 2026 19:42:06 GMT; path=/; domain=telegram.org; HttpOnly",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=31536000; includeSubDomains; preload",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Telegram Applications\n\nTelegram apps are **open source** and support [reproducible builds](https://core.telegram.org/reproducible-builds). Anyone can independently verify that Telegram apps you download from App Store or Google Play were built using the [exact same code](#source-code) that we publish.\n\n#### [](#mobile-apps)Mobile apps\n\n*   [Telegram for Android](https://telegram.org/android)\n*   [Telegram for iPhone and iPad](https://telegram.org/dl/ios)\n\n#### [](#desktop-apps)Desktop apps\n\n*   [Telegram for Windows/Mac/Linux](https://desktop.telegram.org/)\n*   [Telegram for macOS](https://macos.telegram.org/)\n\n#### [](#web-apps)Web apps\n\n*   [Telegram WebK](https://telegram.org/dl/webk)\n*   [Telegram WebA](https://telegram.org/dl/weba)\n\n#### [](#telegram-database-library-tdlib)Telegram Database Library (TDLib)\n\n*   [TDLib](https://core.telegram.org/tdlib) \u2013 a cross-platform client designed to facilitate creating custom apps on the Telegram platform.\n*   [Telegram X for Android](https://play.google.com/store/apps/details?id=org.thunderdog.challegram&hl=en) \u2013 a slick experimental Telegram client based on TDLib.\n\n#### [](#unofficial-apps)Unofficial apps\n\n*   [Unigram, a client optimized for Windows](https://github.com/UnigramDev/Unigram) (based on [TDLib](https://core.telegram.org/tdlib))\n*   [Telegram CLI for Linux](https://telegram.org/dl/cli)\n*   [MadelineProto](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#source-code)Source code\n\nThis code allows security researchers to **fully evaluate** our [end-to-end encryption implementation](https://core.telegram.org/api/end-to-end). It is also possible to **independently verify** that Telegram apps available on Google Play and App Store are built using the [same code](https://core.telegram.org/reproducible-builds) that we publish on GitHub.\n\n##### [](#telegram-database-library)[Telegram Database Library](https://github.com/tdlib/td)\n\nCross-platform library for building custom Telegram apps, see [TDLib](https://core.telegram.org/tdlib) for details.  \nLicensed under [Boost 1.0](https://www.boost.org/LICENSE_1_0.txt).  \n[GitHub \u00bb](https://github.com/tdlib/td)\n\n##### [](#telegram-for-android)[Telegram for Android](https://github.com/DrKLO/Telegram)\n\nOfficial Android App, see [Google Play Market page](https://telegram.org/dl/android) for full description.  \nLicensed under [GNU GPL v. 2 or later](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/DrKLO/Telegram)  \n[Download APK File \u00bb](https://telegram.org/dl/android/apk)\n\n##### [](#telegram-for-ios)[Telegram for iOS](https://github.com/TelegramMessenger/Telegram-iOS)\n\nLicensed under [GNU GPL v. 2 or later](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/TelegramMessenger/Telegram-iOS)\n\n##### [](#telegram-for-macos)[Telegram for macOS](https://github.com/overtake/TelegramSwift)\n\nNative macOS client.  \nLicensed under [GNU GPL v. 2](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/overtake/TelegramSwift)\n\n##### [](#telegram-for-web-browsers)Telegram for Web browsers\n\n*   [**Telegram Web, Version K**](https://github.com/morethanwords/tweb). Mac, Windows, Linux, Mobile.  \n    Licensed under [GNU GPL v. 3](https://github.com/morethanwords/tweb/blob/master/LICENSE).  \n    [GitHub \u00bb](https://github.com/morethanwords/tweb)\n    \n*   [**Telegram Web, Version A**](https://github.com/Ajaxy/telegram-tt). Mac, Windows, Linux, Mobile.  \n    Licensed under [GNU GPL v. 3](https://github.com/Ajaxy/telegram-tt/blob/master/LICENSE).  \n    [GitHub \u00bb](https://github.com/Ajaxy/telegram-tt)\n    \n*   [Legacy JavaScript client](https://github.com/zhukov/webogram). Mac, Windows, Linux.  \n    Licensed under [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n    [GitHub \u00bb](https://github.com/zhukov/webogram)\n    \n\n##### [](#telegram-react)[Telegram React](https://github.com/evgeny-nadymov/telegram-react)\n\nJavaScript client for browsers. Mac, Windows, Linux.  \nLicensed under [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-react)\n\n##### [](#telegram-desktop)[Telegram Desktop](https://github.com/telegramdesktop/tdesktop)\n\nQt-based desktop client. Mac, Windows, Linux.  \nLicensed under [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/telegramdesktop/tdesktop)\n\n##### [](#telegram-for-wp)[Telegram for WP](https://github.com/evgeny-nadymov/telegram-wp)\n\nLicensed under [GNU GPL v. 2 or later](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-wp)\n\n##### [](#telegram-x-for-android)[Telegram X for Android](https://github.com/TGX-Android/Telegram-X)\n\nAlternative Telegram client for Android based on TDLib.  \nLicensed under [GPL v.3.0](https://github.com/TGX-Android/Telegram-X/blob/main/LICENSE)  \n[GitHub \u00bb](https://github.com/TGX-Android/Telegram-X)\n\n#### [](#unofficial-apps)Unofficial apps\n\n##### [](#telegram-cli-unofficial)[Telegram CLI](https://github.com/vysheng/tg) (Unofficial)\n\nLinux Command-line interface for Telegram.  \nLicensed under [GNU GPL v. 2](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/vysheng/tg)\n\n##### [](#unigram-unofficial)[Unigram](https://github.com/UnigramDev/Unigram) (Unofficial)\n\nA Telegram client optimized for Windows.  \nLicensed under [GNU GPL v. 3 or later](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/UnigramDev/Unigram)\n\n##### [](#madelineproto-unofficial)[MadelineProto](https://github.com/danog/MadelineProto) (Unofficial)\n\nA PHP MTProto Telegram client.  \nLicensed under [GNU AGPL v. 3](https://www.gnu.org/licenses/agpl-3.0.en.html).  \n[GitHub \u00bb](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#bug-bounty-program)Bug Bounty Program\n\nTelegram welcomes developers and the security research community to audit its services, [code](https://telegram.org/apps#source-code) and [protocol](https://core.telegram.org/mtproto) seeking vulnerabilities or security-related issues. [Learn more about our Bug Bounty Program here](https://core.telegram.org/bug-bounty).",
    "url": "https://telegram.org/apps?setln=ru"
  },
  {
    "metadata": {
      "canonicalUrl": "https://telegram.org/apps?setln=ar",
      "title": "\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645"
        },
        {
          "property": "og:site_name",
          "content": "Telegram"
        },
        {
          "property": "og:description",
          "content": "\u062a\u0637\u0628\u064a\u0642\u0627\u062a\u0646\u0627 \u0645\u0641\u062a\u0648\u062d\u0629 \u0627\u0644\u0645\u0635\u062f\u0631 \u0648\u062a\u062f\u0639\u0645 \u0627\u0644\u0628\u064f\u0646\u0649 \u0627\u0644\u062a\u064a \u064a\u0645\u0643\u0646 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646\u0647\u0627. \u0630\u0644\u0643 \u064a\u0633\u0645\u062d \u0644\u0623\u064a \u0634\u062e\u0635 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0623\u0646 \u0627\u0644\u0643\u0648\u062f \u0627\u0644\u0645\u0635\u062f\u0631 \u0627\u0644\u0630\u064a \u0646\u0646\u0634\u0631\u0647 \u0639\u0644\u0649 \u063a\u064a\u062a\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:36 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4258",
        "set-cookie": "stel_ln=ar; expires=Sat, 09 May 2026 02:04:22 GMT; path=/; domain=telegram.org; HttpOnly",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=31536000; includeSubDomains; preload",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# \u062a\u0637\u0628\u064a\u0642\u0627\u062a \u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645\n\n> \u062a\u0637\u0628\u064a\u0642\u0627\u062a\u0646\u0627 **\u0645\u0641\u062a\u0648\u062d\u0629 \u0627\u0644\u0645\u0635\u062f\u0631** \u0648\u062a\u062f\u0639\u0645 **\u0627\u0644\u0628\u064f\u0646\u0649 \u0627\u0644\u062a\u064a \u064a\u0645\u0643\u0646 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646\u0647\u0627**. \u0630\u0644\u0643 \u064a\u0633\u0645\u062d \u0644\u0623\u064a \u0634\u062e\u0635 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0623\u0646 [\u0627\u0644\u0643\u0648\u062f \u0627\u0644\u0645\u0635\u062f\u0631 \u0627\u0644\u0630\u064a \u0646\u0646\u0634\u0631\u0647 \u0639\u0644\u0649 \u063a\u064a\u062a \u0647\u0627\u0628](#source-code) \u0647\u0648 \u0646\u0641\u0633 \u0627\u0644\u0643\u0648\u062f \u062a\u0645\u0627\u0645\u064b\u0627 \u0627\u0644\u0645\u064f\u0633\u062a\u062e\u062f\u0645 \u0644\u0628\u0646\u0627\u0621 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062a\u064a \u064a\u0645\u0643\u0646 \u062a\u0646\u0632\u064a\u0644\u0647\u0627 \u0645\u0646 \u0622\u0628 \u0633\u062a\u0648\u0631 \u0623\u0648 \u062c\u0648\u062c\u0644 \u0628\u0644\u0627\u064a. \u0646\u0631\u062d\u0651\u0628 \u0628\u0627\u0644\u0645\u0637\u0648\u0650\u0651\u0631\u064a\u0646 \u0644\u0644\u0625\u0637\u0644\u0627\u0639 \u0639\u0644\u0649 [\u062f\u0644\u064a\u0644 \u0627\u0644\u0628\u064f\u0646\u0649 \u0627\u0644\u062a\u064a \u064a\u0645\u0643\u0646 \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646\u0647\u0627 \u0644\u0646\u0638\u0627\u0645\u064a iOS \u0648\u0623\u0646\u062f\u0631\u0648\u064a\u062f](https://core.telegram.org/reproducible-builds).\n\n#### [](#1848560651)\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062c\u0648\u0651\u0627\u0644\n\n*   [\u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645 \u0644\u0644\u0623\u0646\u062f\u0631\u0648\u064a\u062f](https://telegram.org/android)\n*   [\u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645 \u0644\u0644\u0622\u064a\u0641\u0648\u0646 \u0648\u0627\u0644\u0622\u064a\u0628\u0627\u062f](https://telegram.org/dl/ios)\n\n> \u064a\u0645\u0643\u0646\u0643 \u0623\u064a\u0636\u064b\u0627 \u062a\u0646\u0632\u064a\u0644 \u0623\u062d\u062f\u062b \u0625\u0635\u062f\u0627\u0631 \u0645\u0646 **\u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645 \u0644\u0644\u0623\u0646\u062f\u0631\u0648\u064a\u062f** \u0645\u0646 [\u0647\u0630\u0647 \u0627\u0644\u0642\u0646\u0627\u0629](https://t.me/TAndroidAPK).\n\n#### [](#2085920218)\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0633\u0637\u062d \u0627\u0644\u0645\u0643\u062a\u0628\n\n*   [\u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645 \u0644\u0648\u064a\u0646\u062f\u0648\u0632/\u0645\u0627\u0643/\u0644\u064a\u0646\u0643\u0633](https://desktop.telegram.org/)\n*   [\u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645 \u0644\u0640 macOS](https://macos.telegram.org/)\n\n#### [](#1937712193)\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0648\u064a\u0628\n\n*   [Telegram WebA](https://telegram.org/dl/weba)\n*   [Telegram WebK](https://telegram.org/dl/webk)\n\n#### [](#tdlib)\u0645\u0643\u062a\u0628\u0629 \u0642\u0627\u0639\u062f\u0629 \u0628\u064a\u0627\u0646\u0627\u062a \u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645 (TDLib)\n\n*   [TDLib](https://core.telegram.org/tdlib) \u2013 \u0645\u0643\u062a\u0628\u0629 \u0644\u0645\u062e\u062a\u0644\u0641 \u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0635\u064f\u0645\u0651\u0645\u062a \u0644\u062a\u0633\u0647\u064a\u0644 \u0625\u0646\u0634\u0627\u0621 \u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0645\u062e\u0635\u0635\u0629 \u062a\u0639\u062a\u0645\u062f \u0639\u0644\u0649 \u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645.\n*   [\u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645 \u0625\u0643\u0633 \u0644\u0623\u0646\u062f\u0631\u0648\u064a\u062f](https://play.google.com/store/apps/details?id=org.thunderdog.challegram&hl=en) \u2013 \u062a\u0637\u0628\u064a\u0642 \u062a\u062c\u0631\u064a\u0628\u064a \u0645\u0646 \u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645 \u0645\u0628\u0646\u064a \u0639\u0644\u0649 TDLib.\n\n#### [](#619664408)\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u063a\u064a\u0631 \u0631\u0633\u0645\u064a\u0651\u0629\n\n*   [Unigram: \u0646\u0633\u062e\u0629 \u0645\u062e\u0635\u0651\u0635\u0629 \u0644\u0648\u064a\u0646\u062f\u0648\u0632 10](https://github.com/UnigramDev/Unigram) (\u0645\u0628\u0646\u064a\u0629 \u0639\u0644\u0649 [TDLib](https://core.telegram.org/tdlib)) (\u0633\u0637\u062d \u0627\u0644\u0645\u0643\u062a\u0628 \u0648 Xbox One)\n*   [Telegram CLI for Linux](https://telegram.org/dl/cli)\n*   [MadelineProto](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#94537762)\u0627\u0644\u0643\u0648\u062f \u0627\u0644\u0645\u0635\u062f\u0631\n\n\u0646\u0631\u0643\u0632 \u0641\u064a \u0627\u0644\u0648\u0642\u062a \u0627\u0644\u062d\u0627\u0644\u064a \u0639\u0644\u0649 \u0646\u0634\u0631 \u0643\u0648\u062f \u0627\u0644\u0645\u0635\u062f\u0631 \u0627\u0644\u0630\u064a \u064a\u0633\u0645\u062d \u0644\u0644\u0645\u0637\u0648\u0631\u064a\u0646 \u0628\u0628\u0646\u0627\u0621 \u0623\u064a \u0634\u064a\u0621 \u0628\u0633\u0631\u0639\u0629 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0648\u0627\u062c\u0647\u0629 \u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u0646\u0627. \u0642\u0645\u0646\u0627 \u0646\u0634\u0631 \u0627\u0644\u0643\u0648\u062f \u0627\u0644\u0645\u0635\u062f\u0631 \u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0623\u0646\u062f\u0631\u0648\u064a\u062f\u060c iOS\u060c \u0627\u0644\u0648\u064a\u0628 \u0648\u0633\u0637\u062d \u0627\u0644\u0645\u0643\u062a\u0628 (\u0648\u064a\u0646\u062f\u0648\u0632\u060c \u0645\u0627\u0643 \u0648\u0644\u064a\u0646\u0643\u0633) \u0628\u0627\u0644\u0625\u0636\u0627\u0641\u0629 \u0625\u0644\u0649 \u0645\u0643\u062a\u0628\u0629 \u0642\u0627\u0639\u062f\u0629 \u0628\u064a\u0627\u0646\u0627\u062a \u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645.\n\n> \u064a\u0633\u0645\u062d \u0627\u0644\u0643\u0648\u062f \u0644\u0644\u0628\u0627\u062d\u062b\u064a\u0646 \u0627\u0644\u0623\u0645\u0646\u064a\u064a\u0646 \u0628\u0625\u062c\u0631\u0627\u0621 **\u062a\u0642\u064a\u064a\u0645 \u0643\u0627\u0645\u0644** [\u0644\u0643\u064a\u0641\u064a\u0629 \u062a\u0637\u0628\u064a\u0642\u0646\u0627 \u0644\u0644\u062a\u0634\u0641\u064a\u0631 \u0645\u0646 \u0627\u0644\u0637\u0631\u0641 \u0644\u0644\u0637\u0631\u0641](https://core.telegram.org/api/end-to-end). \u0645\u0646 \u0627\u0644\u0645\u0645\u0643\u0646 \u0623\u064a\u0636\u064b\u0627 **\u0627\u0644\u062a\u062d\u0642\u0642 \u0628\u0634\u0643\u0644\u064d \u0645\u0633\u062a\u0642\u0644** \u0645\u0646 \u0623\u0646 \u062a\u0637\u0628\u064a\u0642\u0627\u062a \u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645 \u0627\u0644\u0645\u064f\u062a\u0627\u062d\u0629 \u0639\u0644\u0649 \u062c\u0648\u062c\u0644 \u0628\u0644\u0627\u064a \u0648\u0622\u0628 \u0633\u062a\u0648\u0631 \u062a\u0645 \u0628\u0646\u0627\u0624\u0647\u0627 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 [\u0646\u0641\u0633 \u0627\u0644\u0643\u0648\u062f \u0627\u0644\u0645\u0635\u062f\u0631](https://core.telegram.org/reproducible-builds) \u0627\u0644\u0630\u064a \u0646\u0646\u0634\u0631\u0647 \u0639\u0644\u0649 \u063a\u064a\u062a \u0647\u0627\u0628.\n\n##### [](#427703648)[\u0645\u0643\u062a\u0628\u0629 \u0642\u0627\u0639\u062f\u0629 \u0628\u064a\u0627\u0646\u0627\u062a \u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645](https://github.com/tdlib/td)\n\n\u0645\u0643\u062a\u0628\u0629 \u0644\u0645\u062e\u062a\u0644\u0641 \u0627\u0644\u0623\u0646\u0638\u0645\u0629 \u0635\u064f\u0645\u0651\u0645\u062a \u0644\u062a\u0633\u0647\u064a\u0644 \u0625\u0646\u0634\u0627\u0621 \u062a\u0637\u0628\u064a\u0642\u0627\u062a \u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645 \u0627\u0644\u0645\u062e\u0635\u0635\u0629\u060c \u064a\u0631\u062c\u0649 \u0627\u0644\u0627\u0637\u0644\u0627\u0639 \u0639\u0644\u0649 [TDLib](https://core.telegram.org/tdlib) \u0644\u0644\u062a\u0641\u0627\u0635\u064a\u0644.  \n\u0645\u0631\u062e\u0651\u0635\u0629 \u0628\u0640 [Boost 1.0](https://www.boost.org/LICENSE_1_0.txt).  \n[\u063a\u064a\u062a \u0647\u0627\u0628 \u00bb](https://github.com/tdlib/td)\n\n##### [](#1142006533)[\u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645 \u0644\u0623\u0646\u062f\u0631\u0648\u064a\u062f](https://github.com/DrKLO/Telegram)\n\n\u062a\u0637\u0628\u064a\u0642 \u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645 \u0644\u0644\u0623\u0646\u062f\u0631\u0648\u064a\u062f\u060c \u064a\u0631\u062c\u0649 \u0627\u0644\u0627\u0637\u0644\u0627\u0639 \u0639\u0644\u0649 [\u0635\u0641\u062d\u0629 \u0645\u062a\u062c\u0631 \u062c\u0648\u062c\u0644 \u0628\u0644\u0627\u064a](https://telegram.org/dl/android) \u0644\u0644\u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0627\u0644\u0645\u0641\u0635\u0651\u0644\u0629.  \n\u0645\u0631\u062e\u0651\u0635 \u0628\u0640 [GNU GPL v. 2 \u0623\u0648 \u0623\u062d\u062f\u062b](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[\u063a\u064a\u062a \u0647\u0627\u0628 \u00bb](https://github.com/DrKLO/Telegram)  \n[\u062a\u0646\u0632\u064a\u0644 \u0645\u0644\u0641 APK \u00bb](https://telegram.org/dl/android/apk)\n\n##### [](#ios)[\u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645 iOS](https://github.com/TelegramMessenger/Telegram-iOS)\n\n\u0645\u0631\u062e\u0651\u0635 \u0628\u0640 [GNU GPL v. 2 \u0623\u0648 \u0623\u062d\u062f\u062b](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[\u063a\u064a\u062a \u0647\u0627\u0628 \u00bb](https://github.com/TelegramMessenger/Telegram-iOS)\n\n##### [](#macos)[\u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645 \u0644\u0640 macOS](https://github.com/overtake/TelegramSwift)\n\n\u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0645\u0627\u0643 \u0627\u0644\u0623\u0635\u0644\u064a.  \n\u0645\u0631\u062e\u0651\u0635 \u0628\u0640 [GNU GPL v. 2](http://www.gnu.org/licenses/gpl.html).  \n[\u063a\u064a\u062a \u0647\u0627\u0628 \u00bb](https://github.com/overtake/TelegramSwift)\n\n##### [](#1965075771)[\u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645 \u0644\u0645\u062a\u0635\u0641\u062d\u0627\u062a \u0627\u0644\u0648\u064a\u0628](https://github.com/zhukov/webogram)\n\n\u0646\u0633\u062e\u0629 \u062c\u0627\u0641\u0627\u0633\u0643\u0631\u0628\u062a \u0644\u0644\u0645\u062a\u0635\u0641\u062d\u0627\u062a \u0644\u0623\u0646\u0638\u0645\u0629 \u0645\u0627\u0643\u060c \u0648\u064a\u0646\u062f\u0648\u0632\u060c \u0644\u064a\u0646\u0643\u0633.  \n\u0645\u0631\u062e\u0651\u0635\u0629 \u0628\u0640 [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html).  \n[\u063a\u064a\u062a \u0647\u0627\u0628 \u00bb](https://github.com/zhukov/webogram)\n\n##### [](#react)[\u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645 React](https://github.com/evgeny-nadymov/telegram-react)\n\n\u0646\u0633\u062e\u0629 \u062c\u0627\u0641\u0627\u0633\u0643\u0631\u0628\u062a \u0644\u0644\u0645\u062a\u0635\u0641\u062d\u0627\u062a \u0644\u0623\u0646\u0638\u0645\u0629 \u0645\u0627\u0643\u060c \u0648\u064a\u0646\u062f\u0648\u0632\u060c \u0644\u064a\u0646\u0643\u0633.  \n\u0645\u0631\u062e\u0635\u0651\u0629 \u0628\u0640 [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html).  \n[\u063a\u064a\u062a \u0647\u0627\u0628 \u00bb](https://github.com/evgeny-nadymov/telegram-react)\n\n##### [](#555403495)[\u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645 \u0633\u0637\u062d \u0627\u0644\u0645\u0643\u062a\u0628](https://github.com/telegramdesktop/tdesktop)\n\n\u062a\u0637\u0628\u064a\u0642 \u0633\u0637\u062d \u0627\u0644\u0645\u0643\u062a\u0628 \u0627\u0644\u0645\u0628\u0646\u064a \u0639\u0644\u0649 Qt. \u0645\u0627\u0643\u060c \u0648\u064a\u0646\u062f\u0648\u0632\u060c \u0644\u064a\u0646\u0643\u0633.  \n\u0645\u0631\u062e\u0651\u0635\u0629 \u0628\u0640 [GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html).  \n[\u063a\u064a\u062a \u0647\u0627\u0628 \u00bb](https://github.com/telegramdesktop/tdesktop)\n\n##### [](#1148161565)[\u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645 \u0644\u0648\u064a\u0646\u062f\u0648\u0632\u0641\u0648\u0646](https://github.com/evgeny-nadymov/telegram-wp)\n\n\u0645\u0631\u062e\u0651\u0635 \u0628\u0640 [GNU GPL v. 2 \u0623\u0648 \u0623\u062d\u062f\u062b](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[\u063a\u064a\u062a \u0647\u0627\u0628 \u00bb](https://github.com/evgeny-nadymov/telegram-wp)\n\n#### [](#1821104583)\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u063a\u064a\u0631 \u0631\u0633\u0645\u064a\u0629\n\n##### [](#telegram-cli)[Telegram CLI](https://github.com/vysheng/tg) (\u063a\u064a\u0631 \u0631\u0633\u0645\u064a\u0629)\n\n\u0648\u0627\u062c\u0647\u0629 \u0633\u0637\u0631 \u0627\u0644\u0623\u0648\u0627\u0645\u0631 \u0644\u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645.  \n\u0645\u0631\u062e\u0651\u0635\u0629 \u0628\u0640 [GNU GPL v. 2](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[\u063a\u064a\u062a \u0647\u0627\u0628 \u00bb](https://github.com/vysheng/tg)\n\n##### [](#unigram)[Unigram](https://github.com/UnigramDev/Unigram) (\u063a\u064a\u0631 \u0631\u0633\u0645\u064a\u0629)\n\n\u0646\u0633\u062e\u0629 \u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645 \u0645\u062e\u0635\u0651\u0635\u0629 \u0644\u0648\u064a\u0646\u062f\u0648\u0632 10 (\u0633\u0637\u062d \u0627\u0644\u0645\u0643\u062a\u0628 \u0648 Xbox One).  \n\u0645\u0631\u062e\u0635\u0629 \u0628\u0640 [GNU GPL v. 3 \u0623\u0648 \u0623\u062d\u062f\u062b](http://www.gnu.org/licenses/gpl.html).  \n[\u063a\u064a\u062a \u0647\u0627\u0628 \u00bb](https://github.com/UnigramDev/Unigram)\n\n##### [](#madelineproto)[MadelineProto](https://github.com/danog/MadelineProto) (\u063a\u064a\u0631 \u0631\u0633\u0645\u064a\u0629)\n\n\u062a\u0637\u0628\u064a\u0642 \u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645 PHP MTProto.  \n\u0645\u0631\u062e\u0651\u0635 \u0628\u0640 [GNU AGPL v. 3](https://www.gnu.org/licenses/agpl-3.0.en.html)  \n[\u063a\u064a\u062a \u0647\u0627\u0628 \u00bb](http://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#787867994)\u0644\u0644\u0628\u0627\u062d\u062b\u064a\u0646 \u0627\u0644\u0623\u0645\u0646\u064a\u064a\u0646\n\n\u0625\u0630\u0627 \u0648\u062c\u062f\u062a \u0623\u064a \u0645\u0634\u0643\u0644\u0629 \u0645\u0639 \u0628\u0631\u062a\u0648\u0643\u0648\u0644 \u062a\u064a\u0644\u064a\u062c\u0631\u0627\u0645 \u0623\u0648 \u062a\u0637\u0628\u064a\u0642\u0627\u062a\u0647\u060c \u0623\u0648 \u0643\u0627\u0646\u062a \u0644\u062f\u064a\u0643 \u0623\u064a \u0627\u0633\u062a\u0641\u0633\u0627\u0631\u0627\u062a \u062d\u0648\u0644 \u0637\u0631\u064a\u0642\u0629 \u062a\u0634\u063a\u064a\u0644\u0646\u0627 \u0644\u0644\u0645\u064a\u0632\u0627\u062a \u0627\u0644\u0623\u0645\u0646\u064a\u0629\u061b \u062a\u0648\u0627\u0635\u0644 \u0645\u0639\u0646\u0627 (\u0628\u0627\u0644\u0644\u063a\u0629 \u0627\u0644\u0625\u0646\u062c\u0644\u064a\u0632\u064a\u0629) \u0639\u0628\u0631 **security@telegram.org**.",
    "url": "https://telegram.org/apps?setln=ar"
  },
  {
    "metadata": {
      "canonicalUrl": "https://telegram.org/apps?setln=uk",
      "title": "\u0417\u0430\u0441\u0442\u043e\u0441\u0443\u043d\u043a\u0438 Telegram",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "\u0417\u0430\u0441\u0442\u043e\u0441\u0443\u043d\u043a\u0438 Telegram"
        },
        {
          "property": "og:site_name",
          "content": "Telegram"
        },
        {
          "property": "og:description",
          "content": "\u0417\u0430\u0441\u0442\u043e\u0441\u0443\u043d\u043a\u0438 Telegram \u043c\u0430\u044e\u0442\u044c \u0432\u0456\u0434\u043a\u0440\u0438\u0442\u0438\u0439 \u0432\u0438\u0445\u0456\u0434\u043d\u0438\u0439 \u043a\u043e\u0434 \u0456 \u043f\u0456\u0434\u0442\u0440\u0438\u043c\u0443\u044e\u0442\u044c \u0432\u0456\u0434\u0442\u0432\u043e\u0440\u044e\u0432\u0430\u043d\u0456 \u0437\u0431\u0456\u0440\u043a\u0438. \u0423\u0441\u0456 \u043e\u0445\u043e\u0447\u0456 \u043c\u043e\u0436\u0443\u0442\u044c \u0441\u0430\u043c\u043e\u0441\u0442\u0456\u0439\u043d\u043e \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u0438\u0442\u0438\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:36 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4597",
        "set-cookie": "stel_ln=uk; expires=Fri, 08 May 2026 12:10:17 GMT; path=/; domain=telegram.org; HttpOnly",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=31536000; includeSubDomains; preload",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# \u0417\u0430\u0441\u0442\u043e\u0441\u0443\u043d\u043a\u0438 Telegram\n\n\u0417\u0430\u0441\u0442\u043e\u0441\u0443\u043d\u043a\u0438 Telegram \u043c\u0430\u044e\u0442\u044c **\u0432\u0456\u0434\u043a\u0440\u0438\u0442\u0438\u0439 \u0432\u0438\u0445\u0456\u0434\u043d\u0438\u0439 \u043a\u043e\u0434** \u0456 \u043f\u0456\u0434\u0442\u0440\u0438\u043c\u0443\u044e\u0442\u044c [\u0432\u0456\u0434\u0442\u0432\u043e\u0440\u044e\u0432\u0430\u043d\u0456 \u0437\u0431\u0456\u0440\u043a\u0438](https://core.telegram.org/reproducible-builds). \u0423\u0441\u0456 \u043e\u0445\u043e\u0447\u0456 \u043c\u043e\u0436\u0443\u0442\u044c \u0441\u0430\u043c\u043e\u0441\u0442\u0456\u0439\u043d\u043e \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u0438\u0442\u0438 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456\u0441\u0442\u044c \u0437\u0430\u0441\u0442\u043e\u0441\u0443\u043d\u043a\u0456\u0432 \u0432 App Store \u0447\u0438 Google Play \u0442\u0430 [\u043a\u043e\u0434\u0443](#vihdnii-kod), \u044f\u043a\u0438\u0439 \u043c\u0438 \u043f\u0443\u0431\u043b\u0456\u043a\u0443\u0454\u043c\u043e.\n\n#### [](#zastosunki-dlya-moblnih-pristrov)\u0417\u0430\u0441\u0442\u043e\u0441\u0443\u043d\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0431\u0456\u043b\u044c\u043d\u0438\u0445 \u043f\u0440\u0438\u0441\u0442\u0440\u043e\u0457\u0432\n\n*   [Telegram \u0434\u043b\u044f Android](https://telegram.org/android)\n*   [Telegram \u0434\u043b\u044f iPhone \u0442\u0430 iPad](https://telegram.org/dl/ios)\n\n#### [](#zastosunki-dlya-komp-39yuterv)\u0417\u0430\u0441\u0442\u043e\u0441\u0443\u043d\u043a\u0438 \u0434\u043b\u044f \u043a\u043e\u043c\u043f'\u044e\u0442\u0435\u0440\u0456\u0432\n\n*   [Telegram \u0434\u043b\u044f Windows/Mac/Linux](https://desktop.telegram.org/)\n*   [Telegram \u0434\u043b\u044f macOS](https://macos.telegram.org/)\n\n#### [](#telegram-u-brauzer)Telegram \u0443 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0456\n\n*   [Telegram WebA](https://telegram.org/dl/weba)\n*   [Telegram WebK](https://telegram.org/dl/webk)\n\n#### [](#telegram-database-library-tdlib)Telegram Database Library (TDLib)\n\n*   [TDLib](https://core.telegram.org/tdlib) \u2013 \u043a\u0440\u043e\u0441\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u043d\u0438\u0439 \u043a\u043b\u0456\u0454\u043d\u0442 \u0434\u043b\u044f \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u043d\u044f \u0437\u0430\u0441\u0442\u043e\u0441\u0443\u043d\u043a\u0456\u0432 \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0456 Telegram.\n*   [Telegram X \u0434\u043b\u044f Android](https://play.google.com/store/apps/details?id=org.thunderdog.challegram&hl=en) \u2013 \u0435\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u0438\u0439 \u043a\u043b\u0456\u0454\u043d\u0442 Telegram \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0456 TDLib.\n\n#### [](#neoftsin-zastosunki)\u041d\u0435\u043e\u0444\u0456\u0446\u0456\u0439\u043d\u0456 \u0437\u0430\u0441\u0442\u043e\u0441\u0443\u043d\u043a\u0438\n\n*   [Unigram, \u043a\u043b\u0456\u0454\u043d\u0442 \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0456 Windows 10](https://github.com/UnigramDev/Unigram) (\u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0456 [TDLib](https://core.telegram.org/tdlib))\n*   [Telegram CLI \u0434\u043b\u044f Linux](https://telegram.org/dl/cli)\n*   [MadelineProto](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#vihdnii-kod)\u0412\u0438\u0445\u0456\u0434\u043d\u0438\u0439 \u043a\u043e\u0434\n\n\u041c\u0438 \u043f\u0456\u0434\u0442\u0440\u0438\u043c\u0443\u0454\u043c\u043e \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0456\u0441\u0442\u044c \u0432\u0456\u0434\u043a\u0440\u0438\u0442\u043e\u0433\u043e \u0432\u0438\u0445\u0456\u0434\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0443 \u043f\u0440\u043e\u0454\u043a\u0442\u0456\u0432, \u0449\u043e \u0434\u043e\u043f\u043e\u043c\u0430\u0433\u0430\u044e\u0442\u044c \u0440\u043e\u0437\u0440\u043e\u0431\u043b\u044f\u0442\u0438 \u0456\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0456 \u043d\u0430\u0448\u043e\u0433\u043e API. \u041f\u0443\u0431\u043b\u0456\u0447\u043d\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0438\u0439 \u043a\u043e\u0434 \u043c\u0430\u044e\u0442\u044c \u043e\u0444\u0456\u0446\u0456\u0439\u043d\u0456 \u0437\u0430\u0441\u0442\u043e\u0441\u0443\u043d\u043a\u0438 \u0434\u043b\u044f Android, iOS, \u0432\u0435\u0431\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0438, \u041f\u041a (Windows, macOS \u0456 Linux) \u0442\u0430 Telegram Database Library.\n\n> \u0417\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u0446\u044c\u043e\u0433\u043e \u043a\u043e\u0434\u0443 \u0441\u043f\u0435\u0446\u0456\u0430\u043b\u0456\u0441\u0442\u0438 \u0437 \u0431\u0435\u0437\u043f\u0435\u043a\u0438 \u043c\u043e\u0436\u0443\u0442\u044c **\u043f\u043e\u0432\u043d\u0456\u0441\u0442\u044e \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u0438\u0442\u0438** \u043d\u0430\u0434\u0456\u0439\u043d\u0456\u0441\u0442\u044c [\u0440\u0435\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457 \u043d\u0430\u0441\u043a\u0440\u0456\u0437\u043d\u043e\u0433\u043e \u0448\u0438\u0444\u0440\u0443\u0432\u0430\u043d\u043d\u044f](https://core.telegram.org/api/end-to-end). \u041a\u0440\u0456\u043c \u0446\u044c\u043e\u0433\u043e, \u0443\u0441\u0456 \u043e\u0445\u043e\u0447\u0456 \u043c\u043e\u0436\u0443\u0442\u044c **\u0441\u0430\u043c\u043e\u0441\u0442\u0456\u0439\u043d\u043e \u043f\u0435\u0440\u0435\u043a\u043e\u043d\u0430\u0442\u0438\u0441\u044f**, \u0449\u043e \u0437\u0430\u0441\u0442\u043e\u0441\u0443\u043d\u043a\u0438 Telegram \u0443 Google Play \u0442\u0430 App Store \u0431\u0443\u043b\u0438 \u0437\u0456\u0431\u0440\u0430\u043d\u0456 \u0437 [\u0442\u043e\u0447\u043d\u043e \u0442\u0430\u043a\u043e\u0433\u043e \u0436 \u043a\u043e\u0434\u0443](https://core.telegram.org/reproducible-builds), \u044f\u043a\u0438\u0439 \u0440\u043e\u0437\u043c\u0456\u0449\u0435\u043d\u0438\u0439 \u043d\u0430 GitHub.\n\n##### [](#telegram-database-library)[Telegram Database Library](https://github.com/tdlib/td)\n\n\u041a\u0440\u043e\u0441\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u043d\u0430 \u0431\u0456\u0431\u043b\u0456\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u043d\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0456\u0445 \u043a\u043b\u0456\u0454\u043d\u0442\u0456\u0432 Telegram. \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u0456\u0448\u0430 \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456 [TDLib](https://core.telegram.org/tdlib).  \n\u041b\u0456\u0446\u0435\u043d\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0437\u0430 [Boost 1.0](https://www.boost.org/LICENSE_1_0.txt).  \n[GitHub \u00bb](https://github.com/tdlib/td)\n\n##### [](#telegram-dlya-android)[Telegram \u0434\u043b\u044f Android](https://github.com/DrKLO/Telegram)\n\n\u041e\u0444\u0456\u0446\u0456\u0439\u043d\u0438\u0439 \u0437\u0430\u0441\u0442\u043e\u0441\u0443\u043d\u043e\u043a \u0434\u043b\u044f Android. \u041f\u043e\u0432\u043d\u0438\u0439 \u043e\u043f\u0438\u0441 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0438\u0439 \u043d\u0430 [\u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456 \u0432 Google Play](https://telegram.org/dl/android).  \n\u041b\u0456\u0446\u0435\u043d\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0437\u0430 [GNU GPL \u0432\u0435\u0440\u0441\u0456\u0457 2 \u0430\u0431\u043e \u043f\u0456\u0437\u043d\u0456\u0448\u043e\u0457](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/DrKLO/Telegram)  \n[\u041f\u043e\u0441\u0438\u043b\u0430\u043d\u043d\u044f \u043d\u0430 APK-\u0444\u0430\u0439\u043b \u00bb](https://telegram.org/dl/android/apk)\n\n##### [](#telegram-dlya-ios)[Telegram \u0434\u043b\u044f iOS](https://github.com/TelegramMessenger/Telegram-iOS)\n\n\u041b\u0456\u0446\u0435\u043d\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0437\u0430 [GNU GPL \u0432\u0435\u0440\u0441\u0456\u0457 2 \u0430\u0431\u043e \u043f\u0456\u0437\u043d\u0456\u0448\u043e\u0457](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/TelegramMessenger/Telegram-iOS)\n\n##### [](#telegram-dlya-macos)[Telegram \u0434\u043b\u044f macOS](https://github.com/overtake/TelegramSwift)\n\n\u041d\u0430\u0442\u0438\u0432\u043d\u0438\u0439 \u043a\u043b\u0456\u0454\u043d\u0442 \u0434\u043b\u044f macOS.  \n\u041b\u0456\u0446\u0435\u043d\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0437\u0430 [GNU GPL \u0432\u0435\u0440\u0441\u0456\u0457 2](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/overtake/TelegramSwift)\n\n##### [](#telegram-dlya-vebbrauzerv)Telegram \u0434\u043b\u044f \u0432\u0435\u0431\u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0456\u0432\n\n*   [**Telegram Web, \u0432\u0435\u0440\u0441\u0456\u044f K**](https://github.com/morethanwords/tweb). Mac, Windows, Linux, \u043c\u043e\u0431\u0456\u043b\u044c\u043d\u0456 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0438.  \n    \u041b\u0456\u0446\u0435\u043d\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0437\u0430 [GNU GPL \u0432\u0435\u0440\u0441\u0456\u0457 3](https://github.com/morethanwords/tweb/blob/master/LICENSE).  \n    [GitHub \u00bb](https://github.com/morethanwords/tweb)\n    \n*   [**Telegram Web, \u0432\u0435\u0440\u0441\u0456\u044f A**](https://github.com/Ajaxy/telegram-tt). Mac, Windows, Linux, \u043c\u043e\u0431\u0456\u043b\u044c\u043d\u0456 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0438.  \n    \u041b\u0456\u0446\u0435\u043d\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0437\u0430 [GNU GPL \u0432\u0435\u0440\u0441\u0456\u0457 3](https://github.com/Ajaxy/telegram-tt/blob/master/LICENSE).  \n    [GitHub \u00bb](https://github.com/Ajaxy/telegram-tt)\n    \n*   [\u0417\u0430\u0441\u0442\u0430\u0440\u0456\u043b\u0438\u0439 JavaScript-\u043a\u043b\u0456\u0454\u043d\u0442 (legacy)](https://github.com/zhukov/webogram). Mac, Windows, Linux.  \n    \u041b\u0456\u0446\u0435\u043d\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0437\u0430 [GNU GPL \u0432\u0435\u0440\u0441\u0456\u0457 3](https://www.gnu.org/licenses/gpl.html).  \n    [GitHub \u00bb](https://github.com/zhukov/webogram)\n    \n\n##### [](#telegram-react)[Telegram React](https://github.com/evgeny-nadymov/telegram-react)\n\n\u041a\u043b\u0456\u0454\u043d\u0442 \u0434\u043b\u044f \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0456\u0432, \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u043d\u0430 JavaScript. Mac, Windows, Linux.  \n\u041b\u0456\u0446\u0435\u043d\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0437\u0430 [GNU GPL \u0432\u0435\u0440\u0441\u0456\u0457 3](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-react)\n\n##### [](#telegram-desktop)[Telegram Desktop](https://github.com/telegramdesktop/tdesktop)\n\n\u041a\u043b\u0456\u0454\u043d\u0442 \u0434\u043b\u044f \u041f\u041a \u043d\u0430 \u0431\u0430\u0437\u0456 Qt. Mac, Windows, Linux.  \n\u041b\u0456\u0446\u0435\u043d\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0437\u0430 [GNU GPL \u0432\u0435\u0440\u0441\u0456\u0457 3](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/telegramdesktop/tdesktop)\n\n##### [](#telegram-dlya-windows-phone)[Telegram \u0434\u043b\u044f Windows Phone](https://github.com/evgeny-nadymov/telegram-wp)\n\n\u041b\u0456\u0446\u0435\u043d\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0437\u0430 [GNU GPL \u0432\u0435\u0440\u0441\u0456\u0457 2 \u0430\u0431\u043e \u043f\u0456\u0437\u043d\u0456\u0448\u043e\u0457](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-wp)\n\n##### [](#telegram-x-dlya-android)[Telegram X \u0434\u043b\u044f Android](https://github.com/TGX-Android/Telegram-X)\n\n\u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u0438\u0439 \u043a\u043b\u0456\u0454\u043d\u0442 Telegram \u0434\u043b\u044f Android \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0456 TDLib.  \n\u041b\u0456\u0446\u0435\u043d\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0437\u0430 [GPL \u0432\u0435\u0440\u0441\u0456\u0457 3.0](https://github.com/TGX-Android/Telegram-X/blob/main/LICENSE)  \n[GitHub \u00bb](https://github.com/TGX-Android/Telegram-X)\n\n#### [](#neoftsin-zastosunki)\u041d\u0435\u043e\u0444\u0456\u0446\u0456\u0439\u043d\u0456 \u0437\u0430\u0441\u0442\u043e\u0441\u0443\u043d\u043a\u0438\n\n##### [](#telegram-cli-neoftsinii)[Telegram CLI](https://github.com/vysheng/tg) (\u043d\u0435\u043e\u0444\u0456\u0446\u0456\u0439\u043d\u0438\u0439)\n\n\u0406\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 Telegram \u0434\u043b\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0433\u043e \u0440\u044f\u0434\u043a\u0430 Linux.  \n\u041b\u0456\u0446\u0435\u043d\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0437\u0430 [GNU GPL \u0432\u0435\u0440\u0441\u0456\u0457 2](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/vysheng/tg)\n\n##### [](#unigram-neoftsinii)[Unigram](https://github.com/UnigramDev/Unigram) (\u043d\u0435\u043e\u0444\u0456\u0446\u0456\u0439\u043d\u0438\u0439)\n\n\u041a\u043b\u0456\u0454\u043d\u0442 Telegram, \u043e\u043f\u0442\u0438\u043c\u0456\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0434\u043b\u044f Windows 10.  \n\u041b\u0456\u0446\u0435\u043d\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0437\u0430 [GNU GPL \u0432\u0435\u0440\u0441\u0456\u0457 3 \u0430\u0431\u043e \u043f\u0456\u0437\u043d\u0456\u0448\u043e\u0457](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/UnigramDev/Unigram)\n\n##### [](#madelineproto-neoftsinii)[MadelineProto](https://github.com/danog/MadelineProto) (\u043d\u0435\u043e\u0444\u0456\u0446\u0456\u0439\u043d\u0438\u0439)\n\nMTProto-\u043a\u043b\u0456\u0454\u043d\u0442 Telegram \u043d\u0430 PHP.  \n\u041b\u0456\u0446\u0435\u043d\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0437\u0430 [GNU AGPL \u0432\u0435\u0440\u0441\u0456\u0457 3](https://www.gnu.org/licenses/agpl-3.0.en.html).  \n[GitHub \u00bb](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#programa-bug-bounty)\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u0430 Bug Bounty\n\nTelegram \u0437\u0430\u043f\u0440\u043e\u0448\u0443\u0454 \u0440\u043e\u0437\u0440\u043e\u0431\u043d\u0438\u043a\u0456\u0432 \u0456 \u0441\u043f\u0435\u0446\u0456\u0430\u043b\u0456\u0441\u0442\u0456\u0432 \u0437 \u0431\u0435\u0437\u043f\u0435\u043a\u0438 \u0434\u043e \u0430\u0443\u0434\u0438\u0442\u0443 \u0441\u0435\u0440\u0432\u0456\u0441\u0456\u0432, [\u043a\u043e\u0434\u0443](https://telegram.org/apps#vihdnii-kod) \u0442\u0430 [\u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0443](https://core.telegram.org/mtproto) \u0437 \u043c\u0435\u0442\u043e\u044e \u0437\u043d\u0430\u0445\u043e\u0434\u0436\u0435\u043d\u043d\u044f \u0432\u0440\u0430\u0437\u043b\u0438\u0432\u043e\u0441\u0442\u0435\u0439 \u0430\u0431\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0456\u0437 \u0431\u0435\u0437\u043f\u0435\u043a\u043e\u044e. [\u0414\u043e\u043a\u043b\u0430\u0434\u043d\u0456\u0448\u0435 \u043f\u0440\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0443 Bug Bounty](https://core.telegram.org/bug-bounty).",
    "url": "https://telegram.org/apps?setln=uk"
  },
  {
    "metadata": {
      "canonicalUrl": "https://telegram.org/apps?setln=fa",
      "title": "Telegram Applications",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Telegram Applications"
        },
        {
          "property": "og:site_name",
          "content": "Telegram"
        },
        {
          "property": "og:description",
          "content": "Telegram apps are open source and support reproducible builds. Anyone can independently verify that Telegram apps you download\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:37 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4142",
        "set-cookie": "stel_ln=fa; expires=Thu, 14 May 2026 16:00:44 GMT; path=/; domain=telegram.org; HttpOnly",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=31536000; includeSubDomains; preload",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Telegram Applications\n\nTelegram apps are **open source** and support [reproducible builds](https://core.telegram.org/reproducible-builds). Anyone can independently verify that Telegram apps you download from App Store or Google Play were built using the [exact same code](#source-code) that we publish.\n\n#### [](#mobile-apps)Mobile apps\n\n*   [Telegram for Android](https://telegram.org/android)\n*   [Telegram for iPhone and iPad](https://telegram.org/dl/ios)\n\n#### [](#desktop-apps)Desktop apps\n\n*   [Telegram for Windows/Mac/Linux](https://desktop.telegram.org/)\n*   [Telegram for macOS](https://macos.telegram.org/)\n\n#### [](#web-apps)Web apps\n\n*   [Telegram WebA](https://telegram.org/dl/weba)\n*   [Telegram WebK](https://telegram.org/dl/webk)\n\n#### [](#telegram-database-library-tdlib)Telegram Database Library (TDLib)\n\n*   [TDLib](https://core.telegram.org/tdlib) \u2013 a cross-platform client designed to facilitate creating custom apps on the Telegram platform.\n*   [Telegram X for Android](https://play.google.com/store/apps/details?id=org.thunderdog.challegram&hl=en) \u2013 a slick experimental Telegram client based on TDLib.\n\n#### [](#unofficial-apps)Unofficial apps\n\n*   [Unigram, a client optimized for Windows](https://github.com/UnigramDev/Unigram) (based on [TDLib](https://core.telegram.org/tdlib))\n*   [Telegram CLI for Linux](https://telegram.org/dl/cli)\n*   [MadelineProto](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#source-code)Source code\n\nThis code allows security researchers to **fully evaluate** our [end-to-end encryption implementation](https://core.telegram.org/api/end-to-end). It is also possible to **independently verify** that Telegram apps available on Google Play and App Store are built using the [same code](https://core.telegram.org/reproducible-builds) that we publish on GitHub.\n\n##### [](#telegram-database-library)[Telegram Database Library](https://github.com/tdlib/td)\n\nCross-platform library for building custom Telegram apps, see [TDLib](https://core.telegram.org/tdlib) for details.  \nLicensed under [Boost 1.0](https://www.boost.org/LICENSE_1_0.txt).  \n[GitHub \u00bb](https://github.com/tdlib/td)\n\n##### [](#telegram-for-android)[Telegram for Android](https://github.com/DrKLO/Telegram)\n\nOfficial Android App, see [Google Play Market page](https://telegram.org/dl/android) for full description.  \nLicensed under [GNU GPL v. 2 or later](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/DrKLO/Telegram)  \n[Download APK File \u00bb](https://telegram.org/dl/android/apk)\n\n##### [](#telegram-for-ios)[Telegram for iOS](https://github.com/TelegramMessenger/Telegram-iOS)\n\nLicensed under [GNU GPL v. 2 or later](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/TelegramMessenger/Telegram-iOS)\n\n##### [](#telegram-for-macos)[Telegram for macOS](https://github.com/overtake/TelegramSwift)\n\nNative macOS client.  \nLicensed under [GNU GPL v. 2](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/overtake/TelegramSwift)\n\n##### [](#telegram-for-web-browsers)Telegram for Web browsers\n\n*   [**Telegram Web, Version K**](https://github.com/morethanwords/tweb). Mac, Windows, Linux, Mobile.  \n    Licensed under [GNU GPL v. 3](https://github.com/morethanwords/tweb/blob/master/LICENSE).  \n    [GitHub \u00bb](https://github.com/morethanwords/tweb)\n    \n*   [**Telegram Web, Version A**](https://github.com/Ajaxy/telegram-tt). Mac, Windows, Linux, Mobile.  \n    Licensed under [GNU GPL v. 3](https://github.com/Ajaxy/telegram-tt/blob/master/LICENSE).  \n    [GitHub \u00bb](https://github.com/Ajaxy/telegram-tt)\n    \n*   [Legacy JavaScript client](https://github.com/zhukov/webogram). Mac, Windows, Linux.  \n    Licensed under [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n    [GitHub \u00bb](https://github.com/zhukov/webogram)\n    \n\n##### [](#telegram-react)[Telegram React](https://github.com/evgeny-nadymov/telegram-react)\n\nJavaScript client for browsers. Mac, Windows, Linux.  \nLicensed under [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-react)\n\n##### [](#telegram-desktop)[Telegram Desktop](https://github.com/telegramdesktop/tdesktop)\n\nQt-based desktop client. Mac, Windows, Linux.  \nLicensed under [GNU GPL v. 3](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/telegramdesktop/tdesktop)\n\n##### [](#telegram-for-wp)[Telegram for WP](https://github.com/evgeny-nadymov/telegram-wp)\n\nLicensed under [GNU GPL v. 2 or later](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-wp)\n\n##### [](#telegram-x-for-android)[Telegram X for Android](https://github.com/TGX-Android/Telegram-X)\n\nAlternative Telegram client for Android based on TDLib.  \nLicensed under [GPL v.3.0](https://github.com/TGX-Android/Telegram-X/blob/main/LICENSE)  \n[GitHub \u00bb](https://github.com/TGX-Android/Telegram-X)\n\n#### [](#unofficial-apps)Unofficial apps\n\n##### [](#telegram-cli-unofficial)[Telegram CLI](https://github.com/vysheng/tg) (Unofficial)\n\nLinux Command-line interface for Telegram.  \nLicensed under [GNU GPL v. 2](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).  \n[GitHub \u00bb](https://github.com/vysheng/tg)\n\n##### [](#unigram-unofficial)[Unigram](https://github.com/UnigramDev/Unigram) (Unofficial)\n\nA Telegram client optimized for Windows.  \nLicensed under [GNU GPL v. 3 or later](https://www.gnu.org/licenses/gpl.html).  \n[GitHub \u00bb](https://github.com/UnigramDev/Unigram)\n\n##### [](#madelineproto-unofficial)[MadelineProto](https://github.com/danog/MadelineProto) (Unofficial)\n\nA PHP MTProto Telegram client.  \nLicensed under [GNU AGPL v. 3](https://www.gnu.org/licenses/agpl-3.0.en.html).  \n[GitHub \u00bb](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#bug-bounty-program)Bug Bounty Program\n\nTelegram welcomes developers and the security research community to audit its services, [code](https://telegram.org/apps#source-code) and [protocol](https://core.telegram.org/mtproto) seeking vulnerabilities or security-related issues. [Learn more about our Bug Bounty Program here](https://core.telegram.org/bug-bounty).",
    "url": "https://telegram.org/apps?setln=fa"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/mtproto/security_guidelines_v1",
      "title": "Security Guidelines for Client Developers (v.1.0, DEPRECATED)",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Security Guidelines for Client Developers (v.1.0, DEPRECATED)"
        },
        {
          "property": "og:description",
          "content": "This document describes security recommendations for clients using MTProto 1.0, its status is DEPRECATED.\nFor up-to-date\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:37 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5943",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Security Guidelines for Client Developers (v.1.0, DEPRECATED)\n\n> This document describes security recommendations for clients using MTProto 1.0, its status is **DEPRECATED**. For up-to-date security recommendations, kindly see [this document](https://core.telegram.org/mtproto/security_guidelines).\n\n**See also:**\n\nWhile [MTProto](https://core.telegram.org/mtproto) is designed to be a reasonably fast and secure protocol, its advantages can be easily negated by careless implementation. We collected some security guidelines for client software developers on this page. All Telegram clients are required to comply with these.\n\n### [](#diffie--hellman-key-exchange)Diffie--Hellman key exchange\n\nWe use DH key exchange in two cases:\n\n*   [Creating an authorization key](https://core.telegram.org/mtproto/auth_key)\n*   [Establishing Secret Chats with end-to-end encryption](https://core.telegram.org/api/end-to-end)\n\nIn both cases, there are some verifications to be done whenever DH is used:\n\n#### [](#validation-of-dh-parameters)Validation of DH parameters\n\nClient is expected to check whether **p = dh\\_prime** is a safe 2048-bit prime (meaning that both **p** and **(p-1)/2** are prime, and that 2^2047 < p < 2^2048), and that **g** generates a cyclic subgroup of prime order **(p-1)/2**, i.e. is a quadratic residue **mod p**. Since **g** is always equal to 2, 3, 4, 5, 6 or 7, this is easily done using quadratic reciprocity law, yielding a simple condition on **p mod 4g** -- namely, **p mod 8 = 7** for **g = 2**; **p mod 3 = 2** for **g = 3**; no extra condition for **g = 4**; **p mod 5 = 1 or 4** for **g = 5**; **p mod 24 = 19 or 23** for **g = 6**; and **p mod 7 = 3, 5 or 6** for **g = 7**. After **g** and **p** have been checked by the client, it makes sense to cache the result, so as not to repeat lengthy computations in future.\n\nIf the verification takes too long (which is the case for older mobile devices), one might initially run only 15 Miller--Rabin iterations (use parameter 30 in Java) for verifying primeness of **p** and **(p - 1)/2** with error probability not exceeding one billionth, and do more iterations in the background later.\n\nAnother way to optimize this is to embed into the client application code a small table with some known \"good\" couples **(g,p)** (or just known safe primes **p**, since the condition on **g** is easily verified during execution), checked during code generation phase, so as to avoid doing such verification during runtime altogether. The server rarely changes these values, thus one usually needs to put the current value of server's **dh\\_prime** into such a table. For example, the current value of **dh\\_prime** equals (in big-endian byte order)\n\n```\nn```\n\n#### [](#g-a-and-g-b-validation)g\\_a and g\\_b validation\n\nApart from the conditions on the Diffie-Hellman prime **dh\\_prime** and generator **g**, both sides are to check that **g**, **g\\_a** and **g\\_b** are greater than **1** and less than **dh\\_prime - 1**. We recommend checking that **g\\_a** and **g\\_b** are between **2^{2048-64}** and **dh\\_prime - 2^{2048-64}** as well.\n\n#### [](#checking-sha1-hash-values)Checking SHA1 hash values\n\nOnce the client receives a `server_DH_params_ok` answer in step 5) of the Authorization Key generation protocol and decrypts it obtaining `answer_with_hash`, it MUST check that\n\n```\nanswer_with_hash := SHA1(answer) + answer + (0-15 random bytes)\n```\n\nIn other words, the first 20 bytes of `answer_with_hash` must be equal to SHA1 of the remainder of the decrypted message without the padding random bytes.\n\n#### [](#checking-nonce-server-nonce-and-new-nonce-fields)Checking nonce, server\\_nonce and new\\_nonce fields\n\nWhen the client receives and/or decrypts server messages during creation of Authorization Key, and these messages contain some nonce fields already known to the client from messages previously obtained during the same run of the protocol, the client is to check that these fields indeed contain the values previosly known.\n\n#### [](#using-secure-pseudorandom-number-generator-to-create-dh-secret-parameters-a-and-b)Using secure pseudorandom number generator to create DH secret parameters `a` and `b`\n\nClient must use a cryptographically secure PRNG to generate secret exponents `a` or `b` for DH key exchange. For secret chats, the client might request some entropy (random bytes) from the server while invoking [messages.getDhConfig](https://core.telegram.org/method/messages.getDhConfig) and feed these random bytes into its PRNG (for example, by `PRNG_seed` if OpenSSL library is used), but never using these \"random\" bytes by themselves or replacing by them the local PRNG seed. One should mix bytes received from server into local PRNG seed.\n\n### [](#mtproto-encrypted-messages)MTProto Encrypted Messages\n\nSome important checks are to be done while sending and especially receiving [encrypted MTProto messages](https://core.telegram.org/mtproto/description).\n\n#### [](#checking-sha1-hash-value-of-msg-key)Checking SHA1 hash value of msg\\_key\n\n`msg_key` is used not only to compute the AES key and IV to decrypt the received message. After decryption, the client **MUST** check that `msg_key` is indeed equal to SHA1 of the plaintext obtained as the result of decryption (without the final padding bytes).\n\nIf an error is encountered before this check could be performed, the client **must** perform the `msg-key` check anyway before returning any result. Note that the response to any error encountered before the `msg_key` check **must** be the same as the response to a failed `msg_key` check.\n\n#### [](#checking-message-length)Checking message length\n\nThe client is to check that the length of the message or container obtained from the decrypted message (computed from its `length` field) does not exceed the total size of the plaintext, and that the difference is not more than 15 bytes. Apart from this, knowing the total length is important for the previous verification.\n\nThe length should be always divisible by 4 and non-negative. On no account the client is to access data past the end of the decryption buffer containing the plaintext message.\n\n#### [](#checking-session-id)Checking session\\_id\n\nThe client is to check that the `session_id` field in the decrypted message indeed equals to that of an active session created by the client.\n\n#### [](#checking-msg-id)Checking msg\\_id\n\nThe client must check that `msg_id` has even parity for messages from client to server, and odd parity for messages from server to client.\n\nIn addition, the identifiers (msg\\_id) of the last N messages received from the other side must be stored, and if a message comes in with an msg\\_id lower than all or equal to any of the stored values, that message is to be ignored. Otherwise, the new message msg\\_id is added to the set, and, if the number of stored msg\\_id values is greater than N, the oldest (i. e. the lowest) is discarded.\n\nIn addition, msg\\_id values that belong over 30 seconds in the future or over 300 seconds in the past are to be ignored (recall that `msg_id` approximately equals unixtime \\* 2^32). This is especially important for the server. The client would also find this useful (to protect from a replay attack), but only if it is certain of its time (for example, if its time has been synchronized with that of the server).\n\nCertain client-to-server service messages containing data sent by the client to the server (for example, `msg_id` of a recent client query) may, nonetheless, be processed on the client even if the time appears to be \u201cincorrect\u201d. This is especially true of messages to change server\\_salt and notifications about invalid time on the client. See [Mobile Protocol: Service Messages](https://core.telegram.org/mtproto/service_messages).\n\n## [](#behavior-in-case-of-mismatch)Behavior in case of mismatch\n\nIf one of the checks listed above fails, the client is to completely discard the message obtained from server. We also recommend closing and reestablishing the TCP connection to the server, then retrying the operation or the whole key generation protocol.\n\nNo information from incorrect messages can be used. Even if the application throws an exception and dies, this is much better than continuing with invalid data.\n\nNotice that invalid messages will infrequently appear during normal work even if no malicious tampering is being done. This is due to network transmission errors. We recommend ignoring the invalid message and closing the TCP connection, then creating a new TCP connection to the server and retrying the original query.",
    "url": "https://core.telegram.org/mtproto/security_guidelines_v1"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/mtproto/description_v1",
      "title": "Mobile Protocol: Detailed Description (v.1.0, DEPRECATED)",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Mobile Protocol: Detailed Description (v.1.0, DEPRECATED)"
        },
        {
          "property": "og:image",
          "content": "https://core.telegram.org/file/811140187/1/sfBQV3Trp80/3a3c48bad836b853ed"
        },
        {
          "property": "og:description",
          "content": "This document describes MTProto v.1.0, its status is DEPRECATED.\nFor information on encryption used in up-to-date Telegram\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:38 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "6632",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Mobile Protocol: Detailed Description (v.1.0, DEPRECATED)\n\n> This document describes MTProto **v.1.0**, its status is **DEPRECATED**. For information on encryption used in up-to-date Telegram clients, kindly see [this document](https://core.telegram.org/mtproto/description).\n\nPrior to a message (or a multipart message) being transmitted over a network using a transport protocol, it is encrypted in a certain way, and an external header is added at the top of the message which is: a 64-bit key identifier (that uniquely identifies an authorization key for the server as well as the user) and a 128-bit message key.\n\nA user key together with the message key define an actual 256-bit key and a 256-bit initialization vector, which is what encrypts the message using AES-256 encryption with infinite garble extension (IGE). Note that the initial part of the message to be encrypted contains variable data (session, message ID, sequence number, server salt) that obviously influences the message key (and thus the AES key and iv). The message key is defined as the 128 lower-order bits of the SHA1 of the message body (including session, message ID, etc.) Multipart messages are encrypted as a single message.\n\n[![MTProto server-client encryption, cloud chats](https://core.telegram.org/file/811140187/1/sfBQV3Trp80/3a3c48bad836b853ed)](https://core.telegram.org/file/811140187/1/sfBQV3Trp80/3a3c48bad836b853ed)\n\n### [](#terminology)Terminology\n\n#### [](#authorization-key)Authorization Key\n\na 2048-bit key shared by the client device and the server, created upon user registration directly on the client device be exchanging Diffie-Hellman keys, and never transmitted over a network. Each authorization key is user-specific. There is nothing that prevents a user from having several keys (that correspond to \u201cpermanent sessions\u201d on different devices), and some of these may be locked forever in the event the device is lost. See also [Creating an Authorization Key](https://core.telegram.org/mtproto/auth_key).\n\n#### [](#server-key)Server Key\n\na 2048-bit RSA key used by the server digitally to sign its own messages while registration is underway and the authorization key is being generated. The application has a built-in public server key which can be used to verify a signature but cannot be used to sign messages. A private server key is stored on the server and changed very infrequently.\n\n#### [](#key-identifier)Key Identifier\n\nThe 64 lower-order bits of the SHA1 hash of the authorization key are used to indicate which particular key was used to encrypt a message. Keys must be uniquely defined by the 64 lower-order bits of their SHA1, and in the event of a collision, an authorization key is regenerated. A zero key identifier means that encryption is not used which is permissible for a limited set of message types used during registration to generate an authorization key based on a Diffie-Hellman exchange.\n\n#### [](#session)Session\n\na (random) 64-bit number generated by the client to distinguish between individual sessions (for example, between different instances of the application, created with the same authorization key). The session in conjunction with the key identifier corresponds to an application instance. The server can maintain session state. _Under no circumstances can a message meant for one session be sent into a different session_. The server may unilaterally forget any client sessions; clients should be able to handle this.\n\n#### [](#server-salt)Server Salt\n\na (random) 64-bit number periodically (say, every 24 hours) changed (separately for each session) at the request of the server. All subsequent messages must contain the new salt (although, messages with the old salt are still accepted for a further 300 seconds). Required to protect against replay attacks and certain tricks associated with adjusting the client clock to a moment in the distant future.\n\n#### [](#message-identifier-msg-id)Message Identifier (msg\\_id)\n\na (time-dependent) 64-bit number used uniquely to identify a message within a session. Client message identifiers are divisible by 4, server message identifiers modulo 4 yield 1 if the message is a response to a client message, and 3 otherwise. Client message identifiers must increase monotonically (within a single session), the same as server message identifiers, and must approximately equal unixtime\\*2^32. This way, a message identifier points to the approximate moment in time the message was created. A message is rejected over 300 seconds after it is created or 30 seconds before it is created (this is needed to protect from replay attacks). In this situation, it must be re-sent with a different identifier (or placed in a container with a higher identifier). The identifier of a message container must be strictly greater than those of its nested messages.\n\n**Important**: to counter replay-attacks the lower 32 bits of **msg\\_id** passed by the client must not be empty and must present a fractional part of the time point when the message was created. At some point in the nearest future the server will start ignoring messages, in which the lower 32 bits of **msg\\_id** contain too many zeroes.\n\n#### [](#content-related-message)Content-related Message\n\nA message requiring an explicit acknowledgment. These include all the user and many service messages, virtually all with the exception of containers and acknowledgments.\n\n#### [](#message-sequence-number-msg-seqno)Message Sequence Number (msg\\_seqno)\n\na 32-bit number equal to twice the number of \u201ccontent-related\u201d messages (those requiring acknowledgment, and in particular those that are not containers) created by the sender prior to this message and subsequently incremented by one if the current message is a content-related message. A container is always generated after its entire contents; therefore, its sequence number is greater than or equal to the sequence numbers of the messages contained in it.\n\n#### [](#message-key)Message Key\n\nThe lower-order 128 bits of the SHA1 hash of the part of the message to be encrypted (including the internal header and excluding the alignment bytes).\n\n#### [](#internal-cryptographic-header)Internal (cryptographic) Header\n\nA header (16 bytes) added before a message or a container before it is all encrypted together. Consists of the server salt (64 bits) and the session (64 bits).\n\n#### [](#external-cryptographic-header)External (cryptographic) Header\n\nA header (24 bytes) added before an encrypted message or a container. Consists of a key identifier (64 bits) and a message key (128 bits).\n\n#### [](#payload)Payload\n\nExternal header + encrypted message or container.\n\n### [](#defining-aes-key-and-initialization-vector)Defining AES Key and Initialization Vector\n\nThe 2048-bit authorization key (auth\\_key) and the 128-bit message key (msg\\_key) are used to compute a 256-bit AES key (aes\\_key) and a 256-bit initialization vector (aes\\_iv) which are subsequently used to encrypt the part of the message to be encrypted (i. e. everything with the exception of the external header which is added later) with AES-256 in infinite garble extension (IGE) mode.\n\nThe algorithm for computing aes\\_key and aes\\_iv from auth\\_key and msg\\_key is as follows:\n\n*   msg\\_key = substr (SHA1 (plaintext), 4, 16);\n*   sha1\\_a = SHA1 (msg\\_key + substr (auth\\_key, x, 32));\n*   sha1\\_b = SHA1 (substr (auth\\_key, 32+x, 16) + msg\\_key + substr (auth\\_key, 48+x, 16));\n*   sha1\\_c = SHA1 (substr (auth\\_key, 64+x, 32) + msg\\_key);\n*   sha1\\_d = SHA1 (msg\\_key + substr (auth\\_key, 96+x, 32));\n*   aes\\_key = substr (sha1\\_a, 0, 8) + substr (sha1\\_b, 8, 12) + substr (sha1\\_c, 4, 12);\n*   aes\\_iv = substr (sha1\\_a, 8, 12) + substr (sha1\\_b, 0, 8) + substr (sha1\\_c, 16, 4) + substr (sha1\\_d, 0, 8);\n\nwhere x = 0 for messages from client to server and x = 8 for those from server to client.\n\nThe lower-order 1024 bits of auth\\_key are not involved in the computation. They may (together with the remaining bits or separately) be used on the client device to encrypt the local copy of the data received from the server. The 512 lower-order bits of auth\\_key are not stored on the server; therefore, if the client device uses them to encrypt local data and the user loses the key or the password, data decryption of local data is impossible (even if data from the server could be obtained).\n\nWhen AES is used to encrypt a block of data of a length not divisible by 16 bytes, the data is padded with random bytes to the smallest length divisible by 16 bytes immediately prior to being encrypted.\n\n### [](#important-tests)Important Tests\n\nWhen an encrypted message is received, it _must_ be checked that msg\\_key is _in fact_ equal to the 128 lower-order bits of the SHA1 hash of the previously encrypted portion, and that msg\\_id has even parity for messages from client to server, and odd parity for messages from server to client.\n\nIn addition, the identifiers (msg\\_id) of the last N messages received from the other side must be stored, and if a message comes in with msg\\_id lower than all or equal to any of the stored values, the message is to be ignored. Otherwise, the new message msg\\_id is added to the set, and, if the number of stored msg\\_id values is greater than N, the oldest (i. e. the lowest) is forgotten.\n\nIn addition, msg\\_id values that belong over 30 seconds in the future or over 300 seconds in the past are to be ignored. This is especially important for the server. The client would also find this useful (to protect from a replay attack), but only if it is certain of its time (for example, if its time has been synchronized with that of the server).\n\nCertain client-to-server service messages containing data sent by the client to the server (for example, msg\\_id of a recent client query) may, nonetheless, be processed on the client even if the time appears to be \u201cincorrect\u201d. This is especially true of messages to change server\\_salt and notifications of invalid client time. See [Mobile Protocol: Service Messages](https://core.telegram.org/mtproto/service_messages).\n\n### [](#storing-an-authorization-key-on-a-client-device)Storing an Authorization Key on a Client Device\n\nIt may be suggested to users concerned with security that they password protect the authorization key in approximately the same way as in ssh. This is accomplished by adding the SHA1 of the key to the front of the key, following which the entire string is encrypted using AES in CBC mode and a key equal to the user's (text) password. When the user inputs the password, the stored protected password is decrypted and verified by being compared with SHA1. From the user's standpoint, this is practically the same as using an application or a website password.\n\n### [](#unencrypted-messages)Unencrypted Messages\n\nSpecial plain-text messages may be used to create an authorization key as well as to perform a time synchronization. They begin with auth\\_key\\_id = 0 (64 bits) which means that there is no auth\\_key. This is followed directly by the message body in serialized format without internal or external headers. A message identifier (64 bits) and body length in bytes (32 bytes) are added before the message body.\n\nOnly a very limited number of messages of special types can be transmitted as plain text.\n\n### [](#schematic-presentation-of-messages)Schematic Presentation of Messages\n\n#### [](#encrypted-message)Encrypted Message\n\n|     |     |     |\n| --- | --- | --- |\n| [**auth\\_key\\_id**](#key-identifier)  <br>int64 | [**msg\\_key**](#message-key)  <br>int128 | [**encrypted\\_data**](#encrypted-message-encrypted-data)  <br>bytes |\n\n#### [](#encrypted-message-encrypted-data)Encrypted Message: _encrypted\\_data_\n\nContains the cypher text for the following data:\n\n|     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- |\n| [**salt**](#server-salt)  <br>int64 | [**session\\_id**](#session)  <br>int64 | [**message\\_id**](#message-identifier-msg-id)  <br>int64 | [**seq\\_no**](#message-sequence-number-msg-seqno)  <br>int32 | **message\\_data\\_length**  <br>int32 | **message\\_data**  <br>bytes | **padding** 0..15  <br>bytes |\n\n#### [](#unencrypted-message)Unencrypted Message\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n| [**auth\\_key\\_id**](#key-identifier) = `0`  <br>int64 | [**message\\_id**](#message-identifier-msg-id)  <br>int64 | **message\\_data\\_length**  <br>int32 | **message\\_data**  <br>bytes |\n\n### [](#creating-an-authorization-key)Creating an Authorization Key\n\nAn authorization key is normally created once for every user during the application installation process immediately prior to registration. Registration itself, in actuality, occurs after the authorization key is created. However, a user may be prompted to complete the registration form while the authorization key is being generated in the background. Intervals between user key strokes may be used as a source of entropy in the generation of high-quality random numbers required for the creation of an authorization key.\n\nSee [Creating an Authorization Key](https://core.telegram.org/mtproto/auth_key).\n\nDuring the creation of the authorization key, the client obtains its server salt (to be used with the new key for all communication in the near future). The client then creates an encrypted session using the newly generated key, and subsequent communication occurs within that session (including the transmission of the user's registration information and phone number validation) unless the client creates a new session. The client is free to create new or additional sessions at any time by choosing a new random session\\_id.",
    "url": "https://core.telegram.org/mtproto/description_v1"
  },
  {
    "metadata": {
      "canonicalUrl": "https://telegram.org/apps?setln=ko",
      "title": "\ud154\ub808\uadf8\ub7a8 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "\ud154\ub808\uadf8\ub7a8 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158"
        },
        {
          "property": "og:site_name",
          "content": "Telegram"
        },
        {
          "property": "og:description",
          "content": "\uc800\ud76c \uc571\uc740 \uc624\ud508 \uc18c\uc2a4\uc774\uba70 \uc7ac\ud604 \uac00\ub2a5\ud55c \ube4c\ub4dc\ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uc774\ub294 \ub204\uad6c\ub098 \uc800\ud76c\uac00 Github\uc5d0 \uc788\ub294 \ucf54\ub4dc\ub97c \ub3c5\uc790\uc801\uc73c\ub85c \uac80\uc99d \ud560 \uc218 \uc788\uc73c\uba70, \uc571\uc2a4\ud1a0\uc5b4\ub098 \uad6c\uae00 \ud50c\ub808\uc774\uc5d0\uc11c \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uc740 \uc571\uacfc \ub3d9\uc77c \ud558\ub2e4\ub294 \ub73b\uc785\ub2c8\ub2e4. \uac1c\ubc1c\uc790\ub4e4\uc740\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:08:38 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4144",
        "set-cookie": "stel_ln=ko; expires=Wed, 13 May 2026 11:30:32 GMT; path=/; domain=telegram.org; HttpOnly",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=31536000; includeSubDomains; preload",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# \ud154\ub808\uadf8\ub7a8 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\n\n> \uc800\ud76c \uc571\uc740 **\uc624\ud508 \uc18c\uc2a4**\uc774\uba70 **\uc7ac\ud604 \uac00\ub2a5\ud55c \ube4c\ub4dc**\ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uc774\ub294 \ub204\uad6c\ub098 \uc800\ud76c\uac00 [Github\uc5d0 \uc788\ub294 \ucf54\ub4dc](#126608)\ub97c \ub3c5\uc790\uc801\uc73c\ub85c \uac80\uc99d \ud560 \uc218 \uc788\uc73c\uba70, \uc571\uc2a4\ud1a0\uc5b4\ub098 \uad6c\uae00 \ud50c\ub808\uc774\uc5d0\uc11c \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uc740 \uc571\uacfc \ub3d9\uc77c \ud558\ub2e4\ub294 \ub73b\uc785\ub2c8\ub2e4. \uac1c\ubc1c\uc790\ub4e4\uc740 [iOS\uc640 \uc548\ub4dc\ub85c\uc774\ub4dc\uc758 \uc7ac\ud604 \uac00\ub2a5\ud560 \ube4c\ub4dc \uac00\uc774\ub4dc](https://core.telegram.org/reproducible-builds)\uc5d0\uc11c \uc790\uc138\ud55c \ub0b4\uc6a9\uc744 \ud655\uc778 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n#### [](#1631607839)\ubaa8\ubc14\uc77c \uc571\n\n*   [Telegram for Android](https://telegram.org/android)\n*   [Telegram for iPhone and iPad](https://telegram.org/dl/ios)\n\n> \ub610\ud55c [\uc774 \ucc44\ub110](https://t.me/TAndroidAPK)\uc5d0\uc11c \ucd5c\uc2e0 \ubc84\uc804\uc758 **\uc548\ub4dc\ub85c\uc774\ub4dc\uc6a9 \ud154\ub808\uadf8\ub7a8**\uc744 \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n#### [](#1262204202)\ub370\uc2a4\ud06c\ud0d1 \uc571\n\n*   [Telegram for Windows/Mac/Linux](https://desktop.telegram.org/)\n*   [Telegram for macOS](https://macos.telegram.org/)\n\n#### [](#49001994)\uc6f9 \uc571\n\n*   [Telegram WebK](https://telegram.org/dl/webk)\n*   [Telegram WebA](https://telegram.org/dl/weba)\n\n#### [](#tdlib)\ud154\ub808\uadf8\ub7a8 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub77c\uc774\ube0c\ub7ec\ub9ac (TDLib)\n\n*   [TDLib](https://core.telegram.org/tdlib) \u2013 \ud154\ub808\uadf8\ub7a8 \ud50c\ub7ab\ud3fc\uc5d0\uc11c \ub9de\ucda4 \ud615 \uc571\uc744 \ub514\uc790\uc778\ud558\uace0 \uac1c\ubc1c \ud560 \uc218 \uc788\ub294 \ud06c\ub85c\uc2a4 \ud50c\ub7ab\ud3fc \ud074\ub77c\uc774\uc5b8\ud2b8.\n*   [Telegram X for Android](https://play.google.com/store/apps/details?id=org.thunderdog.challegram&hl=en) \u2013 TDLib\uc5d0 \uae30\ubc18\ud55c \uba4b\uc9c0\uace0 \uc2e4\ud5d8\uc801\uc778 \ud154\ub808\uadf8\ub7a8 \ud074\ub77c\uc774\uc5b8\ud2b8.\n\n#### [](#894732259)\ube44\uacf5\uc2dd \uc571\n\n*   [Unigram, a client optimized for Windows 10](https://github.com/UnigramDev/Unigram) ([TDLib](https://core.telegram.org/tdlib)\uae30\ubc18) (\ub370\uc2a4\ud06c\ud0d1 \ubc0f Xbox One)\n*   [Telegram CLI for Linux](https://telegram.org/dl/cli)\n*   [MadelineProto](https://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#126608)\uc18c\uc2a4 \ucf54\ub4dc\n\n\ud604\uc7ac\ub294 \uc800\ud76c API\ub97c \ud65c\uc6a9\ud558\uc5ec \uac1c\ubc1c\uc790\ub4e4\uc774 \ube68\ub9ac \ubb34\uc5b8\uac00 \uac1c\ubc1c\ud560 \uc218 \uc788\ub3c4\ub85d \uc624\ud508\uc18c\uc2a4\ud654\ud558\ub294 \uc791\uc5c5\uc5d0 \uc9d1\uc911\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc800\ud76c\ub294 \uc548\ub4dc\ub85c\uc774\ub4dc, iOS, \uc6f9, \ub370\uc2a4\ud06c\ud0d1 \uc571(\uc708\ub3c4\uc6b0, \ub9e5OS\uc640 \ub9ac\ub205\uc2a4)\uacfc \ud154\ub808\uadf8\ub7a8 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ucf54\ub4dc\ub3c4 \uac8c\uc2dc\ud558\uc600\uc2b5\ub2c8\ub2e4.\n\n> \uc774 \ucf54\ub4dc\ub294 \ubcf4\uc548 \uc5f0\uad6c\uc790\ub4e4\uc774 [\ub2e8\ub300\ub2e8 \uc554\ud638\ud654 \uc801\uc6a9](https://core.telegram.org/api/end-to-end)\uc744 **\uc644\uc804\ud788 \uac80\uc99d**\ud560 \uc218 \uc788\uac8c \ud569\ub2c8\ub2e4. \ub610\ud55c \uc800\ud76c\uac00 GitHub\uc5d0 \uac8c\uc2dc\ud558\ub294 \ucf54\ub4dc\uc640 [\ub3d9\uc77c\ud55c \ucf54\ub4dc](https://core.telegram.org/reproducible-builds)\ub97c \ud65c\uc6a9\ud558\uc5ec \uad6c\uae00 \ud50c\ub808\uc774\uc640 \uc571\uc2a4\ud1a0\uc5b4\uc5d0 \ub4f1\ub85d\ud55c \ud154\ub808\uadf8\ub7a8 \uc571\uc778\uc9c0 **\ub3c5\ub9bd\uc801\uc778 \uac80\uc99d**\uc744 \uac00\ub2a5\ud1a0\ub85d \ud569\ub2c8\ub2e4.\n\n##### [](#1696889452)[\ud154\ub808\uadf8\ub7a8 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub77c\uc774\ube0c\ub7ec\ub9ac](https://github.com/tdlib/td)\n\n\ub9de\ucda4\ud615 \ud154\ub808\uadf8\ub7a8\uc571 \uac1c\ubc1c\uc744 \uc704\ud55c \ud06c\ub85c\uc2a4 \ud50c\ub7ab\ud3fc \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4, \uc790\uc138\ud55c \uc0ac\ud56d\uc740 [TDLib](https://core.telegram.org/tdlib)\ub97c \ud655\uc778\ud574\uc8fc\uc138\uc694.  \n[Boost 1.0](https://www.boost.org/LICENSE_1_0.txt) \ub77c\uc774\uc13c\uc2a4 \uc801\uc6a9.  \n[GitHub \u00bb](https://github.com/tdlib/td)\n\n##### [](#1074266069)[\uc548\ub4dc\ub85c\uc774\ub4dc\uc6a9 \ud154\ub808\uadf8\ub7a8](https://github.com/DrKLO/Telegram)\n\n\uacf5\uc2dd \uc548\ub4dc\ub85c\uc774\ub4dc\uc571\uc785\ub2c8\ub2e4, \uc0c1\uc138\ud55c \ub0b4\uc6a9\uc740 [\uad6c\uae00 \ud50c\ub808\uc774 \ub9c8\ucf13 \ud398\uc774\uc9c0](https://telegram.org/dl/android)\ub97c \ud655\uc778\ud574\uc8fc\uc138\uc694.  \n[GNU GPL v. 2 \ud639\uc740 \uc774\ud6c4](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html) \ub77c\uc774\uc13c\uc2a4 \uc801\uc6a9.  \n[GitHub \u00bb](https://github.com/DrKLO/Telegram)  \n[APK \ud30c\uc77c \ub2e4\uc6b4\ub85c\ub4dc \u00bb](https://telegram.org/dl/android/apk)\n\n##### [](#ios)[iOS\uc6a9 \ud154\ub808\uadf8\ub7a8](https://github.com/TelegramMessenger/Telegram-iOS)\n\n[GNU GPL v. 2 \ud639\uc740 \uc774\ud6c4](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html) \ub77c\uc774\uc13c\uc2a4 \uc801\uc6a9.  \n[GitHub \u00bb](https://github.com/TelegramMessenger/Telegram-iOS)\n\n##### [](#macos)[macOS\uc6a9 \ud154\ub808\uadf8\ub7a8](https://github.com/overtake/TelegramSwift)\n\n\ub124\uc774\ud2f0\ube0c macOS \ud074\ub77c\uc774\uc5b8\ud2b8.  \n[GNU GPL v. 2](http://www.gnu.org/licenses/gpl.html) \ub77c\uc774\uc13c\uc2a4 \uc801\uc6a9.  \n[GitHub \u00bb](https://github.com/overtake/TelegramSwift)\n\n##### [](#832223188)[\uc6f9\ube0c\ub77c\uc6b0\uc838\uc6a9 \ud154\ub808\uadf8\ub7a8](https://github.com/zhukov/webogram)\n\n\uc6f9\ube0c\ub77c\uc6b0\uc838\uc758 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8 \ud074\ub77c\uc774\uc5b8\ud2b8. Mac, \uc708\ub3c4\uc6b0, \ub9ac\ub205\uc2a4\uc6a9.  \n[GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html) \ub77c\uc774\uc13c\uc2a4 \uc801\uc6a9.  \n[GitHub \u00bb](https://github.com/zhukov/webogram)\n\n##### [](#react)[React\uc6a9 \ud154\ub808\uadf8\ub7a8](https://github.com/evgeny-nadymov/telegram-react)\n\n\uc6f9\ube0c\ub77c\uc6b0\uc838\uc758 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8 \ud074\ub77c\uc774\uc5b8\ud2b8. Mac, \uc708\ub3c4\uc6b0, \ub9ac\ub205\uc2a4\uc6a9.  \n[GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html) \ub77c\uc774\uc13c\uc2a4 \uc801\uc6a9.  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-react)\n\n##### [](#2103484244)[\ub370\uc2a4\ud06c\ud0d1\uc6a9 \ud154\ub808\uadf8\ub7a8](https://github.com/telegramdesktop/tdesktop)\n\nQt\uae30\ubc18 \ub370\uc2a4\ud06c\ud0d1 \ud074\ub77c\uc774\uc5b8\ud2b8. Mac, \uc708\ub3c4\uc6b0, \ub9ac\ub205\uc2a4\uc6a9.  \n[GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html) \ub77c\uc774\uc13c\uc2a4 \uc801\uc6a9.  \n[GitHub \u00bb](https://github.com/telegramdesktop/tdesktop)\n\n##### [](#1762659575)[\uc708\ub3c4\uc6b0\ud3f0\uc6a9 \ud154\ub808\uadf8\ub7a8](https://github.com/evgeny-nadymov/telegram-wp)\n\n[GNU GPL v. 2 \ud639\uc740 \uc774\ud6c4](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html) \ub77c\uc774\uc13c\uc2a4 \uc801\uc6a9.  \n[GitHub \u00bb](https://github.com/evgeny-nadymov/telegram-wp)\n\n#### [](#894732259)\ube44\uacf5\uc2dd \uc571\n\n##### [](#cli-unofficial)[\ud154\ub808\uadf8\ub7a8 CLI](https://github.com/vysheng/tg) (Unofficial)\n\n\ud154\ub808\uadf8\ub7a8\uc758 \ub9ac\ub205\uc2a4 \ucee4\ub9e8\ub4dc\ub77c\uc778 \uc778\ud130\ud398\uc774\uc2a4.  \n[GNU GPL v. 2](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html) \ub77c\uc774\uc13c\uc2a4 \uc801\uc6a9.  \n[GitHub \u00bb](https://github.com/vysheng/tg)\n\n##### [](#unigram-unofficial)[Unigram](https://github.com/UnigramDev/Unigram) (Unofficial)\n\n\uc708\ub3c4\uc6b010\uc5d0 \ucd5c\uc801\ud654\ub41c \ud154\ub808\uadf8\ub7a8 \ud074\ub77c\uc774\uc5b8\ud2b8 (\ub370\uc2a4\ud06c\ud0d1\uacfc Xbox One).  \n[GNU GPL v. 3](http://www.gnu.org/licenses/gpl.html) \ud639\uc740 \uc774\ud6c4 \ub77c\uc774\uc13c\uc2a4 \uc801\uc6a9.  \n[GitHub \u00bb](https://github.com/UnigramDev/Unigram)\n\n##### [](#madelineproto-unofficial)[MadelineProto](https://github.com/danog/MadelineProto) (Unofficial)\n\nPHP MTProto\uae30\ubc18 \ud154\ub808\uadf8\ub7a8 \ud074\ub77c\uc774\uc5b8\ud2b8.  \n[GNU AGPL v. 3](https://www.gnu.org/licenses/agpl-3.0.en.html) \ub77c\uc774\uc13c\uc2a4 \uc801\uc6a9.  \n[GitHub \u00bb](http://github.com/danog/MadelineProto)\n\n* * *\n\n### [](#1488990555)\ubcf4\uc548 \uc5f0\uad6c\uc790\ub4e4\uc744 \uc704\ud55c \uc5f0\ub77d\ucc98\n\n\ud154\ub808\uadf8\ub7a8\uc571\uc774\ub098 \ud504\ub85c\ud1a0\ucf5c\uc5d0 \ub300\ud574 \ubb38\uc81c\ub97c \ucc3e\uc558\uac70\ub098 \ubcf4\uc548 \uae30\ub2a5\uc5d0 \ub300\ud55c \uc801\uc6a9\uc5d0 \ub300\ud574 \uc9c8\ubb38\uc774 \uc788\uc744 \uacbd\uc6b0, **security@telegram.org**\uc73c\ub85c \uc5f0\ub77d \ubd80\ud0c1\ub4dc\ub9bd\ub2c8\ub2e4.",
    "url": "https://telegram.org/apps?setln=ko"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:34 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5902",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=1"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:42 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5904",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=179"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:45 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3467",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=2"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:48 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5903",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=180"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:49 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5818",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=114"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:50 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5817",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=115"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:49 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3465",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=3"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:51 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5815",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=137"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:51 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5818",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=116"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:51 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5817",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=138"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:53 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5905",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=182"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:52 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5904",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=181"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:53 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5817",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=139"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:53 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5902",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=183"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:52 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5819",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=117"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:51 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3463",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=4"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:52 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3464",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=5"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:55 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5818",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=118"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:56 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5816",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=140"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:55 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3465",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=6"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:57 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5903",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=184"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:58 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5816",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=142"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:57 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3465",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=7"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:58 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5817",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=119"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:59 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5817",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=120"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:00 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5906",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=185"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:00 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5906",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=143"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:01 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5906",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=121"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:01 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5903",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=186"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:02 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5816",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=122"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:09:59 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4034",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=8"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:03 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5904",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=145"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:02 GMT",
        "content-type": "text/html; charset=utf-8",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "strict-transport-security": "max-age=35768000",
        "content-encoding": "gzip",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=144"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:01 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4037",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=9"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:03 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5904",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=187"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:04 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5904",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=147"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:06 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5817",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=123"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:04 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4034",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=10"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:06 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5903",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=189"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:05 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4034",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=11"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:10 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5902",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=192"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:10 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5819",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=124"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:10 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5902",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=148"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:12 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5817",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=125"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:12 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5903",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=194"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:11 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4037",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=12"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:13 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5904",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=150"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:13 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5901",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=195"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:12 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4037",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=13"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:14 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5816",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=126"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:14 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5904",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=151"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:15 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5902",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=152"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:16 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5818",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=127"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:14 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4037",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=14"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:16 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5899",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=153"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:15 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4036",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=15"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:17 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5820",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=128"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:18 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5903",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=155"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:20 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5816",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=131"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:19 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5817",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=129"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:20 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5819",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=130"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:21 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5905",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=159"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:17 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4036",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=16"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:18 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4460",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=17"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:19 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5906",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=158"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:21 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4968",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=23"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:20 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4457",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=18"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:21 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5815",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=132"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:22 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5904",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=160"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:23 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5819",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=108"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:24 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5903",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=164"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:24 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5818",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=133"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:23 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5816",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=105"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:25 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5818",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=109"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:26 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5905",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=166"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:26 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5815",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=135"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:26 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5903",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=167"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:27 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5817",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=110"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:26 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5816",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=134"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:28 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5818",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=111"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:28 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5816",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=136"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:29 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5902",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=168"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/end-to-end%2Fvideo-calls",
      "title": "End-to-End Encrypted Voice and Video Calls",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "End-to-End Encrypted Voice and Video Calls"
        },
        {
          "property": "og:description",
          "content": "This article describes the end-to-end encryption used for Telegram voice and video calls.\nRelated Articles\nEnd-to-End Encryption\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:30 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "6267",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# End-to-End Encrypted Voice and Video Calls\n\nThis article describes the end-to-end encryption used for Telegram **voice** and **video calls**.\n\n##### [](#related-articles)Related Articles\n\n* * *\n\n## [](#establishing-calls)Establishing Calls\n\nBefore a call is ready, some preliminary actions have to be performed. The calling party needs to contact the party to be called and check whether it is ready to accept the call. Besides that, the parties have to negotiate the protocols to be used, learn the IP addresses of each other or of the Telegram relay servers to be used (so-called _reflectors_), and generate a one-time encryption key for this voice call with the aid of _Diffie--Hellman key exchange_. All of this is accomplished in parallel with the aid of several Telegram API methods and related notifications. This document covers details related to key generation, encryption and security.\n\n## [](#key-generation)Key Generation\n\nThe Diffie-Hellman key exchange, as well as the whole protocol used to create a new voice call, is quite similar to the one used for [Secret Chats](https://core.telegram.org/api/end-to-end#key-generation). We recommend studying the linked article before proceeding.\n\nHowever, we have introduced some important changes to facilitate the [key verification process](#key-verification). Below is the entire exchange between the two communicating parties, the Caller (A) and the Callee (B), through the Telegram servers (S).\n\n*   _A_ executes [messages.getDhConfig](https://core.telegram.org/method/messages.getDhConfig) to find out the 2048-bit Diffie-Hellman prime _p_ and generator _g_. The client is expected to check whether _p_ is a safe prime and perform all the [security checks](https://core.telegram.org/api/end-to-end#sending-a-request) necessary for secret chats.\n*   _A_ chooses a random value of _a_, 1 < a < p-1, and computes _g\\_a:=power(g,a) mod p_ (a 256-byte number) and _g\\_a\\_hash:=SHA256(g\\_a)_ (32 bytes long).\n*   _A_ invokes (sends to server _S_) [phone.requestCall](https://core.telegram.org/method/phone.requestCall), which has the field `g_a_hash:bytes`, among others. For this call, this field is to be filled with _g\\_a\\_hash_, **not** _g\\_a_ itself.\n*   The Server _S_ performs privacy checks and sends an [updatePhoneCall](https://core.telegram.org/constructor/updatePhoneCall) update with a [phoneCallRequested](https://core.telegram.org/constructor/phoneCallRequested) constructor to all of _B_'s active devices. This update, apart from the identity of _A_ and other relevant parameters, contains the _g\\_a\\_hash_ field, filled with the value obtained from _A_.\n*   _B_ accepts the call on one of their devices, stores the received value of _g\\_a\\_hash_ for this instance of the voice call creation protocol, chooses a random value of _b_, 1 < b < p-1, computes _g\\_b:=power(g,b) mod p_, performs all the required security checks, and invokes the [phone.acceptCall](https://core.telegram.org/method/phone.acceptCall) method, which has a _g\\_b:bytes_ field (among others), to be filled with the value of _g\\_b_ itself (not its hash).\n*   The Server _S_ sends an [updatePhoneCall](https://core.telegram.org/constructor/updatePhoneCall) with the [phoneCallDiscarded](https://core.telegram.org/constructor/phoneCallDiscarded) constructor to all other devices _B_ has authorized, to prevent accepting the same call on any of the other devices. From this point on, the server _S_ works only with that of _B_'s devices which has invoked [phone.acceptCall](https://core.telegram.org/method/phone.acceptCall) first.\n*   The Server _S_ sends to _A_ an [updatePhoneCall](https://core.telegram.org/constructor/updatePhoneCall) update with [phoneCallAccepted](https://core.telegram.org/constructor/phoneCallAccepted) constructor, containing the value of _g\\_b_ received from _B_.\n*   _A_ performs all the usual security checks on _g\\_b_ and _a_, computes the Diffie--Hellman key _key:=power(g\\_b,a) mod p_ and its fingerprint _key\\_fingerprint:long_, equal to the lower 64 bits of _SHA1(key)_, the same as with secret chats. Then _A_ invokes the [phone.confirmCall](https://core.telegram.org/method/phone.confirmCall) method, containing `g_a:bytes` and `key_fingerprint:long`.\n*   The Server _S_ sends to _B_ an [updatePhoneCall](https://core.telegram.org/constructor/updatePhoneCall) update with the [phoneCall](https://core.telegram.org/constructor/phoneCall) constructor, containing the value of _g\\_a_ in _g\\_a\\_or\\_b:bytes_ field, and _key\\_fingerprint:long_\n*   At this point _B_ receives the value of _g\\_a_. It checks that _SHA256(g\\_a)_ is indeed equal to the previously received value of _g\\_a\\_hash_, performs all the [usual Diffie-Hellman security checks](https://core.telegram.org/mtproto/security_guidelines), and computes the key _key:=power(g\\_a,b) mod p_ and its fingerprint, equal to the lower 64 bits of _SHA1(key)_. Then it checks that this fingerprint equals the value of `key_fingerprint:long` received from the other side, as an implementation sanity check.\n\nAt this point, the Diffie--Hellman key exchange is complete, and both parties have a 256-byte shared secret key _key_ which is used to encrypt all further exchanges between _A_ and _B_.\n\nIt is of paramount importance to accept each update only once for each instance of the key generation protocol, discarding any duplicates or alternative versions of already received and processed messages (updates).\n\n## [](#encryption)Encryption\n\n> This document describes encryption in **voice and video calls** as implemented in Telegram apps with versions **7.0** and above. See [this document](https://core.telegram.org/api/end-to-end/voice-calls) for details on encryption used in **voice calls** in app versions released before **August 14, 2020**.\n\nThe [Telegram Voice and Video Call Library](https://github.com/TelegramMessenger/tgcalls) uses an optimized version of [MTProto 2.0](https://core.telegram.org/) to send and receive **packets**, consisting of one or more end-to-end encrypted **messages** of various types ([_ice_](https://webrtcglossary.com/ice/) _candidates list, video formats, remote video status, audio stream data, video stream data, message ack_ or _empty_).\n\nThis document describes only the encryption process, leaving out encoding and network-dependent parts.\n\nThe library starts working with:\n\n*   An [encryption key](#key-generation) `key` shared between the parties, as generated above.\n*   Information whether the call is **outgoing** or **incoming**.\n*   Two data transfer channels: **signaling**, offered by the Telegram API, and **transport** based on WebRTC.\n\nBoth data transfer channels are unreliable (messages may get lost), but **signaling** is slower and more reliable.\n\n### [](#encrypting-call-data)Encrypting Call Data\n\nThe body of a packet (`decrypted_body`) consists of several messages and their respective `seq` numbers concatenated together.\n\n*   decrypted\\_body = message\\_seq1 + message\\_body1 + message\\_seq2 + message\\_body2\n\nEach `decrypted_body` is unique because no two `seq` numbers of the first message can be the same. If only old messages need to be re-sent, an _empty_ message with new unique `seq` is added to the packet first.\n\nThe [encryption key](#key-generation) `key` is used to compute a 128-bit `msg_key` and then a 256-bit `aes_key` and a 128-bit `aes_iv`:\n\n*   msg\\_key\\_large = SHA256 (substr(key, 88+x, 32) + decrypted\\_body);\n*   msg\\_key = substr (msg\\_key\\_large, 8, 16);\n*   sha256\\_a = SHA256 (msg\\_key + substr (key, x, 36));\n*   sha256\\_b = SHA256 (substr (key, 40+x, 36) + msg\\_key);\n*   aes\\_key = substr (sha256\\_a, 0, 8) + substr (sha256\\_b, 8, 16) + substr (sha256\\_a, 24, 8);\n*   aes\\_iv = substr (sha256\\_b, 0, 4) + substr (sha256\\_a, 8, 8) + substr (sha256\\_b, 24, 4);\n\n`x` depends on whether the call is **outgoing** or **incoming** and on the connection type:\n\n*   x = 0 for **outgoing** + **transport**\n*   x = 8 for **incoming** + **transport**\n*   x = 128 for **outgoing** + **signaling**\n*   x = 136 for **incoming** + **signaling**\n\nThis allows apps to decide which packet types will be sent to which connections and work in these connections independently (with each having its own `seq` counter).\n\nThe resulting `aes_key` and `aes_iv` are used to encrypt `decrypted_body`:\n\n*   encrypted\\_body = AES\\_CTR (decrypted\\_body, aes\\_key, aes\\_iv)\n\nThe packet that gets sent consists of `msg_key` and `encrypted_body`:\n\n*   packet\\_bytes = msg\\_key + encrypted\\_body\n\nWhen received, the packet gets decrypted using `key` and `msg_key`, after which `msg_key` is checked against the relevant `SHA256` substring. If the check fails, the packet **must** be discarded.\n\n### [](#protecting-against-replay-attacks)Protecting Against Replay Attacks\n\nEach of the peers maintains its own 32-bit monotonically increasing counter for outgoing messages, `seq`, starting with `1`. This `seq` counter is prepended to each sent message and increased by `1` for each new message. No two `seq` numbers of the first message in a packet can be the same. If only old messages need to be re-sent, an _empty_ message with a new unique `seq` is added to the packet first. When the `seq` counter reaches `2^30`, the call must be aborted. Each peer\u00a0stores `seq` values of all the messages it has received (and processed) which are larger than `max_received_seq - 64`, where `max_received_seq` is the largest `seq` number received so far.\n\nIf a packet is received, the first message of which has a `seq` that is smaller or equal to `max_received_seq - 64` or its `seq` had already been received, the message is discarded. Otherwise, the `seq` values of all incoming messages are memorized and `max_received_seq` is adjusted. This guarantees that no two packets will be processed twice.\n\n## [](#key-verification)Key Verification\n\nTo verify the key, and ensure that no MITM attack is taking place, both parties concatenate the secret key _key_ with the value _g\\_a_ of the Caller ( _A_ ), compute SHA256 and use it to generate a sequence of emoticons. More precisely, the SHA256 hash is split into four 64-bit integers; each of them is divided by the total number of emoticons used (currently 333), and the remainder is used to select specific emoticons. The specifics of the protocol guarantee that comparing four emoticons out of a set of 333 is sufficient to prevent eavesdropping (MiTM attack on DH) with a probability of **0.9999999999**.\n\nThis is because instead of the standard Diffie-Hellman key exchange which requires only two messages between the parties:\n\n*   A->B : (generates a and) sends g\\_a := g^a\n*   B->A : (generates b and true key (g\\_a)^b, then) sends g\\_b := g^b\n*   A : computes key (g\\_b)^a\n\nwe use a **three-message modification** thereof that works well when both parties are online (which also happens to be a requirement for voice calls):\n\n*   A->B : (generates a and) sends g\\_a\\_hash := hash(g^a)\n*   B->A : (stores g\\_a\\_hash, generates b and) sends g\\_b := g^b\n*   A->B : (computes key (g\\_b)^a, then) sends g\\_a := g^a\n*   B : checks hash(g\\_a) == g\\_a\\_hash, then computes key (g\\_a)^b\n\nThe idea here is that _A_ commits to a specific value of _a_ (and of _g\\_a_) without disclosing it to _B_. _B_ has to choose its value of _b_ and _g\\_b_ without knowing the true value of _g\\_a_, so that it cannot try different values of _b_ to force the final key _(g\\_a)^b_ to have any specific properties (such as fixed lower 32 bits of SHA256(key)). At this point, _B_ commits to a specific value of _g\\_b_ without knowing _g\\_a_. Then _A_ has to send its value _g\\_a_; it cannot change it even though it knows _g\\_b_ now, because the other party _B_ would accept only a value of _g\\_a_ that has a hash specified in the very first message of the exchange.\n\nIf some impostor is pretending to be either _A_ or _B_ and tries to perform a Man-in-the-Middle Attack on this Diffie--Hellman key exchange, the above still holds. Party _A_ will generate a shared key with _B_ -- or whoever pretends to be _B_ -- without having a second chance to change its exponent _a_ depending on the value _g\\_b_ received from the other side; and the impostor will not have a chance to adapt his value of _b_ depending on _g\\_a_, because it has to commit to a value of _g\\_b_ before learning _g\\_a_. The same is valid for the key generation between the impostor and the party _B_.\n\nThe use of hash commitment in the DH exchange constrains the attacker to only **one guess** to generate the correct visualization in their attack, which means that using just over 33 bits of entropy represented by four emoji in the visualization is enough to make a successful attack highly improbable.\n\n> For a slightly more user-friendly explanation of the above see: [How are calls authenticated?](https://core.telegram.org/techfaq#q-how-are-voice-calls-authenticated)",
    "url": "https://core.telegram.org/api/end-to-end%2Fvideo-calls"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:29 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5906",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=169"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/end-to-end/voice-calls",
      "title": "End-to-End Encrypted Voice Calls",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "End-to-End Encrypted Voice Calls"
        },
        {
          "property": "og:description",
          "content": "This document describes encryption in voice calls as implemented in Telegram apps with versions < 7.0. See this document\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:30 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5962",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# End-to-End Encrypted Voice Calls\n\n> This document describes encryption in **voice calls** as implemented in Telegram apps with versions **< 7.0**. See [this document](https://core.telegram.org/api/end-to-end/video-calls) for details on encryption used in **voice and video calls** in app versions released on **August 14, 2020** and later.\n\n##### [](#related-articles)Related articles\n\n## [](#establishing-voice-calls)Establishing voice calls\n\nBefore a voice call is ready, some preliminary actions have to be performed. The calling party needs to contact the party to be called and check whether it is ready to accept the call. Besides that, the parties have to negotiate the protocols to be used, learn the IP addresses of each other or of the Telegram relay servers to be used (so-called _reflectors_), and generate a one-time encryption key for this voice call with the aid of _Diffie--Hellman key exchange_. All of this is accomplished in parallel with the aid of several Telegram API methods and related notifications. This document details the generation of the encryption key. Other negotiations will be eventually documented elsewhere.\n\n## [](#key-generation)Key Generation\n\nThe Diffie-Hellman key exchange, as well as the whole protocol used to create a new voice call, is quite similar to the one used for [Secret Chats](https://core.telegram.org/api/end-to-end#key-generation). We recommend studying the linked article before proceeding.\n\nHowever, we have introduced some important changes to facilitate the [key verification process](#key-verification). Below is the entire exchange between the two communicating parties, the Caller (A) and the Callee (B), through the Telegram servers (S).\n\n*   _A_ executes [messages.getDhConfig](https://core.telegram.org/method/messages.getDhConfig) to find out the 2048-bit Diffie-Hellman prime _p_ and generator _g_. The client is expected to check whether _p_ is a safe prime and perform all the [security checks](https://core.telegram.org/api/end-to-end#sending-a-request) necessary for secret chats.\n*   _A_ chooses a random value of _a_, 1 < a < p-1, and computes _g\\_a:=power(g,a) mod p_ (a 256-byte number) and _g\\_a\\_hash:=SHA256(g\\_a)_ (32 bytes long).\n*   _A_ invokes (sends to server _S_) [phone.requestCall](https://core.telegram.org/method/phone.requestCall), which has the field `g_a_hash:bytes`, among others. For this call, this field is to be filled with _g\\_a\\_hash_, **not** _g\\_a_ itself.\n*   The Server _S_ performs privacy checks and sends an [updatePhoneCall](https://core.telegram.org/constructor/updatePhoneCall) update with a [phoneCallRequested](https://core.telegram.org/constructor/phoneCallRequested) constructor to all of _B_'s active devices. This update, apart from the identity of _A_ and other relevant parameters, contains the _g\\_a\\_hash_ field, filled with the value obtained from _A_.\n*   _B_ accepts the call on one of their devices, stores the received value of _g\\_a\\_hash_ for this instance of the voice call creation protocol, chooses a random value of _b_, 1 < b < p-1, computes _g\\_b:=power(g,b) mod p_, performs all the required security checks, and invokes the [phone.acceptCall](https://core.telegram.org/method/phone.acceptCall) method, which has a _g\\_b:bytes_ field (among others), to be filled with the value of _g\\_b_ itself (not its hash).\n*   The Server _S_ sends an [updatePhoneCall](https://core.telegram.org/constructor/updatePhoneCall) with the [phoneCallDiscarded](https://core.telegram.org/constructor/phoneCallDiscarded) constructor to all other devices _B_ has authorized, to prevent accepting the same call on any of the other devices. From this point on, the server _S_ works only with that of _B_'s devices which has invoked [phone.acceptCall](https://core.telegram.org/method/phone.acceptCall) first.\n*   The Server _S_ sends to _A_ an [updatePhoneCall](https://core.telegram.org/constructor/updatePhoneCall) update with [phoneCallAccepted](https://core.telegram.org/constructor/phoneCallAccepted) constructor, containing the value of _g\\_b_ received from _B_.\n*   _A_ performs all the usual security checks on _g\\_b_ and _a_, computes the Diffie--Hellman key _key:=power(g\\_b,a) mod p_ and its fingerprint _key\\_fingerprint:long_, equal to the lower 64 bits of _SHA1(key)_, the same as with secret chats. Then _A_ invokes the [phone.confirmCall](https://core.telegram.org/method/phone.confirmCall) method, containing `g_a:bytes` and `key_fingerprint:long`.\n*   The Server _S_ sends to _B_ an [updatePhoneCall](https://core.telegram.org/constructor/updatePhoneCall) update with the [phoneCall](https://core.telegram.org/constructor/phoneCall) constructor, containing the value of _g\\_a_ in _g\\_a\\_or\\_b:bytes_ field, and _key\\_fingerprint:long_\n*   At this point _B_ receives the value of _g\\_a_. It checks that _SHA256(g\\_a)_ is indeed equal to the previously received value of _g\\_a\\_hash_, performs all the [usual Diffie-Hellman security checks](https://core.telegram.org/mtproto/security_guidelines), and computes the key _key:=power(g\\_a,b) mod p_ and its fingerprint, equal to the lower 64 bits of _SHA1(key)_. Then it checks that this fingerprint equals the value of `key_fingerprint:long` received from the other side, as an implementation sanity check.\n\nAt this point, the Diffie--Hellman key exchange is complete, and both parties have a 256-byte shared secret key _key_ which is used to encrypt all further exchanges between _A_ and _B_.\n\nIt is of paramount importance to accept each update only once for each instance of the key generation protocol, discarding any duplicates or alternative versions of already received and processed messages (updates).\n\n## [](#encryption-of-voice-data)Encryption of voice data\n\nBoth parties _A_ (the Caller) and _B_ (the Callee) transform the voice information into a sequence of small _chunks_ or _packets_, not more than 1 kilobyte each. This information is to be encrypted using the shared key _key_ generated during the initial exchange, and sent to the other party, either directly (P2P) or through Telegram's relay servers (so-called _reflectors_). This document describes only the encryption process for each chunk, leaving out voice encoding and the network-dependent parts.\n\n### [](#encapsulation-of-low-level-voice-data)Encapsulation of low-level voice data\n\nThe low-level data chunk `raw_data:string`, obtained from voice encoder, is first encapsulated into one of the two constructors for the [DecryptedDataBlock](https://core.telegram.org/type/DecryptedDataBlock) type, similar to [DecryptedMessage](https://core.telegram.org/type/DecryptedMessage) used in secret chats:\n\n```\ndecryptedDataBlock#dbf948c1 random_id:long random_bytes:string flags:# voice_call_id:flags.2?int128 in_seq_no:flags.4?int out_seq_no:flags.4?int recent_received_mask:flags.5?int proto:flags.3?int extra:flags.1?string raw_data:flags.0?string = DecryptedDataBlock;\nsimpleDataBlock#cc0d0e76 random_id:long random_bytes:string raw_data:string = DecryptedDataBlock;\n```\n\nHere `out_seq_no` is the chunk's sequence number among all sent by this party (starting from one), `in_seq_no` -- the highest known out\\_seq\\_no from the received packets. The parameter `recent_received_mask` is a 32-bit mask, used to track delivery of the last 32 packets sent by the other party. The bit _i_ is set if a packet with `out_seq_no` equal to `in_seq_no`\\-_i_ has been received.\n\nThe higher 8 bits in `flags` are reserved for use by the lower-level protocol (the one which generates and interprets `raw_data`), and will never be used for future extensions of `decryptedDataBlock`.\n\nThe parameters `voice_call_id` and `proto` are mandatory until the other side confirms reception of at least one packet by sending a packet with a non-zero `in_seq_no`. After that, they become optional, and the `simpleDataBlock` constructor can be used if the lower level protocol wants to.\n\nThe parameter `voice_call_id` is computed from the key `key` and equals the lower 128 bits of its SHA-256.\n\nThe `random_bytes` string should contain at least 7 bytes of random data. The field `random_id` also contains 8 random bytes, which can be used as a unique packet identifier if necessary.\n\n### [](#mtproto-encryption)MTProto encryption\n\nOnce the data is encapsulated in `DecryptedDataBlock`, it is [TL-serialized](https://core.telegram.org/mtproto/TL) and encrypted with [MTProto](https://core.telegram.org/mtproto/description#defining-aes-key-and-initialization-vector), using `key` instead of `auth_key`; the parameter _x_ is to be set to _0_ for messages from _A_ to _B_, and to _8_ for messages in the opposite direction. Encrypted data are prepended by the 128-bit `msg_key` (usual for MTProto); before that, either the 128-bit `voice_call_id` (if P2P is used) or the `peer_tag` (if reflectors are used) is prepended. The resulting data packet is sent by UDP either directly to the other party (if P2P is possible) or to the Telegram relay servers (reflectors).\n\n## [](#key-verification)Key Verification\n\nTo verify the key, both parties concatenate the secret key _key_ with the value _g\\_a_ of the Caller ( _A_ ), compute SHA256 and use it to generate a sequence of emoticons. More precisely, the SHA256 hash is split into four 64-bit integers; each of them is divided by the total number of emoticons used (currently 333), and the remainder is used to select specific emoticons. The specifics of the protocol guarantee that comparing four emoticons out of a set of 333 is sufficient to prevent eavesdropping (MiTM attack on DH) with a probability of **0.9999999999**.\n\nThis is because instead of the standard Diffie-Hellman key exchange which requires only two messages between the parties:\n\n*   A->B : (generates a and) sends g\\_a := g^a\n*   B->A : (generates b and true key (g\\_a)^b, then) sends g\\_b := g^b\n*   A : computes key (g\\_b)^a\n\nwe use a **three-message modification** thereof that works well when both parties are online (which also happens to be a requirement for voice calls):\n\n*   A->B : (generates a and) sends g\\_a\\_hash := hash(g^a)\n*   B->A : (stores g\\_a\\_hash, generates b and) sends g\\_b := g^b\n*   A->B : (computes key (g\\_b)^a, then) sends g\\_a := g^a\n*   B : checks hash(g\\_a) == g\\_a\\_hash, then computes key (g\\_a)^b\n\nThe idea here is that _A_ commits to a specific value of _a_ (and of _g\\_a_) without disclosing it to _B_. _B_ has to choose its value of _b_ and _g\\_b_ without knowing the true value of _g\\_a_, so that it cannot try different values of _b_ to force the final key _(g\\_a)^b_ to have any specific properties (such as fixed lower 32 bits of SHA256(key)). At this point, _B_ commits to a specific value of _g\\_b_ without knowing _g\\_a_. Then _A_ has to send its value _g\\_a_; it cannot change it even though it knows _g\\_b_ now, because the other party _B_ would accept only a value of _g\\_a_ that has a hash specified in the very first message of the exchange.\n\nIf some impostor is pretending to be either _A_ or _B_ and tries to perform a Man-in-the-Middle Attack on this Diffie--Hellman key exchange, the above still holds. Party _A_ will generate a shared key with _B_ -- or whoever pretends to be _B_ -- without having a second chance to change its exponent _a_ depending on the value _g\\_b_ received from the other side; and the impostor will not have a chance to adapt his value of _b_ depending on _g\\_a_, because it has to commit to a value of _g\\_b_ before learning _g\\_a_. The same is valid for the key generation between the impostor and the party _B_.\n\nThe use of hash commitment in the DH exchange constrains the attacker to only **one guess** to generate the correct visualization in their attack, which means that using just over 33 bits of entropy represented by four emoji in the visualization is enough to make a successful attack highly improbable.\n\n> For a slightly more user-friendly explanation of the above see: [How are calls authenticated?](https://core.telegram.org/techfaq#q-how-are-voice-calls-authenticated)",
    "url": "https://core.telegram.org/api/end-to-end/voice-calls"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:30 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5906",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=171"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:29 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5906",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=170"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/end-to-end%2Fpfs",
      "title": "Perfect Forward Secrecy",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Perfect Forward Secrecy"
        },
        {
          "property": "og:description",
          "content": "Telegram supports Perfect Forward Secrecy (PFS) in Secret Chats as of Layer 20. See updating to new layers.\nIn order to\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:31 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4688",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Perfect Forward Secrecy\n\n> Telegram supports Perfect Forward Secrecy (PFS) in Secret Chats as of Layer 20. See [updating to new layers](https://core.telegram.org/api/end-to-end#updating-to-new-layers).\n\nIn order to keep past communications safe, official Telegram clients will initiate re-keying once a key has been used to decrypt and encrypt more than 100 messages, or has been in use for more than one week, provided the key has been used to encrypt at least one message. Old keys are then securely discarded and cannot be reconstructed, even with access to the new keys currently in use.\n\nAny client participating in a Secret Chat can initiate re-keying as soon as it perceives that the current key has been used for too long or for encrypting too many messages. Please note that you should never initiate a new instance of the re-keying protocol if an uncompleted instance exists, initiated by either party.\n\n**Note:** third-party developers are required to maintain the same level of security. All clients with secret chat support must be able to initiate re-keying and accept relevant service messages. See [Security Guidelines](https://core.telegram.org/mtproto/security_guidelines).\n\n### [](#re-keying-protocol)Re-keying protocol\n\nNew keys are generated by exchanging special messages, using previously established keys for encryption. The re-keying protocol between parties A and B normally consists of four steps:\n\n##### [](#1-decryptedmessageactionrequestkey)1\\. decryptedMessageActionRequestKey\n\nA (re-keying initiator) generates a new value of _a_, subject to the same limitations as for the [initial Diffie-Hellman key exchange](https://core.telegram.org/api/end-to-end#key-generation), and sends the value of _pow(g,a)_ to B, embedded in a [decryptedMessageService](https://core.telegram.org/constructor/decryptedMessageService):\n\n```\ndecryptedMessageActionRequestKey exchange_id:long g_a:string = DecryptedMessageAction;\n```\n\n*   _exchange\\_id_ is a random number identifying this instance of the Re-Keying Protocol for both parties\n*   _g\\_a_ is the value of _pow(g,a) mod p_\n\nNote that the same Diffie--Hellman parameters _(p,g)_ as for the initial Diffie--Hellman key exchange in this secret chat are used. They do not need to be re-transmitted explicitly.\n\n##### [](#2-decryptedmessageactionacceptkey)2\\. decryptedMessageActionAcceptKey\n\nUpon receipt of the above service message, B checks its content, and generates a response with same _exchange\\_id_, for a newly generated value of _b_:\n\n```\ndecryptedMessageActionAcceptKey exchange_id:long g_b:string key_fingerprint:long = DecryptedMessageAction;\n```\n\n*   _exchange\\_id_ is the same as in the received [decryptedMessageActionRequestKey](https://core.telegram.org/constructor/decryptedMessageActionRequestKey)\n*   _g\\_b_ is the value of _pow(g,b) mod p_\n*   _key\\_fingerprint_ is the 64-bit fingerprint of the newly generated _key = pow(g\\_a, b) mod p_, used as a sanity check of the implementation\n\nAt this stage, B can already compute the new key _key_ = _pow(g\\_a, b) mod p_ and its _key\\_fingerprint_ (last 64 bits of its SHA-1). However, it continues using the previous key until the completion of the exchange.\n\nOnce side B sends [decryptedMessageActionAcceptKey](https://core.telegram.org/constructor/decryptedMessageActionAcceptKey), it cannot abort the key exchange; it must be ready to switch to the new key immediately after a `decryptedMessageActionCommitKey` is received. Therefore, if side B wishes to delay the usage of new key, for example in order to fill some seq\\_no gaps first, it must delay the `decryptedMessageActionAcceptKey` answer accordingly.\n\n##### [](#3-decryptedmessageactioncommitkey)3\\. decryptedMessageActionCommitKey\n\nOnce A receives a valid `decryptedMessageActionAcceptKey`, it performs all necessary checks, and \"commits\" the new key by means of the following service message:\n\n```\ndecryptedMessageActionCommitKey exchange_id:long key_fingerprint:long = DecryptedMessageAction;\n```\n\n*   _exchange\\_id_ is the same as in the two previous messages\n*   _key\\_fingerprint_ is the value of the hash (last 64 bits of SHA-1) of the new key computed by A, for implementation sanity check\n\nAfter that, A can (and must) encrypt all following messages with the new key.\n\nIf side A wishes to delay installation of the new key, for example because there are some seq\\_no gaps that it wants to fill first, it must delay [decryptedMessageActionCommitKey](https://core.telegram.org/constructor/decryptedMessageActionCommitKey) answer accordingly.\n\n##### [](#4-final-step)4\\. Final step\n\nWhen B receives either a `decryptedMessageActionCommitKey` or a message encrypted by the new key, recognized by the value of _key\\_fingerprint_ prepended to the encrypted message (it may happen that the `decryptedMessageActionCommitKey` has been lost and will be re-requested later), it assumes that A has started using the new key for encryption, and does the same.\n\nHowever, the previous key may be kept until there are no gaps in received messages up to the switch to the new key. Once all the gaps have been filled, the old key must be securely discarded.\n\nThere is one exception to this rule \u2014\u00a0the SHA-1 of the original key (generated during the establishment of Secret Chat in question) is always stored, in order to show [key visualizations](#key-visualization) on the clients.\n\n#### [](#aborting-protocol)Aborting protocol\n\nAny of the parties may abort any instance of an uncompleted re-keying protocol, unless `decryptedMessageActionCommitKey` or `decryptedMessageActionAcceptKey` has been already sent by the party in question. In order to abort re-keying, send\n\n```\ndecryptedMessageActionAbortKey exchange_id:long = DecryptedMessageAction;\n```\n\nThis could be done, for example, if the party is already participating in a different instance of the re-keying protocol, or if the received values of _g\\_a_, _g\\_b_ and other parameters do not pass security checks. In the latter case, it might be advisable to abort the Secret Chat altogether.\n\n#### [](#discarding-previous-keys)Discarding Previous Keys\n\nOnce B receives `decryptedMessageActionCommitKey`, it can safely discard the previous key provided there are no gaps. However, A may only discard the previous key after a message encrypted with the new key has been received. If no ordinary messages are scheduled to be sent, a special [no-op message](https://core.telegram.org/constructor/decryptedMessageActionNoop) should sent by B for this purpose:\n\n```\ndecryptedMessageActionNoop = DecryptedMessageAction;\n```\n\n#### [](#concurrent-re-keying)Concurrent Re-Keying\n\nIt may happen that both parties concurrently initiate re-keying by sending `decryptedMessageActionRequestKey` without knowing that the other party has already done so. If each side aborts re-keying because it is already participating in another instance of the protocol initiated by itself, the re-keying will never happen.\n\nBecause of this possibility, we suggest that only the instance with the smaller _exchange\\_id_ is aborted, with the option to re-use its _(a,g\\_a)_ for the re-keying protocol instance with the larger _exchange\\_id_ (when compared as a `long`, i.e. signed little-endian 64-bit integer).\n\nIn other words, if a `decryptedMessageActionRequestKey` is received after A has sent its `decryptedMessageActionRequestKey`, but has not yet received `decryptedMessageActionAcceptKey`, the following is to be done:\n\n*   if _exchange\\_id_ in the sent `decryptedMessageActionRequestKey` was larger than that in the `decryptionActionRequestKey` just received, abort the newly-suggested re-keying protocol instance without sending explicit [decryptedMessageActionAbortKey](https://core.telegram.org/constructor/decryptedMessageActionAbortKey) (the other side will do the same according to the next rule).\n*   if _exchange\\_id_ in our `decryptedMessageActionRequestKey` was smaller, respond to the newly-received `decryptedMessageActionRequestKey` with a `decryptedMessageActionAcceptKey`, and participate only in the re-keying protocol instance initiated by the other side. It is possible to re-use at this stage the value of _g\\_a_ (now called _g\\_b_) that was generated for the original `decryptedMessageActionRequestKey`, now abandoned, or totally new _(b,g\\_b)_ can be generated.\n*   in the unlikely (2^{-64}) case both _exchange\\_id_ are equal, abort both instances without sending an explicit `decryptedMessageActionAbortKey`. The other side will do the same.\n\n##### [](#key-visualization)Key Visualization\n\nSince all re-keying instances are carried over the secure channel established when the secret chat is created, it is necessary for the user to confirm that no MITM attack had taken place during the initial exchange. The key visualization on the clients uses the first 128-bits of the SHA-1 of the original key created when the Secret Chat was first established, followed by the first 160 bits of the SHA-256 of the key in use when the secret chat was updated to layer 46 (coincides with the original key if chat was created using layer 46).\n\n> Please note that the _key\\_fingerprint_ parameter was introduced as a maintenance tool (with a misleading name) and is **not** related to key visualization on the clients.",
    "url": "https://core.telegram.org/api/end-to-end%2Fpfs"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/bots%2Freferrals",
      "title": "Affiliate programs",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Affiliate programs"
        },
        {
          "property": "og:description",
          "content": "Developers can open affiliate programs for their mini app \u2013 allowing content creators, other mini app developers and any Telegram user to promote it and earn commissions on purchases made by people they referred."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:32 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5757",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Affiliate programs\n\nDevelopers can open affiliate programs for their [mini app](https://core.telegram.org/api/bots/webapps) \u2013 allowing **content creators**, other **mini app developers** and **any Telegram user** to promote it and earn commissions on purchases made by people they referred.\n\n### [](#creating-an-affiliate-program)Creating an affiliate program\n\n```\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\nstarsAmount#bbb6b4a3 amount:long nanos:int = StarsAmount;\nstarRefProgram#dd0c66f2 flags:# bot_id:long commission_permille:int duration_months:flags.0?int end_date:flags.1?int daily_revenue_per_user:flags.2?StarsAmount = StarRefProgram;\n\n---functions---\n\nbots.getAdminedBots#b0711d83 = Vector<User>;\n\nbots.updateStarRefProgram#778b5ab3 flags:# bot:InputUser commission_permille:int duration_months:flags.0?int = StarRefProgram;\n```\n\nA mini app developer can invoke [bots.updateStarRefProgram](https://core.telegram.org/method/bots.updateStarRefProgram) to create, edit or delete the [affiliate program](https://telegram.org/tour/affiliate-programs) of [mini apps \u00bb](https://core.telegram.org/api/bots/webapps) they own.  \nOwned bots can be fetched using [bots.getAdminedBots](https://core.telegram.org/method/bots.getAdminedBots), or by checking the `bot_can_edit` flag of the associated [user](https://core.telegram.org/constructor/user).\n\nIf the `bot_can_edit` flag is set, graphical clients should display an \"Affiliate program\" option when editing the bot's profile, that can be used to create and edit the bot's affiliate program.  \nNote that all UI elements and functionality related to the creation of affiliate programs by bot owners must be hidden and disabled if the [`starref_program_allowed` client configuration parameter \u00bb](https://core.telegram.org/api/config#starref-program-allowed) is set and equal to false.\n\nWhen invoking [bots.updateStarRefProgram](https://core.telegram.org/method/bots.updateStarRefProgram), pass the following parameters:\n\n*   The `bot` parameter must contain the ID of the bot that owns the [mini app](https://core.telegram.org/api/bots/webapps).\n*   The `commission_permille` parameter specifies the permille commission rate: it indicates the share of Telegram Stars received by affiliates for every transaction made by users they referred inside of the mini app.  \n    The minimum and maximum values for this parameter are contained in the [starref\\_min\\_commission\\_permille](https://core.telegram.org/api/config#starref-min-commission-permille) and [starref\\_max\\_commission\\_permille](https://core.telegram.org/api/config#starref-max-commission-permille) client configuration parameters.\n*   The `duration_months` can be optionally populated, indicating the duration of the affiliate program; if not set, there is no expiration date.\n\nBoth the duration and the commission may only be raised after creation of the program: to lower them, the program must first be terminated and a new one created.\n\nTo end an affiliate program, pass `0` to `commission_permille`: around 24 hours after invoking the method (specifically, exactly at the time specified in [userFull](https://core.telegram.org/constructor/userFull).`starref_program`.`end_date`), the program will be terminated, invalidating all [created affiliate links](#becoming-an-affiliate).  \nA new affiliate program can only be created after termination of the current one (after [userFull](https://core.telegram.org/constructor/userFull).`starref_program`.`end_date`); invoking the method before the end\\_date will emit a `STARREF_AWAITING_END` RPC error.  \nNote that after termination, affiliates will still retain all commissions they earned before the program was terminated. Additionally, future purchases by users who were referred by affiliates that joined while the program was active will continue generating commissions for those affiliates until their originally specified commission period has elapsed.\n\nIf a bot has an active affiliate program, the [userFull](https://core.telegram.org/constructor/userFull).`starref_program` flag will be set, containing info about the referral program.  \nMini apps, channel owners and simple users can join the referral program as specified [here \u00bb](#becoming-an-affiliate).\n\n### [](#becoming-an-affiliate)Becoming an affiliate\n\n```\nstarsAmount#bbb6b4a3 amount:long nanos:int = StarsAmount;\nstarRefProgram#dd0c66f2 flags:# bot_id:long commission_permille:int duration_months:flags.0?int end_date:flags.1?int daily_revenue_per_user:flags.2?StarsAmount = StarRefProgram;\n\nuserFull#979d2376 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true voice_messages_forbidden:flags.20?true translations_disabled:flags.23?true stories_pinned_available:flags.26?true blocked_my_stories_from:flags.27?true wallpaper_overridden:flags.28?true contact_require_premium:flags.29?true read_dates_private:flags.30?true flags2:# sponsored_enabled:flags2.7?true can_view_revenue:flags2.9?true bot_can_manage_emoji_status:flags2.10?true id:long about:flags.1?string settings:PeerSettings personal_photo:flags.21?Photo profile_photo:flags.2?Photo fallback_photo:flags.22?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int ttl_period:flags.14?int theme_emoticon:flags.15?string private_forward_name:flags.16?string bot_group_admin_rights:flags.17?ChatAdminRights bot_broadcast_admin_rights:flags.18?ChatAdminRights premium_gifts:flags.19?Vector<PremiumGiftOption> wallpaper:flags.24?WallPaper stories:flags.25?PeerStories business_work_hours:flags2.0?BusinessWorkHours business_location:flags2.1?BusinessLocation business_greeting_message:flags2.2?BusinessGreetingMessage business_away_message:flags2.3?BusinessAwayMessage business_intro:flags2.4?BusinessIntro birthday:flags2.5?Birthday personal_channel_id:flags2.6?long personal_channel_message:flags2.6?int stargifts_count:flags2.8?int starref_program:flags2.11?StarRefProgram = UserFull;\n\npayments.suggestedStarRefBots#b4d5d859 flags:# count:int suggested_bots:Vector<StarRefProgram> users:Vector<User> next_offset:flags.0?string = payments.SuggestedStarRefBots;\n\nconnectedBotStarRef#19a13f71 flags:# revoked:flags.1?true url:string date:int bot_id:long commission_permille:int duration_months:flags.0?int participants:long revenue:long = ConnectedBotStarRef;\n\npayments.connectedStarRefBots#98d5ea1d count:int connected_bots:Vector<ConnectedBotStarRef> users:Vector<User> = payments.ConnectedStarRefBots;\n\n---functions---\n\npayments.getSuggestedStarRefBots#0d6b48f7 flags:# order_by_revenue:flags.0?true order_by_date:flags.1?true peer:InputPeer offset:string limit:int = payments.SuggestedStarRefBots;\n\npayments.connectStarRefBot#7ed5348a peer:InputPeer bot:InputUser = payments.ConnectedStarRefBots;\n\npayments.getConnectedStarRefBots#5869a553 flags:# peer:InputPeer offset_date:flags.2?int offset_link:flags.2?string limit:int = payments.ConnectedStarRefBots;\npayments.getConnectedStarRefBot#b7d998f0 peer:InputPeer bot:InputUser = payments.ConnectedStarRefBots;\n\npayments.editConnectedStarRefBot#e4fca4a3 flags:# revoked:flags.0?true peer:InputPeer link:string = payments.ConnectedStarRefBots;\n```\n\n[Mini apps](https://core.telegram.org/api/bots/webapps) with the [userFull](https://core.telegram.org/constructor/userFull).`starref_program` flag set have affiliate programs that the user may join, becoming an affiliate.  \nAn affiliate gets a commission of [starRefProgram](https://core.telegram.org/constructor/starRefProgram).`commission_permille`\u2030 [Telegram Stars](https://core.telegram.org/api/stars) for every mini app transaction made by users they refer, for `duration_months` months after your referral link is imported by any user, earning an estimated `daily_revenue_per_user * commission_permille / 1000` stars per day per referred user.\n\nUsers may obtain a list of suggested [mini apps](https://core.telegram.org/api/bots/webapps) with available affiliate programs using [payments.getSuggestedStarRefBots](https://core.telegram.org/method/payments.getSuggestedStarRefBots).\n\nTo become an affiliate, invoke [payments.connectStarRefBot](https://core.telegram.org/method/payments.connectStarRefBot), passing to `bot` the identifier of the mini app that we want to affiliate with, and to `peer` the affiliate peer, either:\n\n*   The current user ([inputPeerSelf](https://core.telegram.org/constructor/inputPeerSelf))\n*   A bot we own (one of the bots returned by [bots.getAdminedBots](https://core.telegram.org/method/bots.getAdminedBots))\n*   A channel we own (one of the channels returned by [channels.getAdminedPublicChannels](https://core.telegram.org/method/channels.getAdminedPublicChannels), locally filtering out only [channels](https://core.telegram.org/constructor/channel) with the `post_messages` [admin right](https://core.telegram.org/api/rights))\n\nThis will create a [referral link](https://core.telegram.org/api/links#referral-links) for the mini app passed in `bot`: the link will be contained in the `url` field of the returned [connectedBotStarRef](https://core.telegram.org/constructor/connectedBotStarRef) constructor.\n\nThese links can then be shared (responsibly): any Telegram user who starts the mini app for the first time after following a referral link will be considered a successful referral \u2013 and any purchases they make with Telegram Stars within the mini app will earn us commissions (as specified above), transferring [Stars](https://core.telegram.org/api/stars) to the star balance of the affiliate passed to `peer`.\n\nUse [payments.getConnectedStarRefBots](https://core.telegram.org/method/payments.getConnectedStarRefBots) to fetch all affiliations we have created for a certain affiliate `peer`.  \nUse [payments.getConnectedStarRefBot](https://core.telegram.org/method/payments.getConnectedStarRefBot) to fetch info about a specific affiliation we have created for a certain affiliate `peer` with a certain `bot`.  \nUse [payments.editConnectedStarRefBot](https://core.telegram.org/method/payments.editConnectedStarRefBot) to revoke an affiliation for a specific affiliate `peer`, revoking the specified [referral link \u00bb](https://core.telegram.org/api/links#referral-links) ([connectedBotStarRef](https://core.telegram.org/constructor/connectedBotStarRef).`url`).\n\nNote that all UI elements that would allow the user to join affiliate programs and becoming an affiliate must be hidden and disabled if the [`starref_connect_allowed` client configuration parameter \u00bb](https://core.telegram.org/api/config#starref-connect-allowed) is set and equal to false.\n\n### [](#importing-an-affiliate-link)Importing an affiliate link\n\n```\n---functions---\n\ncontacts.resolveUsername#725afbbc flags:# username:string referer:flags.0?string = contacts.ResolvedPeer;\n```\n\nWhen clicking on a [referral link \u00bb](https://core.telegram.org/api/links#referral-links), created by an affiliated user, channel or mini app as [specified here \u00bb](#becoming-an-affiliate), the `referrer` parameter must be passed to the `referer` parameter of [contacts.resolveUsername](https://core.telegram.org/method/contacts.resolveUsername).\n\nWhen opening [referral links \u00bb](https://core.telegram.org/api/links#referral-links), [contacts.resolveUsername](https://core.telegram.org/method/contacts.resolveUsername) must be **always** invoked, even if the client already has a cached [Peer](https://core.telegram.org/type/Peer) for the associated `username`.\n\nIf a `STARREF_EXPIRED` RPC error is returned by the method, an error indicating that the passed referral link is invalid must be shown to the user.",
    "url": "https://core.telegram.org/api/bots%2Freferrals"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/bots/ids",
      "title": "Bot API dialog IDs",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Bot API dialog IDs"
        },
        {
          "property": "og:description",
          "content": "How to convert MTProto peer IDs to bot API dialog IDs and vice versa."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:32 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "2925",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Bot API dialog IDs\n\nThe `id` field of [peers\u00a0\u00bb](https://core.telegram.org/api/peers) (i.e. users, chats, channels, secret chats) contain four distinct sequences of unique 64-bit IDs used to identify a specific user, chat, channel or secret chat.\n\nThe ID sequences of users, chats, channels and secret chats **overlap**, so it is a good idea to transform the peer IDs to bot API dialog IDs as specified below.\n\nA bot API dialog ID is a single, unique 64-bit peer ID sequence derived from the user, chat, channel and secret chat ID sequences, maintaining uniqueness across all of them.  \nBot API dialog IDs are already used in the [bot API](https://core.telegram.org/bots/api) and in the underlying [tdlib](https://github.com/tdlib/td) library to identify peers.\n\nAs specified above, a bot API dialog ID may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But, thanks to the ranges of the underlying MTProto IDs (specified below), it has at most 52 significant bits, so a 64-bit integer or even a double-precision float type are safe for storing this identifier.\n\nMore specifically, a bot API dialog ID ranges from `-2002147483648` to `1099511627775`.\n\nIt's a good idea to transform peer IDs to bot dialog API IDs even if you do decide to use separate databases to [store info about peers](https://core.telegram.org/api/peers), as it will make IDs more visually recognizable both for you and your users, as well as guarantee compatibility with the bot API, and allow your client to easily identify the type of a peer just by using its ID, thanks to the range checks specified below.\n\nExample implementation: [tdlib (bot API)](https://github.com/tdlib/td/blob/cb164927417f22811c74cd8678ed4a5ab7cb80ba/td/telegram/DialogId.cpp), [MadelineProto](https://github.com/danog/tg-dialog-id).\n\n### [](#user-ids)User IDs\n\n[User](https://core.telegram.org/constructor/user) IDs in the MTProto API range from `1` to `0xffffffffff` (inclusive).\n\nMTProto user IDs are equal to bot API user dialog IDs and vice versa, you don't have to do anything to convert them, except validate that they fall within the range specified above.\n\n```\n$botApiUserId = $userId;\n$userId = $botApiUserId;\n```\n\n### [](#chat-ids)Chat IDs\n\n[Chat](https://core.telegram.org/constructor/chat) IDs in the MTProto API range from `1` to `999999999999` (inclusive).\n\nTo convert MTProto chat IDs to bot API chat dialog IDs, make them negative (and vice versa).\n\nBefore conversion, always validate that they fall within the range specified above (appropriately transformed for bot API chat dialog IDs, i.e. `-999999999999` to `-1` inclusively).\n\n```\n$botApiChatId = -$chatId;\n$chatId = -$botApiChatId;\n```\n\n### [](#supergroup-channel-ids)Supergroup/channel IDs\n\n[Supergroup/channel](https://core.telegram.org/constructor/channel) IDs share the same sequence in the MTProto API, and they range from `1` to `997852516352` (inclusive).\n\nTo convert MTProto channel IDs to bot API channel dialog IDs, add `1000000000000` and make them negative (and vice versa).\n\nBefore conversion, always validate that they fall within the range specified above (appropriately transformed for bot API channel dialog IDs, i.e. `-1997852516352` to `-1000000000001` inclusively).\n\n```\n$botApiChannelId = -(1000000000000 + $channelId);\n$channelId = -$botApiChannelId - 1000000000000;\n```\n\n### [](#secret-chat-ids)Secret chat IDs\n\n[Secret chat IDs](https://core.telegram.org/api/end-to-end) in the MTProto API range from `-2147483648` to `2147483647` (inclusive, treat the secret chat ID as a signed little-endian 32-bit integer).\n\nTo convert MTProto chat IDs to bot API chat secret chat IDs, subtract `2000000000000`.\n\nBefore conversion, always validate that they fall within the range specified above (appropriately transformed for bot API secret chat dialog IDs, i.e. `-2002147483648` to `-1997852516353` inclusively).\n\n```\n$botApiSecretChatId = $secretChatId - 2000000000000;\n$secretChatId = $botApiSecretChatId + 2000000000000;\n```\n\nNote: while the official instance of the bot API does not support secret chats, the underlying [tdlib](https://github.com/tdlib/td/) library does support them, and uses the format mentioned above for secret chat IDs.",
    "url": "https://core.telegram.org/api/bots/ids"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/terms#3-advertising-amp-monetization",
      "title": "Telegram API Terms of Service",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Telegram API Terms of Service"
        },
        {
          "property": "og:description",
          "content": "We welcome all developers to use our API and source code to create Telegram-like messaging applications on our platform\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:31 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3040",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Telegram API Terms of Service\n\nWe welcome all developers to use our API and source code to [create Telegram-like messaging applications](https://core.telegram.org/api/obtaining_api_id) on our platform free of charge. In order to ensure consistency and security across the Telegram ecosystem, all third-party client apps must comply with the following Terms of Service.\n\n#### [](#1-privacy-amp-security)1\\. Privacy & Security\n\n**1.1.** Telegram is a privacy-oriented platform. All client apps must, therefore, guard their users' privacy with utmost care and comply with our [Security Guidelines](https://core.telegram.org/mtproto/security_guidelines).  \n**1.2.** Developers are welcome to add new features or improve and extend existing Telegram features provided that these modifications do not violate these Terms of Service.  \n**1.3.** As a client developer, you must make sure that all the basic features of the main Telegram apps function correctly and in an expected way both in your app and when users of your app communicate with other Telegram users. It is forbidden to force users of other Telegram clients to download your app in order to view certain messages and content sent using your app.  \n**1.4.** It is forbidden to interfere with the basic functionality of Telegram. This includes but is not limited to: making actions on behalf of the user without the user's knowledge and consent, preventing self-destructing content from disappearing, preventing last seen and online statuses from being displayed correctly, tampering with the 'read' statuses of messages (e.g. implementing a 'ghost mode'), preventing typing statuses from being sent/displayed, etc.\n\n#### [](#2-transparency)2\\. Transparency\n\n**2.1.** You must [obtain your own api\\_id](https://core.telegram.org/api/obtaining_api_id#obtaining-api-id) for your application.  \n**2.2.** We offer our API free of charge, but your users must be aware of the fact that your app uses the Telegram API and is part of the Telegram ecosystem. This fact must be featured prominently in the app's description in the app stores and in the in-app intro if your app has it.  \n**2.3.** To avoid confusion, the title of your app must not include the word \u201cTelegram\u201d. An exception can be made if the word \u201cTelegram\u201d is preceded with the word \u201cUnofficial\u201d in the title.  \n**2.4.** You must not use the official Telegram logo for your app. Both the Telegram brand and its logo are registered trademarks protected by law in almost every country.\n\n#### [](#3-advertising-amp-monetization)3\\. Advertising & Monetization\n\n**3.1.** Developers are allowed to monetize their coding efforts through advertising or other legitimate means.  \n**3.2.** If you decide to monetize your app, you must clearly mention all the methods of monetization that are used in your app in all its app store descriptions.  \n**3.3.** If your app allows accessing content from Telegram [channels](https://telegram.org/tour/channels), you must include support for [official sponsored messages](https://core.telegram.org/api/sponsored-messages) in Telegram channels and may not interfere with this functionality.\n\n#### [](#4-breach-of-terms)4\\. Breach of terms\n\n**4.1.** If your app violates these terms, we will notify the Telegram account responsible for the app about the breach of terms.  \n**4.2.** If you do not update the app to fix the highlighted issues within **10** days, we will have to discontinue your access to Telegram API and contact the app stores about the removal of your apps that are using the Telegram API in violation of these terms.\n\nWe reserve the right to expand these terms and guidelines as the need arises. We will inform client developers of such changes via an in-app notification to their accounts connected to the app in question.\n\n> [Back to Creating Your Telegram Application \u00bb](https://core.telegram.org/api/obtaining_api_id)",
    "url": "https://core.telegram.org/api/terms"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/bots%2Fattach",
      "title": "Bot attachment menu and side menu entries",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Bot attachment menu and side menu entries"
        },
        {
          "property": "og:description",
          "content": "Bots can install attachment menu and side menu entries, offering conveniently accessible, versatile web apps."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:33 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3937",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Bot attachment menu and side menu entries\n\nBots can install attachment menu and side menu entries, offering conveniently accessible, versatile [mini apps](https://core.telegram.org/api/bots/webapps#attachment-menu-mini-apps).\n\nSchema:\n\n```\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\nattachMenuBotsBot#93bf667f bot:AttachMenuBot users:Vector<User> = AttachMenuBotsBot;\n\nattachMenuBot#d90d8dfe flags:# inactive:flags.0?true has_settings:flags.1?true request_write_access:flags.2?true show_in_attach_menu:flags.3?true show_in_side_menu:flags.4?true side_menu_disclaimer_needed:flags.5?true bot_id:long short_name:string peer_types:flags.3?Vector<AttachMenuPeerType> icons:Vector<AttachMenuBotIcon> = AttachMenuBot;\n\nattachMenuPeerTypeSameBotPM#7d6be90e = AttachMenuPeerType;\nattachMenuPeerTypeBotPM#c32bfa1a = AttachMenuPeerType;\nattachMenuPeerTypePM#f146d31f = AttachMenuPeerType;\nattachMenuPeerTypeChat#509113f = AttachMenuPeerType;\nattachMenuPeerTypeBroadcast#7bfbdefc = AttachMenuPeerType;\n\nattachMenuBotIcon#b2a7386b flags:# name:string icon:Document colors:flags.0?Vector<AttachMenuBotIconColor> = AttachMenuBotIcon;\n\nattachMenuBotIconColor#4576f3f0 name:string color:int = AttachMenuBotIconColor;\n\n\nupdateAttachMenuBots#17b7a20b = Update;\n\nattachMenuBotsNotModified#f1d88a5c = AttachMenuBots;\nattachMenuBots#3c4301c0 hash:long bots:Vector<AttachMenuBot> users:Vector<User> = AttachMenuBots;\n\n\n---functions---\n\nmessages.getAttachMenuBot#77216192 bot:InputUser = AttachMenuBotsBot;\n\nmessages.toggleBotInAttachMenu#69f59d69 flags:# write_allowed:flags.0?true bot:InputUser enabled:Bool = Bool;\n\nmessages.getAttachMenuBots#16fcc2cb hash:long = AttachMenuBots;\n```\n\nBots that have the `bot_attach_menu` flag set offer an attachment or side menu entry that can be added to the in-app attachment menu or main view side menu.\n\nUse [messages.getAttachMenuBot](https://core.telegram.org/method/messages.getAttachMenuBot) to get info about the attachment/side menu entry of a given bot, see the [attachMenuBot constructor page for more info\u00a0\u00bb](https://core.telegram.org/constructor/attachMenuBot).\n\nThe currently installed attachment/side menu list can be fetched using [messages.getAttachMenuBots](https://core.telegram.org/method/messages.getAttachMenuBots).\n\nUse [messages.toggleBotInAttachMenu](https://core.telegram.org/method/messages.toggleBotInAttachMenu) to enable or disable the attachment and/or side menu of a given bot (the entries that must be installed or uninstalled depend on the values of the [attachMenuBot](https://core.telegram.org/constructor/attachMenuBot).`show_in_attach_menu` and [attachMenuBot](https://core.telegram.org/constructor/attachMenuBot).`show_in_side_menu` flags).  \nChanges made using this method will trigger an [updateAttachMenuBots](https://core.telegram.org/constructor/updateAttachMenuBots) update in other clients, which should trigger a [messages.getAttachMenuBots](https://core.telegram.org/method/messages.getAttachMenuBots) call to fetch the full updated list of installed attachment/side menu entries.  \nThe attachment/side menu list should also be refreshed if the user changes the app's language in the settings.\n\nOnce an attachment/side menu is enabled for a certain user, the [user](https://core.telegram.org/constructor/user).`attach_menu_enabled` flag will be set _for the bot_, and the [attachMenuBot](https://core.telegram.org/constructor/attachMenuBot).`inactive` flag will be unset.\n\nClicking on the attachment/side menu entry should open the related [attachment menu mini app](https://core.telegram.org/api/bots/webapps#attachment-menu-mini-apps), see [here\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#attachment-menu-mini-apps) and [here\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#side-menu-mini-apps) for more info on the required steps.\n\nAttachment menus can be installed and opened through [attachment/side menu deep links](https://core.telegram.org/api/links#bot-attachment-or-side-menu-links).\n\nIn particular, when clicking on such a link, [messages.getAttachMenuBot](https://core.telegram.org/method/messages.getAttachMenuBot) should be invoked to check if the bot has an associated attachment/side menu entry, and if yes:\n\n*   If the [attachMenuBot](https://core.telegram.org/constructor/attachMenuBot).`inactive` flag:\n    *   ...is set, the attachment/side menu entry is not installed.  \n        Thus, before launching the mini app when clicking on a [attachment/side menu deep link](https://core.telegram.org/api/links#bot-attachment-or-side-menu-links), the client should show a prompt to the user, asking to add the mini app to the attachment/side menu.  \n        Note that if the [attachMenuBot](https://core.telegram.org/constructor/attachMenuBot).`side_menu_disclaimer_needed` flag is set, an additional mandatory checkbox to accept the [mini apps TOS](https://telegram.org/tos/mini-apps) and a disclaimer indicating that this Mini App is not affiliated to Telegram should be shown in the installation prompt.  \n        If the user accepts, invoke [messages.toggleBotInAttachMenu](https://core.telegram.org/method/messages.toggleBotInAttachMenu) with the `write_allowed` flag set and proceed to the next step, otherwise abort the process.\n    *   ...is not set, and the [attachMenuBot](https://core.telegram.org/constructor/attachMenuBot).`side_menu_disclaimer_needed` flag is still set, an additional mandatory checkbox to accept the [mini apps TOS](https://telegram.org/tos/mini-apps) and a disclaimer indicating that this Mini App is not affiliated to Telegram should be shown.  \n        If the user accepts, proceed to the next step, otherwise abort the process.\n*   Open the Mini App:\n    *   If the link is a [direct mini app link](https://core.telegram.org/api/links#direct-mini-app-links), open the Mini App regardless of the currently open Telegram chat (in fact, the Mini App should opened even if the client itself is minimized), as specified [here\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#direct-link-mini-apps).\n    *   For [attachment/side menu links](https://core.telegram.org/api/links#bot-attachment-or-side-menu-links), check that the attachment menu can be opened in the chosen chat type by checking the [attachMenuBot](https://core.telegram.org/constructor/attachMenuBot).`peer_types` field.\n        *   If the chosen chat is supported, open the [attachment menu mini app\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#attachment-menu-mini-apps) as specified [here\u00a0\u00bb](https://core.telegram.org/api/bots/webapps#attachment-menu-mini-apps).\n        *   Otherwise:\n            *   If the user has just installed the attachment menu @ step 1, notify the user that the attachment menu was installed successfully.\n            *   Otherwise, notify the user that the attachment menu webapp can't be opened in the specified chat.",
    "url": "https://core.telegram.org/api/bots%2Fattach"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/bots%2Fbuttons",
      "title": "Buttons",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Buttons"
        },
        {
          "property": "og:description",
          "content": "Users can interact with your bot via buttons or even inline buttons, straight from inline messages in any chat."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:34 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "6708",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Buttons\n\nUsers can interact with your bot via **buttons** or even **inline buttons**, straight from inline **messages** in **any** chat.  \nThis article describes the full button flow, using the MTProto API.\n\nFor a simplified description using the HTTP bot API, see [here\u00a0\u00bb](https://core.telegram.org/bots/features#keyboards).\n\n### [](#buttons)Buttons\n\n```\nkeyboardButton#a2fa4880 text:string = KeyboardButton;\nkeyboardButtonUrl#258aff05 text:string url:string = KeyboardButton;\nkeyboardButtonCallback#35bbdb6b flags:# requires_password:flags.0?true text:string data:bytes = KeyboardButton;\nkeyboardButtonRequestPhone#b16a6c29 text:string = KeyboardButton;\nkeyboardButtonRequestGeoLocation#fc796b3f text:string = KeyboardButton;\nkeyboardButtonSwitchInline#93b9fbb5 flags:# same_peer:flags.0?true text:string query:string peer_types:flags.1?Vector<InlineQueryPeerType> = KeyboardButton;\nkeyboardButtonGame#50f41ccf text:string = KeyboardButton;\nkeyboardButtonBuy#afd93fbb text:string = KeyboardButton;\nkeyboardButtonUrlAuth#10b78d29 flags:# text:string fwd_text:flags.0?string url:string button_id:int = KeyboardButton;\ninputKeyboardButtonUrlAuth#d02e7fd4 flags:# request_write_access:flags.0?true text:string fwd_text:flags.1?string url:string bot:InputUser = KeyboardButton;\nkeyboardButtonRequestPoll#bbc7515d flags:# quiz:flags.0?Bool text:string = KeyboardButton;\ninputKeyboardButtonRequestPeer#c9662d05 flags:# name_requested:flags.0?true username_requested:flags.1?true photo_requested:flags.2?true text:string button_id:int peer_type:RequestPeerType max_quantity:int = KeyboardButton;\n\nkeyboardButtonRow#77608b83 buttons:Vector<KeyboardButton> = KeyboardButtonRow;\n\nreplyKeyboardHide#a03e5b85 flags:# selective:flags.2?true = ReplyMarkup;\nreplyKeyboardForceReply#86b40b08 flags:# single_use:flags.1?true selective:flags.2?true placeholder:flags.3?string = ReplyMarkup;\nreplyKeyboardMarkup#85dd99d1 flags:# resize:flags.0?true single_use:flags.1?true selective:flags.2?true persistent:flags.4?true rows:Vector<KeyboardButtonRow> placeholder:flags.3?string = ReplyMarkup;\nreplyInlineMarkup#48a30254 rows:Vector<KeyboardButtonRow> = ReplyMarkup;\n\nmessage#94345242 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true from_scheduled:flags.18?true legacy:flags.19?true edit_hide:flags.21?true pinned:flags.24?true noforwards:flags.26?true invert_media:flags.27?true flags2:# offline:flags2.1?true video_processing_pending:flags2.4?true id:int from_id:flags.8?Peer from_boosts_applied:flags.29?int peer_id:Peer saved_peer_id:flags.28?Peer fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?long via_business_bot_id:flags2.0?long reply_to:flags.3?MessageReplyHeader date:int message:string media:flags.9?MessageMedia reply_markup:flags.6?ReplyMarkup entities:flags.7?Vector<MessageEntity> views:flags.10?int forwards:flags.10?int replies:flags.23?MessageReplies edit_date:flags.15?int post_author:flags.16?string grouped_id:flags.17?long reactions:flags.20?MessageReactions restriction_reason:flags.22?Vector<RestrictionReason> ttl_period:flags.25?int quick_reply_shortcut_id:flags.30?int effect:flags2.2?long factcheck:flags2.3?FactCheck = Message;\n\n---functions---\n\nmessages.sendMessage#983f9745 flags:# no_webpage:flags.1?true silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\n```\n\nBots can attach a [ReplyMarkup](https://core.telegram.org/type/ReplyMarkup) constructor to outgoing messages, to attach an [inline keyboard](https://core.telegram.org/bots/features#inline-keyboards) or a [custom reply keyboard](https://core.telegram.org/bots/features#keyboards):\n\n*   [replyKeyboardMarkup](https://core.telegram.org/constructor/replyKeyboardMarkup) - Sends a [custom reply keyboard](https://core.telegram.org/bots/features#keyboards).  \n    User clients receiving such a constructor should display a [special keyboard](https://core.telegram.org/bots/features#keyboards) with custom reply options.\n*   [replyKeyboardHide](https://core.telegram.org/constructor/replyKeyboardHide) - Hides the [custom reply keyboard](https://core.telegram.org/bots/features#keyboards).  \n    User clients receiving this constructor should hide the [custom reply keyboard](https://core.telegram.org/bots/features#keyboards) opened by [replyKeyboardMarkup](https://core.telegram.org/constructor/replyKeyboardMarkup)\n*   [replyKeyboardForceReply](https://core.telegram.org/constructor/replyKeyboardForceReply) - Sends a [force reply](https://core.telegram.org/bots/api#forcereply) constructor  \n    User clients receiving a message with this constructor should act as if the user had clicked on the reply button of the message, displaying the reply UI.\n*   [replyInlineMarkup](https://core.telegram.org/constructor/replyInlineMarkup) - Attaches an [inline keyboard](https://core.telegram.org/bots/features#inline-keyboards) to the message, allowing users to send callback data to the bot without sending actual messages to the current chat.\n\n### [](#pressing-buttons)Pressing buttons\n\n```\nrequestPeerTypeUser#5f3b8a00 flags:# bot:flags.0?Bool premium:flags.1?Bool = RequestPeerType;\nrequestPeerTypeChat#c9f06e1b flags:# creator:flags.0?true bot_participant:flags.5?true has_username:flags.3?Bool forum:flags.4?Bool user_admin_rights:flags.1?ChatAdminRights bot_admin_rights:flags.2?ChatAdminRights = RequestPeerType;\nrequestPeerTypeBroadcast#339bef6c flags:# creator:flags.0?true has_username:flags.3?Bool user_admin_rights:flags.1?ChatAdminRights bot_admin_rights:flags.2?ChatAdminRights = RequestPeerType;\n\nkeyboardButtonRequestPeer#53d7bfd8 text:string button_id:int peer_type:RequestPeerType max_quantity:int = KeyboardButton;\n\nmessageActionRequestedPeer#31518e9b button_id:int peers:Vector<Peer> = MessageAction;\n\nkeyboardButton#a2fa4880 text:string = KeyboardButton;\nkeyboardButtonUrl#258aff05 text:string url:string = KeyboardButton;\nkeyboardButtonCallback#35bbdb6b flags:# requires_password:flags.0?true text:string data:bytes = KeyboardButton;\nkeyboardButtonRequestPhone#b16a6c29 text:string = KeyboardButton;\nkeyboardButtonRequestGeoLocation#fc796b3f text:string = KeyboardButton;\nkeyboardButtonRequestPoll#bbc7515d flags:# quiz:flags.0?Bool text:string = KeyboardButton;\nkeyboardButtonSwitchInline#93b9fbb5 flags:# same_peer:flags.0?true text:string query:string peer_types:flags.1?Vector<InlineQueryPeerType> = KeyboardButton;\nkeyboardButtonGame#50f41ccf text:string = KeyboardButton;\nkeyboardButtonBuy#afd93fbb text:string = KeyboardButton;\nkeyboardButtonUrlAuth#10b78d29 flags:# text:string fwd_text:flags.0?string url:string button_id:int = KeyboardButton;\n\n// Used by bots to send a keyboardButtonUrlAuth\ninputKeyboardButtonUrlAuth#d02e7fd4 flags:# request_write_access:flags.0?true text:string fwd_text:flags.1?string url:string bot:InputUser = KeyboardButton;\n\nkeyboardButtonRow#77608b83 buttons:Vector<KeyboardButton> = KeyboardButtonRow;\n\n---functions---\n\nmessages.sendBotRequestedPeer#91b2d060 peer:InputPeer msg_id:int button_id:int requested_peers:Vector<InputPeer> = Updates;\n```\n\nBoth [reply](https://core.telegram.org/bots/features#keyboards) and [inline](https://core.telegram.org/bots/features#inline-keyboards) keyboards are composed of a vector of [rows](https://core.telegram.org/constructor/keyboardButtonRow), each row containing a vector of [buttons](https://core.telegram.org/type/KeyboardButton), for each column.  \nEach row can have a different number of columns, and user clients should properly handle clicking buttons of every type.\n\nButtons available only in reply keyboards:\n\n*   [keyboardButton](https://core.telegram.org/constructor/keyboardButton) - Send a message to the chat, replying to the message that attached the [reply keyboard](https://core.telegram.org/bots/features#keyboards)\n*   [keyboardButtonRequestPhone](https://core.telegram.org/constructor/keyboardButtonRequestPhone) - Only in private chats, send the current user's contact to the chat, replying to the message that attached the [reply keyboard](https://core.telegram.org/bots/features#keyboards)\n*   [keyboardButtonRequestGeoLocation](https://core.telegram.org/constructor/keyboardButtonRequestGeoLocation) - Only in private chats, send the current user's geolocation to the chat, replying to the message that attached the [reply keyboard](https://core.telegram.org/bots/features#keyboards)\n*   [keyboardButtonRequestPoll](https://core.telegram.org/constructor/keyboardButtonRequestPoll) - Only in private chats, prompts the user to create and send a [poll](https://core.telegram.org/api/poll) (or a quiz poll, depending on the `quiz` flag), replying to the message that attached the [reply keyboard](https://core.telegram.org/bots/features#keyboards)\n*   [keyboardButtonRequestPeer](https://core.telegram.org/constructor/keyboardButtonRequestPeer) - Prompts the user to select and share a maximum of `max_quantity` peers with the bot using [messages.sendBotRequestedPeer](https://core.telegram.org/method/messages.sendBotRequestedPeer), according to the criteria specified in the [RequestPeerType](https://core.telegram.org/type/RequestPeerType) constructor. [keyboardButtonRequestPeer](https://core.telegram.org/constructor/keyboardButtonRequestPeer).`button_id` must be passed to the method: the peer and the specified `button_id` will be received by the bot as a [messageActionRequestedPeer](https://core.telegram.org/constructor/messageActionRequestedPeer) service message.\n\nButtons available only in inline keyboards:\n\n*   [keyboardButtonUrl](https://core.telegram.org/constructor/keyboardButtonUrl) - Open the URL, showing a \"Do you want to open this URL?\" prompt (unless the URL is one of the [internal URIs](https://github.com/DrKLO/Telegram/blob/002c01ecd37cd08ed07b3ed84d79318d091dfc85/TMessagesProj/src/main/java/org/telegram/messenger/browser/Browser.java#L351), in which case the URL should be opened right away)\n*   [keyboardButtonCallback](https://core.telegram.org/constructor/keyboardButtonCallback) - Send the callback data to the bot, optionally providing the user's 2FA SRP payload for identity verification, see [here for more info\u00a0\u00bb](#callback-queries)\n*   [keyboardButtonSwitchInline](https://core.telegram.org/constructor/keyboardButtonSwitchInline)\n    *   If `keyboardButtonSwitchInline.same_peer` is set, insert the bot's username and `keyboardButtonSwitchInline.query` in the current chat's input field, triggering an [inline query](https://core.telegram.org/api/bots/inline).\n    *   If `keyboardButtonSwitchInline.same_peer` is not set, prompt the user to select one of their chats, and then insert the bot's username and `keyboardButtonSwitchInline.query` in the current chat's input field, triggering an [inline query](https://core.telegram.org/api/bots/inline).\n*   [keyboardButtonGame](https://core.telegram.org/constructor/keyboardButtonGame) - Open the [game](https://core.telegram.org/constructor/game) from the attached [messageMediaGame](https://core.telegram.org/constructor/messageMediaGame) constructor, for more info [see here\u00a0\u00bb](https://core.telegram.org/api/bots/games)\n*   [keyboardButtonBuy](https://core.telegram.org/constructor/keyboardButtonBuy) - Proceed to initiating the payment flow, for more info [see here\u00a0\u00bb](https://core.telegram.org/api/payments)\n*   [keyboardButtonUrlAuth](https://core.telegram.org/constructor/keyboardButtonUrlAuth) - Log into a website using the user's Telegram account, as specified [here\u00a0\u00bb](https://core.telegram.org/api/url-authorization)\n\n### [](#callback-queries)Callback queries\n\n[keyboardButtonCallback](https://core.telegram.org/constructor/keyboardButtonCallback) buttons can be used to send the specified `data` payload back to the bot, when they are clicked.  \nAdditionally, a bot can verify a user's identity by requiring they verify their 2FA password with [SRP](https://core.telegram.org/api/srp).\n\n#### [](#sending-a-callback-query)Sending a callback query\n\n```\nkeyboardButtonGame#50f41ccf text:string = KeyboardButton;\nkeyboardButtonCallback#35bbdb6b flags:# requires_password:flags.0?true text:string data:bytes = KeyboardButton;\n\nmessages.botCallbackAnswer#36585ea4 flags:# alert:flags.1?true has_url:flags.3?true native_ui:flags.4?true message:flags.0?string url:flags.2?string cache_time:int = messages.BotCallbackAnswer;\n\n---functions---\n\nmessages.getBotCallbackAnswer#9342ca07 flags:# game:flags.1?true peer:InputPeer msg_id:int data:flags.0?bytes password:flags.2?InputCheckPasswordSRP = messages.BotCallbackAnswer;\n```\n\nWhen the user clicks on a [keyboardButtonCallback](https://core.telegram.org/constructor/keyboardButtonCallback) in a message sent by a bot, or generated by an [inline query](https://core.telegram.org/api/bots/inline), [messages.getBotCallbackAnswer](https://core.telegram.org/method/messages.getBotCallbackAnswer) should be called, passing the peer and ID of the message.  \nThe same should happen when clicking on [keyboardButtonGame](https://core.telegram.org/constructor/keyboardButtonGame) buttons, with the difference that the `game` flag must be set instead of the `data` parameter.\n\nMake sure to properly handle bot timeouts in the form of `BOT_RESPONSE_TIMEOUT` RPC errors, as the bot may be offline and unable to reply.\n\nThe returned [messages.botCallbackAnswer](https://core.telegram.org/constructor/messages.botCallbackAnswer) constructor contains:\n\n*   `message` if specified, a message that should be shown in a non-blocking toast notification\n*   `alert` indicates whether the `message` should be shown as a dismissible prompt, instead of a simple toast notification\n*   `has_url` Whether an URL is present\n*   `url` if specified, the client should open the URL, without showing a confirmation prompt.  \n    This is safe and allowed, because here bots can only return:\n    *   [Deep links to themselves\u00a0\u00bb](https://core.telegram.org/api/links#bot-links)\n    *   [Deep links to a valid game they own\u00a0\u00bb](https://core.telegram.org/api/links#game-links), if the bot has manually configured games, and the clicked button was a [keyboardButtonGame](https://core.telegram.org/constructor/keyboardButtonGame).\n*   `native_ui` whether to open game URLs in a WebView or in native UI.\n*   `cache_time` specifies for how long should this answer be cached, client-side\n\n##### [](#srp-verification)SRP verification\n\nIf the `requires_password` flag is set, the [SRP 2FA payload](https://core.telegram.org/api/srp) must also be generated and attached to the query, to verify the identity of the user.\n\n**Note that the bot will NOT be able to access your password or the SRP payload**.\n\nThe SRP payload will be processed exclusively on the Telegram's servers, simply returning an RPC error without passing the query to the bot if the verification fails.  \nThis is just a way of verifying the identity of the user, mainly used by the official [@botfather](https://t.me/botfather) bot to allow securely transferring the ownership of a bot to another user.\n\n#### [](#answering-a-callback-query)Answering a callback query\n\n```\nupdateBotCallbackQuery#b9cfc48d flags:# query_id:long user_id:long peer:Peer msg_id:int chat_instance:long data:flags.0?bytes game_short_name:flags.1?string = Update;\n\nupdateInlineBotCallbackQuery#691e9052 flags:# query_id:long user_id:long msg_id:InputBotInlineMessageID chat_instance:long data:flags.0?bytes game_short_name:flags.1?string = Update;\n\nupdateBusinessBotCallbackQuery#1ea2fda7 flags:# query_id:long user_id:long connection_id:string message:Message reply_to_message:flags.2?Message chat_instance:long data:flags.0?bytes = Update;\n\n---functions---\n\nmessages.setBotCallbackAnswer#d58f130a flags:# alert:flags.1?true query_id:long message:flags.0?string url:flags.2?string cache_time:int = Bool;\n```\n\nAfter the user invokes [messages.getBotCallbackAnswer](https://core.telegram.org/method/messages.getBotCallbackAnswer), an [updateBotCallbackQuery](https://core.telegram.org/constructor/updateBotCallbackQuery), [updateInlineBotCallbackQuery](https://core.telegram.org/constructor/updateInlineBotCallbackQuery) or [updateBusinessBotCallbackQuery](https://core.telegram.org/constructor/updateBusinessBotCallbackQuery) is generated and sent to the bot, depending on whether the query originated from a normal message sent by the bot, from a message sent from an [inline query](https://core.telegram.org/api/bots/inline), or from a message sent via a [business connection](https://core.telegram.org/api/business#connected-bots).\n\nEither way, bots must reply to the query as quickly as possible using [messages.setBotCallbackAnswer](https://core.telegram.org/method/messages.setBotCallbackAnswer):\n\n*   `query_id` is the `query_id` from [messages.getBotCallbackAnswer](https://core.telegram.org/method/messages.getBotCallbackAnswer), an [updateBotCallbackQuery](https://core.telegram.org/constructor/updateBotCallbackQuery), [updateInlineBotCallbackQuery](https://core.telegram.org/constructor/updateInlineBotCallbackQuery) or [updateBusinessBotCallbackQuery](https://core.telegram.org/constructor/updateBusinessBotCallbackQuery)\n*   `message`, `alert`, `url` can contain messages and URLs to trigger different client behaviour, as [specified above\u00a0\u00bb](#sending-a-callback-query)\n*   `cache_time` indicates the maximum amount of time in seconds that the result of the callback query may be cached by the **client**.\n\nIf a `game_short_name` is present in the update, the bot should return the URL of the game with the specified name.  \nThe [messages.setBotCallbackAnswer](https://core.telegram.org/method/messages.setBotCallbackAnswer) method must be called anyway, even if no `message` or `url` is returned, to avoid timeouts on the client.",
    "url": "https://core.telegram.org/api/bots%2Fbuttons"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/bots%2Finline",
      "title": "Inline",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Inline"
        },
        {
          "property": "og:description",
          "content": "Users can interact with your bot via inline queries, straight from the text input field in any chat."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:35 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "6143",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Inline\n\nUsers can interact with your bot via [**inline queries**](https://core.telegram.org/bots/features#inline-requests), straight from the **text input field** in **any** chat.  \nThis article describes the full inline bot flow, using the MTProto API.\n\nFor a simplified description using the HTTP bot API, see [here\u00a0\u00bb](https://core.telegram.org/bots/features#inline-requests).\n\n### [](#1-making-an-inline-query)1\\. Making an inline query\n\n```\nmessages.botResults#e021f2f6 flags:# gallery:flags.0?true query_id:long next_offset:flags.1?string switch_pm:flags.2?InlineBotSwitchPM switch_webview:flags.3?InlineBotWebView results:Vector<BotInlineResult> cache_time:int users:Vector<User> = messages.BotResults;\n\n---functions---\n\nmessages.getInlineBotResults#514e999d flags:# bot:InputUser peer:InputPeer geo_point:flags.0?InputGeoPoint query:string offset:string = messages.BotResults;\n```\n\nWhen, in a graphical client, the user starts a message with an `@`, clients should:\n\n*   Use the cached [top peer rating for inline bots](https://core.telegram.org/api/top-rating) to show a list of frequently used inline bots.\n*   If the user chooses a bot from the recent bot list or:\n*   Finishes typing a full username followed by a whitespace, and if the username [resolves](https://core.telegram.org/method/contacts.resolveUsername) to a valid bot\n*   [messages.getInlineBotResults](https://core.telegram.org/method/messages.getInlineBotResults) is called, with the following parameters:\n    *   `bot` - The bot peer\n    *   `peer` - The chat where the user made the query (or [inputPeerEmpty](https://core.telegram.org/constructor/inputPeerEmpty) for [GIF searches](https://core.telegram.org/api/gifs) and other queries to built-in bots specified in the [config](https://core.telegram.org/constructor/config))\n    *   `geo_point` - The user's current geolocation, if the bot requires [location-based inline results](https://core.telegram.org/bots/inline#location-based-results) (the `bot_inline_geo` flag of the bot's [user constructor](https://core.telegram.org/constructor/user) will be set)\n    *   `query` - What the user typed after the bot's username\n    *   `offset` - If the user scrolls past the first `len(results)` results, and `next_offset` field is set, the inline query should be repeated with this offset.\n\n### [](#2-answering-to-an-inline-query)2\\. Answering to an inline query\n\n```\ninputBotInlineMessageMediaAuto#3380c786 flags:# invert_media:flags.3?true message:string entities:flags.1?Vector<MessageEntity> reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;\ninputBotInlineMessageText#3dcd7a87 flags:# no_webpage:flags.0?true invert_media:flags.3?true message:string entities:flags.1?Vector<MessageEntity> reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;\ninputBotInlineMessageMediaGeo#96929a85 flags:# geo_point:InputGeoPoint heading:flags.0?int period:flags.1?int proximity_notification_radius:flags.3?int reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;\ninputBotInlineMessageMediaVenue#417bbf11 flags:# geo_point:InputGeoPoint title:string address:string provider:string venue_id:string venue_type:string reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;\ninputBotInlineMessageMediaContact#a6edbffd flags:# phone_number:string first_name:string last_name:string vcard:string reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;\ninputBotInlineMessageGame#4b425864 flags:# reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;\n\ninputBotInlineResult#88bf9319 flags:# id:string type:string title:flags.1?string description:flags.2?string url:flags.3?string thumb:flags.4?InputWebDocument content:flags.5?InputWebDocument send_message:InputBotInlineMessage = InputBotInlineResult;\ninputBotInlineResultPhoto#a8d864a7 id:string type:string photo:InputPhoto send_message:InputBotInlineMessage = InputBotInlineResult;\ninputBotInlineResultDocument#fff8fdc4 flags:# id:string type:string title:flags.1?string description:flags.2?string document:InputDocument send_message:InputBotInlineMessage = InputBotInlineResult;\ninputBotInlineResultGame#4fa417f2 id:string short_name:string send_message:InputBotInlineMessage = InputBotInlineResult;\n\nupdateBotInlineQuery#496f379c flags:# query_id:long user_id:long query:string geo:flags.0?GeoPoint peer_type:flags.1?InlineQueryPeerType offset:string = Update;\n\n---functions---\n\nmessages.setInlineBotResults#bb12a419 flags:# gallery:flags.0?true private:flags.1?true query_id:long results:Vector<InputBotInlineResult> cache_time:int next_offset:flags.2?string switch_pm:flags.3?InlineBotSwitchPM switch_webview:flags.4?InlineBotWebView = Bool;\n```\n\nBots can answer to incoming [updateBotInlineQuery](https://core.telegram.org/constructor/updateBotInlineQuery) updates using [messages.setInlineBotResults](https://core.telegram.org/method/messages.setInlineBotResults).  \nJust like its [bot API counterpart](https://core.telegram.org/bots/api#answerinlinequery), the method can be used to send a set of inline results to the user; see the [constructor page for more info on the MTProto method parameters\u00a0\u00bb](https://core.telegram.org/method/messages.setInlineBotResults).\n\nIn general, the method accepts a vector of [InputBotInlineResult](https://core.telegram.org/type/InputBotInlineResult) constructors, that when [chosen](#3-sending-the-inline-query-result), generates a message with optionally attached media, and even inline buttons.\n\n### [](#21-using-a-prepared-inline-message)2.1. Using a prepared inline message\n\n```\ninlineQueryPeerTypeSameBotPM#3081ed9d = InlineQueryPeerType;\ninlineQueryPeerTypePM#833c0fac = InlineQueryPeerType;\ninlineQueryPeerTypeChat#d766c50a = InlineQueryPeerType;\ninlineQueryPeerTypeMegagroup#5ec4be43 = InlineQueryPeerType;\ninlineQueryPeerTypeBroadcast#6334ee9a = InlineQueryPeerType;\ninlineQueryPeerTypeBotPM#e3b2d0c = InlineQueryPeerType;\n\nmessages.botPreparedInlineMessage#8ecf0511 id:string expire_date:int = messages.BotPreparedInlineMessage;\n\nmessages.preparedInlineMessage#ff57708d query_id:long result:BotInlineResult peer_types:Vector<InlineQueryPeerType> cache_time:int users:Vector<User> = messages.PreparedInlineMessage;\n\n---functions---\n\nmessages.savePreparedInlineMessage#f21f7f2f flags:# result:InputBotInlineResult user_id:InputUser peer_types:flags.0?Vector<InlineQueryPeerType> = messages.BotPreparedInlineMessage;\n\nmessages.getPreparedInlineMessage#857ebdb8 bot:InputUser id:string = messages.PreparedInlineMessage;\n```\n\nAn inline result may also be pre-generated by a [mini app](https://core.telegram.org/api/bots/webapps).\n\n1.  To start, the bot associated with the mini apps saves the prepared message using [messages.savePreparedInlineMessage](https://core.telegram.org/method/messages.savePreparedInlineMessage), specifying the message, the ID of the user that will use the message (i.e. the user currently viewing the web app) and the peer types where the message can be shared.\n2.  Then, the prepared inline message ID is passed to the user's client via the [web\\_app\\_send\\_prepared\\_message web event \u00bb](https://core.telegram.org/api/web-events#web-app-send-prepared-message).\n3.  The ID is then passed to [messages.getPreparedInlineMessage](https://core.telegram.org/method/messages.getPreparedInlineMessage) along with the identifier of the bot that owns the web app to fetch the prepared inline message  \n    3.1) If the method returns any RPC error, emit a [prepared\\_message\\_failed event](https://core.telegram.org/api/bots/webapps#prepared-message-failed) with `error` set to the message of the RPC error and abort the process.  \n    3.2) If the method succeeds, display a preview to the user, letting them select a destination chat.\n4.  If the user aborts the process, emit a [prepared\\_message\\_failed event](https://core.telegram.org/api/bots/webapps#prepared-message-failed) with `error` set to `USER_DECLINED`.\n5.  If the user selects a chat, send the message [as specified here \u00bb](#3-sending-the-inline-query-result).  \n    5.1) If sending fails, emit a [prepared\\_message\\_failed event](https://core.telegram.org/api/bots/webapps#prepared-message-failed) with `error` set to `MESSAGE_SEND_FAILED`.  \n    5.2) If sending succeeds, emit a [prepared\\_message\\_sent event](https://core.telegram.org/api/bots/webapps#prepared-message-sent).\n\n### [](#3-sending-the-inline-query-result)3\\. Sending the inline query result\n\n```\nbotInlineMessageMediaAuto#764cf810 flags:# invert_media:flags.3?true message:string entities:flags.1?Vector<MessageEntity> reply_markup:flags.2?ReplyMarkup = BotInlineMessage;\nbotInlineMessageText#8c7f65e2 flags:# no_webpage:flags.0?true invert_media:flags.3?true message:string entities:flags.1?Vector<MessageEntity> reply_markup:flags.2?ReplyMarkup = BotInlineMessage;\nbotInlineMessageMediaGeo#51846fd flags:# geo:GeoPoint heading:flags.0?int period:flags.1?int proximity_notification_radius:flags.3?int reply_markup:flags.2?ReplyMarkup = BotInlineMessage;\nbotInlineMessageMediaVenue#8a86659c flags:# geo:GeoPoint title:string address:string provider:string venue_id:string venue_type:string reply_markup:flags.2?ReplyMarkup = BotInlineMessage;\nbotInlineMessageMediaContact#18d1cdc2 flags:# phone_number:string first_name:string last_name:string vcard:string reply_markup:flags.2?ReplyMarkup = BotInlineMessage;\n\nbotInlineResult#11965f3a flags:# id:string type:string title:flags.1?string description:flags.2?string url:flags.3?string thumb:flags.4?WebDocument content:flags.5?WebDocument send_message:BotInlineMessage = BotInlineResult;\nbotInlineMediaResult#17db940b flags:# id:string type:string photo:flags.0?Photo document:flags.1?Document title:flags.2?string description:flags.3?string send_message:BotInlineMessage = BotInlineResult;\n\nmessages.botResults#e021f2f6 flags:# gallery:flags.0?true query_id:long next_offset:flags.1?string switch_pm:flags.2?InlineBotSwitchPM switch_webview:flags.3?InlineBotWebView results:Vector<BotInlineResult> cache_time:int users:Vector<User> = messages.BotResults;\n\n---functions---\n\nmessages.sendInlineBotResult#3ebee86a flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true hide_via:flags.11?true peer:InputPeer reply_to:flags.0?InputReplyTo random_id:long query_id:long id:string schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut = Updates;\n```\n\nThe user client should display the [messages.botResults](https://core.telegram.org/constructor/messages.botResults).`results` obtained [during querying](#1-making-an-inline-query) in a list, making sure to handle eventual bot timeouts in the form of a `BOT_RESPONSE_TIMEOUT` RPC error, by simply not displaying anything.\n\nIf either the [messages.botResults](https://core.telegram.org/constructor/messages.botResults).`switch_pm` or [messages.botResults](https://core.telegram.org/constructor/messages.botResults).`switch_webview` flags are populated, a button should be displayed on top of the result list, that when clicked, instead of sending an inline result to the chat, switches the user to a private chat with the bot (`switch_pm`) or to a [inline mode mini app](https://core.telegram.org/api/bots/webapps#inline-mode-mini-apps) (`switch_webview`).\n\nIf the user instead chooses a specific `BotInlineResult` from the normal `results` list, the [messages.sendInlineBotResult](https://core.telegram.org/method/messages.sendInlineBotResult) method should be invoked, passing:\n\n*   The `query_id` from `messages.botResults` or `messages.preparedInlineMessage`\n*   The `id` of the chosen result\n*   The `peer` where to send the chosen result\n\nThe resulting [message](https://core.telegram.org/constructor/message) will have the `via_bot_id` field set, to indicate that the result was generated by the bot that generated the inline result.  \nGraphical clients should display the bot `@username` in the header of the message, allowing the user to click on it, automatically starting an inline query by inserting `@username` in the text bar.\n\n### [](#4-inline-feedback)4\\. Inline feedback\n\n```\ninputBotInlineMessageID#890c3d89 dc_id:int id:long access_hash:long = InputBotInlineMessageID;\n\nupdateBotInlineSend#12f12a07 flags:# user_id:long query:string geo:flags.0?GeoPoint id:string msg_id:flags.1?InputBotInlineMessageID = Update;\n```\n\nIf [feedback collection](https://core.telegram.org/bots/inline#collecting-feedback) is enabled, the bot may receive an [updateBotInlineSend](https://core.telegram.org/constructor/updateBotInlineSend) when the user [chooses and sends](#3-sending-the-inline-query-result) an inline result.\n\nEven if the [probability setting is set to 100%](https://core.telegram.org/bots/inline#collecting-feedback), not all inline results may be reported due to caching (see the `cache_time` parameter in [Answering a callback query](https://core.telegram.org/api/bots/buttons#answering-a-callback-query)).  \n[Feedback collection](https://core.telegram.org/bots/inline#collecting-feedback) can also create load issues for popular bots, so adjust the probability setting to a lower value in such cases.\n\nEither way, feedback collection should only be used for statistical purposes rather than functional.\n\nThe [updateBotInlineSend](https://core.telegram.org/constructor/updateBotInlineSend) will contain:\n\n*   `id` - The ID of the chosen result\n*   `msg_id` - The ID of the sent inline message\n*   `user_id` - The ID of the user that chose the result\n*   `query` - The query string that was used to obtain the result\n*   `geo` - For bots requiring [location-based inline results](https://core.telegram.org/bots/inline#location-based-results), the user's location\n\n### [](#5-editing-sent-inline-messages)5\\. Editing sent inline messages\n\n```\nupdateInlineBotCallbackQuery#691e9052 flags:# query_id:long user_id:long msg_id:InputBotInlineMessageID chat_instance:long data:flags.0?bytes game_short_name:flags.1?string = Update;\n\ninputBotInlineMessageID#890c3d89 dc_id:int id:long access_hash:long = InputBotInlineMessageID;\n\n---functions---\n\nmessages.editInlineBotMessage#83557dba flags:# no_webpage:flags.1?true invert_media:flags.16?true id:InputBotInlineMessageID message:flags.11?string media:flags.14?InputMedia reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Bool;\n```\n\nSent inline messages can be edited by the bot, for example in response to a [button press callback query](https://core.telegram.org/api/bots/buttons#callback-queries).\n\nSimply pass the [inputBotInlineMessageID](https://core.telegram.org/constructor/inputBotInlineMessageID) specified in the [updateInlineBotCallbackQuery](https://core.telegram.org/constructor/updateInlineBotCallbackQuery) to [messages.editInlineBotMessage](https://core.telegram.org/method/messages.editInlineBotMessage) along with the new message, making sure to send the query to the [datacenter](https://core.telegram.org/api/datacenter) specified in `inputBotInlineMessageID.dc_id`.",
    "url": "https://core.telegram.org/api/bots%2Finline"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/bots%2Fmenu",
      "title": "Bot menu button",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Bot menu button"
        },
        {
          "property": "og:description",
          "content": "Bots can choose the behavior of the menu button shown next to the text input field."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:35 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3737",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Bot menu button\n\nBots can choose the behavior of the menu button shown next to the text input field.\n\nFor a simplified description using the HTTP bot API, see [here \u00bb](https://core.telegram.org/bots/api).\n\n### [](#setting-the-menu-button)Setting the menu button\n\nSchema:\n\n```\nbotMenuButtonDefault#7533a588 = BotMenuButton;\nbotMenuButtonCommands#4258c205 = BotMenuButton;\nbotMenuButton#c7b57ce6 text:string url:string = BotMenuButton;\n\ninputUserEmpty#b98886cf = InputUser;\ninputUser#f21158c6 user_id:long access_hash:long = InputUser;\n\n---functions---\n\nbots.setBotMenuButton#4504d54f user_id:InputUser button:BotMenuButton = Bool;\n```\n\nBots can use [bots.setBotMenuButton](https://core.telegram.org/method/bots.setBotMenuButton) to change the menu button for a certain user, or for all users.\n\n#### [](#set-scope-all-users)Set scope: all users\n\nTo change the menu button for all users use the following parameters:\n\n*   `user_id` - [inputUserEmpty](https://core.telegram.org/constructor/inputUserEmpty)\n*   `button` - one of the following constructors:\n    *   [botMenuButton](https://core.telegram.org/constructor/botMenuButton) - Opens a [bot mini app](https://core.telegram.org/api/bots/webapps) when clicked.\n    *   [botMenuButtonCommands](https://core.telegram.org/constructor/botMenuButtonCommands) - Opens the bot's command list when clicked.\n\n[botMenuButtonDefault](https://core.telegram.org/constructor/botMenuButton) shouldn't be used as it has no effect, keeping the previously set menu button (either [botMenuButton](https://core.telegram.org/constructor/botMenuButton) or [botMenuButtonCommands](https://core.telegram.org/constructor/botMenuButtonCommands)).\n\n#### [](#set-scope-specific-users)Set scope: specific users\n\nTo change the menu button for a specific user use the following parameters:\n\n*   `user_id` - [inputUser](https://core.telegram.org/constructor/inputUser) with the user ID/access hash\n*   `button` - one of the following constructors:\n    *   [botMenuButton](https://core.telegram.org/constructor/botMenuButton) - Opens a [bot mini app](https://core.telegram.org/api/bots/webapps) when clicked.\n    *   [botMenuButtonCommands](https://core.telegram.org/constructor/botMenuButtonCommands) - Opens the bot's command list when clicked.\n    *   [botMenuButtonDefault](https://core.telegram.org/constructor/botMenuButton) - Resets the behavior of the button to the [default scope (all users)](#set-scope-all-users).\n\n### [](#getting-the-menu-button)Getting the menu button\n\n#### [](#bots)Bots\n\n```\nbotMenuButtonDefault#7533a588 = BotMenuButton;\nbotMenuButtonCommands#4258c205 = BotMenuButton;\nbotMenuButton#c7b57ce6 text:string url:string = BotMenuButton;\n\ninputUserEmpty#b98886cf = InputUser;\ninputUser#f21158c6 user_id:long access_hash:long = InputUser;\n\n---functions---\n\nbots.getBotMenuButton#9c60eb28 user_id:InputUser = BotMenuButton;\n```\n\nBots might need to know the button type currently used in a given chat or in all chats: [bots.getBotMenuButton](https://core.telegram.org/method/bots.getBotMenuButton) can be used for this.\n\nUsers can't use this method, and should use the [user](#users) method instead.\n\n##### [](#get-scope-all-users)Get scope: all users\n\nTo get the menu button used for all users use the following parameter:\n\n*   `user_id` - [inputUserEmpty](https://core.telegram.org/constructor/inputUserEmpty)\n\nOne of the following constructors will be returned:\n\n*   [botMenuButton](https://core.telegram.org/constructor/botMenuButton) - Opens a [bot mini app](https://core.telegram.org/api/bots/webapps) when clicked.\n*   [botMenuButtonCommands](https://core.telegram.org/constructor/botMenuButtonCommands) - Opens the bot's command list when clicked.\n\n[botMenuButtonDefault](https://core.telegram.org/constructor/botMenuButton) will never be returned in this case.\n\n##### [](#get-scope-specific-users)Get scope: specific users\n\nTo get the menu button used for a specific user use the following parameter:\n\n*   `user_id` - [inputUser](https://core.telegram.org/constructor/inputUser) with the user ID access/hash\n\nOne of the following constructors will be returned:\n\n*   [botMenuButton](https://core.telegram.org/constructor/botMenuButton) - Opens a [bot mini app](https://core.telegram.org/api/bots/webapps) when clicked.\n*   [botMenuButtonCommands](https://core.telegram.org/constructor/botMenuButtonCommands) - Opens the bot's command list when clicked.\n*   [botMenuButtonDefault](https://core.telegram.org/constructor/botMenuButton) - The [default scope (all users) button behavior is in use](#get-scope-all-users).\n\n#### [](#users)Users\n\n```\nupdateBotMenuButton#14b85813 bot_id:long button:BotMenuButton = Update;\n\nbotMenuButtonCommands#4258c205 = BotMenuButton;\nbotMenuButton#c7b57ce6 text:string url:string = BotMenuButton;\n\nbotInfo#36607333 flags:# has_preview_medias:flags.6?true user_id:flags.0?long description:flags.1?string description_photo:flags.4?Photo description_document:flags.5?Document commands:flags.2?Vector<BotCommand> menu_button:flags.3?BotMenuButton privacy_policy_url:flags.7?string app_settings:flags.8?BotAppSettings = BotInfo;\n\nuserFull#979d2376 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true voice_messages_forbidden:flags.20?true translations_disabled:flags.23?true stories_pinned_available:flags.26?true blocked_my_stories_from:flags.27?true wallpaper_overridden:flags.28?true contact_require_premium:flags.29?true read_dates_private:flags.30?true flags2:# sponsored_enabled:flags2.7?true can_view_revenue:flags2.9?true bot_can_manage_emoji_status:flags2.10?true id:long about:flags.1?string settings:PeerSettings personal_photo:flags.21?Photo profile_photo:flags.2?Photo fallback_photo:flags.22?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int ttl_period:flags.14?int theme_emoticon:flags.15?string private_forward_name:flags.16?string bot_group_admin_rights:flags.17?ChatAdminRights bot_broadcast_admin_rights:flags.18?ChatAdminRights premium_gifts:flags.19?Vector<PremiumGiftOption> wallpaper:flags.24?WallPaper stories:flags.25?PeerStories business_work_hours:flags2.0?BusinessWorkHours business_location:flags2.1?BusinessLocation business_greeting_message:flags2.2?BusinessGreetingMessage business_away_message:flags2.3?BusinessAwayMessage business_intro:flags2.4?BusinessIntro birthday:flags2.5?Birthday personal_channel_id:flags2.6?long personal_channel_message:flags2.6?int stargifts_count:flags2.8?int starref_program:flags2.11?StarRefProgram = UserFull;\n\n---functions---\n\nusers.getFullUser#b60f5918 id:InputUser = users.UserFull;\n```\n\nUsers will receive an [updateBotMenuButton](https://core.telegram.org/constructor/updateBotMenuButton) update when a bot changes the behavior of the menu button globally or in the private chat with the user.\n\nFor new bots, [users.getFullUser](https://core.telegram.org/method/users.getFullUser) can be used to fetch the [userFull](https://core.telegram.org/constructor/userFull) related to the bot, containing the [botInfo](https://core.telegram.org/constructor/botInfo) constructor with various info about the bot, including the menu button behavior.\n\n[botMenuButtonDefault](https://core.telegram.org/constructor/botMenuButton) will never be returned in a [updateBotMenuButton](https://core.telegram.org/constructor/updateBotMenuButton) or in a [botInfo](https://core.telegram.org/constructor/botInfo) (but if it does happen, treat it like a [botMenuButtonCommands](https://core.telegram.org/constructor/botMenuButtonCommands)).\n\nBots should use the [bot](#bots) method instead.",
    "url": "https://core.telegram.org/api/bots%2Fmenu"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/bots%2Fcommands",
      "title": "Commands",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Commands"
        },
        {
          "property": "og:description",
          "content": "Bots offer a set of commands that can be used by users in private, or in a chat."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:35 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4184",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Commands\n\n[Bots](https://core.telegram.org/bots) offer a set of [commands](https://core.telegram.org/bots/features#commands) that can be used by users in private, or in a chat.\n\nFor a simplified description using the HTTP bot API, see [here\u00a0\u00bb](https://core.telegram.org/bots/features#commands).\n\n### [](#getting-commands)Getting commands\n\n```\nbotCommand#c27ac8c7 command:string description:string = BotCommand;\n\nbotInfo#36607333 flags:# has_preview_medias:flags.6?true user_id:flags.0?long description:flags.1?string description_photo:flags.4?Photo description_document:flags.5?Document commands:flags.2?Vector<BotCommand> menu_button:flags.3?BotMenuButton privacy_policy_url:flags.7?string app_settings:flags.8?BotAppSettings = BotInfo;\n\nchannelFull#bbab348d flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true can_set_location:flags.16?true has_scheduled:flags.19?true can_view_stats:flags.20?true blocked:flags.22?true flags2:# can_delete_channel:flags2.0?true antispam:flags2.1?true participants_hidden:flags2.2?true translations_disabled:flags2.3?true stories_pinned_available:flags2.5?true view_forum_as_messages:flags2.6?true restricted_sponsored:flags2.11?true can_view_revenue:flags2.12?true paid_media_allowed:flags2.14?true can_view_stars_revenue:flags2.15?true paid_reactions_available:flags2.16?true id:long about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int online_count:flags.13?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:flags.23?ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?long migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int folder_id:flags.11?int linked_chat_id:flags.14?long location:flags.15?ChannelLocation slowmode_seconds:flags.17?int slowmode_next_send_date:flags.18?int stats_dc:flags.12?int pts:int call:flags.21?InputGroupCall ttl_period:flags.24?int pending_suggestions:flags.25?Vector<string> groupcall_default_join_as:flags.26?Peer theme_emoticon:flags.27?string requests_pending:flags.28?int recent_requesters:flags.28?Vector<long> default_send_as:flags.29?Peer available_reactions:flags.30?ChatReactions reactions_limit:flags2.13?int stories:flags2.4?PeerStories wallpaper:flags2.7?WallPaper boosts_applied:flags2.8?int boosts_unrestrict:flags2.9?int emojiset:flags2.10?StickerSet = ChatFull;\nuserFull#979d2376 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true voice_messages_forbidden:flags.20?true translations_disabled:flags.23?true stories_pinned_available:flags.26?true blocked_my_stories_from:flags.27?true wallpaper_overridden:flags.28?true contact_require_premium:flags.29?true read_dates_private:flags.30?true flags2:# sponsored_enabled:flags2.7?true can_view_revenue:flags2.9?true bot_can_manage_emoji_status:flags2.10?true id:long about:flags.1?string settings:PeerSettings personal_photo:flags.21?Photo profile_photo:flags.2?Photo fallback_photo:flags.22?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int ttl_period:flags.14?int theme_emoticon:flags.15?string private_forward_name:flags.16?string bot_group_admin_rights:flags.17?ChatAdminRights bot_broadcast_admin_rights:flags.18?ChatAdminRights premium_gifts:flags.19?Vector<PremiumGiftOption> wallpaper:flags.24?WallPaper stories:flags.25?PeerStories business_work_hours:flags2.0?BusinessWorkHours business_location:flags2.1?BusinessLocation business_greeting_message:flags2.2?BusinessGreetingMessage business_away_message:flags2.3?BusinessAwayMessage business_intro:flags2.4?BusinessIntro birthday:flags2.5?Birthday personal_channel_id:flags2.6?long personal_channel_message:flags2.6?int stargifts_count:flags2.8?int starref_program:flags2.11?StarRefProgram = UserFull;\n\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n```\n\nThe [botInfo](https://core.telegram.org/constructor/botInfo) constructors contained in the [userFull](https://core.telegram.org/constructor/userFull), [chatFull](https://core.telegram.org/constructor/chatFull), [channelFull](https://core.telegram.org/constructor/channelFull) contain a list of commands, and for groups, the ID and a description of each bot.\n\nIn graphical clients, when users begin a message with a `/`, a list of commands supported by all bots present in the current chat should be shown; the same should be done for one-to-one chats with the bot itself.\n\nIf the command list of a bot changes, the `bot_info_version` contained in the [user](https://core.telegram.org/constructor/user) constructor received in updates will change; this indicates that the client should refetch full bot information using [users.getFullUser](https://core.telegram.org/method/users.getFullUser).\n\n### [](#setting-commands)Setting commands\n\n```\nbotCommand#c27ac8c7 command:string description:string = BotCommand;\n\n---functions---\n\nbots.setBotCommands#517165a scope:BotCommandScope lang_code:string commands:Vector<BotCommand> = Bool;\n```\n\nThe command list can be changed by the owner of the bot through [@botfather](https://t.me/botfather), but bots can also change their own command list by invoking [bots.setBotCommands](https://core.telegram.org/method/bots.setBotCommands).",
    "url": "https://core.telegram.org/api/bots%2Fcommands"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/bots/info",
      "title": "Edit bot information",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Edit bot information"
        },
        {
          "property": "og:description",
          "content": "Users can edit and localize the profile picture, name, about text and description of bots they own; the same can be done by the bots themselves."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:34 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "2644",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Edit bot information\n\nUsers can edit and localize the profile picture, name, about text and description of [bots](https://core.telegram.org/api/bots) they own; the same can be done by the bots themselves.\n\n```\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\nbots.botInfo#e8a775b0 name:string about:string description:string = bots.BotInfo;\n\n---functions---\n\nbots.getBotInfo#dcd914fd flags:# bot:flags.0?InputUser lang_code:string = bots.BotInfo;\nbots.setBotInfo#10cf3123 flags:# bot:flags.2?InputUser lang_code:string name:flags.3?string about:flags.0?string description:flags.1?string = Bool;\n\nphotos.uploadProfilePhoto#388a3b5 flags:# fallback:flags.3?true bot:flags.5?InputUser file:flags.0?InputFile video:flags.1?InputFile video_start_ts:flags.2?double video_emoji_markup:flags.4?VideoSize = photos.Photo;    \n```\n\nBots may invoke [bots.setBotInfo](https://core.telegram.org/method/bots.setBotInfo) set a localized version of their name, about text and description; [bots.getBotInfo](https://core.telegram.org/method/bots.getBotInfo) may be used to obtain previously set values.  \nBots may also invoke [photos.uploadProfilePhoto](https://core.telegram.org/method/photos.uploadProfilePhoto) as specified in the [files documentation\u00a0\u00bb](https://core.telegram.org/api/files#uploading-profile-or-chat-pictures) to set profile photos, videos or stickers.\n\nThe same methods may be invoked by the user that owns the bot (bots owned by the current user have the [user](https://core.telegram.org/constructor/user).`bot_can_edit` flag set) to modify the bot's information: to do so, specify the bot's peer information in the `bot` parameter.",
    "url": "https://core.telegram.org/api/bots/info"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/bots%2Fwebapps",
      "title": "Mini Apps on Telegram",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Mini Apps on Telegram"
        },
        {
          "property": "og:description",
          "content": "Bots can offer users interactive HTML5 web apps to completely replace any website."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:37 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "14826",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Mini Apps on Telegram\n\nInteractive [HTML5 Mini Apps](https://core.telegram.org/bots/webapps) on Telegram can completely replace **any website**.\n\nThey support [seamless authorization](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots), [integrated payments](https://core.telegram.org/bots/payments) via multiple payment providers (with _Google Pay_ and _Apple Pay_ out of the box), delivering tailored push notifications to users, and [much more](https://core.telegram.org/bots).\n\nThis article offers a client-side overview of the implementation of bot mini apps using the MTProto API: see [here for an overview of the mini-app side JS API\u00a0\u00bb](https://core.telegram.org/bots/webapps).\n\n### [](#main-mini-apps)Main Mini Apps\n\nSchema:\n\n```\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\nwebViewResultUrl#4d22ff98 flags:# fullsize:flags.1?true fullscreen:flags.2?true query_id:flags.0?long url:string = WebViewResult;\n\nbotAppSettings#c99b1950 flags:# placeholder_path:flags.0?bytes background_color:flags.1?int background_dark_color:flags.2?int header_color:flags.3?int header_dark_color:flags.4?int = BotAppSettings;\nbotInfo#36607333 flags:# has_preview_medias:flags.6?true user_id:flags.0?long description:flags.1?string description_photo:flags.4?Photo description_document:flags.5?Document commands:flags.2?Vector<BotCommand> menu_button:flags.3?BotMenuButton privacy_policy_url:flags.7?string app_settings:flags.8?BotAppSettings = BotInfo;\n\n---functions---\n\nmessages.requestMainWebView#c9e01e7b flags:# compact:flags.7?true fullscreen:flags.8?true peer:InputPeer bot:InputUser start_param:flags.1?string theme_params:flags.0?DataJSON platform:string = WebViewResult;\n```\n\nMain Mini Apps are configured through [@botfather](https://t.me/botfather).\n\nOnce enabled, the [user](https://core.telegram.org/constructor/user).`bot_has_main_app` flag will be set, and an \"Open App\" button should be shown on the bot's profile page.\n\nClicking on this button should open the Main Mini App, by invoking [messages.requestMainWebView](https://core.telegram.org/method/messages.requestMainWebView): no URL needs to be passed to the method, because the Main Mini App URL is configured through [@botfather](https://t.me/botfather).\n\nApps may also specify a custom background, header color and placeholder SVG logo to be used during loading screens, specified in the [botAppSettings](https://core.telegram.org/constructor/botAppSettings) constructor, contained in the [botInfo](https://core.telegram.org/constructor/botInfo) constructor returned in [userFull](https://core.telegram.org/constructor/userFull).\n\nAfter invoking [messages.requestMainWebView](https://core.telegram.org/method/messages.requestMainWebView) and obtaining a [webViewResultUrl](https://core.telegram.org/constructor/webViewResultUrl) result, clients should open a webview using the `url` contained in the returned [webViewResultUrl](https://core.telegram.org/constructor/webViewResultUrl).\n\nThe bot's profile page should also show a list of photos and videos, previewing the features offered by the Main Mini App, see [Main Mini App previews](#main-mini-app-previews) for more info on how to configure and render them.\n\nMain Mini Apps are also featured in the in-app [Mini App Store\u00a0\u00bb](https://core.telegram.org/api/search#apps-tab).\n\nThe Main Mini App should also be directly opened when [clicking on a Main Mini App deep link\u00a0\u00bb](https://core.telegram.org/api/links#main-mini-app-links); the `compact`/`fullscreen` flag of the method must be set if the `mode` parameter in the link is set and equal to `compact`/`fullscreen`; any eventual `start_param` present in the link must also be passed to the method.\n\n#### [](#main-mini-app-previews)Main Mini App previews\n\n```\nbotInfo#36607333 flags:# has_preview_medias:flags.6?true user_id:flags.0?long description:flags.1?string description_photo:flags.4?Photo description_document:flags.5?Document commands:flags.2?Vector<BotCommand> menu_button:flags.3?BotMenuButton privacy_policy_url:flags.7?string app_settings:flags.8?BotAppSettings = BotInfo;\n\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\nbotPreviewMedia#23e91ba3 date:int media:MessageMedia = BotPreviewMedia;\nbots.previewInfo#0ca71d64 media:Vector<BotPreviewMedia> lang_codes:Vector<string> = bots.PreviewInfo;\n\n---functions---\n\nbots.getPreviewMedias#a2a5594d bot:InputUser = Vector<BotPreviewMedia>;\n\nmessages.uploadMedia#14967978 flags:# business_connection_id:flags.0?string peer:InputPeer media:InputMedia = MessageMedia;\n\nbots.getPreviewInfo#423ab3ad bot:InputUser lang_code:string = bots.PreviewInfo;\nbots.addPreviewMedia#17aeb75a bot:InputUser lang_code:string media:InputMedia = BotPreviewMedia;\nbots.editPreviewMedia#8525606f bot:InputUser lang_code:string media:InputMedia new_media:InputMedia = BotPreviewMedia;\nbots.deletePreviewMedia#2d0135b3 bot:InputUser lang_code:string media:Vector<InputMedia> = Bool;\nbots.reorderPreviewMedias#b627f3aa bot:InputUser lang_code:string order:Vector<InputMedia> = Bool;\n```\n\nAfter enabling a [main mini app\u00a0\u00bb](#main-mini-apps) in [@botfather](https://t.me/botfather), bots gain the ability to display **localized** preview medias (photos and videos) on their profile page, offering examples of what the app can do.\n\nIf a bot has some preview medias, the [botInfo](https://core.telegram.org/constructor/botInfo).`has_preview_medias` flag will be set ([botInfo](https://core.telegram.org/constructor/botInfo) is contained in the bot's [userFull](https://core.telegram.org/constructor/userFull)).  \nClients should then invoke [bots.getPreviewMedias](https://core.telegram.org/method/bots.getPreviewMedias) to fetch&download the preview medias once the user opens the bot's profile page.  \nThe method will automatically select the correctly localized variant of each preview, according to the language code of the user (as passed to [initConnection](https://core.telegram.org/method/initConnection) when first setting up the client).\n\nBot owners may edit the preview medias directly through the API.\n\nTo check whether the current user can edit the preview medias of a bot, make sure both the `bot_can_edit` and `bot_has_main_app` flags of the bot's [user](https://core.telegram.org/constructor/user) constructor are set.\n\nThen, [bots.getPreviewInfo](https://core.telegram.org/method/bots.getPreviewInfo) should be invoked by bot owners to fetch the previously configured preview medias.  \nPass an empty string to `lang_code` when first invoking the method to fetch the previously configured default preview medias (used as fallback if there is no preview for the current user's language), and the list of `lang_codes` for which there are localized previews; then re-invoke the method to fetch the previously configured previews for each of the returned `lang_codes`.\n\n(Note: technically non-owners may also invoke [bots.getPreviewInfo](https://core.telegram.org/method/bots.getPreviewInfo), but it will always behave exactly as [bots.getPreviewMedias](https://core.telegram.org/method/bots.getPreviewMedias), returning only previews for the current language and an empty `lang_codes` array, regardless of the passed `lang_code`, so please only use [bots.getPreviewMedias](https://core.telegram.org/method/bots.getPreviewMedias) if you're not the owner).\n\nThen, use [bots.addPreviewMedia](https://core.telegram.org/method/bots.addPreviewMedia), [bots.editPreviewMedia](https://core.telegram.org/method/bots.editPreviewMedia), [bots.reorderPreviewMedias](https://core.telegram.org/method/bots.reorderPreviewMedias), [bots.deletePreviewMedia](https://core.telegram.org/method/bots.deletePreviewMedia), uploading medias using [messages.uploadMedia](https://core.telegram.org/method/messages.uploadMedia) as usual to setup fallback and localized previews for existing and new languages.\n\nAs specified above, each language can have a distinct set of previews that may be edited and reordered independently. The default, fallback language has an empty `lang_code`.\n\nA maximum of [bot\\_preview\\_medias\\_max\u00a0\u00bb](https://core.telegram.org/api/config#bot-preview-medias-max) preview medias may be added per localization key.\n\n### [](#keyboard-button-mini-apps)Keyboard Button Mini Apps\n\nSchema:\n\n```\nreplyKeyboardMarkup#85dd99d1 flags:# resize:flags.0?true single_use:flags.1?true selective:flags.2?true persistent:flags.4?true rows:Vector<KeyboardButtonRow> placeholder:flags.3?string = ReplyMarkup;\n\nkeyboardButtonSimpleWebView#a0c0505c text:string url:string = KeyboardButton;\n\nmessageActionWebViewDataSentMe#47dd8079 text:string data:string = MessageAction;\nmessageActionWebViewDataSent#b4c38cb5 text:string = MessageAction;\n\nwebViewResultUrl#4d22ff98 flags:# fullsize:flags.1?true fullscreen:flags.2?true query_id:flags.0?long url:string = WebViewResult;\n\n---functions---\n\nmessages.requestSimpleWebView#413a3e73 flags:# from_switch_webview:flags.1?true from_side_menu:flags.2?true compact:flags.7?true fullscreen:flags.8?true bot:InputUser url:flags.3?string start_param:flags.4?string theme_params:flags.0?DataJSON platform:string = WebViewResult;\n\nmessages.sendWebViewData#dc0242c8 bot:InputUser random_id:long button_text:string data:string = Updates;\n```\n\nKeyboard Button Mini Apps should be opened when the user clicks a [keyboardButtonSimpleWebView](https://core.telegram.org/constructor/keyboardButtonSimpleWebView) contained in a reply keyboard identified by a [replyKeyboardMarkup](https://core.telegram.org/constructor/replyKeyboardMarkup) constructor, by invoking [messages.requestSimpleWebView](https://core.telegram.org/method/messages.requestSimpleWebView) passing the button's `url` to the `url` parameter.\n\nAfter invoking [messages.requestSimpleWebView](https://core.telegram.org/method/messages.requestSimpleWebView) and obtaining a [webViewResultUrl](https://core.telegram.org/constructor/webViewResultUrl) result, clients should open a webview using the `url` contained in the returned [webViewResultUrl](https://core.telegram.org/constructor/webViewResultUrl).\n\nKeyboard Button Mini Apps can send data back to the bot through the MTProto API via a [`web_app_data_send` JS event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-data-send).\n\nUpon receiving a [`web_app_data_send` JS event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-data-send) **only** from Keyboard Button Mini Apps, clients should invoke [messages.sendWebViewData](https://core.telegram.org/method/messages.sendWebViewData), passing the following arguments:\n\n*   `bot` - Bot ID\n*   `random_id` - Unique random ID to avoid resending the same event multiple times\n*   `button_text` - Text of the [keyboardButtonSimpleWebView](https://core.telegram.org/constructor/keyboardButtonSimpleWebView) that was pressed to open the simple Mini App\n*   `data` - Contents of the `data` field of the JS event.\n\nMake sure to ignore all `web_app_data_send` events sent after the first one, [messages.sendWebViewData](https://core.telegram.org/method/messages.sendWebViewData) must be called only once. The webview must be closed after invoking the [messages.sendWebViewData](https://core.telegram.org/method/messages.sendWebViewData) method.\n\nThis will generate a [messageActionWebViewDataSent](https://core.telegram.org/constructor/messageActionWebViewDataSent) update for the user, and a [messageActionWebViewDataSentMe](https://core.telegram.org/constructor/messageActionWebViewDataSentMe) update for the bot, containing the event data.\n\n### [](#inline-button-mini-apps)Inline button Mini Apps\n\nSchema:\n\n```\nkeyboardButtonWebView#13767230 text:string url:string = KeyboardButton;\n\nwebViewResultUrl#4d22ff98 flags:# fullsize:flags.1?true fullscreen:flags.2?true query_id:flags.0?long url:string = WebViewResult;\n\ninputBotInlineResult#88bf9319 flags:# id:string type:string title:flags.1?string description:flags.2?string url:flags.3?string thumb:flags.4?InputWebDocument content:flags.5?InputWebDocument send_message:InputBotInlineMessage = InputBotInlineResult;\ninputBotInlineResultPhoto#a8d864a7 id:string type:string photo:InputPhoto send_message:InputBotInlineMessage = InputBotInlineResult;\ninputBotInlineResultDocument#fff8fdc4 flags:# id:string type:string title:flags.1?string description:flags.2?string document:InputDocument send_message:InputBotInlineMessage = InputBotInlineResult;\ninputBotInlineResultGame#4fa417f2 id:string short_name:string send_message:InputBotInlineMessage = InputBotInlineResult;\n\nupdateWebViewResultSent#1592b79d query_id:long = Update;\nwebViewMessageSent#c94511c flags:# msg_id:flags.0?InputBotInlineMessageID = WebViewMessageSent;\n\n---functions---\n\nmessages.requestWebView#269dc2c1 flags:# from_bot_menu:flags.4?true silent:flags.5?true compact:flags.7?true fullscreen:flags.8?true peer:InputPeer bot:InputUser url:flags.1?string start_param:flags.3?string theme_params:flags.2?DataJSON platform:string reply_to:flags.0?InputReplyTo send_as:flags.13?InputPeer = WebViewResult;\n\nmessages.prolongWebView#b0d81a83 flags:# silent:flags.5?true peer:InputPeer bot:InputUser query_id:long reply_to:flags.0?InputReplyTo send_as:flags.13?InputPeer = Bool;\n\nmessages.sendWebViewResultMessage#a4314f5 bot_query_id:string result:InputBotInlineResult = WebViewMessageSent;\n```\n\nInline Button Mini Apps work similarly to [inline bots\u00a0\u00bb](https://core.telegram.org/api/bots/inline): they send messages on behalf of the user to the chat from which the query originated.\n\nWhen the user clicks on an [keyboardButtonWebView](https://core.telegram.org/constructor/keyboardButtonWebView) inline button contained in an inline keyboard identified by a [replyInlineMarkup](https://core.telegram.org/constructor/replyInlineMarkup) constructor, [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView) should be invoked, passing [keyboardButtonWebView](https://core.telegram.org/constructor/keyboardButtonWebView).`url` must be passed to the method's `url` parameter.\n\nThen, clients should open a webview using the `url` contained in the returned [webViewResultUrl](https://core.telegram.org/constructor/webViewResultUrl).\n\nAfter loading the webview, until it is closed by a [web\\_app\\_close event](https://core.telegram.org/api/web-events#web-app-close), the user client must invoke [messages.prolongWebView](https://core.telegram.org/method/messages.prolongWebView) every 60 seconds: if the method call returns `QUERY_ID_INVALID`, the webview must be closed.\n\nThe opened URL's fragment parameters already contain basic information about the user and a `query_id` parameter, that is exposed by the [bot Mini Apps JS library](https://core.telegram.org/bots/webapps): this `query_id` can then be passed to the bot (within the Mini App itself, for example via an AJAX query or form submission to the server hosting the Mini App and the bot) and then used **by the bot** to invoke [messages.sendWebViewResultMessage](https://core.telegram.org/method/messages.sendWebViewResultMessage), passing an [InputBotInlineResult](https://core.telegram.org/type/InputBotInlineResult) constructor that will automatically send a message with optionally attached media, and even inline buttons on behalf of the user.\n\n### [](#menu-button-mini-apps)Menu button Mini Apps\n\nMenu button Mini Apps work similarly to [inline button Mini Apps\u00a0\u00bb](#inline-button-mini-apps): they send messages on behalf of the user to the chat from where the [bot menu button\u00a0\u00bb](https://core.telegram.org/api/bots/menu) was clicked.\n\nMenu button Mini Apps can be opened from a [botMenuButton](https://core.telegram.org/constructor/botMenuButton) [menu button\u00a0\u00bb](https://core.telegram.org/api/bots/menu): in this case, the [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView).`from_bot_menu` flag should be set, and the [botMenuButton](https://core.telegram.org/constructor/botMenuButton).`url` field must be passed to the method's `url` parameter.\n\nThe full flow is identical to the flow for [inline button Mini Apps\u00a0\u00bb](#inline-button-mini-apps), apart from the different flags passed to [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView), as described above.\n\n### [](#attachment-menu-mini-apps)Attachment menu Mini Apps\n\nAttachment menu Mini Apps work similarly to [inline button Mini Apps\u00a0\u00bb](#inline-button-mini-apps): they send messages on behalf of the user to the chat where the bot's [attachment menu\u00a0\u00bb](https://core.telegram.org/api/bots/attach) was opened.\n\nAttachment menu Mini Apps can be opened from an [attachment menu entry\u00a0\u00bb](https://core.telegram.org/api/bots/attach): in this case, no special flag should be set when invoking [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView).\n\nAttachment menu Mini Apps can also be opened from a [bot attachment menu deep link](https://core.telegram.org/api/links#bot-attachment-or-side-menu-links), in which case the `start_parameter` should be provided to [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView).`start_param`, if present, and the `compact`/`fullscreen` flag must be set if the `mode` parameter is set and equal to `compact`/`fullscreen`.\n\nThe full flow is identical to the flow for [inline button Mini Apps\u00a0\u00bb](#inline-button-mini-apps), apart from the different flags passed to [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView), as described above.\n\n### [](#inline-mode-mini-apps)Inline mode Mini Apps\n\n```\nmessages.botResults#e021f2f6 flags:# gallery:flags.0?true query_id:long next_offset:flags.1?string switch_pm:flags.2?InlineBotSwitchPM switch_webview:flags.3?InlineBotWebView results:Vector<BotInlineResult> cache_time:int users:Vector<User> = messages.BotResults;\n\ninlineBotWebView#b57295d5 text:string url:string = InlineBotWebView;\n\nwebViewResultUrl#4d22ff98 flags:# fullsize:flags.1?true fullscreen:flags.2?true query_id:flags.0?long url:string = WebViewResult;\n\n---functions---\n\nmessages.getInlineBotResults#514e999d flags:# bot:InputUser peer:InputPeer geo_point:flags.0?InputGeoPoint query:string offset:string = messages.BotResults;\n\nmessages.requestSimpleWebView#413a3e73 flags:# from_switch_webview:flags.1?true from_side_menu:flags.2?true compact:flags.7?true fullscreen:flags.8?true bot:InputUser url:flags.3?string start_param:flags.4?string theme_params:flags.0?DataJSON platform:string = WebViewResult;\n```\n\nNot to be confused with [inline button mini apps\u00a0\u00bb](#inline-button-mini-apps).\n\nInline mode Mini Apps can be used to generate a custom set of inline results in response to a user's [inline query\u00a0\u00bb](https://core.telegram.org/api/bots/inline) via a [`web_app_switch_inline_query` JS event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-switch-inline-query).\n\nInline mode Mini Apps can be opened by clicking on an [inlineBotWebView](https://core.telegram.org/constructor/inlineBotWebView) button returned at the top of the inline result list, contained in [messages.botResults](https://core.telegram.org/constructor/messages.botResults).`switch_webview`, returned by [messages.getInlineBotResults](https://core.telegram.org/method/messages.getInlineBotResults).\n\nPass the `url` to [messages.requestSimpleWebView](https://core.telegram.org/method/messages.requestSimpleWebView), while also setting the `from_switch_webview` flag.\n\nAfter invoking [messages.requestSimpleWebView](https://core.telegram.org/method/messages.requestSimpleWebView) and obtaining a [webViewResultUrl](https://core.telegram.org/constructor/webViewResultUrl) result, clients should open a webview using the `url` contained in the returned [webViewResultUrl](https://core.telegram.org/constructor/webViewResultUrl).\n\nOnce the user has finished making their choices in the Mini App, a [`web_app_switch_inline_query` JS event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-switch-inline-query) should be emitted, containing a JSON object with the following fields:\n\n*   `query` - The inline query that will be inserted in the chat's input field, after the bot's username.  \n    May be an empty string, in which case just the bot's username will be inserted, triggering an empty inline query.\n*   `chat_types` - An array of strings, containing a combination of `users`, `bots`, `groups`, `channels`.  \n    If non-empty, the client should prompt the user to choose a specific chat of the specified type(s), then open the chosen chat and inserts the bot's username and the specified inline query in the input field.  \n    The array values specify which types of chats the user will be able to choose from.  \n    If empty, the current chat is used.\n\nUpon receiving a [`web_app_switch_inline_query` JS event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-switch-inline-query) from the Mini App, the client should [make a new inline query\u00a0\u00bb](https://core.telegram.org/api/bots/inline) to the same bot, with the newly specified `query`, either in the current chat or in the newly chosen chat, as specified by the `chat_types` field.\n\n### [](#side-menu-mini-apps)Side menu Mini Apps\n\n```\nwebViewResultUrl#4d22ff98 flags:# fullsize:flags.1?true fullscreen:flags.2?true query_id:flags.0?long url:string = WebViewResult;\n\n---functions---\n\nmessages.requestSimpleWebView#413a3e73 flags:# from_switch_webview:flags.1?true from_side_menu:flags.2?true compact:flags.7?true fullscreen:flags.8?true bot:InputUser url:flags.3?string start_param:flags.4?string theme_params:flags.0?DataJSON platform:string = WebViewResult;\n```\n\nSide menu Mini Apps can be opened by clicking on the installed [side menu entry\u00a0\u00bb](https://core.telegram.org/api/bots/attach).\n\nThis action must trigger a [messages.requestSimpleWebView](https://core.telegram.org/method/messages.requestSimpleWebView) query with the `from_side_menu` flag set: clients should open a webview using the `url` contained in the returned [webViewResultUrl](https://core.telegram.org/constructor/webViewResultUrl).\n\nAfter invoking [messages.requestSimpleWebView](https://core.telegram.org/method/messages.requestSimpleWebView) and obtaining a [webViewResultUrl](https://core.telegram.org/constructor/webViewResultUrl) result, clients should open a webview using the `url` contained in the returned [webViewResultUrl](https://core.telegram.org/constructor/webViewResultUrl).\n\n### [](#direct-link-mini-apps)Direct Link Mini Apps\n\nSchema:\n\n```\ninputBotAppID#a920bd7a id:long access_hash:long = InputBotApp;\ninputBotAppShortName#908c0407 bot_id:InputUser short_name:string = InputBotApp;\n\nbotAppNotModified#5da674b7 = BotApp;\nbotApp#95fcd1d6 flags:# id:long access_hash:long short_name:string title:string description:string photo:Photo document:flags.0?Document hash:long = BotApp;\n\nmessages.botApp#eb50adf5 flags:# inactive:flags.0?true request_write_access:flags.1?true has_settings:flags.2?true app:BotApp = messages.BotApp;\n\nwebViewResultUrl#4d22ff98 flags:# fullsize:flags.1?true fullscreen:flags.2?true query_id:flags.0?long url:string = WebViewResult;\n\n---functions---\n\nmessages.getBotApp#34fdc5c3 app:InputBotApp hash:long = messages.BotApp;\n\nmessages.requestAppWebView#53618bce flags:# write_allowed:flags.0?true compact:flags.7?true fullscreen:flags.8?true peer:InputPeer app:InputBotApp start_param:flags.1?string theme_params:flags.2?DataJSON platform:string = WebViewResult;\n```\n\nAnother way to open Mini Apps is by using [Direct Mini App links\u00a0\u00bb](https://core.telegram.org/api/links#direct-mini-app-links).\n\nThese links are different from all other Mini App links, because they don't require the user to install an attachment menu, and a single bot can offer multiple Mini Apps, distinguished by their `short_name`.\n\nThese links should be handled as follows:\n\n*   Check if `bot_username` parameter of the link is indeed a bot username, if so then\n    \n*   Invoke [messages.getBotApp](https://core.telegram.org/method/messages.getBotApp), passing an [inputBotAppShortName](https://core.telegram.org/constructor/inputBotAppShortName) with the `short_name` contained in the `appname` query string parameter. If the client has already encountered an app with this short name from the same bot before, pass the `hash` of the cached [botApp](https://core.telegram.org/constructor/botApp) constructor to [messages.getBotApp](https://core.telegram.org/method/messages.getBotApp).\n    \n*   If a [messages.botApp](https://core.telegram.org/constructor/messages.botApp) constructor is returned, open the Mini App by invoking [messages.requestAppWebView](https://core.telegram.org/method/messages.requestAppWebView), generating an [inputBotAppID](https://core.telegram.org/constructor/inputBotAppID) constructor from `id` and `access_hash` of the returned [botApp](https://core.telegram.org/constructor/botApp), or from previously cached information if we already met the bot app and [botAppNotModified](https://core.telegram.org/constructor/botAppNotModified) was returned.\n    \n    *   If the client has clicked on the link in a Telegram chat, pass the chat's peer information into `peer`; otherwise pass the bot's peer information, instead.\n        \n    *   If the [messages.botApp](https://core.telegram.org/constructor/messages.botApp).`request_write_access` flag is set, the bot is asking permission to send messages to the user: **ask confirmation from the user** with a prompt and a checkbox, and if the user agrees, set the `write_allowed` flag when invoking [messages.requestAppWebView](https://core.telegram.org/method/messages.requestAppWebView).\n        \n    *   If the [messages.botApp](https://core.telegram.org/constructor/messages.botApp).`inactive` flag is set, **ask confirmation from the user** before opening the Mini App; the `request_write_access` checkbox should be shown in this prompt, if needed.  \n        Confirmation should **always** be asked, even if the `inactive` flag is not set, when opening the link from places where the full link is not visible (i.e. [messageEntityTextUrl](https://core.telegram.org/constructor/messageEntityTextUrl) text links, inline buttons etc.).\n        \n        Don't use two prompts if confirmation to open the Mini App is required _and_ `request_write_access` is set, use just one prompt with an optional checkbox for `request_write_access`.\n        \n    *   If the `startapp` query string parameter is present, pass it to `start_param` when invoking [messages.requestAppWebView](https://core.telegram.org/method/messages.requestAppWebView).\n        \n\nFinally, open the webview using the `url` contained in the returned [webViewResultUrl](https://core.telegram.org/constructor/webViewResultUrl).\n\n### [](#outgoing-events-mini-app-to-client)Outgoing events: Mini App to client\n\nMini Apps can _send_ web events starting with `web_app_`; see the [web event documentation for the full list of events that can be _sent_ by the Mini App to the client\u00a0\u00bb](https://core.telegram.org/api/web-events).\n\n### [](#incoming-events-client-to-mini-app)Incoming events: Client to Mini App\n\nMini Apps can also _receive_ events, by exposing a `window.Telegram.WebView.receiveEvent(\"event_name\", params)` method.\n\nHere's the full list of events that can be _received_ by a Mini App from the client, if the client invokes the `receiveEvent` method.\n\n#### [](#main-button-pressed)`main_button_pressed`\n\nParams: `null`\n\nSent by the client when the user presses the main button located at the bottom of the webview, handle this event only if the main button was [previously configured by a `web_app_setup_main_button` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-setup-main-button).\n\n#### [](#back-button-pressed)`back_button_pressed`\n\nParams: `null`\n\nSent by the client when the user presses the (OS or UI) back button, if it was [previously enabled by a `web_app_setup_back_button` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-setup-back-button).\n\n#### [](#settings-button-pressed)`settings_button_pressed`\n\nParams: `null`\n\nSent by the client when the user presses the settings button, if it was [previously enabled by a `web_app_setup_settings_button` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-setup-settings-button).\n\n#### [](#invoice-closed)`invoice_closed`\n\nParams: JSON object with the following fields:\n\n*   `slug` - Invoice identifier (string)\n*   `status` - One of the following values (string):\n    *   `cancelled` \u2013 The user closed the invoice popup without paying, before the call to [payments.sendPaymentForm](https://core.telegram.org/method/payments.sendPaymentForm).\n    *   `failed` \u2013 The user tried to pay, but the payment failed: the call to [payments.sendPaymentForm](https://core.telegram.org/method/payments.sendPaymentForm) returned an RPC error and the popup was closed.\n    *   `pending` \u2013 The payment is still processing: the bot will receive a further service message about a successful payment. [payments.sendPaymentForm](https://core.telegram.org/method/payments.sendPaymentForm) was successfully invoked returning [payments.paymentVerificationNeeded](https://core.telegram.org/constructor/payments.paymentVerificationNeeded), the user completed all additional verification forms returned by the method and the invoice popup was closed, but the client hasn't received a [messageActionPaymentSent](https://core.telegram.org/constructor/messageActionPaymentSent) service message yet.  \n        Note that eventual errors will not be sent as a `failed` event if the user fails additional validation (ie 3-D Secure) returned by [payments.paymentVerificationNeeded](https://core.telegram.org/constructor/payments.paymentVerificationNeeded): the state will remaing `pending`.\n    *   `paid` \u2013 The invoice was paid successfully: the client completed the [payment flow\u00a0\u00bb](https://core.telegram.org/api/payments), the invoice popup was closed and a [messageActionPaymentSent](https://core.telegram.org/constructor/messageActionPaymentSent) service message was received by the client.\n\nSent by the client to report the [payment status](https://core.telegram.org/api/payments) of an invoice obtained from a [`web_app_open_invoice` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-open-invoice).\n\n#### [](#viewport-changed)`viewport_changed`\n\nParams: a JSON object with the following fields:\n\n*   `height` - The current height of the visible area of the Mini App (excluding the bottom [main button](#main-button-pressed), if visible) (integer)\n*   `is_state_stable` - If true, the viewport is currently being resized (animation in progress), more events of this type may be emitted. (boolean)\n*   `is_expanded` - Whether the Mini App is expanded to its maximum height after the user swiped up or after the Mini App emitted a [web\\_app\\_expand](https://core.telegram.org/api/web-events#web-app-expand) event (boolean)\n\nEmitted when the viewport is changed.\n\n#### [](#theme-changed)`theme_changed`\n\nParams: a JSON object with the following fields:\n\n*   `theme_params` - A [theme parameters object\u00a0\u00bb](#theme-parameters) (object)\n\nEmitted when requested by the Mini App using a [`web_app_request_theme` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-request-theme), or when the app theme changes.\n\n##### [](#theme-parameters)Theme parameters\n\nBot Mini Apps can be themed according to the following theme parameters, passed as a JSON object to the `theme_params` parameter of the [messages.requestSimpleWebView](https://core.telegram.org/method/messages.requestSimpleWebView), [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView) and [messages.requestAppWebView](https://core.telegram.org/method/messages.requestAppWebView) methods.\n\nThis JSON object has the following keys, containing color theme information (hex string, RGB, no alpha) to pass to the Mini App.\n\nSee [here \u00bb](https://core.telegram.org/bots/webapps#themeparams) for more info on the contents of the object.\n\n#### [](#popup-closed)`popup_closed`\n\nParams: a JSON object with an optional `button_id` string field.\n\nEmitted when the user presses a button or cancels a popup brought up by a previous [`web_app_open_popup` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-open-popup).\n\n#### [](#write-access-requested)`write_access_requested`\n\nParams: a JSON object with the following fields:\n\n*   `status` - `allowed` or `cancelled`\n\nUsed by clients to reply to a [`web_app_request_write_access` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-request-write-access), indicating whether the user has allowed the bot to send messages to the user (`allowed`) or not (`cancelled`).\n\n#### [](#phone-requested)`phone_requested`\n\nParams: a JSON object with the following fields:\n\n*   `status` - `sent` or `cancelled`\n\nUsed by clients to reply to a [`web_app_request_phone` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-request-phone), indicating whether the user has shared their phone number with the bot (`allowed`) or not (`cancelled`).\n\n#### [](#biometry-info-received)`biometry_info_received`\n\nParams: a JSON object with the following fields:\n\n*   `available` - boolean, if true, indicates that biometric authentication is available on the current device.\n*   `type` - optional string, set if `available` is true, contains the type of biometric authentication, one of:\n    *   `finger` - fingerprint-based biometrics\n    *   `face` - face-based biometrics\n    *   `unknown` - biometrics of an unknown type\n*   `access_requested` - boolean, indicates whether the app has previously requested permission to use biometrics through a [`web_app_biometry_request_access` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-request-access)\n*   `access_granted` - boolean, indicates whether the user has granted the app permission to use biometrics in response to a [`web_app_biometry_request_access` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-request-access).  \n    If false and `access_requested` is true, the user has denied the app permission to use biometrics, in which case the app should open a prompt notifying the user that the biometric settings must be changed to use biometrics, and if the user clicks on the in-app confirm button, a [web\\_app\\_biometry\\_open\\_settings event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-open-settings) must be emitted.\n*   `token_saved` - boolean, whether a token was safely stored on-device by a previous [web\\_app\\_biometry\\_update\\_token event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-update-token).\n*   `device_id` - string, a unique device identifier that can be used to match the token to the device.\n\nUsed by clients to reply to a [`web_app_biometry_get_info` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-get-info) or a [`web_app_biometry_request_access` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-request-access).\n\n#### [](#biometry-token-updated)`biometry_token_updated`\n\nParams: a JSON object with the following fields:\n\n*   `status` - string, one of:\n    *   `updated` - If the token was successfully updated.\n    *   `removed` - If the token was successfully removed.\n    *   `failed` - If biometric authentication failed, or the app doesn't have permission to use biometrics (a [biometry\\_info\\_received event\u00a0\u00bb](#biometry-info-received) event will also be emitted if the app hasn't previously initialized the state using [`web_app_biometry_get_info` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-get-info) or a [`web_app_biometry_request_access` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-request-access)).\n\nUsed by clients to reply to a [`web_app_biometry_update_token` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-update-token).\n\n#### [](#biometry-auth-requested)`biometry_auth_requested`\n\nParams: a JSON object with the following fields:\n\n*   `status` - string, either `authorized` or `failed`.  \n    If `failed`, a [biometry\\_info\\_received event\u00a0\u00bb](#biometry-info-received) event will also be emitted if the app hasn't previously initialized the state using [`web_app_biometry_get_info` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-get-info) or a [`web_app_biometry_request_access` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-request-access).\n*   `token` - optional string, set if `status` is `authorized`, contains the token previously set using the [`web_app_biometry_update_token` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-update-token).\n\nUsed by clients to reply to a [`web_app_biometry_request_auth` biometric authentication request\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-biometry-request-auth).\n\n#### [](#custom-method-invoked)`custom_method_invoked`\n\nParams: a JSON object with the following fields:\n\n*   `req_id` - The `req_id` from the `web_app_invoke_custom_method` request\n*   `result` - The JSON data contained in the response of the [bots.invokeWebViewCustomMethod](https://core.telegram.org/method/bots.invokeWebViewCustomMethod) method, if the method call succeeded\n*   `error` - The text of the RPC error, if the method call failed\n\nUsed by clients to reply to [`web_app_invoke_custom_method` events\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-invoke-custom-method).\n\n#### [](#clipboard-text-received)`clipboard_text_received`\n\nParams: a JSON object with the following fields:\n\n*   `req_id` - The `req_id` from the `web_app_read_text_from_clipboard` request\n*   `data` - A string with the clipboard contents (optional, if not provided consider the request failed)\n\nUsed by clients to reply to [`web_app_read_text_from_clipboard` events\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-read-text-from-clipboard).\n\n#### [](#qr-text-received)`qr_text_received`\n\nParams: a JSON object with the following fields:\n\n*   `data` - string with the contents of a scanned QR code.\n\nEmitted by clients if a new QR code was scanned by the native QR code scanner opened with a [`web_app_open_scan_qr_popup` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-open-scan-qr-popup).\n\n#### [](#scan-qr-popup-closed)`scan_qr_popup_closed`\n\nParams: `null` or an empty object\n\nEmitted by clients if the QR code scanner popup opened with a [`web_app_open_scan_qr_popup` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-open-scan-qr-popup) was closed by the user or failed to open altogether due to permission issues.\n\n#### [](#visibility-changed)`visibility_changed`\n\nParams: a JSON object with a single `is_visible=true|false` boolean field.\n\nEmitted the Mini App becomes active (`true`) or inactive (`false`), e.g., opened/closed from minimized state or selected/deselected among tabs).\n\n#### [](#secondary-button-pressed)`secondary_button_pressed`\n\nParams: `null`\n\nSent by the client when the user presses the secondary button located at the bottom of the webview, handle this event only if the secondary button was [previously configured by a `web_app_setup_secondary_button` event\u00a0\u00bb](https://core.telegram.org/api/web-events#web-app-setup-secondary-button).\n\n#### [](#fullscreen-changed)`fullscreen_changed`\n\nParams: a JSON object with the following fields:\n\n*   `is_fullscreen` - boolean indicating whether the mini app is currently in fullscreen mode.\n\nSent by the client when replying to [web\\_app\\_request\\_fullscreen](https://core.telegram.org/api/web-events#web-app-request-fullscreen) and [web\\_app\\_exit\\_fullscreen](https://core.telegram.org/api/web-events#web-app-exit-fullscreen) events.\n\n#### [](#fullscreen-failed)`fullscreen_failed`\n\nParams: a JSON object with the following fields:\n\n*   `error` - string indicating the error, one of:\n    *   `UNSUPPORTED` - Fullscreen mode is not supported on this device or platform\n    *   `ALREADY_FULLSCREEN` - The Mini App is already in fullscreen mode\n\nSent by the client if a failure occurs while handling [web\\_app\\_request\\_fullscreen](https://core.telegram.org/api/web-events#web-app-request-fullscreen) and [web\\_app\\_exit\\_fullscreen](https://core.telegram.org/api/web-events#web-app-exit-fullscreen) events.\n\n#### [](#accelerometer-started)`accelerometer_started`\n\nParams: `null`\n\nSent by the client in response to a [web\\_app\\_start\\_accelerometer event \u00bb](https://core.telegram.org/api/web-events#web-app-start-accelerometer) if accelerometer tracking is started successfully.\n\nUntil [web\\_app\\_stop\\_accelerometer](https://core.telegram.org/api/web-events#web-app-stop-accelerometer) is emitted by the mini app, the client will also emit [accelerometer\\_changed events](#accelerometer-changed) at most every `refresh_rate` milliseconds with accelerometer readings.\n\n#### [](#accelerometer-failed)`accelerometer_failed`\n\nParams: JSON object with the following fields:\n\n*   `error` - String, one of:\n    *   `UNSUPPORTED` - Accelerometer tracking is not supported on this device or platform.\n\nSent by the client in response to a [web\\_app\\_start\\_accelerometer event \u00bb](https://core.telegram.org/api/web-events#web-app-start-accelerometer) if accelerometer tracking cannot be started.\n\n#### [](#accelerometer-stopped)`accelerometer_stopped`\n\nParams: `null`\n\nSent by the client in response to a [web\\_app\\_stop\\_accelerometer event \u00bb](https://core.telegram.org/api/web-events#web-app-stop-accelerometer) if accelerometer tracking is stopped successfully.\n\n#### [](#accelerometer-changed)`accelerometer_changed`\n\nParams: JSON object with `x`, `y` and `z` fields of type `float`, containing the current acceleration in the X, Y and Z-axis, measured in m/s\u00b2.\n\nSent periodically by the client at most every `refresh_rate` milliseconds after [web\\_app\\_start\\_accelerometer \u00bb](https://core.telegram.org/api/web-events#web-app-start-accelerometer) is invoked and until [web\\_app\\_stop\\_accelerometer](https://core.telegram.org/api/web-events#web-app-stop-accelerometer) is invoked.\n\n#### [](#gyroscope-started)`gyroscope_started`\n\nParams: `null`\n\nSent by the client in response to a [web\\_app\\_start\\_gyroscope event \u00bb](https://core.telegram.org/api/web-events#web-app-start-gyroscope) if gyroscope tracking is started successfully.\n\nUntil [web\\_app\\_stop\\_gyroscope](https://core.telegram.org/api/web-events#web-app-stop-gyroscope) is emitted by the mini app, the client will also emit [gyroscope\\_changed events](#gyroscope-changed) at most every `refresh_rate` milliseconds with gyroscope readings.\n\n#### [](#gyroscope-failed)`gyroscope_failed`\n\nParams: JSON object with the following fields:\n\n*   `error` - String, one of:\n    *   `UNSUPPORTED` - Gyroscope tracking is not supported on this device or platform.\n\nSent by the client in response to a [web\\_app\\_start\\_gyroscope event \u00bb](https://core.telegram.org/api/web-events#web-app-start-gyroscope) if gyroscope tracking cannot be started.\n\n#### [](#gyroscope-stopped)`gyroscope_stopped`\n\nParams: `null`\n\nSent by the client in response to a [web\\_app\\_stop\\_gyroscope event \u00bb](https://core.telegram.org/api/web-events#web-app-stop-gyroscope) if gyroscope tracking is stopped successfully.\n\n#### [](#gyroscope-changed)`gyroscope_changed`\n\nParams: JSON object with `x`, `y` and `z` fields of type `float`, containing the current rotation rate around the X, Y and Z-axis, measured in rad/s.\n\nSent periodically by the client at most every `refresh_rate` milliseconds after [web\\_app\\_start\\_gyroscope \u00bb](https://core.telegram.org/api/web-events#web-app-start-gyroscope) is invoked and until [web\\_app\\_stop\\_gyroscope](https://core.telegram.org/api/web-events#web-app-stop-gyroscope) is invoked.\n\n#### [](#device-orientation-started)`device_orientation_started`\n\nParams: `null`\n\nSent by the client in response to a [web\\_app\\_start\\_device\\_orientation event \u00bb](https://core.telegram.org/api/web-events#web-app-start-device-orientation) if device orientation tracking is started successfully.\n\nUntil [web\\_app\\_stop\\_device\\_orientation](https://core.telegram.org/api/web-events#web-app-stop-device-orientation) is emitted by the mini app, the client will also emit [device\\_orientation events](#device-orientation-changed) at most every `refresh_rate` milliseconds with device orientation readings.\n\n#### [](#device-orientation-failed)`device_orientation_failed`\n\nParams: JSON object with the following fields:\n\n*   `error` - String, one of:\n    *   `UNSUPPORTED` - Device orientation tracking is not supported on this device or platform.\n\nSent by the client in response to a [web\\_app\\_start\\_device\\_orientation event \u00bb](https://core.telegram.org/api/web-events#web-app-start-device-orientation) if device orientation tracking cannot be started.\n\n#### [](#device-orientation-stopped)`device_orientation_stopped`\n\nParams: `null`\n\nSent by the client in response to a [web\\_app\\_stop\\_device\\_orientation event \u00bb](https://core.telegram.org/api/web-events#web-app-stop-device-orientation) if device orientation tracking is stopped successfully.\n\n#### [](#device-orientation-changed)`device_orientation_changed`\n\nParams: JSON object with the following fields:\n\n*   `alpha` - The rotation around the Z-axis, measured in radians.\n*   `beta` - The rotation around the X-axis, measured in radians.\n*   `gamma` - The rotation around the Y-axis, measured in radians.\n*   `absolute` - A boolean that indicates whether or not the device is providing orientation data in absolute values (may be false even if absolute data was requested if and only if the device/platform doesn't support absolute orientation tracking).\n\nSent periodically by the client at most every `refresh_rate` milliseconds after [web\\_app\\_start\\_device\\_orientation \u00bb](https://core.telegram.org/api/web-events#web-app-start-device-orientation) is invoked and until [web\\_app\\_stop\\_device\\_orientation](https://core.telegram.org/api/web-events#web-app-stop-device-orientation) is invoked.\n\n#### [](#home-screen-added)`home_screen_added`\n\nParams: `null`\n\nSent by the client in response to a [web\\_app\\_add\\_to\\_home\\_screen event \u00bb](https://core.telegram.org/api/web-events#web-app-add-to-home-screen) if the shortcut was (already) added successfully.\n\nIt is acceptable to not emit this event if the current platform doesn't have a way to determine the installation status of the shortcut.\n\n#### [](#home-screen-failed)`home_screen_failed`\n\nParams: JSON object with the following fields:\n\n*   `error` - String, one of:\n    *   `UNSUPPORTED` - Shortcuts are not supported on this platform, or installation of the shortcut failed, or status cannot be reported.\n\nSent by the client in response to a [web\\_app\\_add\\_to\\_home\\_screen event \u00bb](https://core.telegram.org/api/web-events#web-app-add-to-home-screen) if the shortcut could not be added.\n\nIt is acceptable to not emit this event if the current platform doesn't have a way to determine the installation status of the shortcut.\n\n#### [](#home-screen-checked)`home_screen_checked`\n\nParams: JSON object with the following fields:\n\n*   `status` - String, one of:\n    *   `unsupported` \u2013 the feature is not supported, and it is not possible to add the icon to the home screen,\n    *   `unknown` \u2013 the feature is supported, and the icon can be added, but it is not possible to determine if the icon has already been added,\n    *   `added` \u2013 the icon has already been added to the home screen,\n    *   `missed` \u2013 the icon has not been added to the home screen.\n\n**Always** sent by the client in response to a [web\\_app\\_check\\_home\\_screen event \u00bb](https://core.telegram.org/api/web-events#web-app-check-home-screen).\n\n#### [](#emoji-status-failed)`emoji_status_failed`\n\nParams: JSON object with the following fields:\n\n*   `error` - String, one of:\n    *   `UNSUPPORTED` \u2013 The feature is not supported by the client.\n    *   `SUGGESTED_EMOJI_INVALID` \u2013 One or more emoji identifiers are invalid.\n    *   `DURATION_INVALID` \u2013 The specified duration is invalid.\n    *   `USER_DECLINED` \u2013 The user closed the dialog without setting a status.\n    *   `SERVER_ERROR` \u2013 A server error occurred when attempting to set the status.\n    *   `UNKNOWN_ERROR` \u2013 An unknown error occurred.\n\nSent by the client in response to a [web\\_app\\_set\\_emoji\\_status event \u00bb](https://core.telegram.org/api/web-events#web-app-set-emoji-status) if the emoji status could not be set.\n\n#### [](#emoji-status-set)`emoji_status_set`\n\nParams: `null`\n\nSent by the client in response to a [web\\_app\\_set\\_emoji\\_status event \u00bb](https://core.telegram.org/api/web-events#web-app-set-emoji-status) if the emoji status was set successfully.\n\n#### [](#emoji-status-access-requested)`emoji_status_access_requested`\n\nParams: JSON object with the following fields:\n\n*   `status` - String, one of:\n    *   `allowed` \u2013 The user (already) granted the bot permission to edit their emoji status\n    *   `cancelled` \u2013 The user declined the request, or an error occurred.\n\nSent by the client in response to a [web\\_app\\_request\\_emoji\\_status\\_access event \u00bb](https://core.telegram.org/api/web-events#web-app-request-emoji-status-access).\n\n#### [](#file-download-requested)`file_download_requested`\n\nParams: a JSON object with the following fields:\n\n*   `status` - Either `cancelled` (the download was aborted by the user or was not allowed by the API) or `downloading` (the download has successfully started).\n\nEmitted by clients during the [mini app](https://core.telegram.org/api/bots/webapps) file download flow, initiated by the [web\\_app\\_request\\_file\\_download \u00bb](https://core.telegram.org/api/web-events#web-app-request-file-download) event.\n\n#### [](#prepared-message-failed)`prepared_message_failed`\n\nParams: a JSON object with the following fields:\n\n*   `error` - Contains the text of the RPC error returned by [messages.getPreparedInlineMessage](https://core.telegram.org/method/messages.getPreparedInlineMessage), or `USER_DECLINED` if the user aborted the sharing process, or `MESSAGE_SEND_FAILED` if sending fails for another reason.\n\nEmitted by clients in case of errors during the [share prepared messages flow](https://core.telegram.org/api/bots/inline#21-using-a-prepared-inline-message), initiated by the [web\\_app\\_send\\_prepared\\_message \u00bb](https://core.telegram.org/api/web-events#web-app-send-prepared-message) event.\n\n#### [](#prepared-message-sent)`prepared_message_sent`\n\nParams: `null`\n\nEmitted by clients when the [share prepared messages flow](https://core.telegram.org/api/bots/inline#21-using-a-prepared-inline-message) initiated by the [web\\_app\\_send\\_prepared\\_message \u00bb](https://core.telegram.org/api/web-events#web-app-send-prepared-message) event completes successfully.\n\n#### [](#safe-area-changed)`safe_area_changed`\n\nParams: a JSON object with the following fields:\n\n*   `top` - The top inset in pixels, representing the space to avoid at the top of the screen (integer).\n*   `bottom` - The bottom inset in pixels, representing the space to avoid at the bottom of the screen (integer).\n*   `left` - The left inset in pixels, representing the space to avoid on the left side of the screen (integer).\n*   `right` - The right inset in pixels, representing the space to avoid on the left side of the screen (integer).\n\nEmitted by clients when any of the system-defined safe area inset padding values change, or when explicitly requested by the mini app using [web\\_app\\_request\\_safe\\_area](https://core.telegram.org/api/web-events#web-app-request-safe-area).\n\nSee [here \u00bb](https://core.telegram.org/bots/webapps#safeareainset) for more info.\n\n#### [](#content-safe-area-changed)`content_safe_area_changed`\n\nParams: a JSON object with the following fields:\n\n*   `top` - The top inset in pixels, representing the space to avoid at the top of the content area (integer).\n*   `bottom` - The bottom inset in pixels, representing the space to avoid at the bottom of the content area (integer).\n*   `left` - The left inset in pixels, representing the space to avoid on the left side of the content area (integer).\n*   `right` - The right inset in pixels, representing the space to avoid on the left side of the content area (integer).\n\nEmitted by clients when any of the content-defined safe area inset padding values change, or when explicitly requested by the mini app using [web\\_app\\_request\\_content\\_safe\\_area](https://core.telegram.org/api/web-events#web-app-request-content-safe-area).\n\nSee [here \u00bb](https://core.telegram.org/bots/webapps#contentsafeareainset) for more info.\n\n#### [](#location-requested)`location_requested`\n\nParams: a JSON object with the following fields:\n\n*   `available` - Boolean, indicates whether location data is available or not; if false, the following fields must not be set.\n*   `latitude` - Float, contains latitude in degrees.\n*   `longitude` - Float, contains longitude in degrees.\n*   `altitude` - Float or null, contains the altitude above the sea level in metres, must be null if not supported by the device or platform.\n*   `course` - Float or null, contains the direction the device is moving in degrees, must be null if not supported by the device or platform.\n*   `speed` - Float or null, contains the speed of the device in m/s, must be null if not supported by the device or platform.\n*   `horizontal_accuracy` - Float or null, contains the accuracy of the latitude and longitude values in meters, must be null if not supported by the device or platform.\n*   `vertical_accuracy` - Float or null, contains the accuracy of the altitude value in meters, must be null if not supported by the device or platform.\n*   `course_accuracy` - Float or null, contains the accuracy of the course value in degrees, must be null if not supported by the device or platform.\n*   `speed_accuracy` - Float or null, contains the accuracy of the speed value in m/s, must be null if not supported by the device or platform.\n\nEmitted in response to a [web\\_app\\_request\\_location event](https://core.telegram.org/api/web-events#web-app-request-location).\n\n#### [](#location-checked)`location_checked`\n\nParams: a JSON object with the following fields:\n\n*   `available` - Boolean, indicates whether location data is available on the current platform or device.\n*   `access_requested` - Optional boolean, must be set if `available` is true, indicates whether the mini app has already requested access to location data.\n*   `access_granted` - Optional boolean, if set and `true` indicates that the user granted the mini app access to location data.\n\nEmitted in response to a [web\\_app\\_check\\_location event](https://core.telegram.org/api/web-events#web-app-check-location).",
    "url": "https://core.telegram.org/api/bots%2Fwebapps"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/bots%2Fgames",
      "title": "Games",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Games"
        },
        {
          "property": "og:description",
          "content": "Bots can offer users HTML5 games to play solo or to compete against each other in groups and one-on-one chats."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:10:36 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "3631",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Games\n\nBots can offer users [HTML5 games](https://core.telegram.org/bots/games) to play solo or to compete against each other in groups and one-on-one chats.\n\n### [](#sending-a-game)Sending a game\n\n```\ninputUserSelf#f7c1b13f = InputUser;\n\ninputGameID#32c3e77 id:long access_hash:long = InputGame;\ninputGameShortName#c331e80a bot_id:InputUser short_name:string = InputGame;\n\ninputMediaGame#d33f43f3 id:InputGame = InputMedia;\n\ngame#bdf9653b flags:# id:long access_hash:long short_name:string title:string description:string photo:Photo document:flags.0?Document = Game;\nmessageMediaGame#fdb19008 game:Game = MessageMedia;\n\n---functions---\n\nmessages.sendMedia#7852834e flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true noforwards:flags.14?true update_stickersets_order:flags.15?true invert_media:flags.16?true allow_paid_floodskip:flags.19?true peer:InputPeer reply_to:flags.0?InputReplyTo media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int send_as:flags.13?InputPeer quick_reply_shortcut:flags.17?InputQuickReplyShortcut effect:flags.18?long = Updates;\n```\n\nBots can directly send a game using [messages.sendMedia](https://core.telegram.org/method/messages.sendMedia), providing:\n\n*   The game's short name obtained from [@BotFather](https://t.me/botfather) or from a [game link\u00a0\u00bb](https://core.telegram.org/api/links#game-links) to `inputGameShortName.short_name`\n*   The current bot's info to `inputGameShortName.bot_id`\n\nThe sent message will contain a [messageMediaGame](https://core.telegram.org/constructor/messageMediaGame) with a [game](https://core.telegram.org/constructor/game), that can then be used by users to forward the game using sendMedia with [inputGameID](https://core.telegram.org/constructor/inputGameID).\n\n### [](#starting-a-game)Starting a game\n\nGames are started clicking on the button, which triggers an callback query that returns the game URL, for more info [see here\u00a0\u00bb](https://core.telegram.org/api/bots/buttons#callback-queries).  \nThe game should then be opened in a WebView or in native UI (specified by the `native_ui` flag), exposing the [appropriate HTML5 APIs](https://core.telegram.org/api/web-events) in order to receive various JS game events directly from the code of the game, as described [here\u00a0\u00bb](https://core.telegram.org/api/web-events).\n\n### [](#setting-highscores)Setting highscores\n\n```\n---functions---\n\nmessages.setGameScore#8ef8ecc0 flags:# edit_message:flags.0?true force:flags.1?true peer:InputPeer id:int user_id:InputUser score:int = Updates;\nmessages.setInlineGameScore#15ad9f64 flags:# edit_message:flags.0?true force:flags.1?true id:InputBotInlineMessageID user_id:InputUser score:int = Bool;\n```\n\nGames are supposed to report back to the MTProto API every time the user looses a game with a new highscore.  \nSince games run in the browser, they cannot directly report data to the API using the bot token, which must be kept secret.  \nInstead, they should send highscores to an intermediate server, that will then report scores using [messages.setGameScore](https://core.telegram.org/method/messages.setGameScore) or [messages.setInlineGameScore](https://core.telegram.org/method/messages.setInlineGameScore), depending on the source of the game.\n\n*   The `edit_message` flag should be set if the game message should be automatically edited to include the current scoreboard\n*   The `force` flag should be set if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters.\n\n### [](#getting-highscores)Getting highscores\n\n```\nmessageActionGameScore#92a72876 game_id:long score:int = MessageAction;\n\nmessageService#2b085862 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true legacy:flags.19?true id:int from_id:flags.8?Peer peer_id:Peer reply_to:flags.3?MessageReplyHeader date:int action:MessageAction ttl_period:flags.25?int = Message;\n\nhighScore#73a379eb pos:int user_id:long score:int = HighScore;\n\nmessages.highScores#9a3bfd99 scores:Vector<HighScore> users:Vector<User> = messages.HighScores;\n\n---functions---\n\nmessages.getGameHighScores#e822649d peer:InputPeer id:int user_id:InputUser = messages.HighScores;\nmessages.getInlineGameHighScores#f635e1b id:InputBotInlineMessageID user_id:InputUser = messages.HighScores;\n```\n\nEvery time a highscore is reached, and the `edit_message` flag is set when reporting the score, a [messageService](https://core.telegram.org/constructor/messageService) with a [messageActionGameScore](https://core.telegram.org/constructor/messageActionGameScore) is generated, indicating that the highscore of a certain game has changed, thanks to a certain `user_id`.  \nOur own current position of the scoreboard is also reported as `pos`.\n\nWhen receiving such an update, graphical clients should refetch the scoreboard using [messages.getGameHighScores](https://core.telegram.org/method/messages.getGameHighScores) or [messages.getInlineGameHighScores](https://core.telegram.org/method/messages.getInlineGameHighScores).",
    "url": "https://core.telegram.org/api/bots%2Fgames"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/mtproto/TL-combinators",
      "title": "Formal description of TL combinators",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Formal description of TL combinators"
        },
        {
          "property": "og:description",
          "content": "\ufeffFormal declaration of TL combinators\nMain article: Formal description of TL. See also TL Language.\nCombinators in TL are\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:17:52 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4756",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Formal description of TL combinators\n\n\ufeff[Formal declaration of TL combinators](https://core.telegram.org/mtproto/TL-combinators)\n\nMain article: [Formal description of TL](https://core.telegram.org/mtproto/TL-formal). See also [TL Language](https://core.telegram.org/mtproto/TL).\n\nCombinators in TL are declared as follows:\n\n_combinator-decl_ ::= _full-combinator-id_ { _opt-args_ } { _args_ } `=` _result-type_ `;`  \n_full-combinator-id_ ::= _lc-ident-full_ | `_`  \n_combinator-id_ ::= _lc-ident-ns_ | `_`  \n_opt-args_ ::= `{` _var-ident_ { _var-ident_ } : \\[_excl-mark_\\] _type-expr_ `}`  \n_args_ ::= _var-ident-opt_ `:` \\[ _conditional-arg-def_ \\] \\[ `!` \\] _type-term_  \n_args_ ::= \\[ _var-ident-opt_ `:` \\] \\[ _multiplicity_ `*`\\] `[` { _args_ } `]`  \n_args_ ::= `(` _var-ident-opt_ { _var-ident-opt_ } `:` \\[`!`\\] _type-term_ `)`  \n_args_ ::= \\[ `!` \\] _type-term_  \n_multiplicity_ ::= _nat-term_  \n_var-ident-opt_ ::= _var-ident_ | `_`  \n_conditional-arg-def_ ::= _var-ident_ \\[ `.` _nat-const_ \\] `?`  \n_result-type_ ::= _boxed-type-ident_ { _subexpr_ }  \n_result-type_ ::= _boxed-type-ident_ `<` _subexpr_ { `,` _subexpr_ } `>`\n\nWe shall clarify what all this means.\n\n*   A combinator identifier is either an identifier starting with a lowercase Latin letter (_lc-ident_), or a namespace identifier (also _lc-ident_) followed by a period and another _lc-ident_. Therefore, `cons` and `lists.get` are valid combinator identifiers.\n    \n*   A combinator has a _name_, also known as a _number_ (not to be confused with the _designation_) -- a 32-bit number that unambiguously determines it. It is either calculated automatically (see below) or it is explicitly assigned in the declaration. To do this, a hash mark (`#`) and exactly 8 hexadecimal digits -- the combinator's name -- are added to the identifier of the combinator being defined.\n    \n*   A combinator's declaration begins with its identifier, to which its name (separated by a hash mark) may have been added.\n    \n*   After the combinator identifier comes the main part of the declaration, which consists of declarations of _fields_ (or _variables_), including an indication of their _types_.\n    \n*   First come declarations of optional fields (of which there may be several or none at all). Then there are the declarations of the required fields (there may not be any of these either).\n    \n*   Any identifier that begins with an uppercase or lowercase letter and which does not contain references to a namespace can be a field (variable) identifier. Using _uc-ident_ for identifiers of variable types and _lc-indent_ for other variables is good practice.\n    \n*   Next a combinator declaration contains the equals sign (`=`) and the result type (it may be composite or appearing for the first time). The result type may be polymorphic and/or dependent; any fields of the defined constructor's fields of type `Type` or `#` may be returned (as subexpressions).\n    \n*   A combinator declaration is terminated with a semicolon.\n    \n\nIn what follows, a constructor's _fields_, _variables_, and _arguments_ mean the same thing.\n\n### [](#optional-field-declarations)Optional field declarations\n\n*   These have the form `{` _field\\_1_ ... _field\\_k_ `:` _type-expr_ `}`, where _field\\_i_ is a variable (field) identifier that is unique within the scope of the combinator declaration, and _type-expr_ is a type shared by all of the fields.\n    \n*   If _k>1_, this entry is functionally equivalent to `{` _field\\_1_ `:` _type-expr_ `}` ... `{` _field\\_k_ `:` _type-expr_ `}`.\n    \n*   All optional fields must be explicitly named (using `_` instead of _field\\_i_ is not allowed).\n    \n*   Moreover, at present the names of all optional fields must share the combinator's result type (possibly more than once) and themselves be of type `#` (i,e., `nat`) or `Type`. Therefore, if the exact result type is known, it is possible to determine the values of all of the combinator's implicit parameters (possibly obtaining a contradiction of the form `2=3` in doing so, which means that the combinator is not allowed in the context).\n    \n\n### [](#required-field-declarations)Required field declarations\n\n*   These may have the form `(` _field\\_1_ ... _field\\_k_ `:` _type-expr_ `)`, similar to an optional field declaration, but with parentheses. This entry is equivalent to `(` _field\\_1_ `:` _type-expr_ `)` ... `(` _field\\_k_ : _type-expr_ `)`, where the fields are defined one at a time.\n    \n*   The underscore sign (`_`) can be used as names of one or more fields (_field\\_i_), indicating that the field is anonymous (the exact name is unimportant).\n    \n*   One field may be declared without outer parentheses, like this: _field\\_id_ `:` _type-expr_. Here, however, if _type-expr_ is a complex type, parentheses may be necessary around _type-expr_ (this is reflected in BNF).\n    \n*   Furthermore, one anonymous field may be declared using a _type-expr_ entry, functionally equivalent to `_` `:` _type-expr_.\n    \n*   Required field declarations follow one after another, separated by spaces (by any number of whitespace symbols, to be more precise).\n    \n*   The declared field's type (_type-expr_) may use the declared combinator's previously defined variables (fields) as subexpressions (i.e. parameter values). For example:\n    \n    nil {X:Type} = List X; cons {X:Type} hd:X tl:(list X) = List X; typed\\_list (X:Type) (l : list X) = TypedList;\n    \n\n### [](#repetitions)Repetitions\n\n*   These may only exist among required parameters. They have the form \\[ _field-id_ `:` \\] \\[ _multiplicity_ `*` \\] `[` _args_ `]`, where _args_ has the same format as the combinator's declaration of (several) required fields, except that all of the enclosing combinator's previously declared fields may be used in the argument types.\n    \n*   The name of a field of an enclosing combinator that receives a repetition as a value may be specified (_field-id_), or bypassed, which is equivalent to using the underscore sign as a _field-id_.\n    \n*   The _multiplicity_ field is an expression of the type `#` (`nat`), which can be a real constant, the name of a preceding field of type `#`, or an expression in the form `(` _c_ `+` _v_ `)`, where _c_ is a real constant and _v_ is the name of a field of type `#`. The sense of the _multiplicity_ field is to provide the length of the (repetition) vector, each element of which consists of values of the types enumerated in _args_.\n    \n*   The _multiplicity_ field may be bypassed. In this case, the last preceding parameter of type `#` from the enclosing combinator is used (it must be).\n    \n*   Functionally, the repetition _field-id_ `:` _multiplicity_ `*` `[` _args_ `]` is equivalent to the declaration of the single field `(` _field-id_ `:` `%Tuple` `%AuxType` _multiplicity_ `)`, where `aux_type` is an auxiliary type with a new name defined as `aux_type *args* = AuxType`. If any of the enclosing type's fields are used within _args_, they are added to the auxiliary constructor `aux_type` and to its `AuxType` result type as the first (optional) parameters.\n    \n*   If _args_ consists of one anonymous field of type _some-type_, then _some-type_ can be used directly instead of `%AuxType`.\n    \n*   If during implementation the repetitions are rewritten as indicated above, it is logical to use instead of `aux_type` and `AuxType`, some identifiers that contain the name of the outer combinator being defined and the repetition's index number inside its definition.\n    \n\nExample:\n\n```\nmatrix {m n : #} a : m* [ n* [ double ] ] = Matrix m n;\n```\n\nis functionally equivalent to\n\n```\naux_type {n : #} (_ : %Tuple double n) = AuxType n;\nmatrix {m : #} {n : #} (a : %Tuple %(AuxType n) m) = Matrix m n;\n```\n\nMoreover, the built-in types `Tuple` and `Vector` could be defined as:\n\n```\ntnil {X : Type} = Tuple X 0;\ntcons {X : Type} {n : #} hd:X tl:%(Tuple X n) = Tuple X (S n);\nvector {X : Type} (n : #) (v : %(Tuple X n)) = Vector X;\n```\n\nActually, the following equivalent entry is considered the definition of `Vector` (i.e. it is specifically this entry that is used to compute the name of the `vector` constructor and its partial applications):\n\n```\nvector {t : Type} # [ t ] = Vector t;\n```\n\nIf we expand it using `Tuple`, we obtain the previous definition exactly.\n\n### [](#conditional-fields)Conditional fields\n\nThe construction\n\n_args_ ::= _var-ident-opt_ `:` \\[ _conditional-arg-def_ \\] \\[ `!` \\] _type-term_  \n_conditional-arg-def_ ::= _var-ident_ \\[ `.` _nat-const_ \\] `?`\n\npermits assigning fields which are only present if the value of a preceding mandatory or optional field of type `#` is not null (or if its chosen bit is not zero if the special binary bit-selection operator `.` is applied). Example:\n\nuser {fields:#} id:int first\\_name:(fields.0?string) last\\_name:(fields.1?string) friends:(fields.2?%(Vector int)) = User fields;  \nget\\_users req\\_fields:# ids:%(Vector int) = Vector %(User req\\_fields)",
    "url": "https://core.telegram.org/mtproto/TL-combinators"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/mtproto/TL-polymorph",
      "title": "\ufeffPolymorphism in TL",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "\ufeffPolymorphism in TL"
        },
        {
          "property": "og:description",
          "content": "It should be noted that in the TL schema of the overwhelming majority of API calls the use of polymorphic types is restricted\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:17:51 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4125",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Polymorphism in TL\n\nIt should be noted that in the TL schema of the overwhelming majority of API calls the use of polymorphic types is restricted to the Vector type. Nevertheless, having a view of the big picture is still helpful.\n\n### [](#ordinary-inductive-types)Ordinary inductive types\n\nFor example, let us consider the IntList, which is defined as follows:\n\n```\nint_cons hd:int tl:IntList = IntList;\nint_nil = IntList;\n```\n\nThe \u201cint\\_cons\u201d and \u201cint\\_nil\u201d constructors as well as the \u201cIntList\u201d type itself are expressions of the following types (writing A : X means that A is an expression of type X):\n\n```\nIntList : Type;\nint_cons : int -> IntList -> IntList;\nint_nil : IntList;\n```\n\nThe keyword _Type_ is used to denote the type of all types. Note that Type is not Object (Object is the type of all terms). Here is alternative syntax that could be used in some other functional programming language (but not in TL):\n\n```\nNewType IntList :=\n| int_cons hd:int tl:IntList\n| int_nil\nEndType\n```\n\n### [](#polymorphic-type)Polymorphic type\n\nTL supports the following version (curly brackets indicate optional fields, see below):\n\n```\ncons {X:Type} hd:X tl:(List X) = List X;\nnil {X:Type} = List X\n```\n\nHere is an alternative formulation in other functional languages with dependent types:\n\n```\nNewType List {X:Type} :=\n| cons {X:Type} hd:X tl:(List X)\n| nil {X:Type}\nEndType\n```\n\nIn any event, these variations are equivalent to one another from the point of view of the formal theory of types and lead to the definition of the following terms:\n\n```\nList : Type -> Type;\ncons : forall (X:Type), X -> List X -> List X;\nnil : forall (X:Type), X -> List X;\n```\n\nIn each case, remember that writing \u201cA -> B\u201d is shorthand for \u201cforall (x : A), B\u201d for any variable x not entering into A and B. For example, the \u201ccons\u201d type could be written as follows:\n\n```\ncons : forall (X:Type), forall (hd : X), forall (tl : List X), List X\n```\n\nor more compactly:\n\n```\ncons : forall (X : Type) (hd : X) (tl : List X), List X\n```\n\nSee [Calculus of constructions](https://en.wikipedia.org/wiki/Calculus_of_constructions). Examples of functional languages with dependent types, which support similar constructions are [Coq](https://en.wikipedia.org/wiki/Coq) and [Agda](https://en.wikipedia.org/wiki/Agda_%28programming_language%29).\n\nIn this case, the entry after a universal quantifier proves to be more content-related than that after an arrow, because the name of a variable bound by the quantifier is used to transmit the name of the corresponding field in the constructor, even if this variable is not used anywhere as it pertains to the expression under the quantifier. Structurally, all of these entries of the \u201ccons\u201d type are equivalent.\n\n### [](#serialization-of-types-values-of-type-type)Serialization of types (values of type Type)\n\nAs we can see, to serialize a value of type List X, which has been obtained by applying the combinator \u201ccons X:Type hd:X tl:(List X) = List X\u201d, we need to:\n\n1.  serialize the name of the \u201ccons\u201d combinator into a 32-bit number;\n2.  serialize X (as a type, i.e. as a value of type Type) if X is a required parameter;\n3.  serialize the head of the list (hd) as a value of type X;\n4.  serialize the tail of the list as a value of the polymorphic type List X.\n\nIn the first step, the natural question is which string exactly will be used to calculate the CRC32. It is proposed to take \"`cons X:Type hd:X tl:List X = List X`\u201d without the terminating semicolon and without any parentheses (closed type expressions are unambiguously reconstructed based on their construction's prefix).\n\nIn the last step, we recursively resolve the very same problem of serializing a value of type List X; we will consider it resolved based on the assumption of induction in the construction of the value being serialized. We will similarly consider the third step understandable (induction in the construction of the value being serialized).\n\nWe still need to describe how to transmit (serialize) types, e.g. values of type **Type**. _Types in TL schemas currently appear only as constructors' optional parameters and are therefore never serialized explicitly. Rather, their values are inferred from the previously known type of the value being serialized_.\n\nFor completeness we will describe how it would be possible to serialize types (values of type Type). However, keep in mind that for now this information is not useful. See [Type serialization](https://core.telegram.org/mtproto/TL-types).\n\n### [](#optional-arguments-in-polymorphic-constructors)Optional arguments in polymorphic constructors\n\nIt was stated above that any subset of (the first few) parameters of any constructor can be identified as optional (by enclosing their declarations in curly brackets), but this is not actually entirely accurate. First, these optional parameters can only be of type `Type` or `#` (natural numbers). Second, optional parameters must share the return value's type, otherwise their value cannot be determined.\n\nNote that @'''constr-id''' means the constructor's \u201cfull form\u201d (in which all optional parameters become required), while '''constr-id'' denotes its abbreviated form (without the optional arguments). If there are no optional arguments, then these two forms are the same. Constructors' full forms are never used at present.\n\n### [](#bare-polymorphic-types)Bare polymorphic types\n\nThere is a small problem: if we want to serialize the value of the bare type '%pair string int' or '%pair string Y' (which in TL is usually denoted simply as \u201cpair\u201d, though the form \u201c%Pair\u201d is preferable), we cannot simultaneously use both the full constructor @pair and the partial pair, because the constructor's name will not be serialized. Therefore, we must differentiate the bare types %@pair (type X, type Y, value x:X, and value y:Y are serialized) and %pair (only x:X and y:Y are serialized; types X and Y are known from the context). In practice, we nearly almost always need the bare type %pair, and this is precisely what \u201cpair\u201d means in the type's context in TL. Therefore,\n\n```\nrecord name:string map:(List (pair int string)) = Record;\n```\n\nwill be serialized approximately like we want it to be (the serialization of list elements will consist of the serialization of int and the serialization of string, without any additional headers, types, or combinator names). Incidentally, when calculating the \u201crecord\u201d combinator's name _'record'_ in the example given above, the CRC32 of `record name:string map:List pair int string = Record` will be computed.\n\nAlso note that a more precise description of this type would be\n\n```\nrecord name:string map:(List %(Pair int string)) = Record\n```",
    "url": "https://core.telegram.org/mtproto/TL-polymorph"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/mtproto/TL-dependent",
      "title": "TL-dependent",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "TL-dependent"
        },
        {
          "property": "og:description",
          "content": "Main article: TL Language.\nIn certain cases, types may depend not only on other types (polymorphism), but also on the parameters\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:17:52 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5299",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# TL-dependent\n\nMain article: [TL Language](https://core.telegram.org/mtproto/TL).\n\nIn certain cases, types may depend not only on other types (polymorphism), but also on the parameters of another type (dependent types). The TL language provides very limited support for this functionality: dependence is only allowed on a natural parameter whose type is designated using `#` (alias `nat`, but this is private -- TL doesn't currently support this synonym). Values of type # are serialized as 32-bit signed numbers from 0 to 2^31-1.\n\n## [](#example-integer-tuples-vectors)Example: integer tuples (vectors)\n\nSuppose we want to use induction to define the types \u201cone integer\u201d, \u201ctwo integers\u201d, and \u201cthree integers\u201d. We could try to define them as follows:\n\n```\nempty = Empty;\nsingle x:int = Single;\npair x:int y:int = Pair;\ntriple x:int y:int z:int = Triple;\nquadruple x:int y:int z:int t:int = Quadruple;\n...\n```\n\nor as:\n\n```\nempty = Empty;\nsingle x:int empty = Single;\npair x:int y:single = Pair;\ntriple x:int yz:pair = Triple;\nquadruple x:int yzt:triple = Quadruple;\n```\n\nor as:\n\n```\ntnil = Tuple0;\ntcons0 hd:int tl:Tuple0 = Tuple1;\ntcons1 hd:int tl:Tuple1 = Tuple2;\ntcons2 hd:int tl:Tuple2 = Tuple3;\n...\ntcons_n hd:int tl:Tuple_n = Tuple_(n+1)\n```\n\nThe first two variations lead to the same serialization. For example, `(2 3 9):%triple` and `(2 (3 9)):%triple` serialize as three 32-bit numbers: `2 3 9`. The last variation better emphasizes the inductive version of the definition, but it uses boxed types. This is good from a theoretical perspective, but it leads to \u201csuperfluous\u201d constructor names in serialization.\n\nTherefore, we will write `%Type-Ident` to indicate the bare type that corresponds to the boxed type `Type-Ident` with a single constructor. If this constructor is named `constructor`, then according to the definition %`Type-Ident` = %`constructor`. Now we can write our definition like this:\n\n```\ntnil = Tuple0;\ntcons_n hd:int tl:%Tuple_n = Tuple_(n+1)\n```\n\nIf we now abstract _n_ out of the name of the type name and make it like a parameter for a polymorphic (dependent, to be more exact) type, then something like the following can be written in a suitable functional language:\n\n```\nNewType Tuple (n : #) :=\n| tnil = Tuple 0\n| tcons n:# hd:int tl:%(Tuple n) = Tuple (S n)\nEndType;\n```\n\nIn the TL language, it looks like this:\n\n```\ntnil = Tuple 0;\ntcons {n:#} hd:int tl:%(Tuple n) = Tuple (S n);\n```\n\nThe function `S : # -> #` and the constant `O : #` (it is `0`) are the function for the next natural number (`S n = n + 1`) and the constant null. Therefore, the type `#` (alias `nat`) behaves as if it were defined in TL using the constructors\n\n```\nO = nat;\nS nat = nat;\n```\n\nor, using syntax more typical of other functional languages,\n\n```\nNewType nat :=\n| O\n| S nat\nEndType;\n```\n\nTypes of all defined combinators:\n\n```\nO : #\nS : # -> #\nTuple : # -> Type\ntnil : Tuple 0\ntcons : forall n : #, int -> Tuple n -> Tuple (S n)\n```\n\nor\n\n```\nTuple : forall n : #, Type;\ntcons : forall n : #, forall hd : int, forall tl : Tuple n, Tuple (S n)\n```\n\nNote that in this case the constructor `tnil` does not depend on the parameter _n_, while `tcons` does.\n\nIn an analogous manner, it is possible to define a complete binary tree of height _h_ with strings in the leaf nodes:\n\n```\ntleaf value:string = BinTree 0;\ntnode {h:#} left:(BinTree h) right:(BinTree h) = BinTree (S h);\n```\n\nOr a random tree whose leaf nodes are all a distance of _h_ from the root and whose nodes are all labeled with integers:\n\n```\nhleaf value:int = Tree 0;\nhnode {n:#} left:(Tree n) next:(Tree (S n)) = Tree (S n)\nhnil {n:#} = Tree (S n)\n```\n\nAnother version:\n\n```\nhleaf' value:int = Tree' 0;\nhnode' {n:#} children:(list (Tree' n)) = Tree' (S n)\n```\n\n## [](#polymorphic-dependent-types)Polymorphic dependent types\n\nLet us try to define a type `Tuple X n` whose values are _n_\\-tuples of type `X` values. In this way, `Tuple` will be simultaneously polymorphic and dependent:\n\n```\nTuple : Type -> # -> Type;\n```\n\nIn the familiar syntax of functional languages:\n\n```\nNewType Tuple {X : Type} {n : #} :=\n| vnil : Tuple X 0\n| vcons {n:#} hd:X tl:%(Tuple X n) : Tuple X (S n)\nEndType\n```\n\nor, in TL syntax,\n\n```\nvnil {X:Type} = Tuple X 0;\nvcons {X:Type} {n:#} tl:(%Tuple X n) = Tuple X S n\n```\n\nIn the end we obtain terms for the following types:\n\n```\nvnil : forall X : Type, Tuple X 0\nvcons : forall X : Type, forall n : #, X -> Tuple X n -> Tuple X (S n)\n```\n\nor\n\n```\nvnil : forall X : Type, Tuple X 0\nvcons : forall X : Type, forall n : #, forall hd : X, forall tl : Tuple X n, Tuple X (S n)\n```\n\n## [](#dependent-sums)Dependent sums\n\nThe `Tuple` we just defined differs from the built-in `Vector` type. Specifically, the `Vector` type formally depends on a single argument (a type), but our `Tuple` depends on two (a type and a number):\n\n```\nTuple : Type -> # -> Type;\nVector : Type -> Type;\n```\n\nThe built-in `Vector` could be defined in terms of our `Tuple` using \u201csumming across all _n_ : #\":\n\n```\nvector {X:Type} n:# v:(%Tuple X n) = Vector X;\n```\n\nNevertheless, our `Tuple` has its advantages. For example, we can define data types such as:\n\n```\nmatrix_10x10 a:(%Tuple (%Tuple double 10) 10) = Matrix_10x10;\n```\n\nIn any event, remember that during calculation of the `matrix_10x10` combinator's number, all parentheses must be removed and the CRC32 of the string `matrix_10x10 a:%Tuple %Tuple double 10 10 = Matrix_10x10` must be computed.\n\nMoreover, we can define arbitrarily-sized matrices:\n\n```\nmatrix {X:Type} m:# n:# a:(%Tuple (%Tuple X m) n) = Matrix X;\n```\n\nIn this case using vector would result in storing the length of a row (_m_) in each row, e.g. _n_ times.\n\nNote that the serializations of values of type `%Tuple X n` and `vector X` (also known as `%vector X` and `%Vector X`) nearly match when _n > 0_: in both cases we obtain a single 32-bit number (equal to _n-1_ or _n_ depending on the version) followed by the serializations of _n_ objects of type _X_. (This is slightly untrue: values of type `%Tuple X n` can only be serialized if _n_ is a constant or value known from one of the preceding fields of the enclosing entry; but then this _n_ won't be serialized explicitly anywhere).\n\n## [](#special-syntax-for-repetitions)Special syntax for repetitions\n\nIn view of the importance of the construction presented above, it is built into the TL language in the following manner. A substructure in the form of \\[ _array-field-name_ \":\" \\] \\[ _nat-ident_ \"_\" \\] \"\\[\"_ field-descr _... \"\\]\u201d may be used in the declaration of any combinator, where_ nat-ident\\* is the name of any previously encountered field of type # (if it is not explicitly indicated, the most recent is used). In abstract, this substructure is equivalent to:\n\n```\naux_type *field-descr* ... = AuxType;\n*current_constructor* ... [ *array-field-name* \":\" ] (%Tuple aux_type *nat-ident*)\n```\n\nFor example, 10x10 matrices, vectors, and arbitrary matrices may be defined in the following way:\n\n```\nmatrix {X:Type} m:# n:# a:n*[ m*[ X ] ] = Matrix X;\nmatrix_10x10 a:10*[ 10*[ double ]] = Matrix_10x10;\nvector {X:Type} # [ X ] = Vector X;\n```\n\nWe have already encountered the last version as a \u201cdefinition\u201d of the \u201cbuilt-in type\u201d `Vector`.\n\nOf course, several fields, as complex as desired, may be within the repeating part. Furthermore, besides using _n_ as a repeat counter, one may use expressions of the form _(n+const)_ and _(const+n)_, where _const_ is a small nonnegative constant, which are shorthand for _S (S ( ... (S n) ... ))_:\n\n```\nrepeat_np1 n:# a:(S n)*[ key:string value:string ] = Dictionary;\n```\n\nTo calculate the CRC32 these expressions are converted to expressions of the form `(const+X)` without internal spaces. Additionally, the `*` in this case is not set off by spaces on the left and right.\n\n## [](#serialization-of-dependent-types)Serialization of dependent types\n\nSerialization of dependent types and polymorphic types is not a fundamental challenge: we have combinators with non-zero arity with Type values. For example, the type `Tuple double 10 : Type` serializes to `'Tuple' '%double' 10`. Note that at present in practice there is virtually no need to serialize types, whether dependent or not.\n\n## [](#optional-combinator-parameters-in-tl)Optional combinator parameters in TL\n\nOptional combinator parameters in TL must possess the following properties:\n\n*   Optional parameters must be precisely the combinator's first several arguments;\n    \n*   The value of any optional parameter must be entirely determined by the combinator's result type.\n    \n\nFor example, in `cons {X:Type} hd:X tl:(list X) = list X` the parameter `X` may be made optional, because it is located at the very beginning of the argument list and is unambiguously determined by the `list X` result type. Similarly, in `tcons {X:Type} {n:#} hd:X tl:(%Tuple X n) = Tuple X (S n)` the values of X and n are completely determined based on the `Tuple X (S n)` result type, therefore they made be made optional parameters.\n\nIt usually makes sense to move all of a constructor's arguments satisfying the second condition to the beginning of the list, arrange them in the order they appear in the result type's parameters, and make them optional. Given such an approach, the full version of a constructor is rarely needed -- only when we want to transmit the value of the polymorphic or dependent type as a value of type Object. In all other cases, the type of the expected value from the context is already known, which means that all optional parameters can be recovered during decomposition.\n\nSee also [Optional combinator parameters and their values](https://core.telegram.org/mtproto/TL-optargs).",
    "url": "https://core.telegram.org/mtproto/TL-dependent"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/mtproto/TL-formal",
      "title": "TL-formal",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "TL-formal"
        },
        {
          "property": "og:description",
          "content": "See also TL Language.\nFor the syntax of declaring combinators, see in article Formal declaration of TL combinators.\nFor\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:17:52 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5805",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# TL-formal\n\nSee also [TL Language](https://core.telegram.org/mtproto/TL). For the syntax of declaring combinators, see in article [Formal declaration of TL combinators](https://core.telegram.org/mtproto/TL-combinators). For the syntax of patterns, see in article [Formal declaration of TL patterns](https://core.telegram.org/mtproto/TL-patterns).\n\n### [](#tokens)Tokens\n\nComments are the same as in C/C++. They are removed by a lexical parser (for example, being replaced by a single space). Whitespace separates tokens. Except for string constants, tokens cannot contain spaces.\n\nCharacter classes:\n\n_lc-letter_ ::= `a` | `b` | ... | `z`  \n_uc-letter_ ::= `A` | `B` | ... | `Z`  \n_digit_ ::= `0` | `1` | ... | `9`  \n_hex-digit_ ::= _digit_ | `a` | `b` | `c` | `d` | `e` | `f`  \n_underscore_ ::= `_`  \n_letter_ ::= _lc-letter_ | _uc-letter_  \n_ident-char_ ::= _letter_ | _digit_ | _underscore_\n\nSimple identifiers and keywords:\n\n_lc-ident_ ::= _lc-letter_ { _ident-char_ }  \n_uc-ident_ ::= _uc-letter_ { _ident-char_ }  \n_namespace-ident_ ::= _lc-ident_  \n_lc-ident-ns_ ::= \\[ _namespace-ident_ `.` \\] _lc-ident_  \n_uc-ident-ns_ ::= \\[ _namespace-ident_ `.` \\] _uc-ident_  \n_lc-ident-full_ ::= _lc-ident-ns_ \\[ `#` _hex-digit_ \\*8 \\]\n\nTokens:\n\n_underscore_ ::= `_`  \n_colon_ ::= `:`  \n_semicolon_ ::= `;`  \n_open-par_ ::= `(`  \n_close-par_ ::= `)`  \n_open-bracket_ ::= `[`  \n_close-bracket_ ::= `]`  \n_open-brace_ ::= `{`  \n_close-brace_ ::= `}`  \n_triple-minus_ ::= `---`  \n_nat-const_ ::= _digit_ { _digit_ }  \n_lc-ident-full_  \n_lc-ident_  \n_uc-ident-ns_  \n_equals_ ::= `=`  \n_hash_ ::= `#`  \n_question-mark_ ::= `?`  \n_percent_ ::= `%`  \n_plus_ ::= `+`  \n_langle_ ::= `<`  \n_rangle_ ::= `>`  \n_comma_ ::= `,`  \n_dot_ ::= `.`  \n_asterisk_ ::= `*`  \n_excl-mark_ ::= `!`  \n_Final-kw_ ::= `Final`  \n_New-kw_ ::= `New`  \n_Empty-kw_ ::= `Empty`\n\n`Final` is a reserved keyword, e.g. a special token. Words like `Type` are not keywords, rather they are identifiers with preset values.\n\nTokens consisting of one or more constant symbols shall be hereafter denoted using terms in quotation marks (for example, `---` replaces _triple-minus_).\n\n## [](#syntax)Syntax\n\n### [](#general-syntax-of-a-tl-program)General syntax of a TL program\n\nSyntactically, a TL program consists of a stream of tokens (separated by spaces, which are ignored at this stage). General program structure:\n\n_TL-program_ ::= _constr-declarations_ { `---` `functions` `---` _fun-declarations_ | `---` `types` `---` _constr-declarations_ }\n\nHere the constructor- and function declarations are nearly identical in their syntax (they are both combinators):\n\n_constr-declarations_ ::= { _declaration_ }  \n_fun-declarations_ ::= { _declaration_ }\n\nThere are various declarations:\n\n_declaration_ ::= _combinator-decl_ | _partial-app-decl_ | _final-decl_\n\nBefore explaining how declarations of combinators, partial applications, and type `finalization` are given, we will introduce additional syntactical categories:\n\n### [](#syntactical-categories-and-constructions)Syntactical categories and constructions\n\nThe concept of an expression (_expr_) is important. There are type expressions (_type-expr_) and numeric expressions (_nat-expr_). However, they are defined the same way. Their correctness as type- or numeric expressions is checked when the type of the analyzed expression is checked.\n\n_type-expr_ ::= _expr_  \n_nat-expr_ ::= _expr_  \n_expr_ ::= { _subexpr_ }  \n_subexpr_ ::= _term_ | _nat-const_ `+` _subexpr_ | _subexpr_ `+` _nat-const_  \n_term_ ::= `(` _expr_ `)` | _type-ident_ | _var-ident_ | _nat-const_ | `%` _term_ | _type-ident_ `<` _expr_ { `,` _expr_ } `>`  \n_type-ident_ ::= _boxed-type-ident_ | _lc-ident-ns_ | `#`  \n_boxed-type-ident_ ::= _uc-ident-ns_  \n_var-ident_ ::= _lc-ident_ | _uc-ident_  \n_type-term_ ::= _term_  \n_nat-term_ ::= _term_\n\nNote that writing `E = E_1 E_2 ... E_n` in the expression for _expr_ means applying the function _E\\_1_ to the argument _E\\_2_, applying the result to _E\\_3_, etc. Specifically, `E_1 E_2 E_3 = (E_1 E_2) E_3`. A solitary `#` is included in _type-ident_, because it is actually the identifier for a built-in type (`#` alias `nat`).\n\nThe expression `E<E_1,...,E_n>` is syntactic sugar for `(E (E_1) ... (E_n))`, i.e. both expressions are transformed into the same internal representation.\n\n### [](#combinator-declarations)Combinator declarations\n\n_combinator-decl_ ::= _full-combinator-id_ { _opt-args_ } { _args_ } `=` _result-type_ `;`  \n_full-combinator-id_ ::= _lc-ident-full_ | `_`  \n_combinator-id_ ::= _lc-ident-ns_ | `_`  \n_opt-args_ ::= `{` _var-ident_ { _var-ident_ } : \\[_excl-mark_\\] _type-expr_ `}`  \n_args_ ::= _var-ident-opt_ `:` \\[ _conditional-def_ \\] \\[ `!` \\] _type-term_  \n_args_ ::= \\[ _var-ident-opt_ `:` \\] \\[ _multiplicity_ `*`\\] `[` { _args_ } `]`  \n_args_ ::= `(` _var-ident-opt_ { _var-ident-opt_ } `:` \\[`!`\\] _type-term_ `)`  \n_args_ ::= \\[ `!` \\] _type-term_  \n_multiplicity_ ::= _nat-term_  \n_var-ident-opt_ ::= _var-ident_ | `_`  \n_conditional-def_ ::= _var-ident_ \\[ `.` _nat-const_ \\] `?`  \n_result-type_ ::= _boxed-type-ident_ { _subexpr_ }  \n_result-type_ ::= _boxed-type-ident_ `<` _subexpr_ { `,` _subexpr_ } `>`\n\nSee [Formal declaration of TL combinators](https://core.telegram.org/mtproto/TL-combinators) for a description of what exactly this means. Here we will only note that when declaring the type of a combinator's next argument, only the names of previously arranged (more to the left) arguments of the same combinator may be used as variables, but when declaring the result type you can use all of its parameters (of type `Type` and `#`).\n\nNote that the names of combinators declared in this way may be used in TL itself only as the corresponding bare types. The only combinators that appear in declarations are built-in: `O : #` and `S : # -> #`.\n\nThere are also \u201cpseudo-declarations\u201d that are allowed only to declare built-in types (such as `int ? = Int;`):\n\n_builtin-combinator-decl_ ::= _full-combinator-id_ `?` `=` _boxed-type-ident_ `;`\n\n### [](#partial-applications-patterns)Partial applications (patterns)\n\n_partial-app-decl_ ::= _partial-type-app-decl_ | _partial-comb-app-decl_  \n_partial-type-app-decl_ ::= _boxed-type-ident_ _subexpr_ { _subexpr_ } `;` | _boxed-type-ident_ `<` _expr_ { `,` _expr_ } `>` `;`  \n_partial-comb-app-decl_ ::= _combinator-id_ _subexpr_ { _subexpr_ } `;`\n\nSee [Formal declaration of TL patterns](https://core.telegram.org/mtproto/TL-patterns).\n\n### [](#type-finalization)Type finalization\n\n_final-decl_ ::= `New` _boxed-type-ident_ `;` | `Final` _boxed-type-ident_ `;` | `Empty` _boxed-type-ident_ `;`\n\nThis type of declaration means that there must not be any constructor for the indicated type: before the declaration for `New` and after the declaration for `Final`. The keyword `Empty` enables both effects.\n\n### [](#predefined-identifiers)Predefined identifiers\n\nNearly all predefined identifiers may be given using the following schema (usually located in `common.tl`):\n\n/////  \n//  \n// Common Types  \n//  \n/////\n\n// Built-in types  \nint ? = Int;  \nlong ? = Long;  \ndouble ? = Double;  \nstring ? = String;\n\n// Boolean emulation  \nboolFalse = Bool;  \nboolTrue = Bool;\n\n// Boolean for diagonal queries  \nboolStat statTrue:int statFalse:int statUnknown:int = BoolStat;\n\n// Vector  \nvector {t:Type} # \\[t\\] = Vector t;  \ntuple {t:Type} {n:#} \\[t\\] = Tuple t n;  \nvectorTotal {t:Type} total\\_count:int vector:%(Vector t) = VectorTotal t;\n\n/////  \n//  \n// Result- (Maybe-) types  \n//  \n/////\n\nresultFalse {t:Type} = Maybe t;  \nresultTrue {t:Type} result:t = Maybe t;\n\npair {X:Type} {Y:Type} a:X b:Y = Pair X Y;  \nmap {X:Type} {Y:Type} key:X value:Y = Map X Y;\n\nEmpty False;  \ntrue = True;\n\nunit = Unit;\n\n*   Predefined identifier `Type`: This type signifies the type of all types. It is usually used to specify the types of optional parameters in the constructors of polymorphic types. If strongly desired, it can be used in its own right, but this is very rarely needed in practice.\n    \n*   Identifier `#`: This type is used to specify a special type of nonnegative integers in the range from 0 to 2^31-1; its main purpose is the same as that of `Type`. There are two built-in constructors: `O` : # and `S` : # -> # (\u201cnull\u201d and \u201cnext number\u201d, respectively), which work as if `#` was defined using the schema\n    \n\nO = #;  \nS # = #;\n\n*   Identifier `Tuple`: Type -> # -> Type denotes a set of the specified number of values of the indicated type. In other words, _Tuple X n_ means \u201ca set of _n_ values of type _X_\".\n    \n*   The type`Bool`, with two constructors `boolTrue` and `boolFalse`, is used to transmit Boolean values.\n    \n*   The constructor-less type `False` may be used instead of undeclared or invalid types in the construction of a TL schema, because any attempt to (de)serialize a value of type `False` will produce an error. Usage Example:\n    \n\nuser {flags:#} id:flags.0?string first\\_name:flags.1?string last\\_name:flags.2?string reserved3:flags.3?False reserved4:flags.4?False = User flags;  \nuser\\_present {flags:#} info:%(User flags) = UserInfo flags;  \nuser\\_absent {flags:#} = UserInfo flags;  \ngetUser flags:# id:int = !UserInfo flags;\n\nIn the future, bits 3 and 4 in the `flags` field may be used to transmit new fields after changing the names and types of the `reserved3` and `reserved4` fields. This will change the `user` constructor's number, but this isn't too important, since the `User flags` type is only used as a bare type. Transmitting bits 3 or 4 in the `flags` field in a `getUser` query before these fields have actually been defined will lead to an error in the (de)serialization of the request.\n\n*   The type `True` with a single null constructor `true` plays a role similar to the void type in C/C++. It is especially useful as a bare type `%True`, alias `true`, because its serialization has zero length. For example, the `first_name:flags.1?string` constructor used above is in fact shorthand for (the as-yet unsupported) alternative-type general constructor `first_name:(flags.1?string:true)`.\n\nWhen directly used in a [conditional field](https://core.telegram.org/mtproto/TL-combinators#conditional-fields) it may simply indicate the presence (absence) of a certain parameter with void type. If the conditional field exists, the associated parameter will not be populated; the conditional field simply exists and the existance value can be used to perform certain operations, example:\n\n```\nuser {flags:#} id:flags.0?string first_name:flags.1?string last_name:flags.2?string bot:flags.3?true reserved4:flags.4?False = User flags;\n```\n\nIf bit 3 of the `flags` parameter isn't set, the user is a normal user. If bit 3 of the `flags` parameter is set, this indicates that the specified user is a bot: however, during deserialization, the `bot` parameter must not be assigned any value, since `true` is actually a `void` type.\n\n*   The type`Unit` with a single null constructor `Unit` is similar to the previous type.\n\n#### [](#antlr-definition)ANTLR definition\n\nAn [ANLTR](https://www.antlr.org/) definition of TL grammar can be found [here\u00a0\u00bb](https://gitlab.com/telekram/telekram/-/blob/master/generator/src/commonMain/antlr/TL.g4).",
    "url": "https://core.telegram.org/mtproto/TL-formal"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/mtproto/TL-tl",
      "title": "\ufeffTL schema for serialization of TL schemas",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "\ufeffTL schema for serialization of TL schemas"
        },
        {
          "property": "og:description",
          "content": "If necessary, a TL schema can be serialized in binary form. Here, this serialization format is defined by a TL schema (usually\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:17:53 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5275",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# TL schema for serialization of TL schemas\n\nIf necessary, a [TL](https://core.telegram.org/mtproto/TL) schema can be serialized in binary form. Here, this serialization format is defined by a TL schema (usually stored in the file `tl.tl`). This can be useful, for example, to make it possible to write a parser one time for converting a TL schema from text form (stored in the file `something.tl`) to binary form (stored in the file `something.tlo`). All other programs (for example, auto-generators of TL-(de)serializers for various programming languages) only need to know how to read `.tlo` files, which only requires generating an automatic deserializer according to the schema presented below.\n\nFirst, a fragment of the file `common.tl` with certain required built-in types:\n\n```\n/////\n//\n// Common Types (source file common.tl, only necessary definitions included)\n//\n/////\n\n// Built-in types\nint ? = Int;\nlong ? = Long;\ndouble ? = Double;\nstring ? = String;\n\n// Boolean emulation\nboolFalse = Bool;\nboolTrue = Bool;\n\n// Vector\nvector {t:Type} # [t] = Vector t;\ntuple {t:Type} {n:#} [t] = Tuple t n;\nvectorTotal {t:Type} total_count:int vector:%(Vector t) = VectorTotal t;\n\nEmpty False;\ntrue = True;\n```\n\nNext, properly, comes `tl.tl` itself. Note that the declaration for a fairly complex data type required only twenty lines in TL. This demonstrates the expressiveness and compactness of the TL language.\n\n```\n/////\n//\n// Serialized binary TL-schema in TL format, source file tl.tl\n//\n/////\ntls.schema_v2 version:int date:int types_num:# types:types_num*[tls.Type] \n\n    constructor_num:# constructors:constructor_num*[tls.Combinator] \n    functions_num:# functions:functions_num*[tls.Combinator] = tls.Schema;\ntls.type name:int id:string constructors_num:int flags:int arity:int params_type:long = tls.Type;\n\ntls.combinator name:int id:string type_name:int left:tls.CombinatorLeft right:tls.CombinatorRight = tls.Combinator;\ntls.combinatorLeftBuiltin = tls.CombinatorLeft;\ntls.combinatorLeft args_num:# args:args_num*[tls.Arg] = tls.CombinatorLeft;\ntls.combinatorRight value:tls.TypeExpr = tls.CombinatorRight;\n\ntls.arg id:string flags:# var_num:flags.1?int exist_var_num:flags.2?int exist_var_bit:flags.2?int type:tls.TypeExpr = tls.Arg;\n\ntls.exprType _:tls.TypeExpr = tls.Expr;\n\ntls.exprNat _:tls.NatExpr = tls.Expr;\ntls.natConst value:int = tls.NatExpr;\n\ntls.natVar dif:int var_num:int = tls.NatExpr;\ntls.typeVar var_num:int flags:int = tls.TypeExpr;\n\ntls.array multiplicity:tls.NatExpr args_num:# args:args_num*[tls.Arg] = tls.TypeExpr;\ntls.typeExpr name:int flags:int children_num:# children:children_num*[tls.Expr] = tls.TypeExpr;\n```\n\n## [](#remarks)Remarks\n\nSchema serialization (version 2) always begins with the index number of the `tls.schema_v2` constructor for `tls.Schema`. Because the CRC32 of the string\n\n```\ntls.schema_v2 version:int date:int types_num:# types:types_num*[ tls.Type ] constructor_num:# constructors:constructor_num*[ tls.Combinator ] functions_num:# functions:functions_num*[ tls.Combinator ] = tls.Schema\n```\n\nis 0x3a2f9be2, this constant is in fact the magic number for tlo files in the current version's format. If the format is extended in the future (for example, if TL's additional features are supported), then a `tls.schema_v3` constructor with a different number will appear.\n\n## [](#example)Example\n\nIf one adds declarations for the used built-in types (like `int ? = Int;`) from the file `common.tl` before `tl.tl` and serialize the resulting schema, the following binary data is obtained (`tl.tlo`):\n\n**0000**: 3a2f9be2 00000000 51fec698 00000015 12eb4386 70659eff 00002301 00000000  \n**0020**: 00000000 00000000 00000000 00000000 12eb4386 250be282 6f6f4204 0000006c  \n**0040**: 00000002 02000010 00000000 00000000 00000000 12eb4386 2210c154 756f4406  \n**0060**: 00656c62 00000001 02000000 00000000 00000000 00000000 12eb4386 00000000  \n**0080**: 6c614605 00006573 00000000 00000401 00000000 00000000 00000000 12eb4386  \n**00a0**: a8509bda 746e4903 00000001 02000001 00000000 00000000 00000000 12eb4386  \n**00c0**: 22076cba 6e6f4c04 00000067 00000001 02000001 00000000 00000000 00000000  \n**00e0**: 12eb4386 b5286e24 72745306 00676e69 00000001 02000001 00000000 00000000  \n**0100**: 00000000 12eb4386 3fedd339 75725404 00000065 00000001 02000000 00000000  \n**0120**: 00000000 00000000 12eb4386 9770768a 70755405 0000656c 00000001 02000000  \n**0140**: 00000002 00000002 00000000 12eb4386 2cecf817 70795404 00000065 00000000  \n**0160**: 00000000 00000000 00000000 00000000 12eb4386 1cb5c415 63655606 00726f74  \n**0180**: 00000001 02000008 00000001 00000000 00000000 12eb4386 10133f47 6365560b  \n**01a0**: 54726f74 6c61746f 00000001 02000000 00000001 00000000 00000000 12eb4386  \n**01c0**: 29dfe61b 736c7407 6772412e 00000001 02000000 00000000 00000000 00000000  \n**01e0**: 12eb4386 5c0a1ed5 736c740e 6d6f432e 616e6962 00726f74 00000001 02000000  \n**0200**: 00000000 00000000 00000000 12eb4386 8133d9ba 736c7412 6d6f432e 616e6962  \n**0220**: 4c726f74 00746665 00000002 02000010 00000000 00000000 00000000 12eb4386  \n**0240**: 2c064372 736c7413 6d6f432e 616e6962 52726f74 74686769 00000001 02000000  \n**0260**: 00000000 00000000 00000000 12eb4386 307d41a0 736c7408 7078452e 00000072  \n**0280**: 00000002 02000010 00000000 00000000 00000000 12eb4386 c2635441 736c740b  \n**02a0**: 74614e2e 72707845 00000002 02000010 00000000 00000000 00000000 12eb4386  \n**02c0**: 3a2f9be2 736c740a 6863532e 00616d65 00000001 02000000 00000000 00000000  \n**02e0**: 00000000 12eb4386 12eb4386 736c7408 7079542e 00000065 00000001 02000000  \n**0300**: 00000000 00000000 00000000 12eb4386 193fd378 736c740c 7079542e 70784565  \n**0320**: 00000072 00000003 02000010 00000000 00000000 00000000 00000018 5c0a1ed5  \n**0340**: bc799737 6f6f6209 6c61466c 00006573 250be282 4c12c6d9 00000000 2c064372  \n**0360**: c1863d08 250be282 00000000 00000000 5c0a1ed5 997275b5 6f6f6208 7572546c  \n**0380**: 00000065 250be282 4c12c6d9 00000000 2c064372 c1863d08 250be282 00000000  \n**03a0**: 00000000 5c0a1ed5 2210c154 756f6406 00656c62 2210c154 cd211f63 2c064372  \n**03c0**: c1863d08 2210c154 00000000 00000000 5c0a1ed5 a8509bda 746e6903 a8509bda  \n**03e0**: cd211f63 2c064372 c1863d08 a8509bda 00000000 00000000 5c0a1ed5 22076cba  \n**0400**: 6e6f6c04 00000067 22076cba cd211f63 2c064372 c1863d08 22076cba 00000000  \n**0420**: 00000000 5c0a1ed5 b5286e24 72747306 00676e69 b5286e24 cd211f63 2c064372  \n**0440**: c1863d08 b5286e24 00000000 00000000 5c0a1ed5 3fedd339 75727404 00000065  \n**0460**: 3fedd339 4c12c6d9 00000000 2c064372 c1863d08 3fedd339 00000000 00000000  \n**0480**: 5c0a1ed5 9770768a 70757405 0000656c 9770768a 4c12c6d9 00000003 29dfe61b  \n**04a0**: 00007401 00020005 00000000 c1863d08 2cecf817 00000000 00000000 29dfe61b  \n**04c0**: 00006e01 00020005 00000001 c1863d08 70659eff 00000000 00000000 29dfe61b  \n**04e0**: 00000000 00000000 d9fb20de 4e8a14f0 00000000 00000001 00000001 29dfe61b  \n**0500**: 00000000 00000000 0142ceae 00000000 00000000 2c064372 c1863d08 9770768a  \n**0520**: 00000000 00000002 ecc9da78 0142ceae 00000000 00000000 dcb49bd8 4e8a14f0  \n**0540**: 00000000 00000001 5c0a1ed5 1cb5c415 63657606 00726f74 1cb5c415 4c12c6d9  \n**0560**: 00000003 29dfe61b 00007401 00020005 00000000 c1863d08 2cecf817 00000000  \n**0580**: 00000000 29dfe61b 00000000 00000004 00000001 c1863d08 70659eff 00000000  \n**05a0**: 00000000 29dfe61b 00000000 00000000 d9fb20de 4e8a14f0 00000000 00000001  \n**05c0**: 00000001 29dfe61b 00000000 00000000 0142ceae 00000000 00000000 2c064372  \n**05e0**: c1863d08 1cb5c415 00000000 00000001 ecc9da78 0142ceae 00000000 00000000  \n**0600**: 5c0a1ed5 10133f47 6365760b 54726f74 6c61746f 10133f47 4c12c6d9 00000003  \n**0620**: 29dfe61b 00007401 00020005 00000000 c1863d08 2cecf817 00000000 00000000  \n**0640**: 29dfe61b 746f740b 635f6c61 746e756f 00000000 c1863d08 a8509bda 00000001  \n**0660**: 00000000 29dfe61b 63657606 00726f74 00000000 c1863d08 1cb5c415 00000001  \n**0680**: 00000001 ecc9da78 0142ceae 00000000 00000000 2c064372 c1863d08 10133f47  \n**06a0**: 00000000 00000001 ecc9da78 0142ceae 00000000 00000000 5c0a1ed5 29dfe61b  \n**06c0**: 736c7407 6772612e 29dfe61b 4c12c6d9 00000006 29dfe61b 00646902 00000000  \n**06e0**: c1863d08 b5286e24 00000001 00000000 29dfe61b 616c6605 00007367 00000004  \n**0700**: 00000000 c1863d08 70659eff 00000000 00000000 29dfe61b 72617607 6d756e5f  \n**0720**: 00000002 00000000 00000001 c1863d08 a8509bda 00000001 00000000 29dfe61b  \n**0740**: 6978650d 765f7473 6e5f7261 00006d75 00000002 00000000 00000002 c1863d08  \n**0760**: a8509bda 00000001 00000000 29dfe61b 6978650d 765f7473 625f7261 00007469  \n**0780**: 00000002 00000000 00000002 c1863d08 a8509bda 00000001 00000000 29dfe61b  \n**07a0**: 70797404 00000065 00000000 c1863d08 193fd378 00000000 00000000 2c064372  \n**07c0**: c1863d08 29dfe61b 00000000 00000000 5c0a1ed5 5c0a1ed5 736c740e 6d6f632e  \n**07e0**: 616e6962 00726f74 5c0a1ed5 4c12c6d9 00000005 29dfe61b 6d616e04 00000065  \n**0800**: 00000000 c1863d08 a8509bda 00000001 00000000 29dfe61b 00646902 00000000  \n**0820**: c1863d08 b5286e24 00000001 00000000 29dfe61b 70797409 616e5f65 0000656d  \n**0840**: 00000000 c1863d08 a8509bda 00000001 00000000 29dfe61b 66656c04 00000074  \n**0860**: 00000000 c1863d08 8133d9ba 00000000 00000000 29dfe61b 67697205 00007468  \n**0880**: 00000000 c1863d08 2c064372 00000000 00000000 2c064372 c1863d08 5c0a1ed5  \n**08a0**: 00000000 00000000 5c0a1ed5 cd211f63 736c7419 6d6f632e 616e6962 4c726f74  \n**08c0**: 42746665 746c6975 00006e69 8133d9ba 4c12c6d9 00000000 2c064372 c1863d08  \n**08e0**: 8133d9ba 00000000 00000000 5c0a1ed5 4c12c6d9 736c7412 6d6f632e 616e6962  \n**0900**: 4c726f74 00746665 8133d9ba 4c12c6d9 00000002 29dfe61b 67726108 756e5f73  \n**0920**: 0000006d 00000004 00000000 c1863d08 70659eff 00000000 00000000 29dfe61b  \n**0940**: 67726104 00000073 00000000 d9fb20de 4e8a14f0 00000000 00000000 00000001  \n**0960**: 29dfe61b 00000000 00000000 c1863d08 29dfe61b 00000000 00000000 2c064372  \n**0980**: c1863d08 8133d9ba 00000000 00000000 5c0a1ed5 2c064372 736c7413 6d6f632e  \n**09a0**: 616e6962 52726f74 74686769 2c064372 4c12c6d9 00000001 29dfe61b 6c617605  \n**09c0**: 00006575 00000000 c1863d08 193fd378 00000000 00000000 2c064372 c1863d08  \n**09e0**: 2c064372 00000000 00000000 5c0a1ed5 ecc9da78 736c740c 7078652e 70795472  \n**0a00**: 00000065 307d41a0 4c12c6d9 00000001 29dfe61b 00000000 00000000 c1863d08  \n**0a20**: 193fd378 00000000 00000000 2c064372 c1863d08 307d41a0 00000000 00000000  \n**0a40**: 5c0a1ed5 dcb49bd8 736c740b 7078652e 74614e72 307d41a0 4c12c6d9 00000001  \n**0a60**: 29dfe61b 00000000 00000000 c1863d08 c2635441 00000000 00000000 2c064372  \n**0a80**: c1863d08 307d41a0 00000000 00000000 5c0a1ed5 8ce940b1 736c740c 74616e2e  \n**0aa0**: 736e6f43 00000074 c2635441 4c12c6d9 00000001 29dfe61b 6c617605 00006575  \n**0ac0**: 00000000 c1863d08 a8509bda 00000001 00000000 2c064372 c1863d08 c2635441  \n**0ae0**: 00000000 00000000 5c0a1ed5 4e8a14f0 736c740a 74616e2e 00726156 c2635441  \n**0b00**: 4c12c6d9 00000002 29dfe61b 66696403 00000000 c1863d08 a8509bda 00000001  \n**0b20**: 00000000 29dfe61b 72617607 6d756e5f 00000000 c1863d08 a8509bda 00000001  \n**0b40**: 00000000 2c064372 c1863d08 c2635441 00000000 00000000 5c0a1ed5 3a2f9be2  \n**0b60**: 736c740d 6863732e 5f616d65 00003276 3a2f9be2 4c12c6d9 00000008 29dfe61b  \n**0b80**: 72657607 6e6f6973 00000000 c1863d08 a8509bda 00000001 00000000 29dfe61b  \n**0ba0**: 74616404 00000065 00000000 c1863d08 a8509bda 00000001 00000000 29dfe61b  \n**0bc0**: 70797409 6e5f7365 00006d75 00000004 00000000 c1863d08 70659eff 00000000  \n**0be0**: 00000000 29dfe61b 70797405 00007365 00000000 d9fb20de 4e8a14f0 00000000  \n**0c00**: 00000000 00000001 29dfe61b 00000000 00000000 c1863d08 12eb4386 00000000  \n**0c20**: 00000000 29dfe61b 6e6f630f 75727473 726f7463 6d756e5f 00000004 00000001  \n**0c40**: c1863d08 70659eff 00000000 00000000 29dfe61b 6e6f630c 75727473 726f7463  \n**0c60**: 00000073 00000000 d9fb20de 4e8a14f0 00000000 00000001 00000001 29dfe61b  \n**0c80**: 00000000 00000000 c1863d08 5c0a1ed5 00000000 00000000 29dfe61b 6e75660d  \n**0ca0**: 6f697463 6e5f736e 00006d75 00000004 00000002 c1863d08 70659eff 00000000  \n**0cc0**: 00000000 29dfe61b 6e756609 6f697463 0000736e 00000000 d9fb20de 4e8a14f0  \n**0ce0**: 00000000 00000002 00000001 29dfe61b 00000000 00000000 c1863d08 5c0a1ed5  \n**0d00**: 00000000 00000000 2c064372 c1863d08 3a2f9be2 00000000 00000000 5c0a1ed5  \n**0d20**: 12eb4386 736c7408 7079742e 00000065 12eb4386 4c12c6d9 00000006 29dfe61b  \n**0d40**: 6d616e04 00000065 00000000 c1863d08 a8509bda 00000001 00000000 29dfe61b  \n**0d60**: 00646902 00000000 c1863d08 b5286e24 00000001 00000000 29dfe61b 6e6f6310  \n**0d80**: 75727473 726f7463 756e5f73 0000006d 00000000 c1863d08 a8509bda 00000001  \n**0da0**: 00000000 29dfe61b 616c6605 00007367 00000000 c1863d08 a8509bda 00000001  \n**0dc0**: 00000000 29dfe61b 69726105 00007974 00000000 c1863d08 a8509bda 00000001  \n**0de0**: 00000000 29dfe61b 7261700b 5f736d61 65707974 00000000 c1863d08 22076cba  \n**0e00**: 00000001 00000000 2c064372 c1863d08 12eb4386 00000000 00000000 5c0a1ed5  \n**0e20**: 0142ceae 736c740b 7079742e 72615665 193fd378 4c12c6d9 00000002 29dfe61b  \n**0e40**: 72617607 6d756e5f 00000000 c1863d08 a8509bda 00000001 00000000 29dfe61b  \n**0e60**: 616c6605 00007367 00000000 c1863d08 a8509bda 00000001 00000000 2c064372  \n**0e80**: c1863d08 193fd378 00000000 00000000 5c0a1ed5 d9fb20de 736c7409 7272612e  \n**0ea0**: 00007961 193fd378 4c12c6d9 00000003 29dfe61b 6c756d0c 6c706974 74696369  \n**0ec0**: 00000079 00000000 c1863d08 c2635441 00000000 00000000 29dfe61b 67726108  \n**0ee0**: 756e5f73 0000006d 00000004 00000000 c1863d08 70659eff 00000000 00000000  \n**0f00**: 29dfe61b 67726104 00000073 00000000 d9fb20de 4e8a14f0 00000000 00000000  \n**0f20**: 00000001 29dfe61b 00000000 00000000 c1863d08 29dfe61b 00000000 00000000  \n**0f40**: 2c064372 c1863d08 193fd378 00000000 00000000 5c0a1ed5 c1863d08 736c740c  \n**0f60**: 7079742e 70784565 00000072 193fd378 4c12c6d9 00000004 29dfe61b 6d616e04  \n**0f80**: 00000065 00000000 c1863d08 a8509bda 00000001 00000000 29dfe61b 616c6605  \n**0fa0**: 00007367 00000000 c1863d08 a8509bda 00000001 00000000 29dfe61b 6968630c  \n**0fc0**: 6572646c 756e5f6e 0000006d 00000004 00000000 c1863d08 70659eff 00000000  \n**0fe0**: 00000000 29dfe61b 69686308 6572646c 0000006e 00000000 d9fb20de 4e8a14f0  \n**1000**: 00000000 00000000 00000001 29dfe61b 00000000 00000000 c1863d08 307d41a0  \n**1020**: 00000000 00000000 2c064372 c1863d08 193fd378 00000000 00000000 00000000",
    "url": "https://core.telegram.org/mtproto/TL-tl"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/mtproto/TL-abstract-types",
      "title": "Binary serialization and abstract TL types",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Binary serialization and abstract TL types"
        },
        {
          "property": "og:description",
          "content": "TL Language defines abstract data types in the spirit of a general theory of types (more accurately, Martin-L\u00f6f's theories\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:17:55 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "7195",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Binary serialization and abstract TL types\n\n[TL Language](https://core.telegram.org/mtproto/TL) defines _abstract_ data types in the spirit of a general theory of types (more accurately, Martin-L\u00f6f's theories of dependent intuitionistic types) without specifying the values of these types should be represented in memory, when saved to disk, or transmitted over a network. In contrast, the article on [binary serialization](https://core.telegram.org/mtproto/serialize) discusses the problem of effective serialization of values of abstract types. To this end, the concept of a _concrete_ or _serialized_ type has been defined as the sets of serializations of all possible values of the corresponding abstract type. In this case, the serializations take values in the set A _of words in the alphabet_ A\\*, which consists of 2^32 characters -- 32-bit integers.\n\nIn order to use a TL schema (e.g. \u201cprogram\u201d) in the TL language to describe the serialization of values of abstract types, we should explain how the concrete type _\\[T\\]_ (subset _\\[T\\]_ of A^_) is associated with the abstract type_ T _(defined in TL), and how the values of the abstract type_ T _correspond to the values of the concrete type_ \\[T\\] _(i.e. the elements of_ \\[T\\]\\*).\n\nSerialization is the process of constructing an element of _\\[T\\]_ based on a value of the abstract type _T_. The reverse process is deserialization.\n\nValues of the abstract type _T_ may be represented in a different way. Typically, some sort of trees or graphs are used in memory or, if desired, a set of nodes may be used, each of which contains a certain tag (\u201cnode type\u201d) and several pointers to other nodes and/or values of built-in primitive types such as `int`. However, for general discussions it is useful to write the values of abstract type _T_ as a string, more specifically, an S-expression. Recall that an S-expression is either an atom (the value of a primitive type, for example, an integer or a string constant in quotation marks; or an identifier that corresponds to a built-in or defined function) or a space-delimited list of S-expressions ending in parentheses. In our case, we use S-expressions, the first element of which is a combinator identifier, while the remaining elements (the number of which depends on the combinator's arity) are S-expressions representing elements of the chosen combinator's fields (or parameters). Moreover, the type of the arguments' S-expressions and the type of the S-expressions of the result (e.g. the associated expression) must match.\n\nFor example, for the schema\n\n```\npair x:int y:int = Pair;\npnil = PairList;\npcons hd:Pair tl:PairList = PairList;\n```\n\nthe following are examples of the abstract type `PairList`, written as S-expressions:\n\n```\n(pnil)\n(pcons (pair 2 3) (pcons (pair 9 4) (pnil)))\n```\n\nWe usually write _E : T_ (read \"_E_ of type _T_\u201d) when we want to say that _E_ is a value of type _T_. We assume there is a built-in type _Type_ whose values are types. Thus, writing _T : Type_ means that _T_ is a type.\n\nFor example, we can write:\n\n```\nPairList : Type;\n(pcons (pair 2 3) (pcons (pair 9 4) (pnil))) : PairList;\n```\n\nConverting an abstract value to a serialized value, generally speaking, is straightforward (and, if desired, can be defined by induction):\n\n*   It is the serialization of values _n_ of the primitive type `int` (as a single-symbol word in the alphabet _A_)\n    \n*   The serialization of a string constant (a value of the primitive type string) is a sequence of the 32-bit numbers defined in [Binary serialization](https://core.telegram.org/mtproto/serialize).\n    \n*   The serialization of the S-expression `(C E1 ... Er) : T`, where `C` is a combinator with arity _r_ with argument types _T1_, ..., _Tr_ and result type _T_ (e.g. _C : T1->T2->...->Tr->T_) is the concatenation of the _combinator number_ _C_ (a 32-bit number that unambiguously identifies the combinator, usually equal to the CRC-32 of the string of its TL description) and the serializations of the values _E1_ of type _T1_, _E2_ of type _T2_, ..., _Er_ of type _Tr_.\n    \n\nIf we use _\\[T\\]_ to denote the concrete type corresponding to the abstract _T_, and _\\[E\\]_ to denote an element of _\\[T\\]_ corresponding to the value _E_ of type _T_, then the last rule may be written as:\n\n*   _\\[T\\]_ is the combination, for each constructor of type _C_ _T1->T2->...->Tr->T_ (i.e. that returns a value of type _T_), of direct products _{C} x \\[T1\\] x \\[T2\\] x ... x \\[Tr\\]_, where _{C}_ is a single-element set consisting of the combinator number _C_. Because _{C}<>{C'}_ when _C<>C'_, this defines a mutually single-valued mapping of the values of the abstract type _T_ (written using S-expressions) to the set _\\[T\\]_.\n\nValues of the built-in clothed types `Int` and `String` and serialized as if they were defined using `int x:int = Int;` and `string s:string = String;`, i.e. the serialization of integer constant or a string is preceded by number of the `int` or `string` combinator (constructor). In S-expressions, this may be written as `(int 5)` or `(string \"Test\")`.\n\nHowever, what has been described above does not account for certain subtleties, such as the existence of naked types, or the difference between functions (active combinators whose application may be reduced, e.g. calculated) and constructors (passive combinators for which there are not and cannot be reduction rules). Furthermore, we have not explained how to handle polymorphic types and [optional combinator parameters](https://core.telegram.org/mtproto/TL-optargs). We will attempt to explain this now.\n\n### [](#constants-surface-values-and-functional-values)Constants, surface values, and functional values\n\nBy dividing combinators into constructors and functions, we can introduce the following classes of expressions (values) of the abstract type _T_:\n\n*   _Constant expressions_: for the types `int` and `string`, these are all integer/string constants; for _T_, these are all expressions like _(C E1 ... Er) : T_, where the combinator _C : T1->T2->...->Tr->T_ is a constructor, and _Ei : Ti_ is constant expressions of types _Ti_. In other words, a constant expression is an S-expression consisting of only constructors and constant of primitive types.\n    \n*   _Surface expressions_ are expressions that outwardly contain a functional combinator whose arguments, however, are constant expressions of the appropriate types. In other words, the functional combinator is resolved only at the outer level. (This is not entirely true; see the full explanation below).\n    \n*   _Functional expressions_: These are expressions that may contain any combinators or constants at all levels.\n    \n\nIn practice, we most frequently need constant values (for storage and passing any data structures, in particular, responses to RPC queries) and surface expressions (for example, as RPC queries: then the functional combinator of the outer level is the name of the RPC function that we want to call, while its parameters are the arguments, which are constant values, for invoking the function). In some cases, arbitrary functional expressions are helpful (for example, it we want to remotely transmit the result of one RPC query to a different RPC query).\n\nWe will use _c(T)_ to denote a subtype of the abstract type _T_, whose values are constant expressions of type _T_. Clearly, _c(T)_ possesses approximately the same constructors as _T_ itself (with the types of all arguments _Ti_ replaced by _c(Ti)_, but it does not have functional combinators.\n\nAnalogously, we will use _f(T)_ to denote a subtype of _T_, whose values are surface expressions of type _T_. Clearly, the combinators of _f(T)_ are essentially functional combinators of type _T_, but _c()_ applies to the types of these combinators' arguments: The combinator _A : T1->...->Tr->T_ turns into _A' : c(T1)->...->c(Tr)->f(T)_. (See the clarification of this rule below.)\n\nThus, we have defined two \u201cfunctionals\u201d _c : Type -> Type_ and _f : Type -> Type_, such that _forall T : Type, c(T) :- T_ and _forall T : Type, f(T) :- T_ (writing _T :- T'_ means that _T_ is contained in _T'_, or that _T_ is a subtype of _T'_).\n\nWe will assume that _c_ and _f_ are idempotent.\n\n### [](#naked-types)Naked types\n\nFrom the perspective of abstract type theory, naked types (in contrast to built-in primitive types like `int` and `string` are unnecessary. However, they are extremely useful in practice.\n\nTherefore, TL introduces the (partially defined) idempotent unary operator `%`, which turns a standard functional (e.g. an expression of type _...->Type_ or simply _Type_) into a different standard functional of the same type. If _T_ is a type, then from an abstract theoretical point of view, `%T` is equivalent to _c(T)_. In other words, the values of `%T` are the constant values of _T_. If _T_ is a _k_\\-arity standard expression, then _T : S1 -> ... -> Sk -> Type_, where each _Si=Type_ or _#_, then by definition `%T` is a _k_\\-arity standard expression with the same arity, which is defined by the equation _(%T) a1 ... ak = % (T a1 ... ak)_.\n\nWhen a _constant_ value of type `%T` is serialized, it is first serialized as a value of type _T_ (assuming that _T_ is not already a naked type itself). Then the first character of the serialization is discarded (e.g. the name of the enclosing combinator). Therefore, `%T` is a only a valid type expression if there is not more than one constructor for `%T`. The expression `%T`, where _T : S1 -> ... -> Sk -> Type_, is valid, if for _any_ choice of parameters _a1 : S1, ... , ak : Sk_, the type _T a1 ... ak_ does not have more than one constructor. Using `%` in other instances is incorrect.\n\nIf for every value of the parameters _a1 : S1, ..., ak : Sk_, there is exactly one constructor _C_ for _T a1 ... ak_, then TL allows writing `C a1 ... ak` instead of `%T a1 ... ak` or `%(T a1 .. ak)`. In other words, in certain situations the identifier `C` is a synonym for `%T`. This is only allowed in the context of a type (when specifying the type of a combinator's field or result).\n\nMoreover, it is assumed that `%Int = int` and `%String = string`.\n\n### [](#-modifier)`!` modifier\n\nIn TL, the idempotent operator `!` can modify any type, actually making surface values be allowed when its constant values are serialized. However, if _T_ is a standard function like _S1->..->Sr->Type_, then _!T_ is defined using the equation `(!T) a1 ... ar = !(T a1 ... ar)`, for any _a1:S1_, ..., _ar:Sr_.\n\nThe `!` operator is only allowed in a definition of the types of fields of functional combinators. It is usually used as a type prefix, for example:\n\n```\nset_timeout {X:Type} timeout:int f:!X = X;\n```\n\nIn this case, the `set_timeout` \u201cwrapper\u201d is defined. It takes two explicit parameters: the integer `timeout` and a surface expression of type `X`. _X : Type_ is itself an implicit parameter (it is not explicitly stated, rather it is inferred from the values of the other parameters and their types). A similar kind of wrapper may be helpful for modifying the action of RPC queries (which are surface expressions of various types). For example, suppose we have the function\n\n```\nfactorial n:int = int;\n```\n\nthen we can wrap the RPC query `(factorial 100)` as follows: `(set_timeout 200 (factorial 100))`. This expression is still a surface value of type `int`, which means it can be passed as an RPC query.\n\nA consecutive pair of two computations is another example:\n\n```\npair {X Y : Type} x:X y:Y = Pair X Y;  // constructor\nseq_pair {X Y : Type} x:!X y:!Y = Pair X Y; // functional wrapper for sequential computation\npar_pair {X Y : Type} x:!X y:!Y = Pair X Y; // functional wrapper for parallel computation\n```\n\nNow the RPC query `(seq_pair (factorial 2) (factorial 3)) : Pair int int` first calculates factorial 2, then factorial 3, and returns the pair `(pair 2 6)`. In this case, the sequence of operations isn't important, because they do not have side effects. It would have been just as well to use `(par_pair (factorial 2) (factorial 3))`. However, this is not always the case.\n\nWe can also define an analogy to a \u201ccomma\u201d operation:\n\n```\ncomma {X Y : Type} x:!X y:!Y = Y;\n```\n\nFor example, this operation could first calculate `x`, then forget the result, calculate `y`, and return `y`.\n\nNote that the semantics of the `seq_pair`, `par_pair` and `comma` wrappers are indeed defined where they are implemented (like the semantics of all other functional combinators), not by their TL declaration.\n\nIn principle, polymorphic wrappers like `set_timeout` can also be applied, for example, to \u201cannotate\u201d a RPC response's constant values. For example, the server might return a response to a query together with the time it was calculated. However, a value of type _!X_ must be constant, because that is what is expected as the enclosing expression's value. In other words, `set_timeout 239 E` is a constant/surface value of type _X_ if and only if _E_ is such itself.\n\n### [](#-modifier)`$` modifier\n\nThe idempotent modifier `$` permits the use of arbitrary functional values of an appropriate type in contexts where only constants or surface values are usually allowed. It recursively transforms all combinators for all of the types involved, canceling the action of `%` and affixing `$` to the parameter types and result of all combinators (`$` is also added to the front of the transformed combinators). Moreover, built-in types are also transformed (in the final stage): `$int = Int` and `$string = String`.\n\nThis may be useful to create an RPC query that performs a \u201cdeep computation\u201d of the expression passed to it:\n\n```\ncompute {X:Type} expr:$X = X;\n```\n\nFor example, now we can transmit the following as an RPC query:\n\n```\n(compute ($factorial ($factorial (int 3)))) : int\n```\n\n(Note that the three has become clothed; the combinator $factorial has type $int -> $int).\n\nThis is very powerful tool. It does not have to be implemented in very simple versions of TL. `$` is not encountered in currently used TL schemas.\n\n### [](#more-on-modifiers)More on modifiers\n\nIn fact, at least in terms of its application to serialization, the TL language by default implies the _c()_ modifier around all combinators' parameter types and results, while `!` and `$` cancel it (more accurately, `!` only cancels, and in some sense `$` reverses the meaning). This is why there is no explicit `c()` modifier in TL and why it is assumed that all functions only accept constant values and return constant results, unless otherwise specified.\n\nYou may think that some functional combinators may have a type such as `partial_factorial n:int = $int;` and that the RPC query `(partial_factorial 3)` might then unexpectedly return `($product (int 3) ($product (int 2) ($product (int 1) (int 1)))) : $int` ...\n\nIt is probably more correct to think about the `!` modifier as follows. All types initially include only constant values (and only constructors). The `!` modifier makes a new type (it's twin) out of each type. This new type has no inherent constructors. Functional combinators differ from constructors in that `!` is implicitly added in front of their result's type. After this, the (local or remote) process of calculating the expression can be represented using the polymorphic function `eval : !X -> X`.\n\n### [](#optional-combinator-parameters-and-their-values)Optional combinator parameters and their values\n\nSee [Optional combinator parameters and their values](https://core.telegram.org/mtproto/TL-optargs).",
    "url": "https://core.telegram.org/mtproto/TL-abstract-types"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/end-to-end/seq_no",
      "title": "Sequence numbers in Secret Chats",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Sequence numbers in Secret Chats"
        },
        {
          "property": "og:description",
          "content": "It is necessary to interpret all messages in their original order to protect against reordering, reflection, replay, omission\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:17:56 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "4519",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Sequence numbers in Secret Chats\n\nIt is necessary to interpret **all** messages in their original order to protect against reordering, reflection, replay, omission and other manipulations ([decryptedMessageActionResend](https://core.telegram.org/constructor/decryptedMessageActionResend) messages are the only exception to this rule, see [avoiding concurrent gaps](#avoiding-concurrent-gaps)). Secret chats support a special mechanism for handling **seq\\_no** counters independently from the server. Note that any _service messages_ in secret chats must also increment the **seq\\_no**.\n\nAll Secret Chats messages in clients using Layer 17 or higher are wrapped in [decryptedMessageLayer](https://core.telegram.org/constructor/decryptedMessageLayer) and have **seq\\_no** (sequence number) counters attached to them. The **seq\\_no** counters in their raw form are initialized with **(out\\_seq\\_no, in\\_seq\\_no) := (0,0)**, and incremented strictly by 1 after any message (service or not) is sent/received and processed. They must be protected from mirroring before being sent to the remote client by transformation according to formula **2\\*raw\\_seq\\_no+x**, where **x** is 0 or 1, determined by the following rule:\n\n|     |     |     |\n| --- | --- | --- |\n|     | **in\\_seq\\_no** | **out\\_seq\\_no** |\n| secret chat initiated by sender | 0   | 1   |\n| secret chat initiated by recipient | 1   | 0   |\n\nIn this way the least significant bit of each **seq\\_no** field included in the message is different for incoming and outgoing messages. This is done to prevent a possible attacker from mirroring the messages. If any of the received **in\\_seq\\_no** or **out\\_seq\\_no** are not consistent in terms of parity (see table above), the client is required to immediately abort the secret chat.\n\n> E.g., the first message the local client sends to any secret chat will have **out\\_seq\\_no** of **0+x\\_out**, the second one will have **out\\_seq\\_no** of **2\\*1+x\\_out**, and so on, where **x\\_out** is 0 if the chat was initiated by the remote client, 1 otherwise; similarly for the received messages, but there **x\\_in** is used instead of **x\\_out** and is equal to 0 if the chat was initiated by the local client, 1 otherwise.\n\nRaw sequence numbers will be used in the remaining part of this text, unless otherwise specified.\n\n#### [](#preventing-gaps)Preventing gaps\n\nYour client must ensure that all outgoing secret chat messages are queued on the server in the correct order. This is achieved by correctly placing them into the [invokeAfterMsgs](https://core.telegram.org/method/invokeAfterMsgs) chain. Failure to do this may result in gaps on the remote client, which may in turn lead to aborted secret chats. The local client must maintain the correct sequence of **in\\_seq\\_no** for the remote client. To achieve this, assign **in\\_seq\\_no** and **out\\_seq\\_no** to each message at the _exact_ moment when the message is created, and never change them in the future.\n\n## [](#security-checks)Security checks\n\n#### [](#checking-out-seq-no)Checking out\\_seq\\_no\n\nYour client must check that it has received _each_ message with the sequence number **out\\_seq\\_no** starting from 0 to some current point **C**. It should then expect the next message to have the sequence number **out\\_seq\\_no=C+1**. If the **out\\_seq\\_no** in the received message does not match this, the following needs to be done:\n\n*   If the received **out\\_seq\\_no<=C**, the local client must drop the message (repeated message). The client should not check the contents of the message because the original message could have been deleted (see [Deleting unacknowledged messages](#deleting-unacknowledged-messages)).\n*   If the received **out\\_seq\\_no>C+1**, it most likely means that the server left out some messages due to a technical failure or due to the messages becoming obsolete. A temporary solution to this is to simply abort the secret chat. But since this may cause some existing older secret chats to be aborted, it is strongly recommended for the client to properly handle such **seq\\_no** gaps. Note that **in\\_seq\\_no** is not increased upon receipt of such a message; it is advanced only after all preceding gaps are filled.\n\n#### [](#proper-handling-of-gaps)Proper handling of gaps\n\nIn order to correctly handle incoming messages after a hole has been identified (when received **out\\_seq\\_no>C+1**), it is necessary to put received messages with the wrong **seq\\_no** into a \"waiting queue\" on the local client, and to re-request the missing messages using the special constructor [decryptedMessageActionResend](https://core.telegram.org/constructor/decryptedMessageActionResend). The sequence numbers used in this constructor must be ready for interpretation by the remote client and therefore _cannot_ be in their raw form: you can easily get the necessary **start\\_seq\\_no** by adding 2 to the **out\\_seq\\_no** of the last message before the hole and the **end\\_seq\\_no** by subtracting 2 from the **out\\_seq\\_no** of the received message with the wrong sequence number.\n\nEach hole normally requires only one request to resend messages \u2014 if the remote client keeps sending out of sync messages, they should be put into the queue without sending a new request. Having received the missing messages, the local client must first interpret these messages in the right order by their **seq\\_no**. Once this is done, the client can proceed to interpret messages from the queue (again, in the right **seq\\_no** order).\n\nSpecial cases:\n\n*   Note that having _two_ gaps simultaneously is very rare (provided that the remote client and server are operating normally) and it is acceptable to abort the secret chat in this situation.\n*   If a local client receives [decryptedMessageActionResend](https://core.telegram.org/constructor/decryptedMessageActionResend) but is unable to satisfy the request, it must abort the secret chat.\n\n#### [](#avoiding-concurrent-gaps)Avoiding concurrent gaps\n\nIn order to avoid getting stuck with concurrent gaps on both sides, [decryptedMessageActionResend](https://core.telegram.org/constructor/decryptedMessageActionResend) must always be interpreted _immediately upon receipt_ in all cases, even if its **out\\_seq\\_no>=C+1**. Note that each [decryptedMessageActionResend](https://core.telegram.org/constructor/decryptedMessageActionResend) must only be handled once, it must not be interpreted again when we interpret messages in the queue.\n\n#### [](#checking-and-handling-in-seq-no)Checking and handling in\\_seq\\_no\n\n**in\\_seq\\_no** of all received messages must be _valid_. To ensure this, perform the following checks:\n\n*   **in\\_seq\\_no** must form a non-decreasing sequence of non-negative integer numbers.\n*   **in\\_seq\\_no** must be valid at the moment of receiving the message, that is, if **D** is the **out\\_seq\\_no** of last message we sent, the received **in\\_seq\\_no** should not be greater than **D + 1**. This also allows us to insert the received message into its correct place in the secret chat. For example, imagine that the local client has sent 5 secret chat messages, and then receives a secret chat message with the text \"Yes\" and **in\\_seq\\_no=2**. In this situation the local client _must_ place that message after the second message it sent. This makes manipulations with delayed messages impossible.\n\nIf `in_seq_no` contradicts these criteria, the local client is required to immediately abort the secret chat. This could happen only in case of malicious or buggy behaviour on either server or remote client side.\n\n#### [](#deleting-unacknowledged-messages)Deleting unacknowledged messages\n\nIn case the user on the local client has deleted a message _before_ the server (or the remote client, if [decryptedMessageActionResend](https://core.telegram.org/constructor/decryptedMessageActionResend) is handled correctly) could acknowledge the message, for security reasons, you must:\n\n*   securely destroy the contents of the message (as in case of any other deleted Secret Chat message);\n*   change the local copy of the original message to `decryptedMessageActionDeleteMessages` with **random\\_id** equal to its own **random\\_id**;\n*   create a new outgoing message deleting the original message.\n\nThis must be done because your client doesn't know whether the remote client really received the message or not. In the case the message was already received, it will be deleted by the second message; otherwise it must arrive as a \"self-delete\" message to maintain the correct sequence of seq\\_no.",
    "url": "https://core.telegram.org/api/end-to-end/seq_no"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/mtproto/TL-types",
      "title": "\ufeffType serialization",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "\ufeffType serialization"
        },
        {
          "property": "og:description",
          "content": "See Polymorphism in TL and TL Language.\nIt remains to describe how types, e.g. values of type Type, are transmitted (serialized).\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:17:53 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "2088",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Type serialization\n\nSee [Polymorphism in TL](https://core.telegram.org/mtproto/TL-polymorph) and [TL Language](https://core.telegram.org/mtproto/TL).\n\nIt remains to describe how types, e.g. values of type Type, are transmitted (serialized). In general, there is nothing unexpected going on here: we have type constructors of various arities (for example, List is an arity-1 constructor, but IntList is a 0-arity constructor); and if we know that a 32-bit \u201cname\u201d is assigned to each type constructor, there are no further questions -- values of type Type are serialized exactly like values of any other recursive type with a defined set of constructors of differing arity.\n\nHow can a 32-bit \u201cname\u201d be assigned to a type (a type constructor, to be more exact) such as List or IntList? It is proposed to use the sum of the names of all of its constructors, plus the CRC32 of the string with the designation of the type's name and all of its parameters such as \u201cIntList = Type\u201d or \u201cList X:Type = Type\u201d. This way, the List constructor's \u201cname\u201d is the sum of the CRC32s of the three strings \"List X:Type = Type\", \"cons X:Type hd:X tl:List X = List X\", and \"nil X:Type = List X\". For \u201cbare\u201d types (which, formally speaking, are subtypes of the corresponding \u201cboxed\u201d type), the situation is somewhat more complicated; the logical negation of the corresponding constructor's name is used. For built-in bareand boxed types (for example, int and Int), a pseudo-declaration is used (for example, int ? = Int\").\n\n*   This description is somewhat outdated and may be updated in the future. Specifically, how to treat the `!` modifier has not been explained.\\*",
    "url": "https://core.telegram.org/mtproto/TL-types"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/end-to-end_v1",
      "title": "Secret chats, end-to-end encryption (v. 1.0, DEPRECATED)",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Secret chats, end-to-end encryption (v. 1.0, DEPRECATED)"
        },
        {
          "property": "og:image",
          "content": "https://core.telegram.org/file/811140845/3/3aEkph1_NYU/cf861ae5ea85912769"
        },
        {
          "property": "og:description",
          "content": "This document describes end-to-end encrypted Secret Chats in MTProto 1.0, its status is DEPRECATED.\nFor information on\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:17:56 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "7468",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Secret chats, end-to-end encryption (v. 1.0, DEPRECATED)\n\n> This document describes end-to-end encrypted Secret Chats in MTProto 1.0, its status is **DEPRECATED**. For information on end-to-end encryption used in up-to-date Telegram clients, kindly see [this document](https://core.telegram.org/api/end-to-end).\n\n##### [](#related-articles)Related articles\n\n* * *\n\nSecret Chats are one-on-one chats wherein messages are encrypted with a key held only by the chat's participants. Please note that the [schema](https://core.telegram.org/schema/end-to-end) for end-to-end encrypted Secret Chats is different from what is used for [cloud chats](https://core.telegram.org/mtproto):\n\n[![](https://core.telegram.org/file/811140845/3/3aEkph1_NYU/cf861ae5ea85912769 \"End-to-end encryption in MTProto (Secret Chats)\")](https://core.telegram.org/file/811140845/3/3aEkph1_NYU/cf861ae5ea85912769)\n\n### [](#key-generation)Key Generation\n\nThe Diffie-Hellman protocol is used for key generation. For more information, see [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange).\n\nLet us consider the following scenario: User **A** would like to initiate encrypted communication with User **B**.\n\n#### [](#sending-a-request)Sending a Request\n\nUser **A** executes [messages.getDhConfig](https://core.telegram.org/method/messages.getDhConfig) to obtain the Diffie-Hellman parameters: a prime **p**, and a high order element **g**.\n\nExecuting this method before each new key generation procedure is of vital importance. It makes sense to cache the values of the parameters together with the version in order to avoid having to receive all of the values every time. If the version stored on the client is still up-to-date, the server will return the constructor [messages.dhConfigNotModified](https://core.telegram.org/constructor/messages.dhConfigNotModified).\n\nClient is expected to check whether **p** is a safe 2048-bit prime (meaning that both **p** and **(p-1)/2** are prime, and that 2^2047 < p < 2^2048), and that **g** generates a cyclic subgroup of prime order **(p-1)/2**, i.e. is a quadratic residue **mod p**. Since **g** is always equal to 2, 3, 4, 5, 6 or 7, this is easily done using quadratic reciprocity law, yielding a simple condition on **p mod 4g** -- namely, **p mod 8 = 7** for **g = 2**; **p mod 3 = 2** for **g = 3**; no extra condition for **g = 4**; **p mod 5 = 1 or 4** for **g = 5**; **p mod 24 = 19 or 23** for **g = 6**; and **p mod 7 = 3, 5 or 6** for **g = 7**. After **g** and **p** have been checked by the client, it makes sense to cache the result, so as to avoid repeating lengthy computations in future. This cache might be shared with one used for [Authorization Key generation](https://core.telegram.org/mtproto/auth_key).\n\nIf the client has an inadequate random number generator, it makes sense to pass the **random\\_length** parameter (random\\_length> 0) so the server generates its own random sequence **random** of the appropriate length. **Important**: using the server's random sequence in its raw form may be unsafe. It must be combined with a client sequence, for example, by generating a client random number of the same length (**client\\_random**) and using `final_random := random XOR client_random`.\n\nClient **A** computes a 2048-bit number **a** (using sufficient entropy or the server's **random**; see above) and executes [messages.requestEncryption](https://core.telegram.org/method/messages.requestEncryption) after passing in `g_a := pow(g, a) mod dh_prime`.\n\nUser **B** receives the update [updateEncryption](https://core.telegram.org/constructor/updateEncryption) for all associated authorization keys (all authorized devices) with the chat constructor [encryptedChatRequested](https://core.telegram.org/constructor/encryptedChatRequested). The user must be shown basic information about User **A** and must be prompted to accept or reject the request.\n\nBoth clients are to check that **g**, **g\\_a** and **g\\_b** are greater than one and smaller than **p-1**. We recommend checking that **g\\_a** and **g\\_b** are between **2^{2048-64}** and **p - 2^{2048-64}** as well.\n\n#### [](#accepting-a-request)Accepting a Request\n\nAfter User **B** confirms the creation of a secret chat with **A** in the client interface, Client **B** also receives up-to-date configuration parameters for the Diffie-Hellman method. Thereafter, it generates a random 2048-bit number, **b**, using rules similar to those for **a**.\n\nHaving received **g\\_a** from the update with [encryptedChatRequested](https://core.telegram.org/constructor/encryptedChatRequested), it can immediately generate the final shared key: `key = (pow(g_a, b) mod dh_prime)`. If key length < 256 bytes, add several leading zero bytes as padding \u2014 so that the key is exactly 256 bytes long. Its fingerprint, **key\\_fingerprint**, is equal to the 64 last bits of SHA1 (key).\n\n**Note:** this fingerprint is used as a sanity check for the key exchange procedure to detect bugs while developing client software \u2014 it is not connected to the key visualization used on the clients as means of external authentication in secret chats. [Key visualizations](https://core.telegram.org/api/end-to-end/pfs#key-visualization) on the clients are generated using the first 128 bits of SHA1(initial key) followed by the first 160 bits of SHA256(key used when secret chat was updated to layer 46).\n\nClient **B** executes [messages.acceptEncryption](https://core.telegram.org/method/messages.acceptEncryption) after passing it `g_b := pow(g, b) mod dh_prime` and **key\\_fingerprint**.\n\nFor all of Client **B's** authorized devices, except the current one, [updateEncryption](https://core.telegram.org/constructor/updateEncryption) updates are sent with the constructor [encryptedChatDiscarded](https://core.telegram.org/constructor/encryptedChatDiscarded). Thereafter, the only device that will be able to access the secret chat is Device **B**, which made the call to [messages.acceptEncryption](https://core.telegram.org/method/messages.acceptEncryption).\n\nUser **A** will be sent an [updateEncryption](https://core.telegram.org/constructor/updateEncryption) update with the constructor [encryptedChat](https://core.telegram.org/constructor/encryptedChat), for the authorization key that initiated the chat.\n\nWith **g\\_b** from the update, Client **A** can also receive the shared key `key = (pow(g_b, a) mod dh_prime)`. If key length < 256 bytes, add several leading zero bytes as padding \u2014 so that the key is exactly 256 bytes long. If the fingerprint for the received key is identical to the one that was passed to [encryptedChat](https://core.telegram.org/constructor/encryptedChat), incoming messages can be sent and processed. Otherwise, [messages.discardEncryption](https://core.telegram.org/method/messages.discardEncryption) must be executed and the user notified.\n\n#### [](#perfect-forward-secrecy)Perfect Forward Secrecy\n\nIn order to keep past communications safe, official Telegram clients will initiate re-keying once a key has been used to decrypt and encrypt more than 100 messages, or has been in use for more than one week, provided the key has been used to encrypt at least one message. Old keys are then securely discarded and cannot be reconstructed, even with access to the new keys currently in use.\n\n> The re-keying protocol is further described in this article: [Perfect Forward Secrecy in Secret Chats](https://core.telegram.org/api/end-to-end/pfs).\n\nPlease note that your client must support Forward Secrecy in Secret Chats to be compatible with official Telegram clients.\n\n### [](#sending-and-receiving-messages-in-a-secret-chat)Sending and Receiving Messages in a Secret Chat\n\n#### [](#serialization-and-encryption-of-outgoing-messages)Serialization and Encryption of Outgoing Messages\n\nA TL object of type [DecryptedMessage](https://core.telegram.org/type/DecryptedMessage) is created and contains the message in plain text. For backward compatibility, the object must be wrapped in the constructor [decryptedMessageLayer](https://core.telegram.org/constructor/decryptedMessageLayer) with an indication of the supported layer (starting with 8). The TL-Schema for end-to-end encrypted messages contents is represented [here \u00bb](https://core.telegram.org/schema/end-to-end).\n\nThe resulting construct is serialized as an array of bytes using generic TL rules. The resulting array is padded at the top with 4 bytes of the array length not counting these 4 bytes. A message key, **msg\\_key**, is computed as the 128 low-order bits of the SHA1 of the data obtained in the previous step. The byte array is padded with random data until its length is divisible by 16 bytes. An AES key and an initialization vector are computed ( **key** is the shared key obtained during [Key Generation](#key-generation); in MTProto 1.0, **x** = 0 ):\n\n*   msg\\_key = substr (SHA1 (plaintext), 4, 16);\n*   sha1\\_a = SHA1 (msg\\_key + substr (key, x, 32));\n*   sha1\\_b = SHA1 (substr (key, 32+x, 16) + msg\\_key + substr (key, 48+x, 16));\n*   sha1\\_c = SHA1 (substr (key, 64+x, 32) + msg\\_key);\n*   sha1\\_d = SHA1 (msg\\_key + substr (key, 96+x, 32));\n*   aes\\_key = substr (sha1\\_a, 0, 8) + substr (sha1\\_b, 8, 12) + substr (sha1\\_c, 4, 12);\n*   aes\\_iv = substr (sha1\\_a, 8, 12) + substr (sha1\\_b, 0, 8) + substr (sha1\\_c, 16, 4) + substr (sha1\\_d, 0, 8);\n\nData is encrypted with a 256-bit key, **aes\\_key**, and a 256-bit initialization vector, **aes-iv**, using AES-256 encryption with infinite garble extension (IGE). Encryption key fingerprint **key\\_fingerprint** and the message key **msg\\_key** are added at the top of the resulting byte array.\n\nEncrypted data is embedded into a [messages.sendEncrypted](https://core.telegram.org/method/messages.sendEncrypted) API call and passed to Telegram server for delivery to the other party of the Secret Chat.\n\n#### [](#decrypting-an-incoming-message)Decrypting an Incoming Message\n\nThe steps above are performed in reverse order. When an encrypted message is received, you **must** check that msg\\_key is **in fact** equal to the 128 low-order bits of the SHA1 hash of the decrypted message. If the message layer is greater than the one supported by the client, the user must be notified that the client version is out of date and prompted to update.\n\n#### [](#sequence-numbers)Sequence numbers\n\nIt is necessary to interpret all messages in their original order to protect against possible manipulations. Secret chats support a special mechanism for handling seq\\_no counters independently from the server.\n\n> Proper handling of these counters is further described in this article: [Sequence numbers in Secret Chats](https://core.telegram.org/api/end-to-end/seq_no).\n\nPlease note that your client must support sequence numbers in Secret Chats to be compatible with official Telegram clients.\n\n#### [](#sending-encrypted-files)Sending Encrypted Files\n\nAll files sent to secret chats are encrypted with one-time keys that are in no way related to the chat's shared key. Before an encrypted file is sent, it is assumed that the encrypted file's address will be attached to the outside of an encrypted message using the **file** parameter of the [messages.sendEncryptedFile](https://core.telegram.org/method/messages.sendEncryptedFile) method and that the key for direct decryption will be sent in the body of the message (the **key** parameter in the constructors [decryptedMessageMediaPhoto](https://core.telegram.org/constructor/decryptedMessageMediaPhoto), [decryptedMessageMediaVideo](https://core.telegram.org/constructor/decryptedMessageMediaPhoto) and [decryptedMessageMediaFile](https://core.telegram.org/constructor/decryptedMessageMediaPhoto).\n\nPrior to a file being sent to a secret chat, 2 random 256-bit numbers are computed which will serve as the AES key and initialization vector used to encrypt the file. AES-256 encryption with infinite garble extension (IGE) is used in like manner.\n\nThe key fingerprint is computed as follows:\n\n*   digest = md5(key + iv)\n*   fingerprint = substr(digest, 0, 4) XOR substr(digest, 4, 4)\n\nThe encrypted contents of a file are stored on the server in much the same way as those of a [file in cloud chats](https://core.telegram.org/api/files): piece by piece using calls to [upload.saveFilePart](https://core.telegram.org/method/upload.saveFilePart). A subsequent call to [messages.sendEncryptedFile](https://core.telegram.org/method/messages.sendEncryptedFile) will assign an identifier to the stored file and send the address together with the message. The recipient will receive an update with [encryptedMessage](https://core.telegram.org/constructor/encryptedMessage), and the **file** parameter will contain file information.\n\nIncoming and outgoing encrypted files can be forwarded to other secret chats using the constructor [inputEncryptedFile](https://core.telegram.org/constructor/inputEncryptedFile) to avoid saving the same content on the server twice.\n\n#### [](#working-with-an-update-box)Working with an Update Box\n\nSecret chats are associated with specific devices (or rather with [authorization keys](https://core.telegram.org/mtproto/description_v1#authorization-key)), not users. A conventional message box, which uses **pts** to describe the client's status, is not suitable, because it is designed for long-term message storage and message access from different devices.\n\nAn additional temporary message queue is introduced as a solution to this problem. When an update regarding a message from a secret chat is sent, a new value of **qts** is sent, which helps reconstruct the difference if there has been a long break in the connection or in case of loss of an update.\n\nAs the number of events increases, the value of **qts** increases monotonically (not always by 1). The initial value may not (and will not) be equal to 0.\n\nThe fact that events from the temporary queue have been received and stored by the client is acknowledged explicitly by a call to the [messages.receivedQueue](https://core.telegram.org/method/messages.receivedQueue) method or implicitly by a call to [updates.getDifference](https://core.telegram.org/method/updates.getDifference) (the value of **qts** passed, not the final state). All messages acknowledged as delivered by the client, as well as any messages older than 7 days, may (and will) be deleted from the server.\n\nUpon de-authorization, the event queue of the corresponding device will be forcibly cleared, and the value of **qts** will become irrelevant.\n\n## [](#updating-to-new-layers)Updating to new layers\n\nYour client should always store the maximal layer that is known to be supported by the client on the other side of a secret chat. When the secret chat is first created, this value should be initialized to 8, the first layer where Secret Chats became available. This remote layer value must always be updated immediately after receiving _any_ packet containing information of an upper layer, i.e.:\n\n*   any secret chat message containing _layer\\_no_ in its `decryptedMessageLayer` with _layer_\\>=17, or\n*   a [decryptedMessageActionNotifyLayer](https://core.telegram.org/constructor/decryptedMessageActionNotifyLayer) service message, wrapped as if it were the [decryptedMessageService](https://core.telegram.org/constructor/decryptedMessageService) constructor of the obsolete layer 8 (constructor `decryptedMessageService#aa48327d`).\n\n#### [](#notifying-the-remote-client-about-your-local-layer)Notifying the remote client about your local layer\n\nIn order to notify the remote client of your local layer, your client must send a message of the `decryptedMessageActionNotifyLayer` type. This notification must be wrapped in a constructor of an appropriate layer. For instance, if the remote layer for the chat in question is deemed to be lower than 17, the notification must be wrapped as if it were the `decryptedMessageService` constructor of the obsolete layer 8 (constructor `decryptedMessageService#aa48327d`), despite the fact that the `decryptedMessageActionNotifyLayer` constructor is actually not present in Layer 8.\n\nThere are three cases when your client must notify the remote client about its local layer:\n\n1.  As soon as a new secret chat has been created, immediately after the secret key has been successfully exchanged.\n2.  Immediately after the remote layer value is updated to layer 17 or higher. An exception to this case is when the secret chat in question has been created less than 15 seconds ago. In this case the notification was already sent (see 1).\n3.  Immediately after the local client has been updated to support a new secret chat layer. In this case notifications must be sent to **all** currently existing secret chats. Note that this is only necessary when updating to new layers that contain changes in the secret chats implementation (e.g. you don't need to do this when your client is updated from Layer 17 to Layer 18).\n\n> Note that all pending obsolete layer messages must be sent prior to the layer update notification (more on this in [Handling Sequence numbers](https://core.telegram.org/api/end-to-end/seq_no#preventing-gaps)).",
    "url": "https://core.telegram.org/api/end-to-end_v1"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/mtproto/TL-patterns",
      "title": "TL-patterns",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "TL-patterns"
        },
        {
          "property": "og:description",
          "content": "partial-app-decl ::= partial-type-app-decl | partial-comb-app-decl\npartial-type-app-decl ::= boxed-type-ident subexpr \u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:17:55 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "2422",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# TL-patterns\n\n_partial-app-decl_ ::= _partial-type-app-decl_ | _partial-comb-app-decl_  \n_partial-type-app-decl_ ::= _boxed-type-ident_ _subexpr_ { _subexpr_ } `;` | _boxed-type-ident_ `<` _expr_ { `,` _expr_ } `>` `;`  \n_partial-comb-app-decl_ ::= _combinator-id_ _subexpr_ { _subexpr_ } `;`\n\nAccording to the original design, templates must be used to replace concrete values in the first few or all of the optional arguments of a constructor or polymorphic type. For example, if `Tuple int 10` is used frequently, you can declare a template for it, which will cause the appropriate constructors to be generated automatically. When using such a constructor there may be nowhere to pass an `int` type or the tuple size `10`. Similarly, it was originally planned to declared templates for `Vector int`, `Vector string`, etc. in order to generate constructors for each vector type being used type. These constructors would make it possible during deserialization to determine what kind of array is being transmitted.\n\nTemplates are not used now. Instead, the same universal constructors (for example, `vector {t:Type} [t] = Vector t`) are used with the values of the optional parameters being inferred from the type of the result (if we already know from the schema that in this location there must be a `Vector int` during deserialization, we understand that we will see the universal `vector` constructor in which _t_ is equal to `int`).\n\nThis approach is better in that it is not necessary to define `Vector SomeType` templates in advance for all possible types in order to generate their own constructors for each of these cases. Nevertheless, there is a drawback. If someone wants to transmit the serialization of a value of the clothed type `Vector int` as a serialization of a value of type `Object`, a problem arises during serialization: after seeing the universal `vector` constructor and then reading the vector length, we cannot determine what type of values should be expected next.\n\nIn theory, this problem can be solved by using the full form of the constructor (`@vector`) corresponding to `vector` (it is automatically defined and is different in that all of the optional parameters become required), or by defining\n\nobject X:Type X = TypedObject\n\nand passing the object type explicitly. [Type serialization](https://core.telegram.org/mtproto/TL-types) is required in both cases.",
    "url": "https://core.telegram.org/mtproto/TL-patterns"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/mtproto/TL-optargs",
      "title": "Optional combinator parameters and their values",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Optional combinator parameters and their values"
        },
        {
          "property": "og:description",
          "content": "TL Language makes it possible to declare a combinator's first few parameters optional. Subsequently, they are almost never\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:17:54 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "2863",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Optional combinator parameters and their values\n\n[TL Language](https://core.telegram.org/mtproto/TL) makes it possible to declare a combinator's first few parameters optional. Subsequently, they are almost never required to be explicitly stated. This is directly related to another important property of TL: [polymorphism](https://core.telegram.org/mtproto/TL-polymorph).\n\nAll optional parameters are typically required to be part of the result type (at least once).\n\nA (sub)expression may be serialized/deserialized in one of two ways:\n\n*   The result type is known (for example, we're parsing the response to a previously sent RPC query and therefore know the value of some type is expected). In this case, the result type may be used to determine the values of the combinator's implicit parameters.\n    \n*   The result type is not known. It is determined as a result of (de)serialization (for example, we are serializing an RPC query). In this case, it is necessary to explicitly specify (and serialize) all of the combinator's optional parameters by using the full version of the combinator.\n    \n\nWe will assume that the functional combinator only differs from the constructor in that before its result type the `!` modifier is implicitly added, and the (remote or local) computation of a functional expression may be presented as the execution of some polymorphic function `eval : !X -> X`.\n\nMoreover, the unknown result type is obviously usually (but not always) bound to the serialization of an expression whose type has been modified by `!`.\n\nWe can formulate the following rules. Let there be some constructor\n\n```\nC {a1:T1} ... {am:Tm} b1:U1 ... bn:Un = T;\n```\n\nSome of its arguments or its result may be marked with the `!` modifier (We consider a functional combinator to be a constructor whose result type has been modified by an implicit `!`).\n\nThe following conditions must hold:\n\n*   Each type _T1_, ..., _Tm_, _U1_, ..., _Un_, and _T_ may depend on parameters of type `Type` or `#`, which have been declared to the left of the use of the given type.\n    \n*   The types of implicit parameters _T1_, ..., _Tm_ may not be modified by `!`.\n    \n*   Only implicit parameters of type `Type` or `#` are allowed. In other words, _Ti_ is either a `Type` or a `#`. (Unlike the previous rule, this rule may be relaxed in the future.)\n    \n*   Each implicit parameter _a1_, ..., _am_ must be used at least once -- either within one of the _Ui_ types that have a `!`, or in the result type _T_, _if it does not have an explicit or implicit `!`_.\n    \n*   If an implicit parameter _ai_ is not used in the result type, or if the result type has a `!`, then its first (leftmost) usage must be within a type _Uj_ that is modified by `!`.\n    \n\nThe idea is this: we assume that during (de)serialization of a value of a type modified by `!` that we do not know this type in advance and we will find out what it is only based on the result of the (de)serialization; Conversely, we assume that during (de)serialization of a value of a type that is not modified by `!` that we know this type in advance. In this case, complying with the rules stated above lets us always compute the values of all implicit parameters -- either from the (previously known) result type or from the type of one of the `bj:!Uj` parameters (which was obtained during the serialization process).\n\nIn fact, `!` denotes the direction in which type information is flowing. By default, the result type is the source of information about types (and their parameters), while argument types are the recipients of that information. The use of `!` reverses the direction of information flow, making the result type the recipient and the argument type the source of type information.\n\nSee also [Binary serialization and abstract TL types](https://core.telegram.org/mtproto/TL-abstract-types) and [Polymorphism in TL](https://core.telegram.org/mtproto/TL-polymorph).",
    "url": "https://core.telegram.org/mtproto/TL-optargs"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:17:57 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5906",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=176"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:17:57 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5903",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=174"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:17:57 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5904",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=177"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:17:58 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5816",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=112"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:17:58 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5816",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=113"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/end-to-end%2Fvoice-calls",
      "title": "End-to-End Encrypted Voice Calls",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "End-to-End Encrypted Voice Calls"
        },
        {
          "property": "og:description",
          "content": "This document describes encryption in voice calls as implemented in Telegram apps with versions < 7.0. See this document\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:17:58 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5962",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# End-to-End Encrypted Voice Calls\n\n> This document describes encryption in **voice calls** as implemented in Telegram apps with versions **< 7.0**. See [this document](https://core.telegram.org/api/end-to-end/video-calls) for details on encryption used in **voice and video calls** in app versions released on **August 14, 2020** and later.\n\n##### [](#related-articles)Related articles\n\n## [](#establishing-voice-calls)Establishing voice calls\n\nBefore a voice call is ready, some preliminary actions have to be performed. The calling party needs to contact the party to be called and check whether it is ready to accept the call. Besides that, the parties have to negotiate the protocols to be used, learn the IP addresses of each other or of the Telegram relay servers to be used (so-called _reflectors_), and generate a one-time encryption key for this voice call with the aid of _Diffie--Hellman key exchange_. All of this is accomplished in parallel with the aid of several Telegram API methods and related notifications. This document details the generation of the encryption key. Other negotiations will be eventually documented elsewhere.\n\n## [](#key-generation)Key Generation\n\nThe Diffie-Hellman key exchange, as well as the whole protocol used to create a new voice call, is quite similar to the one used for [Secret Chats](https://core.telegram.org/api/end-to-end#key-generation). We recommend studying the linked article before proceeding.\n\nHowever, we have introduced some important changes to facilitate the [key verification process](#key-verification). Below is the entire exchange between the two communicating parties, the Caller (A) and the Callee (B), through the Telegram servers (S).\n\n*   _A_ executes [messages.getDhConfig](https://core.telegram.org/method/messages.getDhConfig) to find out the 2048-bit Diffie-Hellman prime _p_ and generator _g_. The client is expected to check whether _p_ is a safe prime and perform all the [security checks](https://core.telegram.org/api/end-to-end#sending-a-request) necessary for secret chats.\n*   _A_ chooses a random value of _a_, 1 < a < p-1, and computes _g\\_a:=power(g,a) mod p_ (a 256-byte number) and _g\\_a\\_hash:=SHA256(g\\_a)_ (32 bytes long).\n*   _A_ invokes (sends to server _S_) [phone.requestCall](https://core.telegram.org/method/phone.requestCall), which has the field `g_a_hash:bytes`, among others. For this call, this field is to be filled with _g\\_a\\_hash_, **not** _g\\_a_ itself.\n*   The Server _S_ performs privacy checks and sends an [updatePhoneCall](https://core.telegram.org/constructor/updatePhoneCall) update with a [phoneCallRequested](https://core.telegram.org/constructor/phoneCallRequested) constructor to all of _B_'s active devices. This update, apart from the identity of _A_ and other relevant parameters, contains the _g\\_a\\_hash_ field, filled with the value obtained from _A_.\n*   _B_ accepts the call on one of their devices, stores the received value of _g\\_a\\_hash_ for this instance of the voice call creation protocol, chooses a random value of _b_, 1 < b < p-1, computes _g\\_b:=power(g,b) mod p_, performs all the required security checks, and invokes the [phone.acceptCall](https://core.telegram.org/method/phone.acceptCall) method, which has a _g\\_b:bytes_ field (among others), to be filled with the value of _g\\_b_ itself (not its hash).\n*   The Server _S_ sends an [updatePhoneCall](https://core.telegram.org/constructor/updatePhoneCall) with the [phoneCallDiscarded](https://core.telegram.org/constructor/phoneCallDiscarded) constructor to all other devices _B_ has authorized, to prevent accepting the same call on any of the other devices. From this point on, the server _S_ works only with that of _B_'s devices which has invoked [phone.acceptCall](https://core.telegram.org/method/phone.acceptCall) first.\n*   The Server _S_ sends to _A_ an [updatePhoneCall](https://core.telegram.org/constructor/updatePhoneCall) update with [phoneCallAccepted](https://core.telegram.org/constructor/phoneCallAccepted) constructor, containing the value of _g\\_b_ received from _B_.\n*   _A_ performs all the usual security checks on _g\\_b_ and _a_, computes the Diffie--Hellman key _key:=power(g\\_b,a) mod p_ and its fingerprint _key\\_fingerprint:long_, equal to the lower 64 bits of _SHA1(key)_, the same as with secret chats. Then _A_ invokes the [phone.confirmCall](https://core.telegram.org/method/phone.confirmCall) method, containing `g_a:bytes` and `key_fingerprint:long`.\n*   The Server _S_ sends to _B_ an [updatePhoneCall](https://core.telegram.org/constructor/updatePhoneCall) update with the [phoneCall](https://core.telegram.org/constructor/phoneCall) constructor, containing the value of _g\\_a_ in _g\\_a\\_or\\_b:bytes_ field, and _key\\_fingerprint:long_\n*   At this point _B_ receives the value of _g\\_a_. It checks that _SHA256(g\\_a)_ is indeed equal to the previously received value of _g\\_a\\_hash_, performs all the [usual Diffie-Hellman security checks](https://core.telegram.org/mtproto/security_guidelines), and computes the key _key:=power(g\\_a,b) mod p_ and its fingerprint, equal to the lower 64 bits of _SHA1(key)_. Then it checks that this fingerprint equals the value of `key_fingerprint:long` received from the other side, as an implementation sanity check.\n\nAt this point, the Diffie--Hellman key exchange is complete, and both parties have a 256-byte shared secret key _key_ which is used to encrypt all further exchanges between _A_ and _B_.\n\nIt is of paramount importance to accept each update only once for each instance of the key generation protocol, discarding any duplicates or alternative versions of already received and processed messages (updates).\n\n## [](#encryption-of-voice-data)Encryption of voice data\n\nBoth parties _A_ (the Caller) and _B_ (the Callee) transform the voice information into a sequence of small _chunks_ or _packets_, not more than 1 kilobyte each. This information is to be encrypted using the shared key _key_ generated during the initial exchange, and sent to the other party, either directly (P2P) or through Telegram's relay servers (so-called _reflectors_). This document describes only the encryption process for each chunk, leaving out voice encoding and the network-dependent parts.\n\n### [](#encapsulation-of-low-level-voice-data)Encapsulation of low-level voice data\n\nThe low-level data chunk `raw_data:string`, obtained from voice encoder, is first encapsulated into one of the two constructors for the [DecryptedDataBlock](https://core.telegram.org/type/DecryptedDataBlock) type, similar to [DecryptedMessage](https://core.telegram.org/type/DecryptedMessage) used in secret chats:\n\n```\ndecryptedDataBlock#dbf948c1 random_id:long random_bytes:string flags:# voice_call_id:flags.2?int128 in_seq_no:flags.4?int out_seq_no:flags.4?int recent_received_mask:flags.5?int proto:flags.3?int extra:flags.1?string raw_data:flags.0?string = DecryptedDataBlock;\nsimpleDataBlock#cc0d0e76 random_id:long random_bytes:string raw_data:string = DecryptedDataBlock;\n```\n\nHere `out_seq_no` is the chunk's sequence number among all sent by this party (starting from one), `in_seq_no` -- the highest known out\\_seq\\_no from the received packets. The parameter `recent_received_mask` is a 32-bit mask, used to track delivery of the last 32 packets sent by the other party. The bit _i_ is set if a packet with `out_seq_no` equal to `in_seq_no`\\-_i_ has been received.\n\nThe higher 8 bits in `flags` are reserved for use by the lower-level protocol (the one which generates and interprets `raw_data`), and will never be used for future extensions of `decryptedDataBlock`.\n\nThe parameters `voice_call_id` and `proto` are mandatory until the other side confirms reception of at least one packet by sending a packet with a non-zero `in_seq_no`. After that, they become optional, and the `simpleDataBlock` constructor can be used if the lower level protocol wants to.\n\nThe parameter `voice_call_id` is computed from the key `key` and equals the lower 128 bits of its SHA-256.\n\nThe `random_bytes` string should contain at least 7 bytes of random data. The field `random_id` also contains 8 random bytes, which can be used as a unique packet identifier if necessary.\n\n### [](#mtproto-encryption)MTProto encryption\n\nOnce the data is encapsulated in `DecryptedDataBlock`, it is [TL-serialized](https://core.telegram.org/mtproto/TL) and encrypted with [MTProto](https://core.telegram.org/mtproto/description#defining-aes-key-and-initialization-vector), using `key` instead of `auth_key`; the parameter _x_ is to be set to _0_ for messages from _A_ to _B_, and to _8_ for messages in the opposite direction. Encrypted data are prepended by the 128-bit `msg_key` (usual for MTProto); before that, either the 128-bit `voice_call_id` (if P2P is used) or the `peer_tag` (if reflectors are used) is prepended. The resulting data packet is sent by UDP either directly to the other party (if P2P is possible) or to the Telegram relay servers (reflectors).\n\n## [](#key-verification)Key Verification\n\nTo verify the key, both parties concatenate the secret key _key_ with the value _g\\_a_ of the Caller ( _A_ ), compute SHA256 and use it to generate a sequence of emoticons. More precisely, the SHA256 hash is split into four 64-bit integers; each of them is divided by the total number of emoticons used (currently 333), and the remainder is used to select specific emoticons. The specifics of the protocol guarantee that comparing four emoticons out of a set of 333 is sufficient to prevent eavesdropping (MiTM attack on DH) with a probability of **0.9999999999**.\n\nThis is because instead of the standard Diffie-Hellman key exchange which requires only two messages between the parties:\n\n*   A->B : (generates a and) sends g\\_a := g^a\n*   B->A : (generates b and true key (g\\_a)^b, then) sends g\\_b := g^b\n*   A : computes key (g\\_b)^a\n\nwe use a **three-message modification** thereof that works well when both parties are online (which also happens to be a requirement for voice calls):\n\n*   A->B : (generates a and) sends g\\_a\\_hash := hash(g^a)\n*   B->A : (stores g\\_a\\_hash, generates b and) sends g\\_b := g^b\n*   A->B : (computes key (g\\_b)^a, then) sends g\\_a := g^a\n*   B : checks hash(g\\_a) == g\\_a\\_hash, then computes key (g\\_a)^b\n\nThe idea here is that _A_ commits to a specific value of _a_ (and of _g\\_a_) without disclosing it to _B_. _B_ has to choose its value of _b_ and _g\\_b_ without knowing the true value of _g\\_a_, so that it cannot try different values of _b_ to force the final key _(g\\_a)^b_ to have any specific properties (such as fixed lower 32 bits of SHA256(key)). At this point, _B_ commits to a specific value of _g\\_b_ without knowing _g\\_a_. Then _A_ has to send its value _g\\_a_; it cannot change it even though it knows _g\\_b_ now, because the other party _B_ would accept only a value of _g\\_a_ that has a hash specified in the very first message of the exchange.\n\nIf some impostor is pretending to be either _A_ or _B_ and tries to perform a Man-in-the-Middle Attack on this Diffie--Hellman key exchange, the above still holds. Party _A_ will generate a shared key with _B_ -- or whoever pretends to be _B_ -- without having a second chance to change its exponent _a_ depending on the value _g\\_b_ received from the other side; and the impostor will not have a chance to adapt his value of _b_ depending on _g\\_a_, because it has to commit to a value of _g\\_b_ before learning _g\\_a_. The same is valid for the key generation between the impostor and the party _B_.\n\nThe use of hash commitment in the DH exchange constrains the attacker to only **one guess** to generate the correct visualization in their attack, which means that using just over 33 bits of entropy represented by four emoji in the visualization is enough to make a successful attack highly improbable.\n\n> For a slightly more user-friendly explanation of the above see: [How are calls authenticated?](https://core.telegram.org/techfaq#q-how-are-voice-calls-authenticated)",
    "url": "https://core.telegram.org/api/end-to-end%2Fvoice-calls"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/schema/end-to-end",
      "title": "Current end-to-end TL-schema",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Current end-to-end TL-schema"
        },
        {
          "property": "og:description",
          "content": "Below you will find the current end-to-end TL-schema. More details on TL \u00bb\nSee also:\nEnd-to-end encryption in MTProto,\u2026"
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:17:58 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "5901",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Current end-to-end TL-schema\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.",
    "url": "https://core.telegram.org/schema/end-to-end?layer=178"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/bots%2Fids",
      "title": "Bot API dialog IDs",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Bot API dialog IDs"
        },
        {
          "property": "og:description",
          "content": "How to convert MTProto peer IDs to bot API dialog IDs and vice versa."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:17:59 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "2926",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Bot API dialog IDs\n\nThe `id` field of [peers\u00a0\u00bb](https://core.telegram.org/api/peers) (i.e. users, chats, channels, secret chats) contain four distinct sequences of unique 64-bit IDs used to identify a specific user, chat, channel or secret chat.\n\nThe ID sequences of users, chats, channels and secret chats **overlap**, so it is a good idea to transform the peer IDs to bot API dialog IDs as specified below.\n\nA bot API dialog ID is a single, unique 64-bit peer ID sequence derived from the user, chat, channel and secret chat ID sequences, maintaining uniqueness across all of them.  \nBot API dialog IDs are already used in the [bot API](https://core.telegram.org/bots/api) and in the underlying [tdlib](https://github.com/tdlib/td) library to identify peers.\n\nAs specified above, a bot API dialog ID may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But, thanks to the ranges of the underlying MTProto IDs (specified below), it has at most 52 significant bits, so a 64-bit integer or even a double-precision float type are safe for storing this identifier.\n\nMore specifically, a bot API dialog ID ranges from `-2002147483648` to `1099511627775`.\n\nIt's a good idea to transform peer IDs to bot dialog API IDs even if you do decide to use separate databases to [store info about peers](https://core.telegram.org/api/peers), as it will make IDs more visually recognizable both for you and your users, as well as guarantee compatibility with the bot API, and allow your client to easily identify the type of a peer just by using its ID, thanks to the range checks specified below.\n\nExample implementation: [tdlib (bot API)](https://github.com/tdlib/td/blob/cb164927417f22811c74cd8678ed4a5ab7cb80ba/td/telegram/DialogId.cpp), [MadelineProto](https://github.com/danog/tg-dialog-id).\n\n### [](#user-ids)User IDs\n\n[User](https://core.telegram.org/constructor/user) IDs in the MTProto API range from `1` to `0xffffffffff` (inclusive).\n\nMTProto user IDs are equal to bot API user dialog IDs and vice versa, you don't have to do anything to convert them, except validate that they fall within the range specified above.\n\n```\n$botApiUserId = $userId;\n$userId = $botApiUserId;\n```\n\n### [](#chat-ids)Chat IDs\n\n[Chat](https://core.telegram.org/constructor/chat) IDs in the MTProto API range from `1` to `999999999999` (inclusive).\n\nTo convert MTProto chat IDs to bot API chat dialog IDs, make them negative (and vice versa).\n\nBefore conversion, always validate that they fall within the range specified above (appropriately transformed for bot API chat dialog IDs, i.e. `-999999999999` to `-1` inclusively).\n\n```\n$botApiChatId = -$chatId;\n$chatId = -$botApiChatId;\n```\n\n### [](#supergroup-channel-ids)Supergroup/channel IDs\n\n[Supergroup/channel](https://core.telegram.org/constructor/channel) IDs share the same sequence in the MTProto API, and they range from `1` to `997852516352` (inclusive).\n\nTo convert MTProto channel IDs to bot API channel dialog IDs, add `1000000000000` and make them negative (and vice versa).\n\nBefore conversion, always validate that they fall within the range specified above (appropriately transformed for bot API channel dialog IDs, i.e. `-1997852516352` to `-1000000000001` inclusively).\n\n```\n$botApiChannelId = -(1000000000000 + $channelId);\n$channelId = -$botApiChannelId - 1000000000000;\n```\n\n### [](#secret-chat-ids)Secret chat IDs\n\n[Secret chat IDs](https://core.telegram.org/api/end-to-end) in the MTProto API range from `-2147483648` to `2147483647` (inclusive, treat the secret chat ID as a signed little-endian 32-bit integer).\n\nTo convert MTProto chat IDs to bot API chat secret chat IDs, subtract `2000000000000`.\n\nBefore conversion, always validate that they fall within the range specified above (appropriately transformed for bot API secret chat dialog IDs, i.e. `-2002147483648` to `-1997852516353` inclusively).\n\n```\n$botApiSecretChatId = $secretChatId - 2000000000000;\n$secretChatId = $botApiSecretChatId + 2000000000000;\n```\n\nNote: while the official instance of the bot API does not support secret chats, the underlying [tdlib](https://github.com/tdlib/td/) library does support them, and uses the format mentioned above for secret chat IDs.",
    "url": "https://core.telegram.org/api/bots%2Fids"
  },
  {
    "metadata": {
      "canonicalUrl": "https://core.telegram.org/api/bots%2Finfo",
      "title": "Edit bot information",
      "description": null,
      "author": null,
      "keywords": null,
      "languageCode": null,
      "openGraph": [
        {
          "property": "og:title",
          "content": "Edit bot information"
        },
        {
          "property": "og:description",
          "content": "Users can edit and localize the profile picture, name, about text and description of bots they own; the same can be done by the bots themselves."
        }
      ],
      "jsonLd": null,
      "headers": {
        "server": "nginx/1.18.0",
        "date": "Fri, 16 May 2025 02:17:59 GMT",
        "content-type": "text/html; charset=utf-8",
        "content-length": "2644",
        "pragma": "no-cache",
        "cache-control": "no-store",
        "x-frame-options": "SAMEORIGIN",
        "content-encoding": "gzip",
        "strict-transport-security": "max-age=35768000",
        "x-firefox-spdy": "h2"
      }
    },
    "markdown": "# Edit bot information\n\nUsers can edit and localize the profile picture, name, about text and description of [bots](https://core.telegram.org/api/bots) they own; the same can be done by the bots themselves.\n\n```\nuser#83314fca flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true apply_min_photo:flags.25?true fake:flags.26?true bot_attach_menu:flags.27?true premium:flags.28?true attach_menu_enabled:flags.29?true flags2:# bot_can_edit:flags2.1?true close_friend:flags2.2?true stories_hidden:flags2.3?true stories_unavailable:flags2.4?true contact_require_premium:flags2.10?true bot_business:flags2.11?true bot_has_main_app:flags2.13?true id:long access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string emoji_status:flags.30?EmojiStatus usernames:flags2.0?Vector<Username> stories_max_id:flags2.5?int color:flags2.8?PeerColor profile_color:flags2.9?PeerColor bot_active_users:flags2.12?int = User;\n\nbots.botInfo#e8a775b0 name:string about:string description:string = bots.BotInfo;\n\n---functions---\n\nbots.getBotInfo#dcd914fd flags:# bot:flags.0?InputUser lang_code:string = bots.BotInfo;\nbots.setBotInfo#10cf3123 flags:# bot:flags.2?InputUser lang_code:string name:flags.3?string about:flags.0?string description:flags.1?string = Bool;\n\nphotos.uploadProfilePhoto#388a3b5 flags:# fallback:flags.3?true bot:flags.5?InputUser file:flags.0?InputFile video:flags.1?InputFile video_start_ts:flags.2?double video_emoji_markup:flags.4?VideoSize = photos.Photo;    \n```\n\nBots may invoke [bots.setBotInfo](https://core.telegram.org/method/bots.setBotInfo) set a localized version of their name, about text and description; [bots.getBotInfo](https://core.telegram.org/method/bots.getBotInfo) may be used to obtain previously set values.  \nBots may also invoke [photos.uploadProfilePhoto](https://core.telegram.org/method/photos.uploadProfilePhoto) as specified in the [files documentation\u00a0\u00bb](https://core.telegram.org/api/files#uploading-profile-or-chat-pictures) to set profile photos, videos or stickers.\n\nThe same methods may be invoked by the user that owns the bot (bots owned by the current user have the [user](https://core.telegram.org/constructor/user).`bot_can_edit` flag set) to modify the bot's information: to do so, specify the bot's peer information in the `bot` parameter.",
    "url": "https://core.telegram.org/api/bots%2Finfo"
  },
  {
    "metadata": {
      "mimeType": "application/octet-stream",
      "author": null,
      "canonicalUrl": "http://www.knf.gov.pl/Images/Bezp_finansowe_tcm75-39005.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": null,
      "fileSizeBytes": 382681
    },
    "markdown": null,
    "url": "http://www.knf.gov.pl/Images/Bezp_finansowe_tcm75-39005.pdf"
  },
  {
    "metadata": {
      "mimeType": "application/pdf",
      "author": null,
      "canonicalUrl": "http://www.grupazpr.pl/licencje.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "licencje.pdf",
      "fileSizeBytes": 90633
    },
    "markdown": null,
    "url": "http://www.grupazpr.pl/licencje.pdf"
  },
  {
    "metadata": {
      "mimeType": "application/pdf",
      "author": null,
      "canonicalUrl": "http://www.grupazpr.pl/regulamin-serwisy.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "regulamin-serwisy.pdf",
      "fileSizeBytes": 273722
    },
    "markdown": null,
    "url": "http://www.grupazpr.pl/regulamin-serwisy.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html; charset=UTF-8",
      "author": null,
      "canonicalUrl": "https://eiti.org/sites/default/files/documents/2011_chad_eiti_report_fr.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "2011_chad_eiti_report_fr.pdf",
      "fileSizeBytes": 49215
    },
    "markdown": null,
    "url": "https://eiti.org/sites/default/files/documents/2011_chad_eiti_report_fr.pdf"
  },
  {
    "metadata": {
      "mimeType": "application/pdf",
      "author": null,
      "canonicalUrl": "http://carnegieendowment.org/files/Agenda_Skolkovo%202017%20Rus.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "Agenda_Skolkovo%202017%20Rus.pdf",
      "fileSizeBytes": 260345
    },
    "markdown": null,
    "url": "http://carnegieendowment.org/files/Agenda_Skolkovo%202017%20Rus.pdf"
  },
  {
    "metadata": {
      "mimeType": "application/xml",
      "author": null,
      "canonicalUrl": "http://s3.amazonaws.com/ceipcmc/Agenda+Skolkovo+2017+Rus.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "Agenda+Skolkovo+2017+Rus.pdf",
      "fileSizeBytes": 317
    },
    "markdown": null,
    "url": "http://s3.amazonaws.com/ceipcmc/Agenda+Skolkovo+2017+Rus.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html; charset=UTF-8",
      "author": null,
      "canonicalUrl": "http://foma.ru/wp-content/themes/foma/oferta-p.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "oferta-p.pdf",
      "fileSizeBytes": 75758
    },
    "markdown": null,
    "url": "http://foma.ru/wp-content/themes/foma/oferta-p.pdf"
  },
  {
    "metadata": {
      "mimeType": "application/pdf",
      "author": null,
      "canonicalUrl": "http://www.money.pl/d/my_money/MyMoney_regulamin.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "MyMoney_regulamin.pdf",
      "fileSizeBytes": 146687
    },
    "markdown": null,
    "url": "http://www.money.pl/d/my_money/MyMoney_regulamin.pdf"
  },
  {
    "metadata": {
      "mimeType": "application/pdf",
      "author": null,
      "canonicalUrl": "http://www.liberation.fr/apps/2016/08/le-ptit-libe-ete/assets/LIBE_Paris-1_SP1_20160716_8.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "LIBE_Paris-1_SP1_20160716_8.pdf",
      "fileSizeBytes": 4485566
    },
    "markdown": null,
    "url": "http://www.liberation.fr/apps/2016/08/le-ptit-libe-ete/assets/LIBE_Paris-1_SP1_20160716_8.pdf"
  },
  {
    "metadata": {
      "mimeType": "application/pdf",
      "author": null,
      "canonicalUrl": "http://ims.persgroep.nl/images/Pdf_Trinicom/Abonnementsvoorwaarden_Brabants_Dagblad_1-1-2017.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "Abonnementsvoorwaarden_Brabants_Dagblad_1-1-2017.pdf",
      "fileSizeBytes": 82107
    },
    "markdown": null,
    "url": "http://ims.persgroep.nl/images/Pdf_Trinicom/Abonnementsvoorwaarden_Brabants_Dagblad_1-1-2017.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html; charset=utf-8",
      "author": null,
      "canonicalUrl": "http://kad.arbitr.ru/PdfDocument/f4235502-1331-4d8f-9b66-80dac6fe447c/%D0%9056-72312-2014__20151023.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "%D0%9056-72312-2014__20151023.pdf?isAddStamp=True",
      "fileSizeBytes": 1551
    },
    "markdown": null,
    "url": "http://kad.arbitr.ru/PdfDocument/f4235502-1331-4d8f-9b66-80dac6fe447c/%D0%9056-72312-2014__20151023.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html; charset=utf-8",
      "author": null,
      "canonicalUrl": "https://kad.arbitr.ru/PdfDocument/0e035c47-711e-4f46-aa2d-2fa8fa236a18/A28-4330-2016_20170109_Reshenie.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "A28-4330-2016_20170109_Reshenie.pdf?isAddStamp=True",
      "fileSizeBytes": 1551
    },
    "markdown": null,
    "url": "https://kad.arbitr.ru/PdfDocument/0e035c47-711e-4f46-aa2d-2fa8fa236a18/A28-4330-2016_20170109_Reshenie.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html; charset=utf-8",
      "author": null,
      "canonicalUrl": "http://kad.arbitr.ru/PdfDocument/6a05a21b-12f1-4a05-9991-c0821d63de05/%D0%9003-20498-2015__20160331.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "%D0%9003-20498-2015__20160331.pdf?isAddStamp=True",
      "fileSizeBytes": 1551
    },
    "markdown": null,
    "url": "http://kad.arbitr.ru/PdfDocument/6a05a21b-12f1-4a05-9991-c0821d63de05/%D0%9003-20498-2015__20160331.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html; charset=utf-8",
      "author": null,
      "canonicalUrl": "http://clasificados.ultimasnoticias.com.ve/recursos/ManualFotografiasArticulos.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "",
      "fileSizeBytes": 1585608
    },
    "markdown": null,
    "url": "http://clasificados.ultimasnoticias.com.ve/recursos/ManualFotografiasArticulos.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html; charset=UTF-8",
      "author": null,
      "canonicalUrl": "http://www.namibian.com.na/public/uploads/documents/5922bc565ea0f/code%20of%20ethics%20online.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "code%20of%20ethics%20online.pdf",
      "fileSizeBytes": 123395
    },
    "markdown": null,
    "url": "http://www.namibian.com.na/public/uploads/documents/5922bc565ea0f/code%20of%20ethics%20online.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html; charset=utf-8",
      "author": null,
      "canonicalUrl": "https://www.ferra.ru/ru/system/s20793/ftp://download.intel.com/design/Pentium4/datashts/24988703.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "",
      "fileSizeBytes": 167748
    },
    "markdown": null,
    "url": "https://www.ferra.ru/ru/system/s20793/ftp://download.intel.com/design/Pentium4/datashts/24988703.pdf"
  },
  {
    "metadata": {
      "mimeType": "application/pdf",
      "author": null,
      "canonicalUrl": "http://isole.ecn.org/ponte/mediateca/unico.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "unico.pdf",
      "fileSizeBytes": 1123621
    },
    "markdown": null,
    "url": "http://isole.ecn.org/ponte/mediateca/unico.pdf"
  },
  {
    "metadata": {
      "mimeType": "application/pdf",
      "author": null,
      "canonicalUrl": "http://www.sberbank.ru/common/img/uploaded/files/pdf/person/necessary/07pril11.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "07pril11.pdf",
      "fileSizeBytes": 220459
    },
    "markdown": null,
    "url": "http://www.sberbank.ru/common/img/uploaded/files/pdf/person/necessary/07pril11.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html",
      "author": null,
      "canonicalUrl": "http://www.spacex.com/news/2005/FutronDesignReliability.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "FutronDesignReliability.pdf",
      "fileSizeBytes": 239
    },
    "markdown": null,
    "url": "http://www.spacex.com/news/2005/FutronDesignReliability.pdf"
  },
  {
    "metadata": {
      "mimeType": "application/pdf",
      "author": null,
      "canonicalUrl": "http://arxiv.org/pdf/1311.0534.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "1311.0534v1.pdf",
      "fileSizeBytes": 534605
    },
    "markdown": null,
    "url": "http://arxiv.org/pdf/1311.0534.pdf"
  },
  {
    "metadata": {
      "mimeType": "application/pdf",
      "author": null,
      "canonicalUrl": "http://www.egnos-pro.esa.int/Publications/ESA_EGNOS_br284_2009.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "ESA_EGNOS_br284_2009.pdf",
      "fileSizeBytes": 1786060
    },
    "markdown": null,
    "url": "http://www.egnos-pro.esa.int/Publications/ESA_EGNOS_br284_2009.pdf"
  },
  {
    "metadata": {
      "mimeType": "application/pdf",
      "author": null,
      "canonicalUrl": "http://content.auto1.com/auto1-group/2015-07-07_auto1-group-press-release1.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "2015-07-07_auto1-group-press-release1.pdf",
      "fileSizeBytes": 86648
    },
    "markdown": null,
    "url": "http://content.auto1.com/auto1-group/2015-07-07_auto1-group-press-release1.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html",
      "author": null,
      "canonicalUrl": "https://gnosis.pm/resources/default/pdf/gnosis_whitepaper.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "gnosis_whitepaper.pdf",
      "fileSizeBytes": 380122
    },
    "markdown": null,
    "url": "https://gnosis.pm/resources/default/pdf/gnosis_whitepaper.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html; charset=UTF-8",
      "author": null,
      "canonicalUrl": "http://reutersinstitute.politics.ox.ac.uk/sites/default/files/VR%20for%20news%20-%20the%20new%20reality.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "VR%20for%20news%20-%20the%20new%20reality.pdf",
      "fileSizeBytes": 121221
    },
    "markdown": null,
    "url": "http://reutersinstitute.politics.ox.ac.uk/sites/default/files/VR%20for%20news%20-%20the%20new%20reality.pdf"
  },
  {
    "metadata": {
      "mimeType": "application/pdf",
      "author": null,
      "canonicalUrl": "https://stallman.org/ebooks.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "ebooks.pdf",
      "fileSizeBytes": 75596
    },
    "markdown": null,
    "url": "https://stallman.org/ebooks.pdf"
  },
  {
    "metadata": {
      "mimeType": "application/pdf",
      "author": null,
      "canonicalUrl": "http://www.inacol.org/wp-content/uploads/2015/09/iNACOL_UsingOnlineLearningForCreditRecovery.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "iNACOL_UsingOnlineLearningForCreditRecovery.pdf",
      "fileSizeBytes": 914357
    },
    "markdown": null,
    "url": "http://www.inacol.org/wp-content/uploads/2015/09/iNACOL_UsingOnlineLearningForCreditRecovery.pdf"
  },
  {
    "metadata": {
      "mimeType": "application/pdf",
      "author": null,
      "canonicalUrl": "https://nces.ed.gov/pubs2011/2011037.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "2011037.pdf",
      "fileSizeBytes": 1000582
    },
    "markdown": null,
    "url": "https://nces.ed.gov/pubs2011/2011037.pdf"
  },
  {
    "metadata": {
      "mimeType": "application/pdf",
      "author": null,
      "canonicalUrl": "http://origin-states.politico.com.s3-website-us-east-1.amazonaws.com/files/Embargoed%20Hardest%20Working%20Cities%20Study.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "Embargoed%20Hardest%20Working%20Cities%20Study.pdf",
      "fileSizeBytes": 1078301
    },
    "markdown": null,
    "url": "http://origin-states.politico.com.s3-website-us-east-1.amazonaws.com/files/Embargoed%20Hardest%20Working%20Cities%20Study.pdf"
  },
  {
    "metadata": {
      "mimeType": "application/pdf",
      "author": null,
      "canonicalUrl": "http://transitcenter.org/wp-content/uploads/2016/07/Whos-On-Board-2016-7_12_2016.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "Whos-On-Board-2016-7_12_2016.pdf",
      "fileSizeBytes": 3197706
    },
    "markdown": null,
    "url": "http://transitcenter.org/wp-content/uploads/2016/07/Whos-On-Board-2016-7_12_2016.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html; charset=UTF-8",
      "author": null,
      "canonicalUrl": "https://scholar.princeton.edu/sites/default/files/mgilens/files/gilens_and_page_2014_-testing_theories_of_american_politics.doc.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "",
      "fileSizeBytes": 61647
    },
    "markdown": null,
    "url": "https://scholar.princeton.edu/sites/default/files/mgilens/files/gilens_and_page_2014_-testing_theories_of_american_politics.doc.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html;charset=utf-8",
      "author": null,
      "canonicalUrl": "http://file.vanguardia.com.mx/sites/default/files/01_01_a_p_lun-sab_c_12-061_c.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "01_01_a_p_lun-sab_c_12-061_c.pdf",
      "fileSizeBytes": 13404
    },
    "markdown": null,
    "url": "http://file.vanguardia.com.mx/sites/default/files/01_01_a_p_lun-sab_c_12-061_c.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html;charset=utf-8",
      "author": null,
      "canonicalUrl": "http://file.vanguardia.com.mx/sites/default/files/politica-empresarial-vanguardia.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "politica-empresarial-vanguardia.pdf",
      "fileSizeBytes": 13439
    },
    "markdown": null,
    "url": "http://file.vanguardia.com.mx/sites/default/files/politica-empresarial-vanguardia.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html;charset=utf-8",
      "author": null,
      "canonicalUrl": "http://file.vanguardia.com.mx/sites/default/files/mision_vision_y_valores_vanguardia.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "mision_vision_y_valores_vanguardia.pdf",
      "fileSizeBytes": 13439
    },
    "markdown": null,
    "url": "http://file.vanguardia.com.mx/sites/default/files/mision_vision_y_valores_vanguardia.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html;charset=utf-8",
      "author": null,
      "canonicalUrl": "http://file.vanguardia.com.mx/sites/default/files/01_01_a_p_lun-sab_c_17-061_c.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "01_01_a_p_lun-sab_c_17-061_c.pdf",
      "fileSizeBytes": 40920
    },
    "markdown": null,
    "url": "http://file.vanguardia.com.mx/sites/default/files/01_01_a_p_lun-sab_c_17-061_c.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html;charset=utf-8",
      "author": null,
      "canonicalUrl": "http://file.vanguardia.com.mx/sites/default/files/01_01_a_p_lun-sab_c_10-061_c_0.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "01_01_a_p_lun-sab_c_10-061_c_0.pdf",
      "fileSizeBytes": 13404
    },
    "markdown": null,
    "url": "http://file.vanguardia.com.mx/sites/default/files/01_01_a_p_lun-sab_c_10-061_c_0.pdf"
  },
  {
    "metadata": {
      "mimeType": "application/pdf",
      "author": null,
      "canonicalUrl": "http://www.boj.or.jp/en/statistics/bis/deri/data/deri1604.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "deri1604.pdf",
      "fileSizeBytes": 122917
    },
    "markdown": null,
    "url": "http://www.boj.or.jp/en/statistics/bis/deri/data/deri1604.pdf"
  },
  {
    "metadata": {
      "mimeType": "application/pdf",
      "author": null,
      "canonicalUrl": "http://images.mathrubhumi.com/pdf/2017/tariffApr2017.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "tariffApr2017.pdf",
      "fileSizeBytes": 3538177
    },
    "markdown": null,
    "url": "http://images.mathrubhumi.com/pdf/2017/tariffApr2017.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html; charset=UTF-8",
      "author": null,
      "canonicalUrl": "https://www.blitz.bg/sport/pdf/Copyright.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "Copyright.pdf",
      "fileSizeBytes": 59383
    },
    "markdown": null,
    "url": "https://www.blitz.bg/sport/pdf/Copyright.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html; charset=UTF-8",
      "author": null,
      "canonicalUrl": "https://www.blitz.bg/Cookies.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "Cookies.pdf",
      "fileSizeBytes": 6615
    },
    "markdown": null,
    "url": "https://www.blitz.bg/Cookies.pdf"
  },
  {
    "metadata": {
      "mimeType": "application/pdf",
      "author": null,
      "canonicalUrl": "http://www.mpublicite.fr/pdf/HuffingtonPost_MPublicite.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "HuffingtonPost_MPublicite.pdf",
      "fileSizeBytes": 192773
    },
    "markdown": null,
    "url": "http://www.mpublicite.fr/pdf/HuffingtonPost_MPublicite.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html",
      "author": null,
      "canonicalUrl": "https://tmw-static.tccstatic.com/template/tuttomercatoweb.com/default/img/tmw_marchio_registrato.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "tmw_marchio_registrato.pdf",
      "fileSizeBytes": 548
    },
    "markdown": null,
    "url": "https://tmw-static.tccstatic.com/template/tuttomercatoweb.com/default/img/tmw_marchio_registrato.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html; charset=UTF-8",
      "author": null,
      "canonicalUrl": "http://www3.epa.gov/otaq/cert/documents/vw-nov-caa-09-18-15.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "transportation-air-pollution-and-climate-change",
      "fileSizeBytes": 61840
    },
    "markdown": null,
    "url": "http://www3.epa.gov/otaq/cert/documents/vw-nov-caa-09-18-15.pdf"
  },
  {
    "metadata": {
      "mimeType": "application/pdf",
      "author": null,
      "canonicalUrl": "https://www.gov.uk/government/uploads/system/uploads/attachment_data/file/491119/re-offending-release-waves-1-3-spcr-findings.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "re-offending-release-waves-1-3-spcr-findings.pdf",
      "fileSizeBytes": 319316
    },
    "markdown": null,
    "url": "https://www.gov.uk/government/uploads/system/uploads/attachment_data/file/491119/re-offending-release-waves-1-3-spcr-findings.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html",
      "author": null,
      "canonicalUrl": "http://www.prisonreformtrust.org.uk/Portals/0/Documents/Women/Employmentbriefing.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "Employmentbriefing.pdf",
      "fileSizeBytes": 146
    },
    "markdown": null,
    "url": "http://www.prisonreformtrust.org.uk/Portals/0/Documents/Women/Employmentbriefing.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html",
      "author": null,
      "canonicalUrl": "http://www.prisonreformtrust.org.uk/Portals/0/Documents/Bromley%20Briefings/summer%202016%20briefing.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "summer%202016%20briefing.pdf",
      "fileSizeBytes": 548
    },
    "markdown": null,
    "url": "http://www.prisonreformtrust.org.uk/Portals/0/Documents/Bromley%20Briefings/summer%202016%20briefing.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html; charset=UTF-8",
      "author": null,
      "canonicalUrl": "http://www.fundeu.es/wp-content/uploads/2015/03/glosarioModaFundeu.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "glosarioModaFundeu.pdf",
      "fileSizeBytes": 81893
    },
    "markdown": null,
    "url": "http://www.fundeu.es/wp-content/uploads/2015/03/glosarioModaFundeu.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html; charset=UTF-8",
      "author": null,
      "canonicalUrl": "http://www.techtimes.com/mediakit.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "mediakit.pdf",
      "fileSizeBytes": 240102
    },
    "markdown": null,
    "url": "http://www.techtimes.com/mediakit.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html; charset=UTF-8",
      "author": null,
      "canonicalUrl": "http://www.techtimes.com/brandspin.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "brandspin.pdf",
      "fileSizeBytes": 240102
    },
    "markdown": null,
    "url": "http://www.techtimes.com/brandspin.pdf"
  },
  {
    "metadata": {
      "mimeType": "application/pdf",
      "author": null,
      "canonicalUrl": "https://moslenta.ru/files/cards/2878_fall.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "2878_fall.pdf",
      "fileSizeBytes": 48852
    },
    "markdown": null,
    "url": "https://moslenta.ru/files/cards/2878_fall.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html",
      "author": null,
      "canonicalUrl": "http://www.fz-juelich.de/SharedDocs/Downloads/ICS/ICS-5/EN/bueldt_cv.pdf?__blob=publicationFile",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "bueldt_cv.pdf?__blob=publicationFile",
      "fileSizeBytes": 52
    },
    "markdown": null,
    "url": "http://www.fz-juelich.de/SharedDocs/Downloads/ICS/ICS-5/EN/bueldt_cv.pdf?__blob=publicationFile"
  },
  {
    "metadata": {
      "mimeType": "text/html",
      "author": null,
      "canonicalUrl": "https://jphh.de/wp-content/uploads/2008/01/2016-02-07-jphh-Satzung.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "2016-02-07-jphh-Satzung.pdf",
      "fileSizeBytes": 808
    },
    "markdown": null,
    "url": "https://jphh.de/wp-content/uploads/2008/01/2016-02-07-jphh-Satzung.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html",
      "author": null,
      "canonicalUrl": "https://jphh.de/wp-content/uploads/2015/02/150209-FK-Formular_web.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "150209-FK-Formular_web.pdf",
      "fileSizeBytes": 808
    },
    "markdown": null,
    "url": "https://jphh.de/wp-content/uploads/2015/02/150209-FK-Formular_web.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html",
      "author": null,
      "canonicalUrl": "https://jphh.de/wp-content/uploads/2015/03/150323-AE-Formular-web.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "150323-AE-Formular-web.pdf",
      "fileSizeBytes": 808
    },
    "markdown": null,
    "url": "https://jphh.de/wp-content/uploads/2015/03/150323-AE-Formular-web.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html; charset=utf-8",
      "author": null,
      "canonicalUrl": "http://www.2001.com.ve/empresa_2001/tarifa2001.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "usa",
      "fileSizeBytes": 509105
    },
    "markdown": null,
    "url": "http://www.2001.com.ve/empresa_2001/tarifa2001.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html; charset=utf-8",
      "author": null,
      "canonicalUrl": "http://www.2001.com.ve/empresa_2001/tarifas_web2001.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "usa",
      "fileSizeBytes": 509105
    },
    "markdown": null,
    "url": "http://www.2001.com.ve/empresa_2001/tarifas_web2001.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html; charset=utf-8",
      "author": null,
      "canonicalUrl": "http://www.2001.com.ve/logica/portada/portada.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "usa",
      "fileSizeBytes": 509105
    },
    "markdown": null,
    "url": "http://www.2001.com.ve/logica/portada/portada.pdf"
  },
  {
    "metadata": {
      "mimeType": "text/html; charset=UTF-8",
      "author": null,
      "canonicalUrl": "http://www.state.gov/documents/organization/212239.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "",
      "fileSizeBytes": 139260
    },
    "markdown": null,
    "url": "http://www.state.gov/documents/organization/212239.pdf"
  },
  {
    "metadata": {
      "mimeType": "application/pdf",
      "author": null,
      "canonicalUrl": "http://www.viohalco.com/Files/Documents/Document328.File1.Original.pdf",
      "description": null,
      "keywords": null,
      "languageCode": null,
      "title": "Document328.File1.Original.pdf",
      "fileSizeBytes": 363458
    },
    "markdown": null,
    "url": "http://www.viohalco.com/Files/Documents/Document328.File1.Original.pdf"
  }
]